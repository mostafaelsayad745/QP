import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import os
import json
from datetime import datetime

# Premium Arabic Text Rendering
try:
    import arabic_reshaper
    from bidi.algorithm import get_display
    ARABIC_ENHANCEMENT_AVAILABLE = True
except ImportError:
    ARABIC_ENHANCEMENT_AVAILABLE = False
    print("Arabic enhancement libraries not available. Install with: pip install arabic-reshaper python-bidi")

# Import the new components
from database_manager import DatabaseManager
from file_upload_manager import FileUploadManager
from login_system import LoginSystem

# ===== PREMIUM ARABIC TEXT RENDERING =====
class ArabicTextRenderer:
    """Premium Arabic text rendering class for enhanced display"""
    
    @staticmethod
    def reshape_arabic_text(text):
        """Reshape Arabic text for proper display with RTL support"""
        if not ARABIC_ENHANCEMENT_AVAILABLE or not text:
            return text
            
        try:
            # Reshape Arabic characters for proper connection
            reshaped_text = arabic_reshaper.reshape(text)
            # Apply bidirectional algorithm for RTL display
            bidi_text = get_display(reshaped_text)
            return bidi_text
        except Exception as e:
            print(f"Error reshaping Arabic text: {e}")
            return text
    
    @staticmethod
    def get_premium_arabic_font():
        """Get the best available Arabic font for premium display"""
        return "Tahoma"  # Excellent Arabic rendering
    
    @staticmethod
    def get_premium_colors():
        """Get premium color scheme for Arabic applications"""
        return {
            'primary': '#1a237e',         # Deep indigo
            'secondary': '#283593',       # Rich blue  
            'accent': '#e91e63',          # Elegant pink/red
            'success': '#2e7d32',         # Professional green
            'text_light': '#ffffff',      # White text
            'text_dark': '#212121',       # Dark text
            'background': '#0d1421',      # Very dark blue
            'surface': '#1a237e',         # Card/surface color
            'hover': '#e91e63',           # Hover state
            'border': '#424242'           # Border color
        }

# ===== APPLICATION BRANDING CONFIGURATION =====
# Change these values to customize the application for different buyers
APP_NAME = "QB Academy"
APP_TITLE_ARABIC = "نظام إدارة الجودة والاعتماد"
APP_VERSION = "v1.0"
APP_FULL_TITLE = f"نظام إدارة {APP_NAME} - ISO/IEC 17024:2012"
APP_DESCRIPTION = f"{APP_NAME} - نظام إدارة الجودة"
APP_COPYRIGHT = f"نظام {APP_NAME} لإدارة الجودة والاعتماد"

# Try to import PIL, if not available, continue without it
try:
    from PIL import Image, ImageTk
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False

# Try to import reportlab for PDF generation
try:
    from reportlab.lib.pagesizes import A4, letter
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    PDF_AVAILABLE = True
except ImportError:
    PDF_AVAILABLE = False

class QBApp:
    def __init__(self, root):
        self.root = root
        self.root.title(APP_FULL_TITLE)
        
        # Get screen dimensions for responsive sizing
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # Calculate optimal window size (85% of screen, with minimum and maximum limits)
        min_width, min_height = 1000, 700
        max_width, max_height = 1600, 1200
        
        width = max(min_width, min(max_width, int(screen_width * 0.85)))
        height = max(min_height, min(max_height, int(screen_height * 0.85)))
        
        # Center the window on screen
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        
        self.root.geometry(f"{width}x{height}+{x}+{y}")
        
        # Make window resizable and responsive
        self.root.minsize(min_width, min_height)
        self.root.maxsize(max_width, max_height)
        
        # Initialize Arabic renderer and premium styling
        self.arabic_renderer = ArabicTextRenderer()
        self.premium_colors = self.arabic_renderer.get_premium_colors()
        self.premium_font = self.arabic_renderer.get_premium_arabic_font()
        
        # Apply premium background
        self.root.configure(bg=self.premium_colors['background'])
        
        # Premium fonts
        self.fonts = {
            'title': (self.premium_font, 18, 'bold'),
            'subtitle': (self.premium_font, 16, 'bold'),
            'heading': (self.premium_font, 14, 'bold'),
            'body': (self.premium_font, 12),
            'small': (self.premium_font, 10),
            'button': (self.premium_font, 12, 'bold')
        }
        
        # Load Arabic font (keeping compatibility)
        self.arabic_font = (self.premium_font, 12)
        self.arabic_font_bold = ("Arial", 12, "bold")
        
        # Helper method to replace QB Academy references with configurable app name
        self.replace_app_name = lambda text: text.replace("QB Academy", APP_NAME) if isinstance(text, str) else text
        self.arabic_font_large = (self.premium_font, 14, "bold")
        
        # Initialize database and components
        self.db_manager = DatabaseManager()
        
        # Ensure forms table is created before proceeding
        self.db_manager.create_forms_table()
        
        self.file_upload_manager = None  # Will be initialized after login
        self.login_system = LoginSystem(self.db_manager, self.on_login_success)
        self.current_user = None
        
        # Start with login
        self.root.withdraw()  # Hide main window initially
        self.login_system.show_login_window()
    
    def format_arabic_text(self, text):
        """Format Arabic text with premium rendering"""
        formatted_text = self.replace_app_name(text)
        return self.arabic_renderer.reshape_arabic_text(formatted_text)
    
    def apply_premium_style(self, widget, text, style_type='body'):
        """Apply premium Arabic styling to a widget"""
        formatted_text = self.format_arabic_text(text)
        font = self.fonts.get(style_type, self.fonts['body'])
        
        try:
            widget.configure(
                text=formatted_text,
                font=font,
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']
            )
        except Exception as e:
            print(f"Error applying premium style: {e}")
            # Fallback to basic configuration
            widget.configure(text=formatted_text, font=font)
            
    def on_login_success(self, user):
        """Called when user successfully logs in"""
        self.current_user = user
        
        # Initialize file upload manager now that we have a user
        self.file_upload_manager = FileUploadManager(self.root, self.db_manager, self.current_user)
        
        # Initialize saved forms manager
        self.saved_forms_manager = SavedFormsManager(
            self.root, 
            self.db_manager, 
            self.current_user, 
            self.arabic_renderer, 
            self.premium_colors, 
            self.fonts
        )
        
        self.root.deiconify()  # Show main window
        self.setup_ui()
        self.load_data()
        
    def setup_ui(self):
        # Premium Header with gradient effect
        header_frame = tk.Frame(self.root, bg=self.premium_colors['primary'], height=100)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        header_frame.pack_propagate(False)
        
        # Add accent border
        accent_border = tk.Frame(header_frame, bg=self.premium_colors['accent'], height=3)
        accent_border.pack(side=tk.BOTTOM, fill=tk.X)
        
        # شعار الأكاديمية
        if PIL_AVAILABLE:
            try:
                logo_img = Image.open("logo.png").resize((80, 80))
                self.logo = ImageTk.PhotoImage(logo_img)
                logo_label = tk.Label(header_frame, image=self.logo, bg=self.premium_colors['primary'])
                logo_label.pack(side=tk.RIGHT, padx=20, pady=10)
            except:
                # إذا لم يوجد ملف الشعار
                pass
        
        # Premium title with Arabic enhancement
        title_text = APP_DESCRIPTION
        formatted_title = self.format_arabic_text(title_text)
        
        title_label = tk.Label(header_frame, 
                              text=formatted_title, 
                              font=self.fonts['title'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['primary'])
        title_label.pack(pady=25)
        
        # Premium Main Content with optimized padding
        main_frame = tk.Frame(self.root, bg=self.premium_colors['background'])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=5)
        
        # Premium Sidebar with responsive width (15% of window width, min 250px, max 320px)
        sidebar_width = max(250, min(320, int(width * 0.15)))
        sidebar_container = tk.Frame(main_frame, bg=self.premium_colors['surface'], width=sidebar_width)
        sidebar_container.pack(side=tk.RIGHT, fill=tk.Y, padx=(10, 0))
        sidebar_container.pack_propagate(False)  # Maintain calculated width
        
        # Create premium canvas and scrollbar for sidebar with responsive width
        canvas_width = sidebar_width - 20  # Account for scrollbar and padding
        sidebar_canvas = tk.Canvas(sidebar_container, bg=self.premium_colors['surface'], 
                                 highlightthickness=0, width=canvas_width)
        sidebar_scrollbar = tk.Scrollbar(sidebar_container, orient="vertical", command=sidebar_canvas.yview,
                                       bg=self.premium_colors['secondary'], 
                                       troughcolor=self.premium_colors['surface'], 
                                       activebackground=self.premium_colors['accent'])
        sidebar_frame = tk.Frame(sidebar_canvas, bg=self.premium_colors['surface'])
        
        # Configure scrolling
        sidebar_frame.bind(
            "<Configure>",
            lambda e: sidebar_canvas.configure(scrollregion=sidebar_canvas.bbox("all"))
        )
        
        sidebar_canvas.create_window((0, 0), window=sidebar_frame, anchor="nw")
        sidebar_canvas.configure(yscrollcommand=sidebar_scrollbar.set)
        
        # Pack canvas and scrollbar
        sidebar_canvas.pack(side="left", fill="both", expand=True)
        sidebar_scrollbar.pack(side="right", fill="y")
        
        # Bind mouse wheel to canvas for smooth scrolling
        def _on_mousewheel(event):
            sidebar_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
            sidebar_container.after(50, update_scroll_indicators)  # Update indicators after scroll
        
        def _bind_to_mousewheel(event):
            sidebar_canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            sidebar_canvas.unbind_all("<MouseWheel>")
        
        sidebar_canvas.bind('<Enter>', _bind_to_mousewheel)
        sidebar_canvas.bind('<Leave>', _unbind_from_mousewheel)
        
        # Add scroll indicators
        scroll_top_indicator = tk.Label(sidebar_container, text="▲ مزيد من المحتوى أعلاه", 
                                      font=("Arial", 8), fg="#FFD700", bg="#3C1361")
        scroll_bottom_indicator = tk.Label(sidebar_container, text="▼ مزيد من المحتوى أسفله", 
                                         font=("Arial", 8), fg="#FFD700", bg="#3C1361")
        
        def update_scroll_indicators():
            try:
                # Check if there's content above or below the visible area
                top = sidebar_canvas.canvasy(0)
                bottom = sidebar_canvas.canvasy(sidebar_canvas.winfo_height())
                scrollregion = sidebar_canvas.cget("scrollregion")
                
                if scrollregion:
                    coords = scrollregion.split()
                    if len(coords) >= 4:
                        total_height = float(coords[3])
                        
                        # Show/hide top indicator with responsive width
                        if top > 5:  # Small threshold
                            scroll_top_indicator.place(x=0, y=0, width=sidebar_canvas.winfo_width(), height=20)
                        else:
                            scroll_top_indicator.place_forget()
                        
                        # Show/hide bottom indicator with responsive width
                        if bottom < total_height - 5:  # Small threshold
                            scroll_bottom_indicator.place(x=0, y=sidebar_container.winfo_height()-20, width=sidebar_canvas.winfo_width(), height=20)
                        else:
                            scroll_bottom_indicator.place_forget()
            except:
                pass  # Ignore errors during initialization
        
        # Update indicators when the frame is configured
        sidebar_frame.bind("<Configure>", lambda e: sidebar_container.after(100, update_scroll_indicators))
        
        # إضافة العنوان الرئيسي للنظام
        main_title_label = tk.Label(sidebar_frame, 
                                   text="🏛️ أكاديمية QB\nنظام إدارة الجودة", 
                                   font=("Arial", 16, "bold"),
                                   fg="#FFD700",
                                   bg="#2E0A47",
                                   anchor="center",
                                   justify="center",
                                   padx=10,
                                   pady=15,
                                   relief=tk.RAISED,
                                   bd=2)
        main_title_label.pack(fill=tk.X, pady=(10, 20), padx=10)
        
        # إجراءات القسم 4: متطلبات عامة
        section4_label = tk.Label(sidebar_frame, 
                                 text="القسم 4: متطلبات عامة", 
                                 font=self.arabic_font_large,
                                 fg="#FFD700",
                                 bg="#3C1361",
                                 anchor="center",
                                 padx=10)
        section4_label.pack(fill=tk.X, pady=(20, 5), padx=10)
        
        procedures = [
            "QP-04.1: الوضع القانوني",
            "QP-04.2: مسؤولية القرارات",
            "QP-04.3: الحيادية",
            "QP-04.4: الموارد المالية والاحتياطات"
        ]
        
        for proc in procedures:
            btn = tk.Button(sidebar_frame, 
                           text=proc,
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           relief=tk.RAISED,
                           width=25,
                           command=lambda p=proc: self.show_procedure(p))
            btn.pack(fill=tk.X, padx=10, pady=5)
        
        # إجراءات القسم 5: الهيكل الإداري
        section5_label = tk.Label(sidebar_frame, 
                                 text="القسم 5: الهيكل الإداري", 
                                 font=self.arabic_font_large,
                                 fg="#FFD700",
                                 bg="#3C1361",
                                 anchor="center",
                                 padx=10)
        section5_label.pack(fill=tk.X, pady=(20, 5), padx=10)
        
        procedures5 = [
            "QP-05.1: هيكل الإدارة",
            "QP-05.2: الفصل بين التدريب والاعتماد"
        ]
        
        for proc in procedures5:
            btn = tk.Button(sidebar_frame, 
                           text=proc,
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           relief=tk.RAISED,
                           width=25,
                           command=lambda p=proc: self.show_procedure(p))
            btn.pack(fill=tk.X, padx=10, pady=5)
            
        # إجراءات القسم 6: الموارد
        section6_label = tk.Label(sidebar_frame, 
                                 text="القسم 6: الموارد", 
                                 font=self.arabic_font_large,
                                 fg="#FFD700",
                                 bg="#3C1361",
                                 anchor="center",
                                 padx=10)
        section6_label.pack(fill=tk.X, pady=(20, 5), padx=10)
        
        procedures6 = [
            "QP-06.1: كفاءة الأفراد",
            "QP-06.2: أدوار ومسؤوليات الأفراد",
            "QP-06.3: الاستعانة بالأطراف الخارجية",
            "QP-06.4: الموارد المادية والتقنية"
        ]
        
        for proc in procedures6:
            btn = tk.Button(sidebar_frame, 
                           text=proc,
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           relief=tk.RAISED,
                           width=25,
                           command=lambda p=proc: self.show_procedure(p))
            btn.pack(fill=tk.X, padx=10, pady=5)
            
        # إجراءات القسم 7: أنظمة المعلومات
        section7_label = tk.Label(sidebar_frame, 
                                 text="القسم 7: أنظمة المعلومات", 
                                 font=self.arabic_font_large,
                                 fg="#FFD700",
                                 bg="#3C1361",
                                 anchor="center",
                                 padx=10)
        section7_label.pack(fill=tk.X, pady=(20, 5), padx=10)
        
        procedures7 = [
            "QP-07.1: إدارة طلبات الامتحان ونتائج التقييم",
            "QP-07.2: إدارة معلومات البرنامج",
            "QP-07.3: السرية وحماية البيانات الشخصية",
            "QP-07.4: أمن المعلومات والحوادث الأمنية"
        ]
        
        for proc in procedures7:
            btn = tk.Button(sidebar_frame, 
                           text=proc,
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           relief=tk.RAISED,
                           width=25,
                           command=lambda p=proc: self.show_procedure(p))
            btn.pack(fill=tk.X, padx=10, pady=5)
            
        # إجراءات القسم 8: التقييم
        section8_label = tk.Label(sidebar_frame, 
                                 text="القسم 8: التقييم", 
                                 font=self.arabic_font_large,
                                 fg="#FFD700",
                                 bg="#3C1361",
                                 anchor="center",
                                 padx=10)
        section8_label.pack(fill=tk.X, pady=(20, 5), padx=10)
        
        procedures8 = [
            "QP-08.1: اعتماد المقيمين",
            "QP-08.2: اعتماد المراكز",
            "QP-08.3: تحديد الكفاءات",
            "QP-08.4: المتطلبات الإضافية"
        ]
        
        for proc in procedures8:
            btn = tk.Button(sidebar_frame, 
                           text=proc,
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           relief=tk.RAISED,
                           width=25,
                           command=lambda p=proc: self.show_procedure(p))
            btn.pack(fill=tk.X, padx=10, pady=5)
            
        # إجراءات القسم 9: الشهادات
        section9_label = tk.Label(sidebar_frame, 
                                 text="القسم 9: الشهادات", 
                                 font=self.arabic_font_large,
                                 fg="#FFD700",
                                 bg="#3C1361",
                                 anchor="center",
                                 padx=10)
        section9_label.pack(fill=tk.X, pady=(20, 5), padx=10)
        
        procedures9 = [
            "QP-09-01: التقديم للبرامج",
            "QP-09-02: إجراءات التقييم", 
            "QP-09-03: إجراءات الامتحان",
            "QP-09-04: قرار الشهادة",
            "QP-09-05: تعليق أو سحب الشهادة",
            "QP-09-06: إعادة الاعتماد",
            "QP-09-07: استخدام الشهادات والشعارات",
            "QP-09-08: التظلمات",
            "QP-09-09: الشكاوى"
        ]
        
        for proc in procedures9:
            btn = tk.Button(sidebar_frame, 
                           text=proc,
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           relief=tk.RAISED,
                           width=25,
                           command=lambda p=proc: self.show_procedure(p))
            btn.pack(fill=tk.X, padx=10, pady=5)
            
        # إجراءات القسم 10: إدارة المعلومات
        section10_label = tk.Label(sidebar_frame, 
                                  text="القسم 10: إدارة المعلومات", 
                                  font=self.arabic_font_large,
                                  fg="#FFD700",
                                  bg="#3C1361",
                                  anchor="center",
                                  padx=10)
        section10_label.pack(fill=tk.X, pady=(20, 5), padx=10)
        
        procedures10 = [
            "QP-10-01: النظام الإداري",
            "QP-10-02-01: وثائق نظام الإدارة",
            "QP-10-02-02: ضبط الوثائق",
            "QP-10-02-03: ضبط السجلات",
            "QP-10-02-04: مراجعة الإدارة",
            "QP-10-02-05: التدقيق الداخلي",
            "QP-10-02-06: الإجراءات التصحيحية",
            "QP-10-02-07: الإجراءات الوقائية"
        ]
        
        for proc in procedures10:
            btn = tk.Button(sidebar_frame, 
                           text=proc,
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           relief=tk.RAISED,
                           width=25,
                           command=lambda p=proc: self.show_procedure(p))
            btn.pack(fill=tk.X, padx=10, pady=5)
        
        # إضافة قسم إدارة الملفات والمستندات
        files_section_label = tk.Label(sidebar_frame, 
                                      text="إدارة الملفات والمستندات", 
                                      font=self.arabic_font_large,
                                      fg="#FFD700",
                                      bg="#3C1361",
                                      anchor="center",
                                      padx=10)
        files_section_label.pack(fill=tk.X, pady=(30, 5), padx=10)
        
        # زر رفع ملف جديد (مباشر)
        upload_btn = tk.Button(sidebar_frame, 
                              text="📁 رفع ملف جديد",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#228B22",
                              relief=tk.RAISED,
                              width=25,
                              command=self.quick_upload_file)
        upload_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # زر إدارة جميع الملفات
        files_btn = tk.Button(sidebar_frame, 
                             text="📂 إدارة جميع الملفات",
                             font=self.arabic_font_bold,
                             fg="white",
                             bg="#5A2A9C",
                             relief=tk.RAISED,
                             width=25,
                             command=self.show_file_manager)
        files_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # زر إدارة النماذج المحفوظة
        saved_forms_btn = tk.Button(sidebar_frame, 
                                   text="📝 إدارة النماذج المحفوظة",
                                   font=self.arabic_font_bold,
                                   fg="white",
                                   bg="#2196F3",
                                   relief=tk.RAISED,
                                   width=25,
                                   command=self.show_saved_forms_manager)
        saved_forms_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # إضافة قسم إدارة النظام
        system_section_label = tk.Label(sidebar_frame, 
                                       text="إدارة النظام", 
                                       font=self.arabic_font_large,
                                       fg="#FFD700",
                                       bg="#3C1361",
                                       anchor="center",
                                       padx=10)
        system_section_label.pack(fill=tk.X, pady=(30, 5), padx=10)
        
        # إضافة زر إعدادات النظام
        system_btn = tk.Button(sidebar_frame, 
                           text="⚙️ إعدادات النظام",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#8B0000",
                           relief=tk.RAISED,
                           width=25,
                           command=self.system_settings)
        system_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # إضافة زر تصدير تقرير النظام
        export_btn = tk.Button(sidebar_frame, 
                           text="📊 تصدير تقرير النظام",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           relief=tk.RAISED,
                           width=25,
                           command=lambda: self.export_to_pdf())
        export_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # زر إدارة المستخدمين (للمدير فقط)
        if self.current_user and self.current_user['role'] == 'admin':
            users_btn = tk.Button(sidebar_frame, 
                                 text="إدارة المستخدمين",
                                 font=self.arabic_font_bold,
                                 fg="white",
                                 bg="#5A2A9C",
                                 relief=tk.RAISED,
                                 width=25,
                                 command=self.show_user_management)
            users_btn.pack(fill=tk.X, padx=10, pady=5)
            
            # زر إدارة بيانات النماذج (للمدير فقط)
            forms_management_btn = tk.Button(sidebar_frame, 
                                           text="📋 إدارة بيانات النماذج",
                                           font=self.arabic_font_bold,
                                           fg="white",
                                           bg="#4CAF50",
                                           relief=tk.RAISED,
                                           width=25,
                                           command=self.show_forms_data_management)
            forms_management_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # زر النسخ الاحتياطي
        backup_btn = tk.Button(sidebar_frame, 
                              text="النسخ الاحتياطي",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#5A2A9C",
                              relief=tk.RAISED,
                              width=25,
                              command=self.create_backup)
        backup_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # زر تسجيل الخروج
        logout_btn = tk.Button(sidebar_frame, 
                              text="تسجيل الخروج",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#8B0000",
                              relief=tk.RAISED,
                              width=25,
                              command=self.logout)
        logout_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # Main Content Area
        # Premium Content Frame
        self.content_frame = tk.Frame(main_frame, bg=self.premium_colors['background'])
        self.content_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # إضافة محتوى ترحيبي افتراضي
        self.show_welcome_content()
        
        # إضافة شريط الحالة مع معلومات المستخدم
        self.status_var = tk.StringVar()
        status_bar = tk.Label(self.root, 
                             textvariable=self.status_var,
                             font=self.arabic_font,
                             fg="white",
                             bg="#4A1B8D",
                             anchor=tk.W)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # عرض معلومات المستخدم في شريط الحالة
        user_info = f"المستخدم: {self.current_user['full_name']} | الدور: {self.current_user['role']} | {APP_NAME} {APP_VERSION}"
        self.status_var.set(user_info)
        
        
        # شاشة الترحيب الافتراضية
        self.show_welcome_screen()
    
    def get_actual_form_name(self, form_name):
        """Map short form names to actual full form names in self.forms"""
        form_mappings = {
            "QF-06-02-01: قائمة الأدوار والمسؤوليات": "QF-06-02-01: قائمة الأدوار والمسؤوليات للأفراد المشاركين في أنشطة الاعتماد",
            "QF-06-02-02: إقرار الحيادية والسرية": "QF-06-02-02: إقرار الحيادية والسرية للأفراد",
            "QF-06-02-03: سجل مراجعة تضارب المصالح": "QF-06-02-03: سجل مراجعة تضارب المصالح",
            "QF-06-03-01: نموذج عقد التعاقد مع الأطراف الخارجية": "QF-06-03-01: نموذج عقد التعاقد مع الأطراف الخارجية",
            "QF-06-03-02: سجل تقييم أداء الأطراف الخارجية": "QF-06-03-02: سجل تقييم أداء الأطراف الخارجية",
            "QF-06-03-03: تقرير مراقبة الأداء والتقييم الدوري": "QF-06-03-03: تقرير مراقبة الأداء والتقييم الدوري",
            "QF-06-03-04: نموذج تقييم تضارب المصالح مع الأطراف الخارجية": "QF-06-03-04: نموذج تقييم تضارب المصالح مع الأطراف الخارجية",
            "QF-06-04-01: نموذج تجهيز قاعات الامتحانات": "QF-06-04-01: نموذج تجهيز قاعات الامتحانات",
            "QF-06-04-02: سجل استخدام الموارد المادية والتقنية": "QF-06-04-02: سجل استخدام الموارد المادية والتقنية",
            "QF-06-04-03: تقرير مراجعة بيئة الامتحانات": "QF-06-04-03: تقرير مراجعة بيئة الامتحانات",
            "QF-06-04-04: تقرير تقييم الموارد التقنية": "QF-06-04-04: تقرير تقييم الموارد التقنية"
        }
        
        # Check if it's a short name that needs mapping
        if form_name in form_mappings:
            return form_mappings[form_name]
        
        # If not found in mappings, return the original name
        return form_name
    
    def clear_content(self):
        """Clear all content from the main content frame"""
        for widget in self.content_frame.winfo_children():
            widget.destroy()
    
    def show_welcome_screen(self):
        for widget in self.content_frame.winfo_children():
            widget.destroy()
            
        # Premium welcome frame with optimized spacing
        welcome_frame = tk.Frame(self.content_frame, bg=self.premium_colors['background'])
        welcome_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Welcome card with better fill
        welcome_card = tk.Frame(welcome_frame, bg=self.premium_colors['surface'], 
                               relief=tk.RAISED, bd=2)
        welcome_card.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)
        
        # ترحيب شخصي with premium styling
        if self.current_user:
            welcome_text = f"مرحباً {self.current_user['full_name']}"
            formatted_welcome = self.format_arabic_text(welcome_text)
            
            user_welcome = tk.Label(welcome_card, 
                                  text=formatted_welcome, 
                                  font=self.fonts['title'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['surface'])
            user_welcome.pack(pady=(30, 10))
            
            role_label = tk.Label(welcome_frame, 
                                text=f"الدور: {self.current_user['role']}", 
                                font=("Arial", 14),
                                fg="#ADD8E6",
                                bg="#2D0A4D")
            role_label.pack(pady=(0, 20))
        
        title_label = tk.Label(welcome_frame, 
                              text="نظام إدارة الجودة", 
                              font=("Arial", 28, "bold"),
                              fg="#FFD700",
                              bg="#2D0A4D")
        title_label.pack(pady=(20, 20))
        
        subtitle_label = tk.Label(welcome_frame, 
                                 text=f"{APP_NAME} - وفقاً لمعيار ISO/IEC 17024:2012", 
                                 font=("Arial", 18),
                                 fg="white",
                                 bg="#2D0A4D")
        subtitle_label.pack(pady=(0, 40))
        
        features = [
            "• إدارة الإجراءات والوثائق",
            "• تتبع الوضع القانوني والامتثال",
            "• إدارة النماذج والسجلات",
            "• مراجعة وتحديث الإجراءات",
            "• إدارة التوزيعات والاعتمادات",
            "• إدارة الملفات والمستندات",
            "• نظام المصادقة وتسجيل النشاطات"
        ]
        
        for feature in features:
            feat_label = tk.Label(welcome_frame, 
                                text=feature,
                                font=("Arial", 16),
                                fg="#D0A0FF",
                                bg="#2D0A4D",
                                anchor="w",
                                justify="right",
                                width=40)
            feat_label.pack(pady=5)
        
        footer_label = tk.Label(welcome_frame, 
                              text="اختر إجراءً من القائمة الجانبية للبدء",
                              font=("Arial", 14, "italic"),
                              fg="#AAAAAA",
                              bg="#2D0A4D")
        footer_label.pack(pady=(40, 10))
    
    def load_data(self):
        """Load procedures and forms data from database"""
        # Create forms table if it doesn't exist
        self.db_manager.create_forms_table()
        
        # Load procedures (keep them in memory as they are static)
        self.procedures = {
            "QP-04.1: الوضع القانوني": {
                "الغرض": f"تحديد المتطلبات القانونية التي يجب أن تنطبق على {APP_NAME} لضمان الاعتراف بها كجهة قانونية تتحمل المسؤولية الكاملة عن أنشطة الاعتماد التي تنفذها",
                "مجال التطبيق": f"ينطبق هذا الإجراء على الوضع القانوني لـ {APP_NAME} كجهة اعتماد معتمدة، وعلى جميع أنشطتها المعنية بمنح الشهادات",
                "التعاريف": [
                    "الكيان القانوني: هو منظمة أو جهة معترف بها رسميًا بموجب القانون، ولها شخصية اعتبارية مستقلة، وتتحمل المسؤولية القانونية عن أفعالها",
                    "الجزء المعرف من كيان قانوني: وحدة تنظيمية داخل كيان قانوني أكبر، لها استقلال إداري واضح، ويمكن تحميلها المسؤولية عن نشاطات محددة مثل أنشطة الاعتماد",
                    "المسؤولية القانونية: هي التزام قانوني يقع على عاتق الجهة في حال حدوث خطأ أو تقصير في تنفيذ أنشطة الاعتماد",
                    "الكيان الحكومي: مؤسسة تابعة للدولة يُعترف بها قانونيًا استنادًا إلى وضعها الرسمي كجهة عامة",
                    "أنشطة الاعتماد: تشمل جميع العمليات المرتبطة بمنح الشهادات، مثل التقييم، والامتحانات، وإصدار الشهادات، والتجديد، والتعليق، والسحب"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من تسجيل الجهة قانونيًا والاحتفاظ بوثائق التسجيل"),
                    ("المستشار القانوني", "مراجعة الوضع القانوني بصفة دورية وضمان التوافق مع الأنظمة المحلية"),
                    ("مدير الجودة", "الاحتفاظ بنسخ محدثة من التراخيص أو الوثائق القانونية المعتمدة")
                ],
                "الإجراءات": [
                    "QB Academy كيانًا قانونيًا مسجلاً رسميًا لدى الجهات المختصة، وجزءًا معرفًا بوضوح ضمن كيان قانوني آخر، مع توضيح نطاق مسؤوليتها القانونية عن أنشطة الاعتماد",
                    "يتم الاحتفاظ بجميع الوثائق الرسمية (مثل: الرخصة التجارية، أو قرار التأسيس، أو قرار الجهة الحكومية) ضمن ملف قانوني مخصص",
                    "يتم مراجعة هذه الوثائق سنويًا من قبل الإدارة القانونية للتأكد من استمرار صلاحيتها القانونية وعدم وجود تعارض قانوني في ممارسة أنشطة الاعتماد"
                ],
                "النماذج": ["QF-04-01-01: سجل الوثائق القانونية", "QF-04-01-02: نموذج مراجعة الوضع القانوني"]
            },
            "QP-04.2: مسؤولية القرارات": {
                "الغرض": "تحديد وضمان مسؤولية QB Academy الكاملة عن جميع قرارات الاعتماد وعدم تفويض هذه المسؤولية لأي جهة خارجية، بما يحقق متطلبات البند 4.2 من المواصفة ISO/IEC 17024:2012",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع قرارات الاعتماد التي تصدر عن QB Academy، وتشمل منح الشهادة، استمرارها، إعادة الاعتماد، توسيع أو تقليص نطاق الشهادة، تعليقها أو سحبها",
                "التعاريف": [
                    "قرار الاعتماد: الإجراء الرسمي الذي تصدره الجهة المعتمدة بشأن حالة شهادة شخص معين",
                    "لجنة القرارات: لجنة داخلية مستقلة مسؤولة عن اتخاذ قرارات الاعتماد",
                    "تفويض القرار: نقل مسؤولية اتخاذ القرار إلى جهة خارج QB Academy، وهو أمر غير مسموح به"
                ],
                "المسؤوليات": [
                    ("لجنة القرارات", "اتخاذ القرار النهائي في جميع مسائل الاعتماد بناءً على التوصيات المقدمة"),
                    ("مدير الشهادات", "تجهيز الملفات وتقديم التوصيات للجنة القرارات"),
                    ("مدير الجودة", "مراقبة التزام العملية بمعايير الاستقلالية والشفافية وعدم التفويض الخارجي")
                ],
                "الإجراءات": [
                    "تقوم الإدارات المختصة (الفنية والتقييم) بإعداد ملفات الترشيح والتوصيات",
                    "تُعرض الملفات والتوصيات على لجنة القرارات التي تُشكل من أعضاء محايدين",
                    "تتخذ اللجنة قرارًا نهائيًا بشأن حالة الاعتماد دون أي تدخل أو تفويض خارجي",
                    "يتم توثيق القرار في سجل قرارات الاعتماد ويُبلّغ به الشخص المعني رسميًا",
                    "تشمل القرارات التي تصدرها اللجنة: منح الشهادة، استمرار الاعتماد، إعادة الاعتماد، توسيع أو تقليص النطاق، تعليق الشهادة أو سحبها"
                ],
                "النماذج": ["QF-04-02-01: محضر اجتماع لجنة القرارات", "QF-04-02-02: سجل قرارات الاعتماد"]
            },
            "QP-04.3: الحيادية": {
                "الغرض": "وضع الإجراءات والضوابط التي تضمن الحيادية التامة في جميع أنشطة الاعتماد في QB Academy، بما يحقق متطلبات البند 4.3 من المواصفة ISO/IEC 17024:2012",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الأنشطة المتعلقة بالاعتماد في QB Academy، ويشمل التوثيق، السياسات، الإجراءات، وضمان حيادية جميع الأطراف المعنية",
                "التعاريف": [
                    "الحيادية: الحفاظ على نزاهة وشفافية العمليات التي تتضمنها جهة الاعتماد، وعدم التأثر بأي ضغوط خارجية أو تداخل مصالح",
                    "التهديدات المحتملة للحيادية: أي عوامل أو مواقف قد تؤثر على حيادية جهة الاعتماد أو عملياتها، سواء كانت واقعية أو متصورة",
                    "التضارب في المصالح: حالة حيث توجد مصلحة شخصية قد تؤثر على اتخاذ القرار المهني أو الحيادي"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "ضمان الحفاظ على الحيادية في جميع الأنشطة المتعلقة بالاعتماد وإصدار بيان عام بذلك"),
                    ("مدير الجودة", "ضمان توثيق السياسات والإجراءات الخاصة بالحيادية ومراجعتها بشكل مستمر"),
                    ("موظفو الاعتماد", "الالتزام بتطبيق السياسات والإجراءات الخاصة بالحيادية في جميع التفاعلات مع المتقدمين")
                ],
                "الإجراءات": [
                    "توثيق الهيكل والسياسات: يجب توثيق هيكل الجهة وسياساتها وإجراءاتها لضمان الحيادية، ويتم تحديث البيان العام عن الحيادية سنويًا ويتم نشره ليكون متاحًا للجمهور",
                    "التعامل بنزاهة: يجب أن تتعامل الجهة بنزاهة مع جميع المتقدمين والمرشحين والأشخاص المعتمدين، مع ضمان العدالة والمساواة في جميع المعاملات",
                    "إجراءات عادلة وغير تمييزية: يجب أن تكون السياسات والإجراءات عادلة ومتساوية للجميع دون أي تمييز بناءً على الجنسية، العرق، الدين، أو أي عامل آخر غير متعلق بالاعتماد",
                    "تحديد التهديدات للحيادية: يجب أن تقوم الجهة بتحديد التهديدات المحتملة للحيادية، بما في ذلك التهديدات من الأنشطة الداخلية أو علاقات خارجية أو مصالح الموظفين والشركاء",
                    "التضارب في المصالح: يجب على الجهة تحليل وتوثيق أي تضارب محتمل في المصالح بين الموظفين أو مع شركاء الاعتماد، ويجب وضع آليات لإزالة أو تقليل تأثير التضارب في المصالح",
                    "هيكلة أنشطة الاعتماد: يجب أن تتم هيكلة الأنشطة بطريقة تضمن الحيادية، بما في ذلك إشراك أصحاب المصلحة بشكل متوازن"
                ],
                "النماذج": ["QF-04-03-01: سجل التهديدات المحتملة للحيادية", "QF-04-03-02: تقرير تضارب المصالح"],
                "المراجعة والتحديث": "تُراجع هذه الوثيقة سنويًا أو عند حدوث تغييرات تؤثر على الحيادية، لضمان استمرارية الالتزام بالمبادئ الواردة في هذا الإجراء"
            },
            "QP-04.4: الموارد المالية والاحتياطات": {
                "الغرض": "وضع الإجراءات والضوابط التي تضمن امتلاك جهة الاعتماد الموارد المالية اللازمة لتشغيل عمليات الاعتماد، مع ضمان وجود ترتيبات مناسبة لتغطية المسؤوليات القانونية والمهنية.",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الأنشطة المالية المتعلقة بعمليات الاعتماد في QB Academy.",
                "التعاريف": [
                    "الموارد المالية: الأموال اللازمة لتغطية جميع التكاليف المرتبطة بالاعتماد، مثل تكاليف الموظفين، النفقات التشغيلية، وتكاليف المراجعة والامتثال",
                    "الاحتياطات المالية: مبالغ مالية يتم تخصيصها لتغطية أي مسؤوليات غير متوقعة قد تنشأ نتيجة لأنشطة الاعتماد"
                ],
                "المسؤوليات": [
                    "الإدارة العليا: ضمان توفر الموارد المالية الكافية والاحتياطات اللازمة لتغطية أي مسؤوليات قانونية أو مهنية قد تترتب",
                    "قسم الشؤون المالية: متابعة الأداء المالي للجهة وتحديد الاحتياجات المالية المستقبلية لضمان استدامة العمليات",
                    "مدير الجودة: التأكد من أن الأنشطة المالية لا تؤثر على الحيادية أو النزاهة في عمليات الاعتماد"
                ],
                "الإجراءات": [
    " تحديد الموارد المالية اللازمة\n"
    "   يجب تحديد الميزانية السنوية المطلوبة لدعم جميع أنشطة الاعتماد\n"
    "   بما في ذلك رواتب الموظفين، الرسوم الإدارية، تكاليف التأمين، والتراخيص",

    " توفير الاحتياطات المالية\n"
    "   على الجهة تخصيص مبلغ مالي كاحتياطي لتغطية المسؤوليات القانونية والمهنية\n"
    "   يشمل ذلك التأمين ضد المخاطر المالية المرتبطة بأنشطة الاعتماد",

    " مراجعة الميزانية المالية\n"
    "   تتم مراجعة الميزانية بشكل دوري لضمان تلبيتها لاحتياجات الاعتماد\n"
    "   يجب أن تشمل المراجعة السنوية من الإدارة العليا تقييم الاستدامة المالية",

    " التأكد من الشفافية المالية\n"
    "   يجب أن تكون العمليات المالية موثقة وشفافة\n"
    "   تُعد التقارير المالية الدورية لضمان الامتثال للمتطلبات القانونية والمهنية"
],

                "المراجعة والتحديث": "يتم مراجعة وتحديث هذا الإجراء سنويًا أو عند حدوث أي تغييرات كبيرة في الوضع المالي للجهة أو في متطلبات الاعتماد.",
                "النماذج": [
                    "QF-04-04-01: سجل الموارد المالية لعمليات الاعتماد",
                    "QF-04-04-02: تقرير الاحتياطات المالية",
                    "QF-04-04-03: تقارير المراجعة المالية السنوية"
                ]
            },
            "QP-06.2: أدوار ومسؤوليات الأفراد": {
                "الغرض": "تحديد أدوار ومسؤوليات الأفراد المشاركين في أنشطة الاعتماد لضمان الفصل الواضح بين المهام ومنع تضارب المصالح",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الأفراد المشاركين في أنشطة الاعتماد في QB Academy، بما في ذلك الموظفين الدائمين والمتعاقدين والمقيمين الخارجيين",
                "التعاريف": [
                    "المقيم: الشخص المسؤول عن تقييم مدى استيفاء المتقدمين لمتطلبات الاعتماد",
                    "مدير الاعتماد: الشخص المسؤول عن الإشراف على عملية الاعتماد واتخاذ القرارات النهائية",
                    "لجنة الاعتماد: الهيئة المسؤولة عن مراجعة نتائج التقييم واتخاذ قرارات الاعتماد"
                ],
                "المسؤوليات": [
                    ("مدير الجودة", "تحديد وتوثيق الأدوار والمسؤوليات لجميع الأفراد المشاركين في أنشطة الاعتماد"),
                    ("مدير الموارد البشرية", "ضمان أن جميع الأفراد لديهم المهارات والمعرفة اللازمة لأداء مهامهم"),
                    ("المقيمين", "إجراء التقييمات بموضوعية ونزاهة ووفقًا للإجراءات المعتمدة")
                ],
                "الإجراءات": [
                    "يتم تحديد الأدوار والمسؤوليات لجميع الأفراد المشاركين في أنشطة الاعتماد وتوثيقها في وصف وظيفي واضح",
                    "يتم تدريب جميع الأفراد على واجباتهم ومسؤولياتهم والإجراءات ذات الصلة قبل بدء مهامهم",
                    "يتم مراجعة أداء الأفراد سنويًا لضمان استمرار قدرتهم على أداء مهامهم بكفاءة وموضوعية",
                    "يتم توثيق أي تغييرات في الأدوار والمسؤوليات والحصول على الموافقات اللازمة قبل تنفيذها"
                ],
                "النماذج": ["QF-06-02-01: قائمة الأدوار والمسؤوليات", "QF-06-02-02: إقرار الحيادية والسرية", "QF-06-02-03: سجل مراجعة تضارب المصالح"]
            },
            "QP-07.1: طلب الاعتماد": {
                "الغرض": "تحديد إجراءات تلقي ومعالجة طلبات الاعتماد من المتقدمين",
                "مجال التطبيق": "ينطبق على جميع طلبات الاعتماد المقدمة لـ QB Academy",
                "التعاريف": [
                    "طلب الاعتماد: الطلب الرسمي المقدم من شخص للحصول على شهادة اعتماد",
                    "المتقدم: الشخص الذي يطلب الحصول على شهادة الاعتماد"
                ],
                "المسؤوليات": [
                    ("إدارة الاستقبال", "استلام وتسجيل طلبات الاعتماد"),
                    ("إدارة التقييم", "مراجعة اكتمال الطلبات والوثائق المطلوبة")
                ],
                "الإجراءات": [
                    "استلام طلب الاعتماد مع الوثائق المطلوبة",
                    "التحقق من اكتمال الطلب ومطابقته للمتطلبات",
                    "إرسال إقرار استلام للمتقدم"
                ],
                "النماذج": ["QF-07-01-01: نموذج طلب الاعتماد", "QF-07-01-02: إقرار استلام الطلب"]
            },
            "QP-07.2: مراجعة الطلب": {
                "الغرض": "ضمان مراجعة طلبات الاعتماد والتحقق من استيفائها للمتطلبات",
                "مجال التطبيق": "جميع طلبات الاعتماد المستلمة",
                "التعاريف": [
                    "مراجعة الطلب: التحقق من اكتمال ومطابقة الطلب للمعايير المحددة"
                ],
                "المسؤوليات": [
                    ("لجنة المراجعة", "فحص ومراجعة الطلبات"),
                    ("مدير التقييم", "إصدار قرار قبول أو رفض الطلب")
                ],
                "الإجراءات": [
                    "مراجعة اكتمال الوثائق المطلوبة",
                    "التحقق من استيفاء المتطلبات الأساسية",
                    "إصدار قرار بقبول أو رفض الطلب"
                ],
                "النماذج": ["QF-07-02-01: تقرير مراجعة الطلب", "QF-07-02-02: إشعار قبول/رفض الطلب"]
            },
            "QP-08.1: طرق التقييم": {
                "الغرض": "تحديد طرق وأساليب التقييم المختلفة المستخدمة في عملية الاعتماد",
                "مجال التطبيق": "جميع عمليات التقييم في QB Academy",
                "التعاريف": [
                    "التقييم النظري: اختبار المعرفة النظرية للمتقدم",
                    "التقييم العملي: اختبار المهارات العملية والتطبيقية"
                ],
                "المسؤوليات": [
                    ("لجنة التقييم", "تحديد طرق التقييم المناسبة"),
                    ("المقيمون", "تنفيذ عملية التقييم وفقاً للطرق المحددة")
                ],
                "الإجراءات": [
                    "تحديد طريقة التقييم المناسبة للتخصص",
                    "إعداد أدوات ومواد التقييم",
                    "تنفيذ عملية التقييم"
                ],
                "النماذج": ["QF-08-01-01: خطة التقييم", "QF-08-01-02: تقرير التقييم"]
            },
            "QP-09.1: إصدار الشهادات": {
                "الغرض": "تحديد إجراءات إصدار شهادات الاعتماد للمتقدمين الناجحين",
                "مجال التطبيق": "جميع الشهادات الصادرة عن QB Academy",
                "التعاريف": [
                    "شهادة الاعتماد: الوثيقة الرسمية التي تثبت حصول الشخص على الاعتماد",
                    "رقم الشهادة: الرقم الفريد المخصص لكل شهادة"
                ],
                "المسؤوليات": [
                    ("إدارة الشهادات", "إصدار وتسليم الشهادات"),
                    ("مدير الجودة", "مراجعة والموافقة على إصدار الشهادات")
                ],
                "الإجراءات": [
                    "التحقق من نجاح المتقدم في التقييم",
                    "إعداد بيانات الشهادة",
                    "إصدار وتسليم الشهادة للمعتمد"
                ],
                "النماذج": ["QF-09-01-01: نموذج الشهادة", "QF-09-01-02: سجل الشهادات المصدرة"]
            },
            "QP-10-01: النظام الإداري": {
                "الغرض": "توضيح المتطلبات الخاصة بإنشاء وتنفيذ والحفاظ على نظام إداري فعال يدعم قدرة جهة الاعتماد على تقديم خدمات الاعتماد بجودة وثبات",
                "مجال التطبيق": "يطبق هذا الإجراء على جميع العمليات والأنشطة المتعلقة بتقديم خدمات الاعتماد في جهة الاعتماد",
                "التعاريف": [
                    "النظام الإداري (Management System): مجموعة من العمليات والهياكل التي تدير كيفية تقديم خدمات الاعتماد",
                    "الاعتماد (Accreditation): عملية تقييم وتوثيق الكفاءات وفق معايير محددة"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من إنشاء وتنفيذ النظام الإداري بما يتماشى مع المعايير الدولية المعتمدة"),
                    ("مدير الجودة", "الإشراف على تنفيذ وصيانة النظام الإداري، وضمان توافقه مع متطلبات الجودة"),
                    ("الموظفون", "الالتزام بتطبيق سياسات وإجراءات النظام الإداري")
                ],
                "الإجراءات": [
                    "1. إنشاء النظام الإداري:",
                    "   • يجب تأسيس نظام إداري وفقًا للمعايير الدولية المناسبة مثل ISO 9001 أو أي معايير أخرى ذات صلة",
                    "   • يمكن أن يكون النظام الإداري مستقلًا أو جزءًا من نظام إدارة شامل",
                    "2. تنفيذ النظام الإداري:",
                    "   • يتم تنفيذ النظام الإداري من خلال عمليات متكاملة تشمل تحديد الأهداف، تخصيص الموارد، وتطوير الإجراءات لتلبية متطلبات الجودة",
                    "   • يجب أن يتضمن النظام إدارة عمليات الاعتماد، مراقبة الأداء، والتأكد من رضا العملاء",
                    "3. المراجعة والصيانة:",
                    "   • يجب إجراء مراجعات دورية للنظام الإداري لضمان استمرارية فعاليته وملاءمته مع التغيرات الداخلية والخارجية",
                    "   • يشمل ذلك تحديث الإجراءات والسياسات عند الحاجة لضمان تحسين مستمر",
                    "4. التحسين المستمر:",
                    "   • يجب أن يتضمن النظام الإداري آليات لتحليل الأداء وتحقيق التحسين المستمر في جميع الأنشطة المتعلقة بالاعتماد"
                ],
                "النماذج": [
                    "QF-10-01-01: سجل مكونات النظام الإداري",
                    "QF-10-01-02: تقرير مراجعة النظام الإداري",
                    "QF-10-01-03: سجل التحسين المستمر"
                ],
                "المراجعة والتحديث": "يجب مراجعة النظام الإداري بشكل دوري لضمان مطابقته للمتطلبات الدولية وضمان استمرارية فعاليته في تقديم خدمات الاعتماد"
            },
            "QP-10-02-01: وثائق نظام الإدارة": {
                "الغرض": "توضيح المتطلبات الخاصة بوثائق نظام الإدارة اللازمة لضمان تقديم خدمات الاعتماد بجودة عالية ووفقًا للمعايير الدولية",
                "مجال التطبيق": "يطبق هذا الإجراء على جميع الوثائق المتعلقة بنظام الإدارة داخل جهة الاعتماد والتي تساهم في تنظيم وتوجيه عمليات الاعتماد",
                "التعاريف": [
                    "وثائق نظام الإدارة: الوثائق التي تحتوي على السياسات العامة، الأهداف، الإجراءات، والتعليمات التي تنظم وتحكم الأنشطة والعمليات في جهة الاعتماد",
                    "الوثائق: تشمل السياسات، الإجراءات، التعليمات، النماذج، والنطاق الذي يغطيه الاعتماد"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من توفير جميع الوثائق اللازمة لدعم تنفيذ النظام الإداري"),
                    ("مدير الجودة", "المسؤول عن إعداد وتوثيق وصيانة الوثائق المتعلقة بالنظام الإداري وضمان تحديثها بانتظام"),
                    ("الموظفون", "الالتزام باستخدام الوثائق حسب الحاجة في تنفيذ الأنشطة اليومية")
                ],
                "الإجراءات": [
                    "1. إنشاء الوثائق:",
                    "   • يجب على جهة الاعتماد إنشاء الوثائق اللازمة التي تغطي السياسات العامة، الأهداف، الإجراءات، والتعليمات التي تنظم عمل النظام الإداري",
                    "   • يمكن أن يكون النظام الإداري مستقلًا أو جزءًا من نظام إدارة شامل",
                    "   • تشمل الوثائق: السياسات العامة، الأهداف، الإجراءات والتعليمات، النماذج، النطاق",
                    "2. إصدار الوثائق:",
                    "   • يجب إصدار الوثائق بشكل واضح وسهل الوصول إليها من قبل المعنيين داخل الجهة",
                    "   • يجب أن يتم مراجعة الوثائق بانتظام للتأكد من أنها محدثة ومتوافقة مع المعايير الحالية",
                    "3. مراجعة الوثائق وتحديثها:",
                    "   • يجب مراجعة الوثائق بشكل دوري لضمان توافقها مع التغييرات في الأنظمة أو القوانين ذات الصلة",
                    "   • عند الحاجة إلى إجراء أي تعديلات، يجب أن يتم تحديث الوثائق وتوزيعها على المعنيين",
                    "4. إدارة الوثائق:",
                    "   • يجب الاحتفاظ بنسخ من الوثائق في مكان آمن لضمان الوصول إليها عند الحاجة",
                    "   • يجب توثيق جميع التعديلات والإصدارات للوثائق"
                ],
                "النماذج": [
                    "QF-10-02-01-01: سجل وثائق نظام الإدارة",
                    "QF-10-02-01-02: سجل مراجعة الوثائق", 
                    "QF-10-02-01-03: نموذج تحديث الوثائق"
                ],
                "المراجعة والتحديث": "يجب مراجعة الوثائق المتعلقة بنظام الإدارة سنويًا أو عند حدوث تغييرات كبيرة في العمليات أو المعايير الدولية لضمان استمرارية فعاليتها"
            },
            "QP-10-02-02: ضبط الوثائق": {
                "الغرض": "ضمان إنشاء، مراجعة، توزيع، ومراقبة الوثائق المتعلقة بنظام إدارة الاعتماد بطريقة منظمة، مع التأكد من أن كل إصدار ساري من الوثائق متاح للموظفين المعنيين، وحفظ نسخ مؤرشفة من الوثائق القديمة",
                "مجال التطبيق": "يشمل هذا الإجراء جميع الوثائق المتعلقة بنظام الإدارة في جهة الاعتماد، بما في ذلك السياسات، الإجراءات، التعليمات، النماذج، والنطاقات",
                "التعاريف": [
                    "الوثيقة: أي سجل مكتوب أو إلكتروني يحتوي على معلومات رسمية تتعلق بأنشطة جهة الاعتماد، مثل السياسات، الإجراءات، النماذج، وأي مواد ذات صلة",
                    "ضبط الوثائق: العملية التي تشمل إنشاء، مراجعة، توزيع، مراقبة، وتخزين الوثائق بطريقة تضمن توفر النسخة السارية والمحدثة منها للموظفين المعنيين وضمان الحفاظ على النسخ القديمة لأغراض الأرشفة",
                    "الإصدار: النسخة المعتمدة والموثقة من الوثيقة، مع تحديد تاريخ الإصدار وتحديد ما إذا كانت وثيقة جديدة أو مراجعة لوثيقة سابقة",
                    "السجل: أي وثيقة تحتوي على معلومات تدعم أنشطة جهة الاعتماد، مثل سجلات الامتحانات، سجلات التدقيق، أو أي مستند يتعلق بمراجعة أو تقييم الأنشطة",
                    "التوزيع: العملية التي تضمن وصول الوثائق إلى الموظفين المعنيين أو الأطراف الأخرى ذات الصلة داخل جهة الاعتماد",
                    "المراجعة: فحص الوثائق لضمان موافقتها مع المعايير، الأنظمة، أو الإجراءات التي يتم تنفيذها، والتأكد من أنها محدثة وصحيحة",
                    "الأرشفة: عملية حفظ النسخ القديمة أو غير السارية من الوثائق لتكون متاحة للاستخدام المستقبلي أو للرجوع إليها عند الحاجة"
                ],
                "المسؤوليات": [
                    ("مدير الجودة", "مسؤول عن إنشاء ومراجعة الوثائق وضمان توثيقها بشكل دقيق وفقًا لمتطلبات النظام"),
                    ("الموظفون المعنيون", "مسؤولون عن استخدام الوثائق المحدثة والالتزام بالإجراءات المعتمدة"),
                    ("الموظفون الإداريون", "مسؤولون عن توزيع الوثائق وتخزين النسخ القديمة بشكل مناسب")
                ],
                "الإجراءات": [
                    "1. إنشاء الوثائق:",
                    "   • تُنشأ الوثائق بناءً على حاجة جهة الاعتماد إلى مستندات تدعم نظام الإدارة وتحقيق الأهداف",
                    "   • يتم تحديد المسؤول عن كل وثيقة لتوضيح المهام والأدوار المتعلقة بها",
                    "   • تُراجع الوثائق قبل نشرها من قبل الجهة المسؤولة لضمان مطابقتها لمتطلبات الاعتماد",
                    "2. مراجعة الوثائق:",
                    "   • تتم مراجعة الوثائق بشكل دوري، ويجب أن تجرى المراجعات على الأقل مرة واحدة سنويًا",
                    "   • تُسجل جميع التعديلات والتحديثات التي تطرأ على الوثائق",
                    "   • يجب أن يوقع المسؤولون على الوثائق المعدلة أو المحدثة لضمان الموافقة",
                    "3. توزيع الوثائق:",
                    "   • يتم توزيع النسخة السارية من الوثائق على الموظفين المعنيين، سواء كانت النسخة إلكترونية أو ورقية",
                    "   • يتم التأكد من أن جميع الموظفين الذين يحتاجون إلى الوثائق قد حصلوا على النسخ المناسبة",
                    "   • تُراقب عملية توزيع الوثائق لضمان توزيع النسخ الصحيحة في الوقت المناسب",
                    "4. مراقبة الوثائق:",
                    "   • يجب أن يتم التأكد من أن الوثائق الموزعة هي النسخة السارية، ولا يتم استخدام أي نسخ قديمة",
                    "   • تتم المراقبة المستمرة عبر نظام إدارة الوثائق للتأكد من تحديث كافة الوثائق والملفات وفقًا للمعايير",
                    "5. حفظ الوثائق القديمة:",
                    "   • تُحفظ النسخ المؤرشفة من الوثائق القديمة في مكان آمن، حيث يُمكن الوصول إليها عند الحاجة",
                    "   • يتم تخزين الوثائق القديمة بطريقة تمنع ضياعها أو تلفها، مع تحديد المدة الزمنية لحفظها وفقًا للسياسات المعتمدة"
                ],
                "النماذج": [
                    "QF-10-02-02-01: نموذج مراجعة الوثائق",
                    "QF-10-02-02-02: نموذج توزيع الوثائق",
                    "QF-10-02-02-03: نموذج حفظ الوثائق المؤرشفة"
                ],
                "المراجعة والتحديث": "يجب أن يخضع هذا الإجراء للمراجعة السنوية للتأكد من فعاليته وملاءمته لاحتياجات الجهة"
            },
            "QP-10-02-03: ضبط السجلات": {
                "الغرض": "تحديد نوع السجلات المطلوبة، وضمان حفظها بشكل آمن، مع تأمين السجلات ضد الضياع أو التعديل وضمان سهولة استرجاعها عند الحاجة",
                "مجال التطبيق": "يشمل هذا الإجراء جميع السجلات المتعلقة بنظام إدارة الاعتماد، بما في ذلك السجلات الإدارية، التقييمات، الامتحانات، والقرارات، وكذلك السجلات المتعلقة بالموظفين والمتقدمين للاعتماد",
                "التعاريف": [
                    "السجل: أي مستند يحتوي على معلومات ثابتة ودائمة تتعلق بأنشطة جهة الاعتماد. تشمل السجلات كل من البيانات الورقية والإلكترونية التي تُستخدم لتوثيق الأحداث أو القرارات أو الأنشطة التي تم تنفيذها",
                    "ضبط السجلات: العملية التي تشمل تحديد، توثيق، وتأمين السجلات ضد الضياع أو التعديل غير المصرح به، بالإضافة إلى ضمان سهولة الوصول إليها واستخراجها عند الحاجة",
                    "حفظ السجلات: عملية الحفاظ على السجلات لفترة زمنية محددة وفقًا للمتطلبات القانونية أو التنظيمية أو وفقًا لاحتياجات البرنامج أو جهة الاعتماد",
                    "النسخ المؤرشفة: السجلات القديمة أو غير السارية التي تم حفظها بشكل منظم في أرشيف لتكون متاحة عند الحاجة أو للرجوع إليها في المستقبل",
                    "استرجاع السجلات: العملية التي تتيح الوصول إلى السجلات المخزنة بسهولة وفعالية عندما تكون هناك حاجة لاستخدامها، سواء لأغراض التوثيق أو التحقيق أو المراجعة",
                    "أمان السجلات: الإجراءات والتدابير المتخذة لضمان حماية السجلات من الفقدان أو التعديل غير المصرح به أو الوصول غير المصرح به",
                    "فترة الحفظ: الفترة الزمنية التي يجب خلالها حفظ السجلات وفقًا للمتطلبات القانونية أو التنظيمية أو أي متطلبات أخرى تتعلق ببرنامج الاعتماد"
                ],
                "المسؤوليات": [
                    ("مدير الجودة", "مسؤول عن تحديد نوع السجلات المطلوبة والإشراف على آلية حفظها وضمان استرجاعها بشكل فعال"),
                    ("الموظفون المعنيون", "مسؤولون عن الحفاظ على السجلات المتعلقة بأنشطتهم وضمان دقتها وموثوقيتها"),
                    ("الموظفون الإداريون", "مسؤولون عن تأمين السجلات وحفظها وفقًا للسياسات المعتمدة")
                ],
                "الإجراءات": [
                    "1. تحديد نوع السجلات المطلوبة:",
                    "   • يتم تحديد أنواع السجلات التي يجب حفظها بناءً على متطلبات نظام الاعتماد ومتطلبات البرنامج المعتمد",
                    "   • تشمل السجلات على سبيل المثال: طلبات التقديم، نتائج التقييمات، تقارير الامتحانات، قرارات الاعتماد، الشكاوى، والتظلمات",
                    "   • يتم تحديد المدة الزمنية اللازمة لحفظ السجلات وفقًا للمتطلبات القانونية أو السياسات الداخلية",
                    "2. حفظ السجلات:",
                    "   • يجب حفظ السجلات في بيئة آمنة لضمان عدم تلفها أو فقدانها",
                    "   • يتم استخدام تقنيات مثل النسخ الاحتياطي الإلكتروني أو الحفظ في أرشيفات مؤمنة لضمان حفظ السجلات بشكل آمن",
                    "   • يجب التأكد من أن السجلات المحفوظة لا يمكن تعديلها بشكل غير مصرح به",
                    "3. تأمين السجلات ضد الضياع أو التعديل:",
                    "   • يجب تطبيق إجراءات أمان على السجلات الإلكترونية والورقية، مثل التشفير، كلمات المرور، وحقوق الوصول المحددة",
                    "   • السجلات الورقية يتم تخزينها في خزائن أو أرشيفات مغلقة، بينما السجلات الإلكترونية يتم تخزينها في أنظمة محمية بكلمات مرور",
                    "   • يتم تدقيق السجلات بشكل دوري لضمان عدم تعرضها للتلف أو التعديل غير المصرح به",
                    "4. سهولة استرجاع السجلات:",
                    "   • يجب توفير آلية سهلة وفعالة لاسترجاع السجلات عند الحاجة",
                    "   • يتم استخدام أنظمة إدارة السجلات التي تسمح بالبحث السريع واسترجاع السجلات المطلوبة في الوقت المناسب",
                    "   • يتم تحديد مدة صلاحية السجلات وأسلوب التخلص منها عند انتهائها بما يتوافق مع متطلبات السياسة الداخلية أو القانونية",
                    "5. التخلص من السجلات القديمة:",
                    "   • يتم التخلص من السجلات التي انتهت مدة صلاحيتها بطريقة آمنة، سواء عن طريق التحطيم المادي للنسخ الورقية أو الحذف الآمن للنسخ الإلكترونية",
                    "   • يجب توثيق عملية التخلص من السجلات في السجلات الخاصة بذلك"
                ],
                "النماذج": [
                    "QF-10-02-03-01: نموذج تحديد السجلات وحفظها",
                    "QF-10-02-03-02: نموذج إجراء استرجاع السجلات",
                    "QF-10-02-03-03: نموذج إجراءات التخلص من السجلات"
                ],
                "المراجعة والتحديث": "يجب أن يخضع هذا الإجراء للمراجعة السنوية لضمان فعاليته وملاءمته للاحتياجات الحالية والمتطلبات القانونية"
            },
            "QP-10.1: إدارة المعلومات": {
                "الغرض": "ضمان إدارة فعالة وآمنة لجميع المعلومات المتعلقة بعملية الاعتماد",
                "مجال التطبيق": "جميع المعلومات والبيانات في نظام QB Academy",
                "التعاريف": [
                    "المعلومات السرية: البيانات التي تتطلب حماية خاصة",
                    "قاعدة البيانات: النظام المستخدم لتخزين واسترجاع المعلومات"
                ],
                "المسؤوليات": [
                    ("مدير تقنية المعلومات", "إدارة أنظمة المعلومات وضمان أمانها"),
                    ("مدير الجودة", "ضمان دقة واكتمال المعلومات")
                ],
                "الإجراءات": [
                    "تصنيف المعلومات حسب مستوى السرية",
                    "تحديد صلاحيات الوصول للمعلومات",
                    "إجراء نسخ احتياطية دورية للبيانات"
                ],
                "النماذج": ["QF-10-01-01: سجل الوصول للمعلومات", "QF-10-01-02: تقرير النسخ الاحتياطي"]
            },
            "QP-05.1: هيكل الإدارة": {
                "الغرض": "وضع الإجراءات التي تضمن تنظيم وإدارة أنشطة جهة الاعتماد بطريقة تحافظ على الحيادية، مع توثيق الهيكل التنظيمي وتحديد الواجبات والمسؤوليات والصلاحيات",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الأنشطة المتعلقة بإدارة جهة الاعتماد داخل QB Academy",
                "التعاريف": [
                    "الحيادية: الحفاظ على النزاهة في جميع الأنشطة دون التأثر بأي ضغوط خارجية أو تضارب في المصالح",
                    "الهيكل التنظيمي: التوزيع الرسمي للأدوار والواجبات داخل الجهة، بما في ذلك تحديد المسؤوليات والصلاحيات لكل وظيفة أو دور"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من أن هيكل الجهة يضمن الحيادية والشفافية في جميع الأنشطة، وتوثيق الهيكل التنظيمي بشكل دقيق"),
                    ("اللجان المعنية", "التعاون مع إدارة الاعتماد لتنفيذ الأنشطة وضمان الحيادية في جميع مراحل عملية الاعتماد"),
                    ("مدير الجودة", "متابعة تنفيذ الهيكل التنظيمي وضمان أن جميع الموظفين يدركون مسؤولياتهم وصلاحياتهم في إطار الحفاظ على الحيادية")
                ],
                "الإجراءات": [
                    "تنظيم الأنشطة لضمان الحيادية: يجب تنظيم جميع الأنشطة المتعلقة بالاعتماد بطريقة تضمن عدم تأثرها بأي ضغوط أو تداخل مصالح. يتم تحديد مسؤوليات وصلاحيات جميع الأفراد المشاركين في الأنشطة، بما في ذلك العاملين في الاعتماد",
                    "توثيق الهيكل التنظيمي: يجب على الجهة توثيق هيكلها التنظيمي بشكل رسمي في الوثائق المقررة. يشمل هذا التوثيق تحديد جميع الأقسام المعنية بأنشطة الاعتماد، مع الإشارة إلى الواجبات والمسؤوليات والصلاحيات الخاصة بكل إدارة أو فرد",
                    "تحديد الواجبات والمسؤوليات: يجب تحديد الواجبات والمسؤوليات لكل من الإدارة (اتخاذ القرارات الاستراتيجية وتوفير التوجيه العام)، والعاملين في الاعتماد (تنفيذ الأنشطة الفنية المتعلقة بالاعتماد)، واللجان (القيام بدور استشاري أو فني في اتخاذ القرارات)",
                    "مراجعة الهيكل التنظيمي: يتم مراجعة الهيكل التنظيمي بشكل دوري لضمان توافقه مع المتطلبات القانونية ومعايير الجودة الخاصة بالاعتماد"
                ],
                "المراجعة والتحديث": "يتم مراجعة وتحديث الهيكل التنظيمي والإجراءات المتعلقة به بشكل دوري لضمان استمرار توافقها مع المتطلبات التنظيمية ومعايير الاعتماد",
                "النماذج": [
                    "QF-05-01-01: الهيكل التنظيمي لجهة الاعتماد",
                    "QF-05-01-02: سجل توزيع الواجبات والمسؤوليات",
                    "QF-05-01-03: تقارير مراجعة الهيكل التنظيمي السنوي"
                ]
            },
            "QP-05.2: الفصل بين التدريب والاعتماد": {
                "الغرض": "وضع الضوابط والإجراءات التي تضمن عدم تعارض جهة الاعتماد في تقديم التدريب مع الأنشطة المتعلقة بالتقييم واتخاذ القرارات، مع ضمان فصل الأنشطة التدريبية عن عمليات الاعتماد.",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الأنشطة التدريبية المتعلقة بالتدريب المقدم من أو المرتبط بـ QB Academy.",
                "التعاريف": [
                    "التدريب المتعلق بالاعتماد: أي تدريب يُقدم بهدف تحضير الأفراد لاجتياز الاختبارات أو تحسين مهاراتهم المتعلقة بعملية الاعتماد.",
                    "التدريب العام: التدريب الذي لا يهدف إلى التأثير المباشر على نتائج الاعتماد أو الاختبارات، ويكون متاحًا للجميع دون تخصيص لأغراض الاعتماد فقط."
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من الفصل الوظيفي بين الأنشطة التدريبية وأنشطة التقييم والقرار، مع ضمان عدم تأثير أي تدريب على نزاهة عملية الاعتماد."),
                    ("مدير التدريب", "إدارة وتنظيم الأنشطة التدريبية مع الحفاظ على الحيادية وفصلها تمامًا عن عمليات التقييم والاعتماد."),
                    ("مدير الجودة", "التأكد من أن جميع الأنشطة التدريبية تتماشى مع معايير الحيادية ولا تؤثر على نتائج عمليات الاعتماد.")
                ],
                "الإجراءات": [
                    "عدم تقديم تدريب يتعلق بالاعتماد المباشر: لا يجوز لجهة الاعتماد تقديم أي تدريب خاص يؤدي إلى تحسين نتائج عملية الاعتماد المباشرة (مثل تدريب لتجاوز الاختبارات أو تحسين الأداء في تقييمات الاعتماد). ومع ذلك، يجوز تقديم التدريب العام الذي لا يؤثر على عملية الاعتماد.",
                    "فصل الأنشطة التدريبية عن عمليات التقييم: إذا كانت الجهة تقدم تدريبًا أو تتعاون مع جهة تدريب، يجب أن يكون هناك فصل وظيفي وهيكلي واضح بين الأنشطة التدريبية والأنشطة المتعلقة بالتقييم واتخاذ القرارات. هذا الفصل يهدف إلى ضمان أن التدريب لا يؤثر على قرارات الاعتماد أو التقييم.",
                    "ضمان الحيادية في التدريب: يجب أن تتأكد الجهة من أن التدريب الذي يتم تنظيمه أو تقديمه لا يسبب أي تضارب في المصالح أو تفضيل غير عادل في عمليات الاعتماد."
                ],
                "المراجعة والتحديث": "يتم مراجعة وتحديث هذا الإجراء سنويًا لضمان توافقه مع المتطلبات القانونية ومعايير الاعتماد، مع التأكد من استمرار الفصل بين الأنشطة التدريبية وعمليات التقييم والقرار",
                "النماذج": [
                    "QF-05-02-01: سجل الأنشطة التدريبية المقدمة",
                    "QF-05-02-02: تقرير فصل الأنشطة التدريبية عن التقييم",
                    "QF-05-02-03: سجل مراجعة الحيادية في التدريب"
                ]
            },
            "QP-06.1: كفاءة الأفراد": {
                "الغرض": "وضع الإجراءات التي تضمن وجود عدد كافٍ من الأفراد المؤهلين والمدربين لتنفيذ أنشطة الاعتماد بكفاءة، مع التأكد من توثيق المؤهلات المطلوبة والاهتمام بالتطوير المهني المستمر للأفراد.",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الأفراد المعنيين بأنشطة الاعتماد داخل QB Academy.",
                "التعاريف": [
                    "المؤهلات: المعرفة والمهارات والقدرات اللازمة لتنفيذ أنشطة الاعتماد بكفاءة.",
                    "التطوير المهنى المستمر: الأنشطة التي تهدف إلى تحسين كفاءة الأفراد وتحقيق التحديث المستمر في مجالات تخصصهم."
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من أن هناك عدد كافٍ من الأفراد المؤهلين لتنفيذ الأنشطة وفقًا للمعايير المعتمدة، مع مراجعة وتحديث المؤهلات المطلوبة بشكل دوري."),
                    ("مدير الجودة", "متابعة كفاءة الأفراد وتوفير برامج تدريبية ودورات تطويرية لضمان استمرارية كفاءتهم."),
                    ("قسم التدريب", "تنظيم البرامج التدريبية المناسبة للأفراد بما يتماشى مع احتياجات الاعتماد ومتطلبات التطوير المهني.")
                ],
                "الإجراءات": [
                    "تحديد المؤهلات المطلوبة: يجب تحديد المؤهلات والاختصاصات المطلوبة لجميع الأفراد المشاركين في أنشطة الاعتماد، بما في ذلك المتطلبات التعليمية والخبرات المهنية اللازمة.",
                    "توثيق المؤهلات: يتم توثيق جميع المؤهلات المطلوبة للأفراد المعنيين بأنشطة الاعتماد، وذلك في سجلات مخصصة تضمن دقة المعلومات وسهولة الوصول إليها.",
                    "توفير التدريب المناسب: يجب أن يخضع الأفراد المعنيون بأنشطة الاعتماد إلى برامج تدريبية منتظمة تضمن تعزيز كفاءتهم وقدرتهم على تنفيذ الأنشطة بكفاءة، بما في ذلك تدريب على التقييم والاختبار وفهم سياسات الاعتماد.",
                    "مراجعة الكفاءة المهنية: يتم إجراء مراجعات دورية لكفاءة الأفراد المشاركين في أنشطة الاعتماد، وتقييم أدائهم لضمان أنهم يواصلون التطور المهني المستمر. في حال كان هناك أي نقص في الكفاءة، يتم توفير التدريبات الإضافية.",
                    "التطوير المهنى المستمر: يتم تشجيع الأفراد على المشاركة في دورات وورش عمل مهنية تساهم في تطوير مهاراتهم ورفع كفاءتهم بما يتماشى مع متطلبات الاعتماد."
                ],
                "المراجعة والتحديث": "يتم مراجعة وتحديث هذا الإجراء سنويًا أو عندما تطرأ أي تغييرات على متطلبات التدريب أو التطوير المهني للأفراد المعنيين بأنشطة الاعتماد.",
                "النماذج": [
                    "QF-06-01-01: سجل المؤهلات المطلوبة للأفراد",
                    "QF-06-01-02: تقرير المراجعة الدورية لكفاءة الأفراد",
                    "QF-06-01-03: سجل برامج التدريب والتطوير المهنى"
                ]
            },
            "QP-06.3: الاستعانة بالأطراف الخارجية": {
                "الغرض": "تنظيم وتوثيق عملية الاستعانة بالأطراف الخارجية لضمان أن جميع القرارات الناتجة تظل تحت مسؤولية جهة الاعتماد، مع تحديد المعايير اللازمة لعقود التعاقد الخارجي، وتقييم ومراقبة الأداء بشكل دوري",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الحالات التي يتم فيها الاستعانة بأطراف خارجية، مثل المقيمين أو الممتحنين، لأداء أي نشاط يتعلق بعملية الاعتماد داخل QB Academy",
                "التعاريف": [
                    "التعاقد الخارجي (Outsourcing): الاستعانة بأطراف خارجية لأداء بعض الأنشطة أو المهام التي تعتبر جزءًا من عملية الاعتماد",
                    "المقيمين (Assessors): الأشخاص المعنيون بتقييم الأداء أو استيفاء المعايير خلال عمليات الاعتماد",
                    "الممتحنين (Examiners): الأشخاص الذين يتولون عملية إجراء الامتحانات أو التقييمات للمتقدمين"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "ضمان أن جميع قرارات الاعتماد تظل تحت مسؤولية جهة الاعتماد، وأن الأطراف الخارجية تمتثل للمعايير المحددة"),
                    ("مدير الجودة", "تحديد وتوثيق متطلبات التعاقد الخارجي، وضمان مراقبة الأداء وتقييم الأطراف الخارجية"),
                    ("قسم التعاقدات", "وضع العقود المناسبة مع الأطراف الخارجية، وضمان أنها تتضمن الشروط والمعايير المطلوبة"),
                    ("الأفراد المعنيون", "الامتثال للمتطلبات المحددة في العقود وضمان أن تكون الأنشطة المنفذة متوافقة مع سياسات الجودة")
                ],
                "الإجراءات": [
                    "مسؤولية جهة الاعتماد عن القرارات: في حالة الاستعانة بأطراف خارجية (مثل المقيمين أو الممتحنين)، تظل جهة الاعتماد مسؤولة بالكامل عن جميع القرارات الناتجة عن الأنشطة التي يقوم بها الأطراف الخارجية، بما في ذلك منح الشهادات أو اتخاذ أي قرار آخر متعلق بالاعتماد",
                    "قرارات الاعتماد: يجب أن يتم توقيع عقود واضحة مع الأطراف الخارجية، وتحديد الواجبات والمعايير التي يجب على الأطراف الخارجية الالتزام بها. تشمل هذه العقود: وصف دقيق للمهام التي سيتم تنفيذها، معايير الأداء المطلوبة، التزام الأطراف الخارجية بالحيادية واستقلالية قراراتهم، شروط التعامل مع تضارب المصالح",
                    "تقييم ومراقبة الأداء: يجب أن تقوم جهة الاعتماد بتقييم ومراقبة أداء الأطراف الخارجية بشكل دوري لضمان استيفائهم لجميع المتطلبات المحددة في العقد. ويشمل ذلك: مراقبة جودة الخدمات المقدمة، التأكد من أن الأطراف الخارجية يلتزمون بالمعايير المهنية والأخلاقية، إجراء مراجعات دورية لأداء الأطراف الخارجية لضمان استمرارية التوافق مع المعايير",
                    "إجراءات التعامل مع الأداء غير المقبول: في حال تم اكتشاف أن أحد الأطراف الخارجية لا يفي بالمتطلبات المحددة أو لا يلتزم بالمعايير المتفق عليها، يجب على جهة الاعتماد اتخاذ الإجراءات التصحيحية المناسبة، بما في ذلك إعادة التقييم أو حتى إنهاء التعاقد"
                ],
                "المراجعة والتحديث": "يتم مراجعة وتحديث هذا الإجراء سنويًا أو عندما تطرأ أي تغييرات تتعلق بالتعاقدات أو الاستعانة بالأطراف الخارجية لضمان توافقه مع المعايير المحددة والمتطلبات التنظيمية",
                "النماذج": ["QF-06-03-01: نموذج عقد التعاقد مع الأطراف الخارجية", "QF-06-03-02: سجل تقييم أداء الأطراف الخارجية", "QF-06-03-03: تقرير مراقبة الأداء والتقييم الدوري", "QF-06-03-04: نموذج تقييم تضارب المصالح مع الأطراف الخارجية"]
            },
            
            "QP-06.4: الموارد المادية والتقنية": {
                "الغرض": "تحديد وتوثيق الموارد المادية والتقنية اللازمة لتطبيق برنامج الاعتماد وضمان توفر بيئة آمنة وعادلة لجميع المتقدمين",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الموارد اللازمة لتطبيق برنامج الاعتماد، بما في ذلك قاعات الامتحانات، تجهيزات الحاسب، أدوات التقييم، وضمان بيئة آمنة وعادلة للمتقدمين",
                "التعاريف": [
                    "الموارد المادية: تشمل أي معدات أو أجهزة أو مواد ضرورية لدعم الأنشطة المتعلقة بالاعتماد، مثل قاعات الامتحانات وأدوات التقييم",
                    "الموارد التقنية: تشمل أنظمة الحاسوب والبرمجيات المستخدمة في التقييم والتسجيل وإعداد الامتحانات",
                    "البيئة الآمنة والعادلة: بيئة تُحترم فيها حقوق المتقدمين وتُحافظ فيها على نزاهة الإجراءات والأنشطة"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "ضمان توفير كافة الموارد المادية والتقنية اللازمة لدعم برنامج الاعتماد"),
                    ("مدير الجودة", "التأكد من أن جميع الموارد المادية والتقنية متوفرة وأن بيئة الامتحانات آمنة وعادلة"),
                    ("الفريق التقنى", "توفير وصيانة الأنظمة التقنية المتعلقة بالاعتماد"),
                    ("الفريق الإدارى", "توفير وتجهيز قاعات الامتحانات والتأكد من ملاءمتها للمتطلبات")
                ],
                "الإجراءات": [
                    "توفير الموارد المادية: يجب أن تتوفر جميع الموارد المادية المطلوبة لتطبيق برنامج الاعتماد، بما في ذلك: قاعات الامتحانات: يجب أن تكون القاعات مجهزة بالكامل لاستقبال المتقدمين للاختبارات، مع توفير الظروف المناسبة التي تضمن سير الامتحانات بسلام. أدوات التقييم: يجب توفير الأدوات والمعدات اللازمة لتنفيذ التقييمات، سواء كانت إلكترونية أو ورقية، لضمان التقييم العادل والدقيق",
                    "توفير الموارد التقنية: يجب أن تكون هناك تجهيزات حاسوبية متوافقة مع متطلبات التقييم والامتحانات. يجب أن تشمل هذه التجهيزات: أنظمة حاسوبية قادرة على إدارة الاختبارات وتحليل النتائج، برمجيات متخصصة لتسهيل عمليات التقييم وتسجيل النتائج، ضمان أن الأنظمة التقنية توفر أمانًا وحماية للبيانات",
                    "ضمان بيئة آمنة وعادلة: يجب أن تضمن الجهة بيئة آمنة لجميع المتقدمين للاعتماد، تتضمن: تأكيد سلامة قاعات الامتحانات وحمايتها من أي اختراقات قد تؤثر على نزاهة الامتحانات، ضمان توفر جميع الموارد المطلوبة بشكل متساوٍ للجميع، دون تمييز، تخصيص فريق عمل مدرب للتعامل مع أي مشكلات قد تواجه المتقدمين أثناء الامتحانات",
                    "مراجعة وتقييم الموارد: يجب إجراء مراجعة دورية للموارد المادية والتقنية المستخدمة في عملية الاعتماد. في حال وجود أي نقص أو تحديثات ضرورية، يجب أن يتم تزويد الجهات المعنية بالموارد الجديدة أو المعدلة"
                ],
                "المراجعة والتحديث": "يتم مراجعة هذا الإجراء بشكل دوري لضمان التوافق مع المعايير والاحتياجات الفعلية للبرنامج، وذلك وفقًا لأي تعديلات تطرأ على الموارد أو أنظمة الاعتماد",
                "النماذج": ["QF-06-04-01: نموذج تجهيز قاعات الامتحانات", "QF-06-04-02: سجل استخدام الموارد المادية والتقنية", "QF-06-04-03: تقرير مراجعة بيئة الامتحانات", "QF-06-04-04: تقرير تقييم الموارد التقنية"]
            },
            
            # إجراءات القسم 7: أنظمة المعلومات
            "QP-07.1: إدارة طلبات الامتحان ونتائج التقييم": {
                "الغرض": "تحديد وضمان الاحتفاظ بسجلات دقيقة وآمنة لجميع المتقدمين للاعتماد، المرشحين، والأشخاص المعتمدين، بما يضمن سرية المعلومات وتوافرها عند الحاجة وفقاً للمتطلبات القانونية والتعليمات الخاصة بالبرنامج.",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع السجلات المتعلقة بالمتقدمين للاعتماد، المرشحين، والأشخاص المعتمدين، بما في ذلك طلبات التقديم، نتائج التقييمات، قرارات الاعتماد، الشكاوى، والتظلمات.",
                "التعاريف": [
                    "السجلات: تشمل جميع المعلومات المدونة أو الرقمية المتعلقة بالتقديم، التقييم، الاعتماد، والشكاوى أو التظلمات.",
                    "السرية: حماية السجلات من الوصول غير المصرح به وضمان الوصول إليها فقط للأشخاص المصرح لهم."
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "ضمان تطبيق هذا الإجراء بشكل كامل، وضمان الامتثال للمتطلبات القانونية والتعليمات الخاصة بالبرنامج."),
                    ("مدير الجودة", "متابعة حفظ السجلات وضمان دقتها وسريتها، واتخاذ الإجراءات المناسبة في حال حدوث أي خرق للسرية."),
                    ("الفريق الإداري", "تحديث السجلات بشكل مستمر، وضمان توفرها للأشخاص المصرح لهم فقط.")
                ],
                "الإجراءات": [
                    "حفظ السجلات: يجب على الجهة الاحتفاظ بسجلات دقيقة وكافية تشمل: طلبات التقديم (جميع المعلومات الخاصة بالمتقدمين للاعتماد)، نتائج التقييمات والامتحانات (جميع التقييمات التي تم إجراؤها على المتقدمين)، قرارات الاعتماد (بما في ذلك منح الشهادات، تجديد الاعتماد، أو سحبها)، معلومات التجديد أو السحب أو التجميد (كافة البيانات المتعلقة بحالة الاعتماد)، أية شكاوى أو تظلمات أو إجراءات تأديبية (توثيق جميع الشكاوى أو التظلمات التي تم تقديمها).",
                    "السرية: يجب ضمان سرية جميع السجلات وعدم السماح بالوصول إليها إلا للأشخاص المصرح لهم. يتم تحديد الأشخاص المصرح لهم وفقاً للوظائف المسؤولة عن إدارة عملية الاعتماد.",
                    "تحديد مدة حفظ السجلات: يجب تحديد مدة حفظ السجلات بناءً على: المتطلبات القانونية (يجب مراعاة أي قوانين أو لوائح تتطلب الحفاظ على السجلات لمدة محددة)، تعليمات البرنامج (يجب أن تلتزم الجهة بمدة حفظ السجلات التي يحددها البرنامج أو السياسات الداخلية).",
                    "مراجعة السجلات: يجب إجراء مراجعة دورية للسجلات للتحقق من دقتها وحداثتها. في حال وجود أخطاء أو تحديثات، يجب إجراء التصحيحات اللازمة.",
                    "إتلاف السجلات: عند انتهاء مدة الاحتفاظ بالسجلات، يجب إتلاف السجلات وفقاً لإجراءات آمنة تضمن عدم تسريب أي معلومات سرية."
                ],
                "المراجعة والتحديث": "يتم مراجعة هذا الإجراء بشكل دوري لضمان توافقه مع المتطلبات القانونية وتعليمات البرنامج، وضمان استمرارية سرية السجلات.",
                "النماذج": ["QF-07-01-01: نموذج طلب التقديم للامتحان", "QF-07-01-02: سجل نتائج التقييمات والامتحانات", "QF-07-01-03: سجل قرارات الاعتماد", "QF-07-01-04: تقرير شكاوى وتظلمات", "QF-07-01-05: تقرير إتلاف السجلات"]
            },
            
            "QP-07.2: إدارة معلومات البرنامج": {
                "الغرض": "تحديد الإجراءات الخاصة بتوفير المعلومات العامة المتعلقة ببرنامج الاعتماد للجمهور، وضمان أن تكون هذه المعلومات حديثة، دقيقة، ومتاحة بسهولة دون الحاجة إلى طلب خاص",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع المعلومات التي تقدمها جهة الاعتماد للجمهور حول برنامج الاعتماد، بما في ذلك أهداف البرنامج، خطوات التقديم، إجراءات التقييم والاختبار، متطلبات الأهلية، واستخدام الشهادة والعلامات",
                "التعاريف": [
                    "المعلومات العامة: تشمل أي معلومات يقدمها جهة الاعتماد للجمهور بشكل شفاف وواضح، دون الحاجة إلى طلب خاص، بما في ذلك على سبيل المثال، معلومات عن الأهداف، الإجراءات، المتطلبات، والشهادات",
                    "الشهادة والعلامات: الوثائق أو العلامات التي تُمنح للمرشحين المعتمدين بعد اجتياز عملية التقييم بنجاح"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "ضمان أن المعلومات المقدمة للجمهور متوافقة مع معايير الجودة وتتوفر بشكل واضح ودقيق"),
                    ("مدير الجودة", "متابعة تحديث وتوزيع المعلومات العامة وضمان أن تكون متاحة عبر القنوات المناسبة"),
                    ("فريق الدعم", "تقديم المساعدة في الإجابة على استفسارات الجمهور حول برنامج الاعتماد")
                ],
                "الإجراءات": [
                    "تحديد المعلومات العامة: يجب على جهة الاعتماد توفير المعلومات التالية للجمهور: أهداف برنامج الاعتماد (يجب أن تكون الأهداف واضحة ومفهومة للجمهور، مع توضيح الغرض من الاعتماد وكيف يمكن للمتقدمين الاستفادة منه)، خطوات التقديم (يجب تحديد الإجراءات التي يجب أن يتبعها المتقدمون عند التقديم للبرنامج، بدءًا من تقديم الطلبات وحتى إتمام التقييم)، إجراءات التقييم والاختبار (يجب توضيح الإجراءات المتبعة في التقييم، بما في ذلك نوعية الاختبارات أو التقييمات التي يتم إجراؤها)، متطلبات الأهلية (يجب توضيح المعايير التي يجب أن يستوفيها المتقدمون للقبول في البرنامج)، استخدام الشهادة والعلامات (يجب أن يتم شرح كيفية استخدام الشهادات أو العلامات الصادرة عن جهة الاعتماد، بما في ذلك شروط استخدامها وأية قيود)",
                    "تحديث المعلومات: يجب التأكد من تحديث المعلومات بشكل دوري لضمان دقتها. أي تغييرات في البرنامج يجب أن تكون مدروسة وتنعكس على المعلومات المقدمة للجمهور",
                    "إتاحة المعلومات: يجب أن تكون هذه المعلومات متاحة بسهولة للجمهور دون الحاجة إلى طلب خاص. يمكن نشر هذه المعلومات على الموقع الإلكتروني للجهة، أو من خلال قنوات تواصل أخرى (مثل البريد الإلكتروني، أو المنشورات)",
                    "متابعة الاستفسارات: يجب أن تكون جهة الاعتماد قادرة على استقبال الاستفسارات المتعلقة بالمعلومات العامة وتقديم الردود السريعة والدقيقة"
                ],
                "المراجعة والتحديث": "يتم مراجعة وتحديث هذا الإجراء والمعلومات العامة بشكل دوري لضمان استمرارية الشفافية والدقة في تقديم المعلومات، وفقًا للتغيرات في البرنامج أو في المتطلبات القانونية",
                "النماذج": ["QF-07-02-01: نموذج معلومات عامة للبرنامج", "QF-07-02-02: تقرير تحديث المعلومات العامة"]
            },
            
            "QP-07.3: السرية وحماية البيانات الشخصية": {
                "الغرض": "ضمان حماية البيانات الشخصية لجميع المتعاملين مع الأكاديمية والحفاظ على سرية المعلومات الحساسة وفقاً للمعايير الدولية",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الموظفين والمتعاقدين والمتطوعين الذين يتعاملون مع البيانات الشخصية للطلاب والمتقدمين والعملاء",
                "التعاريف": [
                    "البيانات الشخصية: أي معلومات تتعلق بشخص محدد أو قابل للتحديد مثل الاسم، العنوان، رقم الهوية، الدرجات",
                    "السرية: التزام عدم الكشف عن المعلومات الحساسة لأطراف غير مخولة",
                    "اتفاقية السرية: وثيقة قانونية يوقعها الموظف أو المتعاقد للالتزام بحماية البيانات الشخصية",
                    "انتهاك البيانات: أي كشف غير مصرح به أو فقدان أو تدمير للبيانات الشخصية"
                ],
                "المسؤوليات": [
                    ("مسؤول حماية البيانات", "وضع وتطبيق سياسات حماية البيانات ومراقبة الالتزام بها"),
                    ("إدارة الموارد البشرية", "ضمان توقيع جميع الموظفين على اتفاقيات السرية وتدريبهم"),
                    ("جميع الموظفين", "الالتزام بحماية البيانات الشخصية وعدم الكشف عنها"),
                    ("مدير تقنية المعلومات", "تطبيق الحماية التقنية لقواعد البيانات والأنظمة")
                ],
                "الإجراءات": [
                    "توقيع اتفاقيات السرية: جميع الموظفين والمتعاقدين يجب أن يوقعوا على اتفاقية سرية قبل بدء العمل، وتتضمن التزامات محددة بحماية البيانات",
                    "تدريب الموظفين: يتم تنظيم دورات تدريبية سنوية حول أهمية حماية البيانات الشخصية والإجراءات الواجب اتباعها",
                    "تصنيف البيانات: جميع البيانات يتم تصنيفها حسب درجة السرية (عامة، محدودة، سرية، سرية جداً)",
                    "التحكم في الوصول: يتم منح صلاحيات الوصول للبيانات حسب الحاجة الوظيفية فقط مع مراجعة دورية للصلاحيات",
                    "مراجعة دورية للبيانات: يتم مراجعة البيانات الشخصية المحفوظة كل 6 أشهر لحذف البيانات غير الضرورية",
                    "الإبلاغ عن الانتهاكات: أي انتهاك للبيانات يجب الإبلاغ عنه فوراً لمسؤول حماية البيانات"
                ],
                "المراجعة والتحديث": "يتم مراجعة هذا الإجراء سنوياً أو عند صدور قوانين جديدة لحماية البيانات",
                "النماذج": ["QF-07-03-01: نموذج اتفاقية سرية للموظفين والمتعاقدين", "QF-07-03-02: تقرير مراجعة البيانات الشخصية"]
            },
            
            "QP-07.4: أمن المعلومات والحوادث الأمنية": {
                "الغرض": "تحديد إجراءات حماية أنظمة المعلومات من التهديدات الأمنية والتعامل مع الحوادث الأمنية بفعالية لضمان استمرارية العمل",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع أنظمة المعلومات والشبكات والأجهزة المستخدمة في الأكاديمية، وجميع أنواع الحوادث الأمنية المحتملة",
                "التعاريف": [
                    "أمن المعلومات: حماية المعلومات والأنظمة من الوصول غير المصرح به والتدمير والتعديل",
                    "الحادث الأمني: أي حدث قد يؤثر على سرية أو سلامة أو توفر المعلومات",
                    "التهديد الأمني: أي عامل محتمل قد يتسبب في ضرر لأنظمة المعلومات",
                    "خطة الاستجابة للحوادث: الإجراءات المحددة للتعامل مع الحوادث الأمنية عند حدوثها"
                ],
                "المسؤوليات": [
                    ("مسؤول أمن المعلومات", "وضع وتطبيق سياسات أمن المعلومات ومراقبة التهديدات"),
                    ("فريق الاستجابة للحوادث", "التعامل السريع مع الحوادث الأمنية عند حدوثها"),
                    ("مدير تقنية المعلومات", "تطبيق الحلول التقنية لحماية الأنظمة"),
                    ("جميع المستخدمين", "الالتزام بسياسات الأمن والإبلاغ عن أي مشاكل أمنية")
                ],
                "الإجراءات": [
                    "تقييم المخاطر الأمنية: يتم إجراء تقييم شامل للمخاطر الأمنية المحتملة كل 6 أشهر لتحديد نقاط الضعف والتهديدات",
                    "تطبيق إجراءات الحماية: يتم تطبيق حلول حماية متعددة المستويات مثل جدران الحماية، برامج مكافحة الفيروسات، والتشفير",
                    "مراقبة الأنظمة: يتم مراقبة الأنظمة على مدار الساعة للكشف المبكر عن أي أنشطة مشبوهة أو محاولات اختراق",
                    "الاستجابة للحوادث: عند حدوث حادث أمني، يتم تفعيل فريق الاستجابة فوراً لاحتواء الحادث وتقليل الأضرار",
                    "التوثيق والتحليل: جميع الحوادث الأمنية يتم توثيقها وتحليلها لاستخلاص الدروس المستفادة وتحسين الإجراءات",
                    "النسخ الاحتياطية: يتم عمل نسخ احتياطية دورية لجميع البيانات المهمة وحفظها في مواقع آمنة",
                    "التدريب والتوعية: يتم تنظيم دورات تدريبية للموظفين حول أمن المعلومات وكيفية تجنب التهديدات"
                ],
                "المراجعة والتحديث": "يتم مراجعة هذا الإجراء كل 6 أشهر أو عند حدوث تطورات جديدة في مجال أمن المعلومات",
                "النماذج": ["QF-07-04-01: نموذج تقرير عن الحوادث الأمنية", "QF-07-04-02: سجل أمن المعلومات"]
            },
            "QP-07.3: التقييم": {
                "الغرض": "تحديد إجراءات تقييم المتقدمين للاعتماد وضمان عدالة وشمولية عملية التقييم",
                "مجال التطبيق": "جميع عمليات التقييم للمتقدمين للحصول على شهادة الاعتماد",
                "التعاريف": [
                    "التقييم: عملية فحص وتحليل مهارات ومعرفة المتقدم للتأكد من استيفائه للمعايير المطلوبة",
                    "خطة التقييم: الوثيقة التي تحدد أساليب وطرق التقييم المستخدمة"
                ],
                "المسؤوليات": [
                    ("لجنة التقييم", "تنفيذ عملية التقييم وفقاً للخطة المعتمدة"),
                    ("المقيمون المتخصصون", "إجراء التقييم الفعلي وإعداد التقارير")
                ],
                "الإجراءات": [
                    "تحديد أساليب التقييم المناسبة لكل تخصص",
                    "إعداد جدولة التقييم وإشعار المتقدمين",
                    "تنفيذ عملية التقييم وتوثيق النتائج"
                ],
                "النماذج": ["QF-07-03-01: خطة التقييم", "QF-07-03-02: تقرير نتائج التقييم"]
            },
            "QP-07.4: القرار": {
                "الغرض": "تحديد إجراءات اتخاذ قرار الاعتماد بناءً على نتائج التقييم",
                "مجال التطبيق": "جميع قرارات الاعتماد التي تصدر عن QB Academy",
                "التعاريف": [
                    "قرار الاعتماد: القرار النهائي بمنح أو رفض شهادة الاعتماد للمتقدم"
                ],
                "المسؤوليات": [
                    ("لجنة القرارات", "اتخاذ القرار النهائي بشأن الاعتماد"),
                    ("إدارة الشهادات", "تنفيذ قرار اللجنة وإشعار المتقدم")
                ],
                "الإجراءات": [
                    "مراجعة تقارير التقييم",
                    "مناقشة الحالات الاستثنائية",
                    "اتخاذ القرار النهائي وتوثيقه"
                ],
                "النماذج": ["QF-07-04-01: محضر قرار الاعتماد", "QF-07-04-02: إشعار قرار الاعتماد"]
            },
            "QP-08.1: اعتماد المقيمين": {
                "الغرض": "تحديد متطلبات وجود برنامج اعتماد موثق يحدد معايير الكفاءة، وطرق التقييم، وشروط التجديد، والتعليق، والسحب، لضمان تنفيذ أنشطة الاعتماد بشكل دقيق ومتوافق مع المعايير.",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع عمليات الاعتماد التي تتم داخل جهة الاعتماد، سواء كانت تلك العمليات يتم تنفيذها داخليًا أو بمشاركة مع مالكي برامج اعتماد خارجيين.",
                "التعاريف": [
                    "برنامج الاعتماد: هو برنامج موثق يحدد بوضوح متطلبات الكفاءة التي يجب أن يحققها المتقدمون للبرنامج، وكيفية إجراء التقييمات، والشروط المرتبطة بالتجديد، والتعليق، والسحب للقرار المعتمد.",
                    "التجديد: عملية التأكد من استمرار أهلية الشخص المعتمد بعد فترة معينة.",
                    "التعليق: تعليق الشهادة أو الاعتماد لفترة زمنية معينة بسبب عدم الامتثال للمعايير.",
                    "السحب: إلغاء الاعتماد بشكل دائم."
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من وجود برنامج اعتماد موثق والتأكد من التزام كافة الأطراف به."),
                    ("مدير الجودة", "تطوير وتنفيذ وصيانة برنامج الاعتماد بشكل مستمر لضمان مطابقته مع المعايير واللوائح."),
                    ("فريق التقييم", "ضمان تطبيق البرنامج على جميع المتقدمين وفقًا لمتطلبات الكفاءة وطرق التقييم المحددة.")
                ],
                "الإجراءات": [
                    "إعداد البرنامج: يجب أن يتم تطوير برنامج الاعتماد بشكل موثق، ويشمل ما يلي: متطلبات الكفاءة، طرق التقييم، شروط التجديد والتعليق والسحب.",
                    "تطوير برنامج خارجى: إذا كان البرنامج معتمدًا من قبل جهة خارجية، يجب أن تلتزم جهة الاعتماد بكل شروط ومتطلبات البرنامج الخارجي.",
                    "الالتزام بالبرنامج: يجب أن تلتزم جميع الأطراف ذات الصلة، سواء داخليًا أو خارجيًا، بكل ما جاء في برنامج الاعتماد الموحد.",
                    "المراجعة والتحديث: يتم مراجعة برنامج الاعتماد بشكل دوري لضمان تطابقه مع المعايير والمتطلبات المتغيرة."
                ],
                "المراجعة والتحديث": "يتم مراجعة برنامج الاعتماد وتحديثه بانتظام لضمان استمراره في تلبيته لمتطلبات الاعتماد ومعايير الجودة.",
                "النماذج": ["QF-08-01-01: نموذج طلب اعتماد", "QF-08-01-02: سجل تقييم الاعتماد", "QF-08-01-03: سجل تجديد/تعليق/سحب الاعتماد"]
            },
            "QP-08.2: اعتماد المراكز": {
                "الغرض": "تحديد العناصر الأساسية التي يجب أن يتضمنها برنامج الاعتماد لضمان تنفيذ عمليات الاعتماد بشكل شامل وفعّال، بما في ذلك التقييمات والمعايير المحددة.",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع برامج الاعتماد التي تُنفذ داخل جهة الاعتماد، ويشمل أي برنامج يعتمد على مجموعة من المعايير المحددة.",
                "التعاريف": [
                    "برنامج الاعتماد: هو مجموعة من الإجراءات والمتطلبات التي تحدد المعايير اللازمة لاعتماد الأفراد في مجالات أو أنشطة معينة.",
                    "إعادة الاعتماد (Recertification): العملية التي يتم من خلالها تجديد الاعتماد بناءً على متطلبات جديدة أو متغيرة.",
                    "شهادات وعلامات: الوثائق أو الرموز التي تُمنح للأفراد المعتمدين لتوثيق نجاحهم في برنامج الاعتماد."
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من أن البرنامج يتضمن جميع العناصر المطلوبة بما يتماشى مع المعايير المعترف بها."),
                    ("مدير الجودة", "تطوير وتنفيذ البرنامج وفقًا للمعايير المحددة وضمان تغطيته لجميع العناصر الأساسية."),
                    ("فريق التقييم", "التأكد من أن التقييمات تتوافق مع المعايير الموضوعة وأن العناصر المدروسة تنفذ بشكل عادل وشفاف.")
                ],
                "الإجراءات": [
                    "مجال الاعتماد (Scope): يجب تحديد المجال أو النشاط الذي يغطيه الاعتماد بشكل واضح. يتم تحديده وفقًا للقطاع أو المجال الذي يتم فيه تطبيق برنامج الاعتماد.",
                    "الوظائف أو المهام: تحديد الوظائف أو المهام التي يجب أن يتمكن الشخص المعتمد من أدائها بنجاح بعد اجتيازه للاختبارات.",
                    "المتطلبات المسبقة: يجب تحديد المؤهلات أو الخبرات المطلوبة من المتقدمين للتقديم على البرنامج. هذه المتطلبات تشمل التعليم والخبرة العملية أو أي مؤهلات أخرى ذات صلة.",
                    "الكفاءات المحددة: يجب تحديد المهارات والمعرفة والسلوكيات المطلوبة من المرشح للبرنامج. ويجب أن تغطي هذه الكفاءات المجالات التي يتوقع أن يتمتع بها الشخص المعتمد.",
                    "طرق التقييم: يتم تحديد الطرق التي سيتم استخدامها لتقييم المتقدمين، مثل الامتحانات الكتابية، الشفوية، التطبيقية، أو التقييم العملي.",
                    "معايير النجاح: يجب تحديد النسب أو الدرجات المطلوبة لاجتياز الامتحانات. تتضمن المعايير التي يتم من خلالها تحديد إذا كان الشخص قد نجح أو فشل في اجتياز عملية التقييم.",
                    "شروط إعادة التقييم أو التقديم: يجب تحديد الشروط التي يجب على المتقدمين استيفائها لإعادة التقييم أو التقديم على البرنامج مرة أخرى في حالة عدم النجاح أو التجديد.",
                    "فترة صلاحية الشهادة: يجب أن تحدد فترة صلاحية الشهادة الممنوحة للمتقدمين الناجحين، والتي يتم تجديدها وفقًا لمتطلبات معينة أو بناءً على إعادة التقييم.",
                    "شروط إعادة الاعتماد (Recertification): يجب تحديد شروط إعادة الاعتماد، مثل إذا كان يجب على الشخص المعتمد إتمام برامج تدريبية إضافية أو اجتياز تقييمات جديدة لتجديد الاعتماد.",
                    "استخدام الشهادات والعلامات: يجب تحديد الشروط التي تحدد كيفية استخدام الشهادات والعلامات بعد منحها. على سبيل المثال، يتم تحديد متى يمكن للأفراد استخدام الشهادات بشكل قانوني وكيفية تقديمها للآخرين."
                ],
                "المراجعة والتحديث": "يجب تحديد الشروط التي تحدد كيفية استخدام الشهادات والعلامات بعد منحها. على سبيل المثال، يتم تحديد متى يمكن للأفراد استخدام الشهادات بشكل قانوني وكيفية تقديمها للآخرين.",
                "النماذج": ["QF-08-02-01: نموذج طلب اعتماد", "QF-08-02-02: سجل التقييم والاختبار", "QF-08-02-03: سجل تجديد أو سحب الاعتماد"]
            },
            "QP-08.3: تحديد الكفاءات": {
                "الغرض": "تحديد الكفاءات المطلوبة بشكل دقيق وواضح لضمان تأهيل الأفراد المعنيين بأنشطة الاعتماد للقيام بمهامهم بكفاءة وفعالية.",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الأفراد المشاركين في عمليات الاعتماد في الجهة، سواء كانوا موظفين أو مقيمين خارجيين.",
                "التعاريف": [
                    "الكفاءة (Competence): مجموعة من المهارات والمعرفة والسلوكيات التي يجب أن يمتلكها الشخص ليتمكن من أداء مهام معينة بنجاح.",
                    "القياس (Measurement): عملية تقييم مدى توافق الأداء الفعلي مع المعايير المحددة مسبقًا."
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من أن الكفاءات المطلوبة واضحة ومحددة بدقة، وأنها قابلة للقياس."),
                    ("مدير الجودة", "تطوير معايير الكفاءة وتحديد الطرق المناسبة لقياسها."),
                    ("فريق التقييم", "التأكد من أن الأفراد المتقدمين يحققون الكفاءات المطلوبة في البرنامج.")
                ],
                "الإجراءات": [
                    "تحديد الكفاءات المطلوبة: يجب أن تُحدد الكفاءات بشكل دقيق لكل برنامج اعتماد. يجب أن تتضمن الكفاءات المعرفة، المهارات، والسلوكيات التي يحتاجها الفرد لأداء المهام الخاصة به بكفاءة في مجال العمل أو المهنة المعنية.",
                    "القابلية للقياس: يجب أن تكون الكفاءات المحددة قابلة للقياس باستخدام أدوات تقييم دقيقة مثل الامتحانات الكتابية، الملاحظة العملية، أو تقييم الأداء. يجب أن تكون معايير القياس موضوعية وسهلة التفسير.",
                    "الارتباط بطبيعة العمل أو المهنة: يجب أن تكون الكفاءات المطلوبة مرتبطة بشكل مباشر بالمهام التي يتطلبها العمل أو المهنة. على سبيل المثال، في برامج الاعتماد التي تتعلق بالتكنولوجيا، يجب أن تشمل الكفاءات معرفة المهارات التقنية والأدوات المستخدمة في العمل.",
                    "مراجعة الكفاءات: يتم مراجعة الكفاءات بشكل دوري للتأكد من أنها تظل مناسبة للأداء المطلوب في سوق العمل أو المهنة. يمكن تحديث الكفاءات بناءً على احتياجات السوق أو التطورات في المجال.",
                    "طرق التقييم: يتم تحديد طرق تقييم الكفاءات بناءً على نوع العمل والمهنة. قد تشمل هذه الطرق: الامتحانات الكتابية والشفوية، التقييمات العملية، ملاحظات الأداء في بيئة العمل الفعلية، تقييمات متخصصة بناءً على المهارات المطلوبة."
                ],
                "المراجعة والتحديث": "يتم مراجعة معايير الكفاءة بانتظام وفقًا للتطورات في مجال العمل أو المهنة. أي تعديلات على الكفاءات يجب أن تُعتمد وتُنفذ بسرعة لضمان الاستمرار في تحقيق الجودة في عمليات الاعتماد.",
                "النماذج": ["QF-08-03-01: نموذج تحديد الكفاءات المطلوبة", "QF-08-03-02: سجل تقييم الكفاءات"]
            },
            "QP-08.4: المتطلبات الإضافية": {
                "الغرض": "توضيح كيفية دمج متطلبات إضافية في برامج الاعتماد، سواء كانت هذه المتطلبات مستمدة من التشريعات أو أصحاب المصلحة أو المعايير الصناعية أو المهنية.",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع برامج الاعتماد التي تُنفذ من قبل الجهة وتشمل متطلبات إضافية بخلاف المتطلبات الأساسية التي تم تحديدها في البرنامج.",
                "التعاريف": [
                    "المتطلبات الإضافية (Additional Requirements): الشروط أو المعايير التي يجب توافرها في برنامج الاعتماد والتي يتم تحديدها من قبل أطراف خارجية مثل الجهات التشريعية، أصحاب المصلحة، أو المعايير الصناعية.",
                    "أصحاب المصلحة (Stakeholders): الأفراد أو الكيانات التي يكون لها تأثير أو اهتمام في العملية أو نتائج برنامج الاعتماد."
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من أن المتطلبات الإضافية تُدمج في برامج الاعتماد بطريقة منظمة وتتماشى مع الأهداف الاستراتيجية للجهة."),
                    ("مدير الجودة", "متابعة تحديث المتطلبات الإضافية من الجهات التشريعية أو المعايير الصناعية وضمان التزام الجهة بها."),
                    ("فريق التقييم", "تقييم مدى التزام البرامج بهذه المتطلبات الإضافية أثناء تنفيذ أنشطة الاعتماد.")
                ],
                "الإجراءات": [
                    "تحديد المتطلبات الإضافية: يجب تحديد المتطلبات الإضافية التي قد تنطبق على البرنامج وفقًا لمصادرها. يمكن أن تشمل هذه: التشريعات الوطنية أو التنظيمية، متطلبات أصحاب المصلحة، المعايير الصناعية أو المهنية المعترف بها.",
                    "دمج المتطلبات فى البرنامج: يجب دمج هذه المتطلبات الإضافية في برنامج الاعتماد بحيث تصبح جزءًا من معايير التقييم وشروط الحصول على الشهادة. يجب أن تكون هذه المتطلبات واضحة في وثائق البرنامج.",
                    "مراجعة التحديثات: يجب أن تُراجع هذه المتطلبات بانتظام للتأكد من أنها محدثة ومتوافقة مع أي تغييرات في التشريعات أو المعايير الصناعية. يجب أن يتم التحديث بشكل دوري للتأكد من عدم وجود تضارب أو تباين بين المتطلبات المحلية والدولية.",
                    "التأكد من الالتزام: يجب أن يتم التأكد من أن جميع الأفراد المعنيين ببرنامج الاعتماد، بما في ذلك الموظفين والمقيمين الخارجيين، على دراية بالمتطلبات الإضافية ويتم تدريبهم على كيفية تطبيقها."
                ],
                "النماذج": ["QF-08-04-01: نموذج دمج المتطلبات الإضافية في برنامج الاعتماد", "QF-08-04-02: سجل المراجعة والتحديث للمتطلبات الإضافية"],
                "المراجعة والتحديث": "يتم مراجعة المتطلبات الإضافية بشكل دوري لضمان التزام الجهة بكافة التعديلات أو التحديثات الجديدة التي قد تطرأ نتيجة لتغييرات في التشريعات أو المتطلبات الصناعية. التحديثات يجب أن تُوثق وتُنفذ على الفور."
            },
            "QP-09-01: التقديم للبرامج": {
                "الغرض": "وضع خطوات واضحة وموثقة لعملية التقديم للبرامج المعتمدة وضمان جمع المعلومات اللازمة لتحديد أهلية المتقدمين",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع عمليات التقديم لبرامج الاعتماد التي تنفذها الجهة",
                "التعاريف": [
                    "نموذج الطلب (Application Form): النموذج الرسمي الذي يجب أن يُقدمه المتقدم للحصول على الاعتماد",
                    "التقييم (Evaluation): عملية فحص أهلية المتقدمين للبرنامج وفقًا للمتطلبات المحددة"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من أن عملية التقديم تمتثل للمتطلبات القانونية والتنظيمية الخاصة بالاعتماد"),
                    ("مدير الجودة", "متابعة تحسين عملية التقديم وضمان فعالية الإجراءات"),
                    ("فريق التقييم", "مراجعة وتقييم طلبات التقديم للتحقق من أهلية المتقدمين")
                ],
                "الإجراءات": [
                    "تقديم نموذج طلب رسمى: يجب على المتقدم تقديم نموذج طلب رسمي معبأ بالكامل، يتضمن البيانات الأساسية التي تتيح للجهة التحقق من أهليته",
                    "توضيح المتطلبات المسبقة بوضوح: يجب أن يتم توضيح المتطلبات المسبقة بوضوح في نموذج الطلب، مثل المؤهلات أو الخبرات التي يجب على المتقدم توافرها قبل التقديم",
                    "جمع بيانات المتقدم بشكل كافٍ: يجب جمع بيانات كافية من المتقدمين (مثل السيرة الذاتية، المؤهلات التعليمية، الخبرات المهنية) لضمان قدرتهم على الوفاء بمتطلبات البرنامج",
                    "توقيع المتقدم على اتفاقيات: يجب أن يوقع المتقدم على اتفاقيات تشمل ما يلي: الالتزام بمتطلبات البرنامج، القبول بآلية التقييم، الالتزام بالسلوك المهني المعتمد من قبل الجهة، تفويض جهة الاعتماد بجمع وتوثيق البيانات اللازمة لإتمام التقييم",
                    "التحقق من أهلية المتقدم: يجب على فريق التقييم التأكد من أن المتقدم يفي بكافة المتطلبات المسبقة وأن البيانات المقدمة دقيقة وكاملة",
                    "مراجعة وتوثيق الطلبات: يجب توثيق جميع طلبات التقديم والسجلات المتعلقة بها في النظام الخاص بالاعتماد لضمان توفير الشفافية والوضوح"
                ],
                "النماذج": [
                    "QF-09-01-01: نموذج طلب التقديم للبرنامج",
                    "QF-09-01-02: اتفاقية التزام المتقدم بالبرنامج",
                    "QF-09-01-03: سجل مراجعة طلبات التقديم"
                ],
                "المراجعة والتحديث": "يجب مراجعة عملية التقديم بانتظام لضمان فعاليتها وتحديثها وفقًا لأي تغييرات في متطلبات البرنامج أو التشريعات ذات الصلة"
            },
            "QP-09-02: إجراءات التقييم": {
                "الغرض": "توضيح الخطوات المتبعة لتقييم مدى مطابقة المتقدمين لمتطلبات البرنامج وضمان استخدام طرق تقييم منهجية وموضوعية",
                "مجال التطبيق": "يطبق هذا الإجراء على جميع عمليات التقييم التي تتم للمتقدمين ضمن برامج الاعتماد",
                "التعاريف": [
                    ("التقييم", "عملية قياس مدى تطابق المتقدم مع متطلبات البرنامج المعتمدة"),
                    ("المؤهلات السابقة", "المؤهلات الأكاديمية أو المهنية التي حصل عليها المتقدم قبل التقديم"),
                    ("الخبرة العملية", "الخبرات المهنية التي اكتسبها المتقدم في مجال العمل ذي الصلة")
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من وجود إطار منهجي وموضوعي لعمليات التقييم"),
                    ("مدير الجودة", "متابعة سير عمليات التقييم، وضمان تطبيقها وفقًا للمعايير المحددة"),
                    ("فريق التقييم", "إجراء التقييمات بناءً على معايير موضوعية وموثوقة، وضمان توثيق نتائج التقييم بوضوح")
                ],
                "الإجراءات": [
                    "تحليل المؤهلات السابقة: يجب على فريق التقييم التحقق من المؤهلات الأكاديمية أو المهنية التي قدمها المتقدم ومقارنتها مع المتطلبات المسبقة المحددة للبرنامج",
                    "تقييم الخبرة العملية: يتم تقييم الخبرة العملية للمتقدم بناءً على المعايير المحددة في البرنامج، لضمان أن لديه المهارات والخبرة اللازمة لأداء المهام المطلوبة في المجال المعتمد",
                    "إجراء الامتحانات أو التمارين العملية: يجب على جهة الاعتماد إجراء امتحانات (كتابية أو شفهية) أو تمارين عملية، أو استخدام المشاهدة المباشرة لتقييم كفاءة المتقدم بشكل دقيق",
                    "المنهجية فى التقييم: يجب أن تكون عمليات التقييم منظمة وقائمة على معايير محددة وواضحة، بحيث تضمن عدم وجود تحيز أو تأثيرات خارجية على نتائج التقييم",
                    "توثيق نتائج التقييم: يجب توثيق كافة نتائج التقييم بشكل دقيق وواضح، بحيث تكون قابلة للمراجعة من قبل الأطراف المعنية أو المراجعين"
                ],
                "النماذج": [
                    "QF-09-02-01: نموذج تقييم المؤهلات السابقة",
                    "QF-09-02-02: نموذج تقييم الخبرة العملية", 
                    "QF-09-02-03: نموذج تقييم الامتحانات والتمارين العملية",
                    "QF-09-02-04: سجل نتائج التقييم"
                ],
                "المراجعة والتحديث": "يجب مراجعة عملية التقييم بشكل دوري لتحديد أي مجالات لتحسينها وتحديثها وفقًا لأفضل الممارسات والمعايير الدولية"
            },
            "QP-09-03: إجراءات الامتحان": {
                "الغرض": "وضع الإجراءات اللازمة لتنظيم وإجراء امتحانات الاعتماد المهني وفقاً لمعايير ISO 17024:2012",
                "مجال التطبيق": "جميع امتحانات الاعتماد المهني المقدمة من QB Academy",
                "التعاريف": [
                    "امتحان الاعتماد: تقييم شامل للمعرفة والمهارات المطلوبة للحصول على الاعتماد المهني",
                    "مراقب الامتحان: الشخص المسؤول عن الإشراف على سير الامتحان وضمان سلامة العملية",
                    "بيئة الامتحان: المكان والظروف التي يُجرى فيها الامتحان",
                    "معايير الأداء: المستوى المطلوب من الأداء للنجاح في الامتحان"
                ],
                "المسؤوليات": [
                    ("مدير الامتحانات", "التخطيط العام وتنسيق جميع أنشطة الامتحان"),
                    ("مراقب الامتحان", "الإشراف على سير الامتحان وضمان الالتزام بالقوانين"),
                    ("منسق الامتحانات", "تحضير مواد الامتحان وتنظيم الجدولة"),
                    ("إدارة الجودة", "مراقبة جودة العملية وضمان الامتثال للمعايير"),
                    ("أخصائي تقني", "دعم الأنظمة التقنية المستخدمة في الامتحان")
                ],
                "الإجراءات": [
                    "1. التخطيط للامتحان:",
                    "• تحديد مواعيد الامتحانات وفقاً للجدول الزمني المعتمد",
                    "• حجز القاعات والمرافق اللازمة",
                    "• إعداد قوائم المتقدمين المؤهلين للامتحان",
                    "• تحضير أوراق الامتحان ومواد التقييم",
                    "",
                    "2. إعداد بيئة الامتحان:",
                    "• فحص المرافق والتأكد من صلاحيتها",
                    "• تجهيز الأدوات والمعدات المطلوبة",
                    "• تطبيق إجراءات الأمان والسلامة",
                    "• ضمان توفر ظروف مناسبة للامتحان",
                    "",
                    "3. إجراء الامتحان:",
                    "• التحقق من هوية المتقدمين",
                    "• توزيع أوراق الامتحان وفقاً للإجراءات المحددة",
                    "• مراقبة سير الامتحان وضمان النزاهة",
                    "• جمع أوراق الامتحان وتسليمها للتصحيح",
                    "",
                    "4. التقييم والنتائج:",
                    "• تصحيح أوراق الامتحان وفقاً لمعايير التقييم",
                    "• مراجعة النتائج والتأكد من دقتها",
                    "• إعداد تقارير الأداء الفردي والعام",
                    "• إعلان النتائج وفقاً للإجراءات المعتمدة"
                ],
                "النماذج": [
                    "QF-09-03-01: نموذج الامتحان",
                    "QF-09-03-02: سجل الامتحان", 
                    "QF-09-03-03: تقرير مراقبة الامتحان"
                ],
                "المراجعة والتحديث": "يجب مراجعة إجراءات الامتحان بشكل دوري لضمان فعاليتها وتحديثها وفقاً لأفضل الممارسات والمتطلبات الجديدة"
            },
            "QP-09-04: قرار الشهادة": {
                "الغرض": "توضيح الخطوات والإجراءات التي يتم من خلالها اتخاذ القرار بشأن منح الشهادات للمتقدمين بناءً على نتائج التقييم",
                "مجال التطبيق": "جميع قرارات منح الشهادات بناءً على التقييمات التي تتم ضمن برامج الاعتماد",
                "التعاريف": [
                    "القرار (Decision): الحكم النهائي بشأن منح أو رفض شهادة الاعتماد",
                    "التوثيق (Documentation): عملية تسجيل وتخزين جميع القرارات الصادرة المتعلقة بمنح الشهادات"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من أن قرارات الشهادات تُتخذ وفقاً للمعايير المحددة وأن الوثائق المتعلقة بها محفوظة"),
                    ("مدير الجودة", "ضمان تطبيق الإجراءات المتبعة في اتخاذ القرارات بشكل دقيق ومنظم"),
                    ("أعضاء اللجنة المعنية", "اتخاذ قرارات الشهادات بناءً على نتائج التقييم")
                ],
                "الإجراءات": [
                    "1. اتخاذ القرار:",
                    "• يجب أن يتم اتخاذ القرار بشأن الشهادة بواسطة أشخاص مختلفين عن المقيّمين أو المدربين",
                    "• يعتمد القرار فقط على نتائج التقييم التي تمت وفقاً للمعايير المحددة",
                    "",
                    "2. توثيق القرار:",
                    "• الموافقة: منح الشهادة بنجاح",
                    "• الرفض: عدم منح الشهادة بسبب فشل المتقدم في اجتياز التقييم",
                    "• التعليق: تعليق الشهادة لأسباب معينة مثل عدم اكتمال الوثائق أو انتهاك المعايير",
                    "",
                    "3. إصدار الشهادة:",
                    "• اسم الشخص: الاسم الكامل للمتقدم",
                    "• النطاق (Scope): مجال الاعتماد أو النشاط الذي يتمتع به الشخص",
                    "• تاريخ الإصدار والانتهاء: تاريخ إصدار الشهادة وتاريخ انتهائها",
                    "• رقم الشهادة أو المرجع: رقم فريد للشهادة يُستخدم لتوثيقها وتتبعها",
                    "",
                    "4. الاحتفاظ بالسجلات:",
                    "• بعد اتخاذ القرار، يتم إصدار الشهادة رسمياً عبر النظام المعتمد",
                    "• يجب على الجهة الاحتفاظ بنسخة من الشهادة في سجلاتها لأغراض المراجعة المستقبلية"
                ],
                "النماذج": [
                    "QF-09-04-01: نموذج قرار الشهادة",
                    "QF-09-04-02: سجل قرارات الشهادات",
                    "QF-09-04-03: شهادة الاعتماد"
                ],
                "المراجعة والتحديث": "يجب مراجعة الإجراءات المتبعة في اتخاذ القرار بشكل دوري لضمان التزامها بأفضل الممارسات ومعايير الجودة"
            },
            "QP-09-05: تعليق أو سحب الشهادة": {
                "الغرض": "توضيح الإجراءات والآليات المتبعة لتعليق أو سحب أو تقليص نطاق الشهادة في حال حدوث حالات غير مطابقة للمتطلبات أو المخالفات",
                "مجال التطبيق": "كافة الحالات التي تستدعي تعليق، سحب، أو تقليص نطاق الشهادات التي تم إصدارها من قبل الجهة",
                "التعاريف": [
                    "تعليق الشهادة (Suspension): تعليق صلاحية الشهادة لفترة معينة حتى يتم تصحيح الوضع",
                    "سحب الشهادة (Withdrawal): سحب الشهادة نهائياً بسبب عدم الالتزام أو مخالفات جسيمة",
                    "تقليص النطاق (Reduction of Scope): تقليص المجال الذي تم منح الشهادة فيه بشكل جزئي"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "مراجعة واتخاذ القرارات النهائية بشأن تعليق أو سحب الشهادة أو تقليص نطاقها"),
                    ("مدير الجودة", "الإشراف على تنفيذ الإجراءات الخاصة بتعليق أو سحب الشهادات وتوثيق كافة الإجراءات المتخذة"),
                    ("الجهات المعنية بالتقييم", "الإبلاغ عن حالات مخالفة قد تستدعي تعليق أو سحب الشهادة")
                ],
                "الإجراءات": [
                    "1. الأسباب الموجبة للتعليق أو السحب أو التقليص:",
                    "• عدم الالتزام المستمر بمتطلبات الاعتماد",
                    "• سوء استخدام الشهادة بطريقة غير قانونية أو غير أخلاقية",
                    "• طلب الشخص نفسه تعليق الشهادة أو تقليص نطاقها",
                    "• مخالفة أخلاقية أو قانونية تؤثر على نزاهة الشهادة",
                    "",
                    "2. الإجراءات:",
                    "• إعلام الشخص المعتمد بأي إجراء يتم اتخاذه مع ذكر الأسباب والتفاصيل",
                    "• إتاحة الفرصة للشخص المعتمد لتقديم اعتراض أو تظلم",
                    "• توثيق جميع الإجراءات بشكل كامل في سجلات الجهة",
                    "",
                    "3. آلية التواصل والتظلم:",
                    "• توفير قناة رسمية لتلقي التظلمات أو الاعتراضات",
                    "• دراسة التظلم بشكل عادل وشفاف واتخاذ القرار المناسب",
                    "• إبلاغ الشخص المعتمد بالقرار النهائي",
                    "",
                    "4. توثيق القرار:",
                    "• توثيق جميع قرارات التعليق أو السحب أو التقليص في سجل خاص",
                    "• إصدار إشعار رسمي للشخص المعتمد يوضح القرار المتخذ"
                ],
                "النماذج": [
                    "QF-09-05-01: نموذج قرار تعليق أو سحب أو تقليص النطاق",
                    "QF-09-05-02: سجل قرارات تعليق أو سحب الشهادات",
                    "QF-09-05-03: نموذج تظلم"
                ],
                "المراجعة والتحديث": "يجب مراجعة الإجراءات المتبعة في التعليق أو السحب أو التقليص بشكل دوري لضمان فعاليتها ومواءمتها مع المعايير المقررة"
            },
            "QP-09-06: إعادة الاعتماد": {
                "الغرض": "توضيح الإجراءات والآليات المتبعة لإعادة الاعتماد لضمان استمرار مطابقة الأشخاص المعتمدين للمتطلبات اللازمة للكفاءة",
                "مجال التطبيق": "يطبق هذا الإجراء على جميع الأشخاص المعتمدين الذين يحتاجون إلى إعادة الاعتماد بناءً على متطلبات البرنامج",
                "التعاريف": [
                    "إعادة الاعتماد (Recertification): عملية إعادة التقييم لضمان استمرار كفاءة الشخص المعتمد في أداء مهامه أو وظائفه بموجب البرنامج المعتمد",
                    "سجل الأداء المهنى (Professional Performance Record): توثيق مستمر لأداء الشخص المعتمد بعد الحصول على الشهادة"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "اعتماد وتنفيذ آليات إعادة الاعتماد بناءً على تحليل النتائج"),
                    ("مدير الجودة", "الإشراف على تنفيذ عمليات إعادة الاعتماد وضمان التوثيق السليم"),
                    ("الاشخاص المعتمدون", "التأكد من استيفاء المتطلبات اللازمة لإعادة الاعتماد وتقديم الوثائق المطلوبة")
                ],
                "الإجراءات": [
                    "1. متطلبات إعادة الاعتماد: يجب أن تتضمن عملية إعادة الاعتماد العناصر التالية:",
                    "• سجل الأداء المهني: يجب أن يقدّم الشخص المعتمد سجلًا يعكس أدائه المهني منذ الحصول على الشهادة",
                    "• حضور دورات تدريبية: يمكن أن يتطلب البرنامج حضور دورات تدريبية متخصصة لضمان تحديث الكفاءات",
                    "• إعادة الامتحان: قد يشمل البرنامج إعادة إجراء الامتحان أو اختبارات معينة لضمان استمرارية الكفاءة",
                    "• مزيج من المتطلبات: يمكن أن يتضمن البرنامج مزيجًا من المتطلبات السابقة بناءً على طبيعة الاعتماد",
                    "",
                    "2. آلية التقييم: يتم تقييم الأشخاص المعتمدين استنادًا إلى:",
                    "• نتائج الأداء المهني",
                    "• التقييمات التدريبية أو الامتحانات",
                    "• التحقق من استمرارية الالتزام بالمعايير المحددة",
                    "",
                    "3. الاجراءات المتبعة عند الفشل فى إعادة الاعتماد:",
                    "• في حال عدم استيفاء الشخص المعتمد لمتطلبات إعادة الاعتماد، يتم إبلاغه بالقرار مع توفير فرصة للتظلم أو التصحيح",
                    "• يتم اتخاذ القرار المناسب بناءً على عدم الالتزام بالمؤهلات المطلوبة",
                    "",
                    "4. توثيق القرار: يجب توثيق جميع القرارات المتعلقة بإعادة الاعتماد، بما في ذلك نتائج التقييم، التوصيات، وأي إجراءات تم اتخاذها"
                ],
                "النماذج": [
                    "QF-09-06-01: نموذج طلب إعادة الاعتماد",
                    "QF-09-06-02: سجل متابعة الأداء المهنى",
                    "QF-09-06-03: نموذج تقرير إعادة التقييم"
                ],
                "المراجعة والتحديث": "يجب مراجعة وتحليل عمليات إعادة الاعتماد بشكل دوري لضمان توافقها مع معايير الكفاءة المعتمدة والتوجهات الجديدة في البرنامج"
            },
            "QP-09-07: استخدام الشهادات والشعارات": {
                "الغرض": "توضيح الشروط والآليات المتعلقة باستخدام الشهادات والشعارات والعلامات المعتمدة من جهة الاعتماد، وضمان عدم استخدامها بطريقة مضللة أو غير مشروعة",
                "مجال التطبيق": "يطبق هذا الإجراء على جميع الأشخاص المعتمدين أو الجهات التي حصلت على الشهادات من QB Academy والذين لديهم الحق في استخدام الشهادات والشعارات أو العلامات المعتمدة",
                "التعاريف": [
                    "الشهادات المعتمدة (Certified Certificates): الوثائق التي تصدرها جهة الاعتماد وتثبت تأهيل الأفراد أو الكيانات",
                    "الشعار (Logo): العلامة البصرية الخاصة بالاعتماد التي تمثل الجهة المعتمدة",
                    "العلامات (Marks): الرموز أو الأيقونات التي تمثل الاعتماد والتي يجوز استخدامها وفقاً للمعايير"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "اعتماد السياسات الخاصة باستخدام الشهادات والعلامات وضمان التنفيذ السليم"),
                    ("الجهات المعتمدة", "الامتثال لشروط الاستخدام المنصوص عليها في هذا الإجراء"),
                    ("مدير الجودة", "متابعة تطبيق القواعد الخاصة باستخدام الشهادات والشعارات والعلامات")
                ],
                "الإجراءات": [
                    "1. شروط استخدام الشهادات والشعارات والعلامات:",
                    "• شروط الاستخدام: يجب أن يلتزم الأشخاص المعتمدون أو الجهات التي تحمل الشهادات بشروط استخدام الشعار والعلامات، والتي يتم توضيحها في المستندات التعاقدية أو الاتفاقيات",
                    "• عدم استخدام العلامات بطريقة مضللة: لا يجوز للأفراد أو الكيانات استخدام الشهادات أو الشعارات أو العلامات في أي سياق قد يوحي بوجود اعتماد غير مشمول بالشهادة أو في حالة عدم الامتثال للمعايير المحددة",
                    "",
                    "2. إجراءات التعامل مع إساءة الاستخدام:",
                    "• في حالة اكتشاف أي استخدام غير مشروع أو مضلل للعلامات أو الشهادات، يجب اتخاذ إجراءات فورية لضمان التصحيح أو السحب",
                    "• تشمل الإجراءات: الإنذار الكتابي، سحب الشهادة، أو اتخاذ إجراءات قانونية حسب الحاجة",
                    "",
                    "3. التوثيق والمراجعة:",
                    "• يجب توثيق أي حالة من حالات إساءة الاستخدام والإجراءات المتخذة بخصوصها",
                    "• يجب أن تتم مراجعة دائمة للتأكد من عدم حدوث إساءة استخدام للشهادات والشعارات والعلامات"
                ],
                "النماذج": [
                    "QF-09-07-01: نموذج اتفاقية استخدام الشهادات والشعارات",
                    "QF-09-07-02: تقرير حالة إساءة الاستخدام",
                    "QF-09-07-03: سجل مراجعة الاستخدام السليم للشهادات والعلامات"
                ],
                "المراجعة والتحديث": "يجب مراجعة وتحديث شروط استخدام الشهادات والشعارات والعلامات بشكل دوري لضمان توافقها مع معايير الاعتماد وتطورات السوق"
            },
            "QP-09-08: التظلمات": {
                "الغرض": "توضيح الإجراءات المتعلقة بتقديم التظلمات ضد القرارات المتخذة من قبل جهة الاعتماد وضمان أنها تتم بطريقة عادلة ونزيهة",
                "مجال التطبيق": "يطبق هذا الإجراء على جميع الأشخاص المعتمدين أو المتقدمين للاعتماد الذين يرغبون في تقديم تظلم ضد أي قرار تم اتخاذه من قبل جهة الاعتماد",
                "التعاريف": [
                    "التظلم (Appeal): اعتراض رسمي على قرار اتخذته جهة الاعتماد",
                    "اللجنة المستقلة (Independent Committee): لجنة مكونة من أفراد ليس لهم علاقة مباشرة بالقرار المعترض عليه، مهمتها النظر في التظلمات"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من وجود آلية تظلمات فعالة، وتوفير الموارد اللازمة لذلك"),
                    ("لجنة التظلمات", "فحص التظلمات بطريقة عادلة ومستقلة، واتخاذ القرار بناءً على المعايير المحددة"),
                    ("مدير الجودة", "التأكد من تطبيق الإجراء بشكل صحيح والالتزام بالمعايير")
                ],
                "الإجراءات": [
                    "1. تقديم التظلمات:",
                    "• يمكن لأي شخص معني بالقرار تقديم تظلم رسمي ضد أي قرار صادر من جهة الاعتماد",
                    "• يجب أن يتم تقديم التظلم في غضون [عدد الأيام] من تاريخ اتخاذ القرار",
                    "• يجب أن يتضمن التظلم أسباب الاعتراض والمستندات الداعمة",
                    "",
                    "2. مراجعة التظلمات:",
                    "• يتم تعيين لجنة مستقلة مكونة من أفراد لا علاقة لهم بالقرار الأصلي للنظر في التظلم",
                    "• يجب أن تلتزم اللجنة بالنزاهة والحيادية أثناء فحص التظلمات",
                    "",
                    "3. اتخاذ القرار:",
                    "• يجب أن تكون عملية اتخاذ القرار شفافة، ويتم اتخاذه بناءً على المراجعة الدقيقة لجميع الوثائق والحقائق",
                    "• يجب توثيق جميع القرارات التي تتعلق بالتظلمات، بما في ذلك قرارات القبول أو الرفض",
                    "",
                    "4. إبلاغ الأطراف:",
                    "• يجب إبلاغ الشخص الذي قدم التظلم بالقرار المتخذ في أقرب وقت ممكن وبطريقة رسمية",
                    "",
                    "5. توثيق التظلمات:",
                    "• يجب توثيق جميع التظلمات وقراراتها في سجل خاص ويتم الاحتفاظ بها للرجوع إليها عند الحاجة"
                ],
                "النماذج": [
                    "QF-09-08-01: نموذج تقديم التظلم",
                    "QF-09-08-02: سجل التظلمات والقرارات المتخذة",
                    "QF-09-08-03: تقرير لجنة التظلمات"
                ],
                "المراجعة والتحديث": "يجب مراجعة وتحديث إجراءات التظلمات بشكل دوري لضمان العدالة والنزاهة في التعامل مع جميع التظلمات"
            },
            "QP-09-09: الشكاوى": {
                "الغرض": "توضيح الإجراءات المتعلقة بتلقي ومعالجة الشكاوى المقدمة من المرشحين، الأشخاص المعتمدين، أو الأطراف المتأثرة وضمان أن تتم المعالجة بطريقة شفافة وعادلة",
                "مجال التطبيق": "يطبق هذا الإجراء على جميع الشكاوى المقدمة من أي طرف يتأثر بقرارات أو إجراءات جهة الاعتماد",
                "التعاريف": [
                    "الشكوى (Complaint): اعتراض رسمي على الخدمات المقدمة من جهة الاعتماد أو أي مشكلة أخرى تتعلق بالإجراءات",
                    "المتأثرون (Affected Parties): الأفراد أو الكيانات الذين يتأثرون بشكل مباشر أو غير مباشر بقرارات جهة الاعتماد"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من توفير آلية واضحة لمعالجة الشكاوى وضمان معالجتها في الوقت المناسب"),
                    ("مسؤول الشكاوى", "متابعة الشكاوى وتوثيق الإجراءات والنتائج"),
                    ("اللجنة المعنية", "فحص الشكاوى المعقدة أو التي تحتاج إلى تحقيق معمق")
                ],
                "الإجراءات": [
                    "1. تقديم الشكاوى:",
                    "• يجب على الأطراف المتأثرة تقديم شكوى رسمية عبر القنوات المخصصة (مثل نموذج الشكوى أو البريد الإلكتروني)",
                    "• يجب تقديم الشكوى في غضون [عدد الأيام] من حدوث المشكلة أو الحدث الذي أدى إليها",
                    "2. مراجعة الشكوى:",
                    "• يتم تعيين لجنة مستقلة مكونة من أفراد لا علاقة لهم بالقرار الأصلي للنظر في التظلم",
                    "• يجب أن تلتزم اللجنة بالنزاهة والحيادية أثناء فحص التظلمات",
                    "3. معالجة الشكوى:",
                    "• يتم اتخاذ الإجراءات اللازمة لمعالجة الشكوى بناءً على نوع المشكلة",
                    "• قد يتطلب الأمر التحقيق في الشكوى، وفي حالة وجود حاجة لذلك، سيتم تشكيل لجنة للنظر في الموضوع",
                    "4. إبلاغ الأطراف:",
                    "• يجب إبلاغ الشخص الذي قدم الشكوى بالنتيجة المتخذة والإجراءات المتبعة لمعالجة الشكوى",
                    "5. توثيق الشكاوى:",
                    "• يتم توثيق جميع الشكاوى في سجل مخصص، ويجب أن يشمل السجل التفاصيل الكاملة عن الشكوى والإجراءات المتخذة والنتائج",
                    "6. مراجعة الشكاوى:",
                    "• تتم مراجعة الشكاوى بشكل دوري لتحسين العمليات وضمان تلبية احتياجات الأطراف المعنية بشكل أكثر فعالية"
                ],
                "النماذج": [
                    "QF-09-09-01: نموذج تقديم الشكوى",
                    "QF-09-09-02: سجل الشكاوى والقرارات المتخذة",
                    "QF-09-09-03: تقرير لجنة معالجة الشكوى"
                ],
                "المراجعة والتحديث": "يجب مراجعة وتحديث إجراءات معالجة الشكاوى بشكل دوري لضمان تحسين الأداء واستجابة أفضل للأطراف المعنية"
            },
            "QP-09.2: محتوى الشهادة": {
                "الغرض": "تحديد المحتوى الإلزامي للشهادات المصدرة",
                "مجال التطبيق": "جميع شهادات الاعتماد الصادرة عن QB Academy",
                "التعاريف": [
                    "محتوى الشهادة: البيانات والمعلومات الواجب تضمينها في الشهادة"
                ],
                "المسؤوليات": [
                    ("إدارة الشهادات", "ضمان اكتمال محتوى الشهادة"),
                    ("مدير الجودة", "مراجعة صحة البيانات")
                ],
                "الإجراءات": [
                    "تحديد البيانات الأساسية للشهادة",
                    "مراجعة دقة المعلومات قبل الإصدار",
                    "التأكد من وضوح وصحة البيانات"
                ],
                "النماذج": ["QF-09-02-01: قالب الشهادة", "QF-09-02-02: قائمة تدقيق المحتوى"]
            },
            "QP-09.3: سجل الشهادات": {
                "الغرض": "الاحتفاظ بسجل شامل لجميع الشهادات المصدرة",
                "مجال التطبيق": "جميع الشهادات الصادرة عن QB Academy",
                "التعاريف": [
                    "سجل الشهادات: قاعدة البيانات التي تحتوي على معلومات جميع الشهادات"
                ],
                "المسؤوليات": [
                    ("إدارة السجلات", "تحديث وصيانة سجل الشهادات"),
                    ("مدير قاعدة البيانات", "ضمان أمان وسلامة البيانات")
                ],
                "الإجراءات": [
                    "تسجيل بيانات كل شهادة جديدة",
                    "تحديث حالة الشهادات عند التجديد أو الإلغاء",
                    "إجراء نسخ احتياطية دورية"
                ],
                "النماذج": ["QF-09-03-01: سجل الشهادات", "QF-09-03-02: تقرير حالة الشهادات"]
            },
            "QP-09.4: التجديد": {
                "الغرض": "تحديد إجراءات تجديد شهادات الاعتماد",
                "مجال التطبيق": "جميع طلبات تجديد الشهادات",
                "التعاريف": [
                    "تجديد الشهادة: عملية إعادة تأهيل حامل الشهادة للفترة التالية"
                ],
                "المسؤوليات": [
                    ("إدارة التجديد", "معالجة طلبات التجديد"),
                    ("لجنة التقييم", "تقييم استحقاق التجديد")
                ],
                "الإجراءات": [
                    "استلام طلب التجديد مع الوثائق",
                    "مراجعة متطلبات التجديد",
                    "اتخاذ قرار التجديد وإصدار الشهادة الجديدة"
                ],
                "النماذج": ["QF-09-04-01: طلب تجديد الشهادة", "QF-09-04-02: تقرير التجديد"]
            },
            "QP-09.5: إعادة التقييم": {
                "الغرض": "تحديد إجراءات إعادة تقييم المعتمدين عند الحاجة",
                "مجال التطبيق": "حالات إعادة التقييم للمعتمدين",
                "التعاريف": [
                    "إعادة التقييم: عملية تقييم إضافية للتأكد من استمرار استيفاء المعايير"
                ],
                "المسؤوليات": [
                    ("لجنة إعادة التقييم", "إجراء التقييم الإضافي"),
                    ("إدارة الجودة", "تحديد الحاجة لإعادة التقييم")
                ],
                "الإجراءات": [
                    "تحديد أسباب الحاجة لإعادة التقييم",
                    "إجراء التقييم الإضافي",
                    "اتخاذ القرار المناسب بناءً على النتائج"
                ],
                "النماذج": ["QF-09-05-01: طلب إعادة التقييم", "QF-09-05-02: تقرير إعادة التقييم"]
            },
            "QP-09.6: تعديل الشهادة": {
                "الغرض": "تحديد إجراءات تعديل بيانات الشهادات عند الحاجة",
                "مجال التطبيق": "جميع طلبات تعديل الشهادات",
                "التعاريف": [
                    "تعديل الشهادة: تغيير أو تصحيح البيانات في الشهادة المصدرة"
                ],
                "المسؤوليات": [
                    ("إدارة الشهادات", "معالجة طلبات التعديل"),
                    ("مدير الجودة", "الموافقة على التعديلات")
                ],
                "الإجراءات": [
                    "استلام طلب التعديل مع المبررات",
                    "مراجعة صحة البيانات المطلوب تعديلها",
                    "إصدار الشهادة المعدلة وإلغاء القديمة"
                ],
                "النماذج": ["QF-09-06-01: طلب تعديل الشهادة", "QF-09-06-02: محضر التعديل"]
            },
            "QP-09-07: استخدام الشهادات والشعارات": {
                "الغرض": "توضيح الشروط والآليات المتعلقة باستخدام الشهادات والشعارات والعلامات المعتمدة من جهة الاعتماد، وضمان عدم استخدامها بطريقة مضللة أو غير مشروعة",
                "مجال التطبيق": "يطبق هذا الإجراء على جميع الأشخاص المعتمدين أو الجهات التي حصلت على الشهادات من QB Academy والذين لديهم الحق في استخدام الشهادات والشعارات أو العلامات المعتمدة",
                "التعاريف": [
                    "الشهادات المعتمدة (Certified Certificates): الوثائق التي تصدرها جهة الاعتماد وتثبت تأهيل الأفراد أو الكيانات",
                    "الشعار (Logo): العلامة البصرية الخاصة بالاعتماد التي تمثل الجهة المعتمدة",
                    "العلامات (Marks): الرموز أو الأيقونات التي تمثل الاعتماد والتي يجوز استخدامها وفقاً للمعايير"
                ],
                "المسؤوليات": [
                    ("إدارة الشهادات", "مراقبة استخدام الشهادات والشعارات"),
                    ("فريق المراجعة", "فحص حالات إساءة الاستخدام"),
                    ("مدير الجودة", "ضمان الامتثال لشروط الاستخدام")
                ],
                "الإجراءات": [
                    "شروط استخدام الشهادات والشعارات والعلامات: يجب أن يلتزم الأشخاص المعتمدون أو الجهات التي تحمل الشهادات بشروط استخدام الشعار والعلامات، والتي يتم توضيحها في المستندات التعاقدية أو الاتفاقيات، عدم استخدام العلامات بطريقة مضللة",
                    "إجراءات التعامل مع إساءة الاستخدام: في حالة اكتشاف أي استخدام غير مشروع أو مضلل للعلامات أو الشهادات، يجب اتخاذ إجراءات فورية لضمان التصحيح أو السحب. تشمل الإجراءات: الإنذار الكتابي، سحب الشهادة، أو اتخاذ إجراءات قانونية حسب الحاجة",
                    "التوثيق والمراجعة: يجب توثيق أي حالة من حالات إساءة الاستخدام والإجراءات المتخذة بخصوصها، يجب أن تتم مراجعة دائمة للتأكد من عدم حدوث إساءة استخدام للشهادات والشعارات والعلامات"
                ],
                "النماذج": [
                    "QF-09-07-01: نموذج اتفاقية استخدام الشهادات والشعارات",
                    "QF-09-07-02: تقرير حالة إساءة الاستخدام",
                    "QF-09-07-03: سجل مراجعة الاستخدام السليم للشهادات والعلامات"
                ]
            },
            "QP-09-08: التظلمات": {
                "الغرض": "توضيح الإجراءات المتعلقة بتقديم التظلمات ضد القرارات المتخذة من قبل جهة الاعتماد وضمان أنها تتم بطريقة عادلة ونزيهة",
                "مجال التطبيق": "يطبق هذا الإجراء على جميع الأشخاص المعتمدين أو المتقدمين للاعتماد الذين يرغبون في تقديم تظلم ضد أي قرار تم اتخاذه من قبل جهة الاعتماد",
                "التعاريف": [
                    "التظلم (Appeal): اعتراض رسمي على قرار اتخذته جهة الاعتماد",
                    "اللجنة المستقلة (Independent Committee): لجنة مكونة من أفراد ليس لهم علاقة مباشرة بالقرار المعترض عليه، مهمتها النظر في التظلمات"
                ],
                "المسؤوليات": [
                    ("لجنة التظلمات", "دراسة ومراجعة التظلمات المقدمة"),
                    ("إدارة التظلمات", "استقبال وتوثيق التظلمات"),
                    ("مدير الجودة", "ضمان عدالة ونزاهة إجراءات التظلم")
                ],
                "الإجراءات": [
                    "تقديم التظلمات: يمكن لأي شخص معني بالقرار تقديم تظلم رسمي ضد أي قرار صادر من جهة الاعتماد، يجب أن يتم تقديم التظلم في غضون [عدد الأيام] من تاريخ اتخاذ القرار، يجب أن يتضمن التظلم أسباب الاعتراض والمستندات الداعمة",
                    "مراجعة التظلمات: يتم تعيين لجنة مستقلة مكونة من أفراد لا علاقة لهم بالقرار الأصلي للنظر في التظلم، يجب أن تلتزم اللجنة بالنزاهة والحيادية أثناء فحص التظلمات",
                    "اتخاذ القرار: يجب أن تكون عملية اتخاذ القرار شفافة، ويتم اتخاذه بناءً على المراجعة الدقيقة لجميع الوثائق والحقائق، يجب توثيق جميع القرارات التي تتعلق بالتظلمات، بما في ذلك قرارات القبول أو الرفض",
                    "إبلاغ الأطراف: يجب إبلاغ الشخص الذي قدم التظلم بالقرار المتخذ في أقرب وقت ممكن وبطريقة رسمية",
                    "توثيق التظلمات: يجب توثيق جميع التظلمات وقراراتها في سجل خاص ويتم الاحتفاظ بها للرجوع إليها عند الحاجة"
                ],
                "النماذج": [
                    "QF-09-08-01: نموذج تقديم التظلم",
                    "QF-09-08-02: سجل التظلمات والقرارات المتخذة",
                    "QF-09-08-03: تقرير لجنة التظلمات"
                ]
            },
            "QP-09-09: الشكاوى": {
                "الغرض": "توضيح الإجراءات المتعلقة بتلقي ومعالجة الشكاوى المقدمة من المرشحين، الأشخاص المعتمدين، أو الأطراف المتأثرة وضمان أن تتم المعالجة بطريقة شفافة وعادلة",
                "مجال التطبيق": "يطبق هذا الإجراء على جميع الشكاوى المقدمة من أي طرف يتأثر بقرارات أو إجراءات جهة الاعتماد",
                "التعاريف": [
                    "الشكوى (Complaint): اعتراض رسمي على الخدمات المقدمة من جهة الاعتماد أو أي مشكلة أخرى تتعلق بالإجراءات",
                    "المتأثرون (Affected Parties): الأفراد أو الكيانات الذين يتأثرون بشكل مباشر أو غير مباشر بقرارات جهة الاعتماد"
                ],
                "المسؤوليات": [
                    ("لجنة معالجة الشكاوى", "دراسة ومعالجة الشكاوى المقدمة"),
                    ("إدارة خدمة العملاء", "استقبال وتوثيق الشكاوى"),
                    ("مدير الجودة", "ضمان شفافية وعدالة معالجة الشكاوى")
                ],
                "الإجراءات": [
                    "تقديم الشكاوى: يجب على الأطراف المتأثرة تقديم شكوى رسمية عبر القنوات المخصصة (مثل نموذج الشكوى أو البريد الإلكتروني), يجب تقديم الشكوى في غضون [عدد الأيام] من حدوث المشكلة أو الحدث الذي أدى إليها",
                    "مراجعة الشكوى: يتم تعيين لجنة مستقلة مكونة من أفراد لا علاقة لهم بالقرار الأصلي للنظر في التظلم، يجب أن تلتزم اللجنة بالنزاهة والحيادية أثناء فحص التظلمات",
                    "معالجة الشكوى: يتم اتخاذ الإجراءات اللازمة لمعالجة الشكوى بناءً على نوع المشكلة، قد يتطلب الأمر التحقيق في الشكوى، وفي حالة وجود حاجة لذلك، سيتم تشكيل لجنة للنظر في الموضوع",
                    "إبلاغ الأطراف: يجب إبلاغ الشخص الذي قدم الشكوى بالنتيجة المتخذة والإجراءات المتبعة لمعالجة الشكوى",
                    "توثيق الشكاوى: يتم توثيق جميع الشكاوى في سجل مخصص، ويجب أن يشمل السجل التفاصيل الكاملة عن الشكوى والإجراءات المتخذة والنتائج",
                    "مراجعة الشكاوى: تتم مراجعة الشكاوى بشكل دوري لتحسين العمليات وضمان تلبية احتياجات الأطراف المعنية بشكل أكثر فعالية"
                ],
                "النماذج": [
                    "QF-09-09-01: نموذج تقديم الشكوى",
                    "QF-09-09-02: سجل الشكاوى والقرارات المتخذة",
                    "QF-09-09-03: تقرير لجنة معالجة الشكوى"
                ]
            },
            "QP-10.2: السرية": {
                "الغرض": "ضمان حماية المعلومات السرية والخصوصية في عمليات الاعتماد",
                "مجال التطبيق": "جميع المعلومات السرية في نظام QB Academy",
                "التعاريف": [
                    "المعلومات السرية: البيانات التي تتطلب حماية خاصة من الإفشاء",
                    "اتفاقية السرية: الالتزام القانوني بعدم إفشاء المعلومات السرية"
                ],
                "المسؤوليات": [
                    ("جميع الموظفين", "الالتزام بحماية المعلومات السرية"),
                    ("مدير أمن المعلومات", "وضع وتطبيق سياسات السرية")
                ],
                "الإجراءات": [
                    "توقيع اتفاقيات السرية مع جميع الموظفين",
                    "تصنيف المعلومات حسب مستوى السرية",
                    "وضع ضوابط الوصول للمعلومات السرية"
                ],
                "النماذج": ["QF-10-02-01: اتفاقية السرية", "QF-10-02-02: سجل الوصول للمعلومات السرية"]
            },
            "QP-10-02-04: مراجعة الإدارة": {
                "الغرض": "ضمان أن تقوم الإدارة العليا بمراجعة شاملة لنظام الإدارة في الجهة على الأقل مرة واحدة سنويًا لضمان فعاليته وتحقيق الأهداف المحددة، بالإضافة إلى تحسين الأداء واتخاذ الإجراءات التصحيحية والوقائية اللازمة",
                "مجال التطبيق": "يشمل هذا الإجراء مراجعة نظام الإدارة في كافة جوانبه، بما في ذلك التغذية الراجعة من العملاء، الشكاوى، نتائج التدقيق، أداء العمليات، حالات عدم المطابقة، والإجراءات التصحيحية والوقائية",
                "التعاريف": [
                    "مراجعة الإدارة: عملية منتظمة تقوم بها الإدارة العليا لقياس فعالية نظام الإدارة وتحديد المجالات التي يمكن تحسينها. تشمل المراجعة التحقق من الأداء العام للنظام وضمان توافقه مع أهداف الجهة ومتطلبات الاعتماد",
                    "الإدارة العليا: مجموعة الأشخاص الذين يتخذون القرارات الاستراتيجية في جهة الاعتماد ويشملون المديرين الرئيسيين أو المسؤولين التنفيذيين الذين يشرفون على عمليات الاعتماد والنظام الإداري",
                    "التغذية الراجعة من العملاء: المعلومات أو التعليقات التي يتم جمعها من العملاء والمتعلقة بجودة الخدمة أو المنتج المقدم، والتي يتم استخدامها لتحسين العمليات والنظام الإداري",
                    "الشكاوى: الاعتراضات أو الاحتجاجات المقدمة من العملاء أو الموظفين أو أي طرف آخر يشير إلى وجود مشكلة أو خلل في الخدمة المقدمة أو العمليات التي تنفذها جهة الاعتماد",
                    "نتائج التدقيق: الملاحظات والبيانات المستخلصة من عملية التدقيق الداخلي أو الخارجي التي توضح مدى الامتثال للمتطلبات المقررة وتساعد في تحديد أي تحسينات قد تكون مطلوبة",
                    "أداء العمليات: قياس فاعلية وكفاءة العمليات داخل جهة الاعتماد، بما في ذلك مستوى تحقيق الأهداف المحددة وجودة الخدمة المقدمة",
                    "حالات عدم المطابقة: الحالات التي يتم فيها اكتشاف عدم التوافق مع المعايير أو السياسات أو الإجراءات المعتمدة، سواء كانت متعلقة بالعمليات أو بالشهادات أو بالمعايير القانونية",
                    "الإجراءات التصحيحية والوقائية: الإجراءات التصحيحية: الإجراءات التي يتم اتخاذها لمعالجة حالات عدم المطابقة والتأكد من عدم تكرارها. الإجراءات الوقائية: الإجراءات التي تهدف إلى تحديد ومنع حدوث المشكلات أو حالات عدم المطابقة في المستقبل"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "مسؤولة عن إجراء المراجعة السنوية لنظام الإدارة وضمان تنفيذ الإجراءات التصحيحية بناءً على نتائج المراجعة"),
                    ("مدير الجودة", "مسؤول عن تجميع وتحليل المعلومات المتعلقة بالتغذية الراجعة من العملاء والشكاوى ونتائج التدقيق وتقديم التقارير إلى الإدارة العليا"),
                    ("موظفو الإدارة", "مسؤولون عن تقديم البيانات والمعلومات المتعلقة بأداء العمليات وحالات عدم المطابقة والإجراءات التصحيحية والوقائية")
                ],
                "الإجراءات": [
                    "1. إعداد المراجعة السنوية:",
                    "   • يتم إعداد جدول زمني للمراجعة السنوية من قبل الإدارة العليا",
                    "   • يتم تحديد المعايير التي سيتم تقييمها خلال المراجعة (مثل التغذية الراجعة من العملاء، الشكاوى، نتائج التدقيق، أداء العمليات، إلخ)",
                    "   • يتم جمع البيانات والمعلومات ذات الصلة من الأقسام المختلفة، بما في ذلك التقارير الإدارية، تقارير الجودة، تقارير التدقيق الداخلي، وتقارير الشكاوى",
                    "2. مراجعة التغذية الراجعة من العملاء:",
                    "   • يتم جمع وتحليل التغذية الراجعة من العملاء لتقييم مستوى رضاهم عن الخدمات المقدمة",
                    "   • يتم تضمين نتائج الاستبيانات أو المقابلات أو أي مصدر آخر للتغذية الراجعة",
                    "3. مراجعة الشكاوى:",
                    "   • يتم مراجعة جميع الشكاوى المقدمة من العملاء أو الأطراف المعنية لتحليل أسبابها واتخاذ الإجراءات التصحيحية اللازمة",
                    "   • يتم تحديد ما إذا كانت الشكاوى تؤثر على أداء العمليات أو على جودة الخدمة المقدمة",
                    "4. مراجعة نتائج التدقيق:",
                    "   • يتم استعراض نتائج التدقيق الداخلي والخارجي، وتقييم مدى توافق النظام مع المعايير والمواصفات المعتمدة",
                    "   • يتم تحديد أي مجالات تحتاج إلى تحسين أو تعديلات",
                    "5. مراجعة أداء العمليات:",
                    "   • يتم تقييم أداء العمليات الداخلية، بما في ذلك فعالية الإجراءات المتبعة في تطبيق نظام الجودة",
                    "   • يتم تحليل مؤشرات الأداء الرئيسية (KPIs) لتحديد مدى تحقيق الأهداف",
                    "6. مراجعة حالات عدم المطابقة:",
                    "   • يتم استعراض أي حالات عدم مطابقة قد حدثت خلال العام وتقييم تأثيرها على جودة الخدمات أو العمليات",
                    "   • يتم تحليل الأسباب الجذرية لهذه الحالات واتخاذ الإجراءات التصحيحية اللازمة",
                    "7. مراجعة الإجراءات التصحيحية والوقائية:",
                    "   • يتم استعراض الإجراءات التصحيحية والوقائية التي تم تنفيذها في فترات سابقة للتأكد من فعاليتها",
                    "   • يتم تحديد ما إذا كانت الإجراءات المتخذة قد أدت إلى تحسينات مستدامة في النظام",
                    "8. تقديم التوصيات:",
                    "   • بناءً على المراجعة، تقوم الإدارة العليا بتقديم التوصيات لتحسين النظام وإجراءات العمل",
                    "   • يتم تحديد أي تعديلات على سياسات أو إجراءات الجودة في ضوء نتائج المراجعة",
                    "9. توثيق نتائج المراجعة:",
                    "   • يجب توثيق جميع نتائج المراجعة بشكل مفصل في تقرير رسمي يشمل جميع المجالات التي تم تقييمها، بما في ذلك التوصيات والإجراءات المتخذة",
                    "   • يتم إرسال التقرير إلى جميع المعنيين داخل الجهة"
                ],
                "النماذج": [
                    "QF-10-02-04-01: نموذج تقرير مراجعة الإدارة",
                    "QF-10-02-04-02: نموذج قائمة التحقق للمراجعة السنوية", 
                    "QF-10-02-04-03: نموذج تحليل التغذية الراجعة والشكاوى"
                ],
                "المراجعة والتحديث": "يجب أن يخضع هذا الإجراء للمراجعة والتحديث كل عام لضمان مطابقته للمتطلبات الحالية وتحقيق فعالية عالية في نظام الإدارة"
            },
            "QP-10-02-05: التدقيق الداخلي": {
                "الغرض": "ضمان تنفيذ تدقيق داخلي دوري على نظام الإدارة لضمان تطابقه مع المعايير المعتمدة والكشف عن أي انحرافات أو عدم مطابقة، واتخاذ الإجراءات التصحيحية اللازمة لتحسين الأداء وضمان الاستمرار في تقديم خدمات ذات جودة عالية",
                "مجال التطبيق": "يشمل هذا الإجراء جميع الأنشطة والعمليات التي يتم تدقيقها في إطار نظام الإدارة لضمان تطابقها مع المواصفات والمتطلبات المقررة",
                "التعاريف": [
                    "التدقيق الداخلي: عملية مراجعة مستقلة يتم تنفيذها بواسطة أفراد من داخل جهة الاعتماد لفحص وتقييم فعالية نظام الإدارة وجودة العمليات والإجراءات. الهدف من التدقيق الداخلي هو ضمان الامتثال للمتطلبات وضمان تحسين الأداء",
                    "التحقق من الامتثال: التأكد من أن جميع الأنشطة والعمليات في جهة الاعتماد تتماشى مع المتطلبات الداخلية أو الخارجية المحددة، مثل السياسات والإجراءات والمعايير المعتمدة",
                    "الاستقلالية: يشير إلى ضرورة أن يكون المدققون الداخليين مستقلين عن الأنشطة أو العمليات التي يتم تدقيقها. يجب أن يتم التدقيق من قبل أشخاص غير مرتبطين مباشرة بالأداء الذي يتم مراجعته",
                    "التقارير: الوثائق التي تصدر بعد التدقيق وتحتوي على ملاحظات المدققين حول الأداء والامتثال، إضافة إلى توصيات التحسين والإجراءات التي ينبغي اتخاذها",
                    "الملاحظات: الملاحظات التي يتم تسجيلها خلال التدقيق والتي قد تشير إلى المشكلات أو نقاط الضعف التي تم اكتشافها في العمليات أو النظام الإداري",
                    "الإجراءات التصحيحية: الخطوات التي يتم اتخاذها لمعالجة أي مشكلات تم اكتشافها خلال التدقيق الداخلي. الهدف منها هو تصحيح حالات عدم الامتثال وضمان عدم تكرارها في المستقبل"
                ],
                "المسؤوليات": [
                    ("مدير الجودة", "مسؤول عن تخطيط وتنفيذ التدقيق الداخلي وضمان أن يتم تنفيذ التدقيق بشكل مستقل وموضوعي"),
                    ("فريق التدقيق", "مسؤول عن إجراء التدقيق وفقًا للخطط المعتمدة، وجمع وتحليل الأدلة وتوثيق النتائج"),
                    ("الإدارة العليا", "مسؤولة عن مراجعة نتائج التدقيق واتخاذ القرارات بناءً عليها")
                ],
                "الإجراءات": [
                    "1. إعداد خطة التدقيق:",
                    "   • يجب إعداد خطة سنوية للتدقيق الداخلي تغطي جميع الأقسام والأنشطة المتعلقة بنظام الإدارة",
                    "   • يتم تحديد الأنشطة والعمليات التي ستتم مراجعتها، بالإضافة إلى الجدول الزمني والتدقيقات المحتملة التي قد تحتاج إلى تدقيق عميق",
                    "2. تشكيل فريق التدقيق:",
                    "   • يجب أن يكون فريق التدقيق مكونًا من أشخاص ذوي كفاءة عالية ومعرفة متخصصة في المجال المعني",
                    "   • يجب أن يكون الفريق مستقلًا عن الأنشطة التي يتم تدقيقها لضمان الحيادية والمصداقية في عملية التدقيق",
                    "3. تنفيذ التدقيق الداخلي:",
                    "   • يجب على فريق التدقيق إجراء التدقيق وفقًا للمعايير والإجراءات المعتمدة",
                    "   • يتم جمع الأدلة والشهادات اللازمة للتحقق من الامتثال للمعايير",
                    "   • يتم إجراء مقابلات مع الموظفين المعنيين ومراجعة الوثائق ذات الصلة، مثل السجلات والتقارير",
                    "4. إعداد تقرير التدقيق:",
                    "   • يجب توثيق جميع نتائج التدقيق في تقرير مفصل يتضمن: الملاحظات التي تم العثور عليها، أي حالات عدم المطابقة أو التحسينات المطلوبة، التوصيات والإجراءات التصحيحية المحتملة",
                    "   • يتم إرسال تقرير التدقيق إلى الإدارة العليا وفريق العمل المعني",
                    "5. مراجعة نتائج التدقيق:",
                    "   • تقوم الإدارة العليا بمراجعة تقرير التدقيق وتقييم النتائج المترتبة عليه",
                    "   • يتم اتخاذ القرارات بناءً على نتائج التدقيق، بما في ذلك تحديد الإجراءات التصحيحية أو الوقائية المطلوبة",
                    "6. تنفيذ الإجراءات التصحيحية:",
                    "   • إذا تم العثور على حالات عدم المطابقة أو جوانب تحتاج إلى تحسين، يجب اتخاذ إجراءات تصحيحية فورية",
                    "   • يجب توثيق هذه الإجراءات وتحديد المواعيد النهائية لتنفيذها",
                    "   • يتم متابعة تنفيذ الإجراءات التصحيحية بشكل دوري لضمان فعاليتها",
                    "7. مراجعة الإجراءات التصحيحية:",
                    "   • يتم متابعة الإجراءات التصحيحية من قبل فريق التدقيق لضمان تطبيقها بالشكل الصحيح",
                    "   • يجب تقديم تقرير متابعة لنتائج تنفيذ الإجراءات التصحيحية، وفي حالة عدم تطبيقها، يتم اتخاذ خطوات إضافية",
                    "8. تكرار التدقيق:",
                    "   • يجب أن يتم التدقيق الدوري مرة واحدة على الأقل سنويًا وفقًا للخطة المعتمدة",
                    "   • يمكن أن تكون التدقيقات الإضافية مطلوبة بناءً على احتياجات العمل أو بناءً على نتائج التدقيق السابق"
                ],
                "النماذج": [
                    "QF-10-02-05-01: نموذج خطة التدقيق الداخلي السنوي",
                    "QF-10-02-05-02: نموذج تقرير التدقيق الداخلي",
                    "QF-10-02-05-03: نموذج إجراءات تصحيحية",
                    "QF-10-02-05-04: نموذج متابعة الإجراءات التصحيحية"
                ],
                "المراجعة والتحديث": "يجب أن يخضع هذا الإجراء للمراجعة والتحديث كل عام لضمان مطابقته للمتطلبات الحالية وتحقيق فعالية عالية في نظام الإدارة"
            },
            "QP-10-02-06: الإجراءات التصحيحية": {
                "الغرض": "يهدف هذا الإجراء إلى معالجة حالات عدم المطابقة التي يتم اكتشافها، من خلال تحديد السبب الجذري واتخاذ إجراءات تصحيحية مناسبة لضمان تحسين الأداء والامتثال للمعايير، والتأكد من فاعلية هذه الإجراءات بعد تنفيذها",
                "مجال التطبيق": "يشمل هذا الإجراء جميع الحالات التي يتم فيها اكتشاف عدم مطابقة في العمليات أو الأنشطة ضمن نظام الإدارة، سواء كانت متعلقة بالجودة أو الإجراءات أو الامتثال للمعايير المعتمدة",
                "التعاريف": [
                    "الإجراءات التصحيحية: هي الإجراءات التي يتم اتخاذها لمعالجة حالات عدم المطابقة أو المشكلات التي تم اكتشافها خلال التدقيق أو المراجعة. الهدف من هذه الإجراءات هو إزالة الأسباب الجذرية للمشاكل لضمان عدم تكرارها في المستقبل",
                    "حالات عدم المطابقة: يشير هذا المصطلح إلى أي حالة يكون فيها النظام أو العملية غير متوافقة مع المتطلبات المحددة، سواء كانت داخلية أو خارجية. يمكن أن تكون هذه الحالات ناتجة عن خطأ في التنفيذ أو فشل في الالتزام بالسياسات والإجراءات",
                    "السبب الجذري: هو السبب الأساسي الذي أدى إلى حدوث المشكلة أو حالة عدم المطابقة. في إجراء التصحيح، يجب تحديد السبب الجذري لضمان حل المشكلة بشكل فعال ومنع تكرارها",
                    "الإجراء التصحيحي المناسب: هو التدبير الذي يتم اتخاذه لمعالجة السبب الجذري لحالة عدم المطابقة. يجب أن يكون هذا الإجراء فعالاً ومناسباً لحل المشكلة بشكل كامل",
                    "التحقق من فاعلية الإجراءات التصحيحية: يعني التأكد من أن الإجراءات التصحيحية المتخذة قد نجحت في إزالة السبب الجذري للمشكلة ومنع تكرارها. يتم ذلك عادة من خلال متابعة الأداء أو تدابير إضافية للتحقق من التحسين المستمر",
                    "توثيق الخطوات: يشير إلى ضرورة تسجيل جميع الإجراءات المتخذة منذ اكتشاف المشكلة حتى حلها. يشمل هذا التوثيق السبب الجذري، والإجراءات التصحيحية، والنتائج التي تم تحقيقها بعد تنفيذ الحلول"
                ],
                "المسؤوليات": [
                    ("مدير الجودة", "مسؤول عن توجيه وتنفيذ الإجراءات التصحيحية، وتحديد أسباب عدم المطابقة واتخاذ القرارات المناسبة"),
                    ("فريق العمل", "مسؤولة عن تنفيذ الإجراءات التصحيحية وتوثيق كل خطوة من مراحل التنفيذ"),
                    ("الإدارة العليا", "مسؤولة عن مراقبة مدى فعالية الإجراءات التصحيحية واتخاذ القرارات اللازمة لإيقاف أو تعديل الإجراءات في حالة عدم تحقيق الأهداف المرجوة")
                ],
                "الإجراءات": [
                    "1. اكتشاف حالات عدم المطابقة:",
                    "   • يتم اكتشاف حالات عدم المطابقة من خلال تدقيقات داخلية، شكاوى، مراجعات، أو أثناء الفحوصات اليومية",
                    "   • يجب توثيق الحالة في سجل عدم المطابقة وإبلاغ الجهات المعنية بسرعة",
                    "2. تحديد السبب الجذري:",
                    "   • بعد اكتشاف حالة عدم المطابقة، يجب إجراء تحليل شامل لتحديد السبب الجذري للمشكلة",
                    "   • يتم استخدام أدوات تحليل مثل تحليل السبب الجذري أو 5 لماذا لتحديد الأسباب الأساسية التي أدت إلى حدوث عدم المطابقة",
                    "3. اتخاذ إجراء تصحيحي:",
                    "   • بناءً على السبب الجذري، يجب اتخاذ إجراء تصحيحي مناسب لمعالجة المشكلة",
                    "   • يجب أن يكون الإجراء التصحيحي قابلاً للقياس وواقعياً لضمان القضاء على السبب الجذري وليس مجرد إصلاح الأعراض",
                    "   • يمكن أن تشمل الإجراءات التصحيحية تحسين الإجراءات الحالية، تغيير الأدوات أو المعدات، تدريب الموظفين، أو تعديل السياسات",
                    "4. التحقق من فاعلية الإجراءات:",
                    "   • بعد تنفيذ الإجراء التصحيحي، يجب التحقق من فاعليته من خلال مراقبة الأداء والتأكد من أنه قد تم القضاء على سبب المشكلة",
                    "   • يمكن أن تشمل هذه المرحلة إجراء تدقيق أو مراقبة مستمرة لضمان أن حالة عدم المطابقة لم تحدث مرة أخرى",
                    "5. توثيق جميع الخطوات:",
                    "   • يجب توثيق جميع الخطوات المتعلقة بالإجراء التصحيحي بشكل دقيق:",
                    "   • الأسباب الجذرية التي تم تحديدها",
                    "   • الإجراءات التصحيحية التي تم تنفيذها",
                    "   • الفحوصات التي أجريت للتحقق من فاعلية الإجراءات",
                    "   • يجب حفظ هذه الوثائق في السجلات المناسبة لتكون متاحة للمراجعة المستقبلية ولتقديم أدلة على تحسن الأداء",
                    "6. مراجعة الإجراءات التصحيحية:",
                    "   • يتم مراجعة فعالية الإجراءات التصحيحية من قبل الإدارة العليا أو الفريق المسؤول لضمان أن الأهداف قد تم تحقيقها",
                    "   • في حالة عدم فعالية الإجراء التصحيحي، يتم اتخاذ خطوات إضافية لتعديل أو تحسين الإجراءات"
                ],
                "النماذج": [
                    "QF-10-02-06-01: نموذج سجل حالات عدم المطابقة",
                    "QF-10-02-06-02: نموذج تحليل السبب الجذري",
                    "QF-10-02-06-03: نموذج إجراء تصحيحي",
                    "QF-10-02-06-04: نموذج متابعة الإجراءات التصحيحية"
                ],
                "المراجعة والتحديث": "يجب مراجعة هذا الإجراء وتحديثه بشكل دوري لضمان مطابقته للمتطلبات الحالية والفعالية المستمرة في معالجة حالات عدم المطابقة"
            },
            "QP-10-02-07: الإجراءات الوقائية": {
                "الغرض": "يهدف هذا الإجراء إلى تحديد المخاطر المحتملة التي قد تؤدي إلى مشاكل أو عدم مطابقة في النظام، واتخاذ تدابير وقائية لتجنب حدوث هذه المشكلات في المستقبل، بالإضافة إلى مراقبة فعالية هذه التدابير",
                "مجال التطبيق": "يشمل هذا الإجراء جميع الأنشطة والعمليات التي يمكن أن تتعرض لمخاطر قد تؤثر على جودة النظام أو عملية الاعتماد أو تحقق الأهداف المحددة",
                "التعاريف": [
                    "الإجراءات الوقائية: هي الإجراءات التي يتم اتخاذها لمنع حدوث المشاكل أو حالات عدم المطابقة في المستقبل. الهدف من هذه الإجراءات هو تحديد المخاطر المحتملة قبل حدوثها ووضع تدابير لتجنبها، مما يؤدي إلى تحسين العمليات وتقليل الأخطاء",
                    "المخاطر المحتملة: هي الظروف أو المواقف التي قد تؤدي إلى حدوث مشاكل أو حالات عدم مطابقة إذا لم يتم التعامل معها بشكل مناسب. تتطلب هذه المخاطر تحديداً دقيقاً لتحديد النقاط التي قد تتسبب في حدوث المشكلات",
                    "التدابير الوقائية: هي الأنشطة أو الإجراءات التي يتم تنفيذها لتقليل أو إزالة المخاطر المحتملة قبل أن تتحول إلى مشاكل. تتضمن هذه التدابير تحسين العمليات أو إدخال تغييرات في النظام لتفادي حدوث أي مشكلات",
                    "مراقبة الفعالية: يشير هذا إلى متابعة تأثير الإجراءات الوقائية التي تم اتخاذها للتأكد من أنها فعالة في الحد من المخاطر ومنع حدوث المشاكل. تتضمن هذه المراقبة إجراء فحوصات دورية لتقييم الأداء والتحقق من مدى فاعلية الإجراءات المتخذة"
                ],
                "المسؤوليات": [
                    ("مدير الجودة", "مسؤول عن تحديد المخاطر المحتملة واتخاذ الإجراءات الوقائية المناسبة"),
                    ("فرق العمل", "مسؤولة عن تنفيذ التدابير الوقائية المقترحة، ورصد فعالية هذه التدابير في الحد من المخاطر"),
                    ("الإدارة العليا", "مسؤولة عن توفير الموارد اللازمة لتطبيق الإجراءات الوقائية وضمان فاعليتها على المدى الطويل")
                ],
                "الإجراءات": [
                    "1. تحديد المخاطر المحتملة:",
                    "   • يجب أن تقوم جهة الاعتماد بتحديد المخاطر التي قد تؤثر على تنفيذ أنشطتها أو تؤدي إلى فشل في تحقيق أهداف الجودة",
                    "   • يمكن استخدام تقنيات مثل تحليل المخاطر (Risk Analysis) أو تحليل SWOT (القوة، الضعف، الفرص، التهديدات) لتحديد المخاطر المحتملة",
                    "2. تقييم المخاطر:",
                    "   • يتم تقييم المخاطر المحتملة بناءً على احتمال حدوثها وتأثيرها المحتمل على النظام",
                    "   • يجب تصنيف المخاطر بناءً على شدة التأثير واحتمالية حدوثها، ومن ثم تحديد الأولويات في معالجتها",
                    "3. تنفيذ التدابير الوقائية:",
                    "   • بعد تحديد المخاطر، يجب تنفيذ تدابير وقائية لتقليل أو القضاء على تلك المخاطر قبل حدوث أي مشكلة",
                    "   • يمكن أن تشمل التدابير الوقائية:",
                    "   • تطوير سياسات أو إجراءات جديدة",
                    "   • تدريب الموظفين لتعزيز الوعي بالمخاطر المحتملة",
                    "   • تحسين المعدات أو التكنولوجيا",
                    "   • تطوير آليات الرقابة والمراقبة المبكرة",
                    "4. مراقبة فعالية التدابير الوقائية:",
                    "   • بعد تنفيذ التدابير الوقائية، يجب مراقبة فعاليتها بانتظام من خلال التدقيقات الداخلية أو مراقبة الأداء",
                    "   • في حالة حدوث مشاكل مشابهة للمخاطر التي تم تحديدها، يجب إعادة تقييم التدابير الوقائية وضمان تعديلها أو تحسينها",
                    "5. توثيق الإجراءات الوقائية:",
                    "   • يجب توثيق جميع الإجراءات الوقائية المتخذة، بما في ذلك:",
                    "   • المخاطر التي تم تحديدها",
                    "   • التدابير الوقائية التي تم تنفيذها",
                    "   • نتائج المتابعة والمراجعة",
                    "   • يتم حفظ هذه الوثائق في السجلات المناسبة لاستخدامها في المستقبل ولضمان مراجعتها عند الحاجة",
                    "6. مراجعة الإجراءات الوقائية:",
                    "   • يتم مراجعة فعالية الإجراءات الوقائية من قبل الإدارة العليا أو الفريق المسؤول لضمان أن التدابير المتخذة تؤدي إلى تقليل المخاطر بالشكل المطلوب",
                    "   • إذا تم اكتشاف أن التدابير الوقائية لم تكن فعالة، يتم اتخاذ إجراءات لتعديل أو تحسينها"
                ],
                "النماذج": [
                    "QF-10-02-07-01: نموذج سجل المخاطر المحتملة",
                    "QF-10-02-07-02: نموذج إجراءات وقائية",
                    "QF-10-02-07-03: نموذج متابعة التدابير الوقائية"
                ],
                "المراجعة والتحديث": "يجب مراجعة هذا الإجراء بشكل دوري لضمان فعاليته في التعامل مع المخاطر المحتملة ولضمان تحقيق الأهداف المرجوة"
            }
        }
        
        # Load forms structure and data from database
        self.forms = self.load_forms_from_database()

    def load_forms_from_database(self):
        """Load forms data from database with fallback to default structure"""
        # Default forms structure
        default_forms = {
            "QF-04-01-01: سجل الوثائق القانونية": {
                "الحقول": [
                    ("م", "اسم الوثيقة القانونية", "رقم الوثيقة", "تاريخ الإصدار", "تاريخ الانتهاء", "الجهة المصدرة", "الموقع المحفوظ به", "ملاحظات")
                ],
                "البيانات": []
            },
            "QF-04-01-02: نموذج مراجعة الوضع القانوني": {
                "الحقول": [
                    ("البند القانوني", "المرجع القانوني", "مدى الالتزام", "ملاحظات", "الإجراء المطلوب")
                ],
                "البيانات": []
            },
            "QF-04-02-01: محضر اجتماع لجنة القرارات": {
                "الحقول": [
                    "تاريخ الاجتماع",
                    "مكان الاجتماع",
                    "الجهة",
                    "أسماء الحضور",
                    "جدول الأعمال",
                    "تفاصيل المناقشات",
                    "القرارات المتخذة",
                    "التوصيات",
                    "متابعة تنفيذ القرارات السابقة",
                    "رئيس اللجنة",
                    "أعضاء اللجنة"
                ],
                "البيانات": []
            },
            "QF-04-02-02: سجل قرارات الاعتماد": {
                "الحقول": [
                    ("م", "تاريخ القرار", "رقم القرار", "موضوع القرار", "الجهة المعنية بالتنفيذ", "ملاحظات / حالة التنفيذ")
                ],
                "البيانات": []
            },
            "QF-04-03-01: سجل التهديدات المحتملة للحيادية": {
                "الحقول": [
                    "اسم الموظف",
                    "المسمى الوظيفي", 
                    "التاريخ",
                    "جدول التهديدات",
                    "تم مراجعة السجل من قبل مسؤول الحيادية",
                    "تاريخ المراجعة"
                ],
                "جدول التهديدات": [
                    ("م", "نوع التهديد", "تاريخ اكتشاف التهديد", "وصف التهديد", "الإجراء المتخذ", "ملاحظات")
                ],
                "البيانات": []
            },
            "QF-04-03-02: تقرير تضارب المصالح": {
                "الحقول": [
                    "اسم الموظف",
                    "المسمى الوظيفي",
                    "القسم",
                    "تاريخ التقرير",
                    "وصف الحالة",
                    "طبيعة تضارب المصالح",
                    "تقييم الحالة من قبل الإدارة",
                    "التوصيات والإجراءات التصحيحية",
                    "توقيع الموظف",
                    "توقيع المدير المباشر",
                    "توقيع مسؤول الحيادية"
                ],
                "البيانات": []
            },
            "QF-04-04-01: سجل الموارد المالية لعمليات الاعتماد": {
                "الحقول": [
                    ("م", "بند الميزانية", "المبلغ المطلوب", "المبلغ المتوفر", "الفرق", "مصدر التمويل", "تاريخ التوفير", "ملاحظات")
                ],
                "البيانات": []
            },
            "QF-04-04-02: تقرير الاحتياطات المالية": {
                "الحقول": [
                    "الفترة الزمنية",
                    "الجهة",
                    "تاريخ التقرير",
                    "وصف عام للاحتياطات المالية",
                    "مصادر الاحتياطات",
                    "الغرض من الاحتياطات",
                    "مدى كفاية الاحتياطات لتغطية التكاليف المستقبلية",
                    "التوصيات",
                    "اسم معد التقرير",
                    "التوقيع",
                    "اعتماد الإدارة المالية"
                ],
                "البيانات": []
            },
            "QF-04-04-03: تقارير المراجعة المالية السنوية": {
                "الحقول": [
                    "السنة المالية",
                    "الجهة",
                    "تاريخ التقرير",
                    "الجهات التي تم مراجعتها",
                    "ملخص نتائج المراجعة",
                    "الملاحظات والتوصيات",
                    "الإجراءات التصحيحية",
                    "مدى الالتزام بالسياسات والإجراءات المالية",
                    "اسم المراجع المالي",
                    "التوقيع",
                    "اعتماد الإدارة العليا"
                ],
                "البيانات": []
            },
            "QF-05-01-01: الهيكل التنظيمي لجهة الاعتماد": {
                "الحقول": [
                    "الأسم",
                    "المدير",
                    "التوقيع"
                ],
                "البيانات": []
            },
            "QF-05-01-02: سجل توزيع الواجبات والمسؤوليات": {
                "الحقول": [
                    ("م", "اسم الموظف", "القسم", "المسمى الوظيفي", "المهام الرئيسية", "المسؤوليات المرتبطة")
                ],
                "البيانات": [],
                "التوقيع": {
                    "الأسم": "",
                    "المنصب": "",
                    "التوقيع": ""
                }
            },
            "QF-05-01-03: تقارير مراجعة الهيكل التنظيمي السنوي": {
                "الحقول": [
                    ("م", "التاريخ", "المراجع", "الإدارة/القسم المشمول", "النتائج/الملاحظات", "الإجراءات المقترحة")
                ],
                "البيانات": [],
                "التوقيع": {
                    "الأسم": "",
                    "المنصب": "",
                    "التوقيع": ""
                }
            },
            "QF-05-02-01: سجل الأنشطة التدريبية المقدمة": {
                "الحقول": [
                    ("م", "التاريخ", "عنوان التدريب", "الجهة المقدمة", "الموظفون المستفيدون", "مدة التدريب", "ملاحظات")
                ],
                "البيانات": [
                    ("1", "", "مقدمة في نظام إدارة الجودة ISO 9001", "", "جميع موظفي الجودة", "", "تم بنجاح"),
                    ("2", "", "إدارة المخاطر في الاعتماد", "", "مديرو الأقسام", "", "توصية بتكرارها سنوياً"),
                    ("3", "", "", "", "", "", ""),
                    ("4", "", "", "", "", "", "")
                ],
                "التوقيع": {
                    "التوقيع": "",
                    "الأسم": "",
                    "المنصب": "مدير الشركة"
                }
            },
            "QF-05-02-02: تقرير فصل الأنشطة التدريبية عن التقييم": {
                "الحقول": [
                    ("م", "اسم الدورة التدريبية", "اسم المدرب", "اسم المقيم", "إجراء الفصل", "تاريخ النشاط")
                ],
                "البيانات": [
                    ("1", "مقدمة في إدارة الجودة", "", "", "تم تعيين مقيم مستقل لم يشارك بالتدريب", ""),
                    ("2", "مخاطر الاعتماد الفني", "", "", "توزيع منفصل للدورات والتقييم", ""),
                    ("3", "", "", "", "", ""),
                    ("4", "", "", "", "", "")
                ],
                "التوقيع": {
                    "التوقيع": "",
                    "الأسم": "",
                    "المنصب": "مدير الشركة"
                }
            },
            "QF-05-02-03: سجل مراجعة الحيادية في التدريب": {
                "الحقول": [
                    ("تاريخ التدريب", "اسم الدورة", "اسم المدرب", "صلة سابقة بالمتدربين", "نتيجة المراجعة", "إجراءات تصحيحية (إن وجدت)")
                ],
                "البيانات": [
                    ("", "تدريب على نظم إدارة الجودة", "", "لا يوجد", "محايد", "-"),
                    ("", "ورشة تقييم داخلي", "", "عمل سابق مع أحد المتدربين", "تحفظ مشروط", "تغيير المدرب في الدورة التالية"),
                    ("", "", "", "", "", ""),
                    ("", "", "", "", "", "")
                ],
                "التوقيع": {
                    "التوقيع": "",
                    "الأسم": "",
                    "المنصب": "مدير الشركة"
                }
            },
            "QF-06-01-01: سجل المؤهلات المطلوبة للأفراد": {
                "الحقول": [
                    ("م", "المسمى الوظيفي / الدور", "المؤهلات الأكاديمية المطلوبة", "الخبرات العملية المطلوبة", "المهارات المطلوبة", "الدورات / الشهادات المهنية")
                ],
                "البيانات": [
                    ("1", "مراجع داخلي", "بكالوريوس في الجودة أو ما يعادلها", "خبرة لا تقل عن 3 سنوات في مجال الجودة", "معرفة بنظام ISO 17024، مهارات تدقيق", "دورة مراجع داخلي معتمدة"),
                    ("2", "", "", "", "", ""),
                    ("3", "", "", "", "", ""),
                    ("4", "", "", "", "", "")
                ],
                "التوقيع": {
                    "التوقيع": "",
                    "الأسم": "",
                    "المنصب": "مدير الشركة"
                }
            },
            "QF-06-01-02: تقرير المراجعة الدورية لكفاءة الأفراد": {
                "الحقول": [
                    ("م", "اسم", "المسمى الوظيفي", "تاريخ التقييم", "مجالات الكفاءة", "نتائج المراجعة", "الإجراءات التصحيحية / التحسينية", "المراجع", "ملاحظات")
                ],
                "البيانات": [
                    ("1", "", "مقيم امتحانات", "2025-06-01", "مراقبة الامتحان، تقييم الأداء", "مستوفٍ للكفاءة", "لا توجد إجراءات مطلوبة", "", ""),
                    ("2", "", "", "", "", "", "", "", ""),
                    ("3", "", "", "", "", "", "", "", ""),
                    ("4", "", "", "", "", "", "", "", "")
                ],
                "التوقيع": {
                    "التوقيع": "",
                    "الأسم": "",
                    "المنصب": "مدير الشركة"
                }
            },
            "QF-06-01-03: سجل برامج التدريب والتطوير المهنى": {
                "الحقول": [
                    ("م", "اسم البرنامج التدريبي", "الجهة المقدمة للتدريب", "اسم المشارك", "المسمى الوظيفي", "تاريخ التنفيذ", "المدة (بالساعات)", "الأهداف التدريبية", "نتائج التقييم", "ملاحظات")
                ],
                "البيانات": [
                    ("1", "مبادئ التدقيق الداخلي", "مركز التدريب الوطني", "أحمد عبد الله", "مراجع داخلي", "2025-05-15", "12", "تعزيز مهارات التدقيق الداخلي وفق ISO", "تم اجتياز البرنامج بنجاح", ""),
                    ("2", "", "", "", "", "", "", "", "", ""),
                    ("3", "", "", "", "", "", "", "", "", ""),
                    ("4", "", "", "", "", "", "", "", "", "")
                ],
                "التوقيع": {
                    "التوقيع": "",
                    "الأسم": "",
                    "المنصب": "مدير الشركة"
                }
            },
            "QF-06-02-01: قائمة الأدوار والمسؤوليات للأفراد المشاركين في أنشطة الاعتماد": {
                "الحقول": [
                    ("م", "الاسم", "المسمى الوظيفي", "الدور في نظام الاعتماد", "المسؤوليات الرئيسية", "الجهة التي يتبع لها", "التوقيع", "التاريخ")
                ],
                "البيانات": [
                    ("1", "", "مدير الاعتماد", "مسؤول إصدار القرار", "مراجعة تقارير التقييم، اتخاذ قرار الشهادة", "إدارة الاعتماد", "", ""),
                    ("2", "", "مراجع داخلي", "تقييم نظام الاعتماد", "إجراء المراجعات الداخلية حسب الخطة", "إدارة الجودة", "", ""),
                    ("3", "", "خبير فني", "عضو لجنة فنية", "تقديم رأي فني حول المتقدمين للشهادة", "اللجنة الفنية", "", ""),
                    ("4", "", "", "", "", "", "", "", "")
                ],
                "التوقيع": {
                    "التوقيع": "",
                    "الأسم": "",
                    "المنصب": "مدير الشركة"
                }
            },
            "QF-06-02-02: إقرار الحيادية والسرية للأفراد": {
                "الحقول": [
                    ("الأسم", "الوظيفة", "التوقيع", "التاريخ")
                ],
                "البيانات": [
                    ("", "", "", ""),
                    ("", "", "", ""),
                    ("", "", "", ""),
                    ("", "", "", "")
                ],
                "المحتوى": "أُقر أنا الموقع أدناه، بأنني أتعهد بالحفاظ على مبادئ الحيادية والسرية التامة فيما يتعلق بجميع المعلومات التي أطلع عليها أثناء تأديتي للمهام المرتبطة بأنشطة الاعتماد، سواء خلال أو بعد انتهاء عملي مع الجهة المعتمدة.\nوأؤكد على ما يلي:\n• ألتزم بالحيادية التامة في أداء جميع المهام الموكلة إلي، دون تحيز أو تأثير لمصلحة شخصية أو خارجية\n• أتعهد بالحفاظ على سرية المعلومات الخاصة بالمتقدمين للاعتماد وجميع البيانات التي أطلع عليها\n• لن أشارك أو أفشي أي معلومات تتعلق بأنشطة الاعتماد لأي طرف غير مخول\n• في حال وجود أي تعارض في المصالح، سأقوم بالإفصاح عنه فورًا للجهة المختصة\n• أقر بأنني قرأت وفهمت سياسة الحيادية والسرية المعتمدة لدى الجهة",
                "التوقيع": {
                    "التوقيع": "",
                    "الأسم": "",
                    "المنصب": "مدير الشركة"
                }
            },
            "QF-06-02-03: سجل مراجعة تضارب المصالح": {
                "الحقول": [
                    ("م", "الاسم", "المسمى الوظيفي", "الوظيفة في نظام الاعتماد", "هل يوجد تضارب مصالح؟ (نعم/لا)", "وصف الحالة (إن وجدت)", "الإجراء المتخذ", "توقيع المراجع")
                ],
                "البيانات": [
                    ("1", "", "مقوم فني", "تقييم المتقدمين", "نعم", "صلة قرابة مع أحد المتقدمين", "استبعاده من تقييم هذا المتقدم", ""),
                    ("2", "", "", "", "", "", "", ""),
                    ("3", "", "", "", "", "", "", ""),
                    ("4", "", "", "", "", "", "", "")
                ],
                "التوقيع": {
                    "التوقيع": "",
                    "الأسم": "",
                    "المنصب": "مدير الشركة"
                }
            },
            "QF-06-03-01: نموذج عقد التعاقد مع الأطراف الخارجية": {
                "المحتوى": "إنه في يوم ____ من شهر ______ سنة ____، تم الاتفاق والتراضي بين كل من:\n1. الطرف الأول: (اسم الجهة أو الشركة)_______________________ ومقرها الرئيسي _____________________\n2. الطرف الثاني: (اسم المقاول/المُتعاقد الخارجي) ________________ ومقره بـ _______________________",
                "الحقول": [
                    "المادة (1): موضوع العقد",
                    "المادة (2): مدة العقد",
                    "المادة (3): المقابل المالي وشروط السداد",
                    "المادة (4): التزامات الطرف الثاني",
                    "المادة (5): التزامات الطرف الأول",
                    "المادة (6): السرية وعدم الإفشاء",
                    "المادة (7): التعويضات والمسؤوليات",
                    "المادة (8): فسخ العقد",
                    "المادة (9): الأحكام العامة"
                ],
                "البيانات": [],
                "التوقيع": {
                    "الطرف الأول": {
                        "الإسم": "",
                        "الوظيفة": "",
                        "التوقيع": "",
                        "التاريخ": ""
                    },
                    "الطرف الثاني": {
                        "الإسم": "",
                        "الوظيفة": "",
                        "التوقيع": "",
                        "التاريخ": ""
                    }
                }
            },
            "QF-06-03-02: سجل تقييم أداء الأطراف الخارجية": {
                "الهدف": "توثيق نتائج تقييم أداء الأطراف الخارجية المتعاقد معها، وذلك لضمان تحقيق الجودة والكفاءة المطلوبة في تقديم الخدمات أو تنفيذ الأعمال",
                "الحقول": [
                    ("م", "اسم الطرف الخارجي", "نوع الخدمة / النشاط", "تاريخ التقييم", "نتيجة التقييم (ممتاز/جيد/مقبول/ضعيف)", "ملاحظات", "اسم المقيم وتوقيعه")
                ],
                "البيانات": [
                    ("1", "شركة التقنية الحديثة", "صيانة أجهزة حاسوب", "01/06/2025", "جيد", "تم تنفيذ المهام بجودة جيدة مع تأخير بسيط في التسليم", "م. أحمد عبد الله"),
                    ("2", "", "", "", "", "", ""),
                    ("3", "", "", "", "", "", ""),
                    ("4", "", "", "", "", "", "")
                ],
                "ملاحظات إضافية": "يعتمد هذا التقييم في ضوء معايير الأداء المتفق عليها ضمن العقد، ويتم مراجعته بشكل دوري",
                "التوقيع": {
                    "التوقيع": "",
                    "الأسم": "",
                    "المنصب": "مدير الشركة"
                }
            },
            "QF-06-03-03: تقرير مراقبة الأداء والتقييم الدوري": {
                "الهدف": "توثيق نتائج مراقبة الأداء والتقييم الدوري للأطراف الخارجية المتعاملة مع المؤسسة، وذلك لضمان الالتزام بمعايير الجودة والكفاءة وتحقيق الأهداف المطلوبة",
                "البيانات العامة": [
                    "اسم الطرف الخارجي",
                    "نوع الخدمة/النشاط",
                    "مدة التعاقد",
                    "تاريخ بدء التعاقد",
                    "تاريخ التقييم الحالي",
                    "الفترة التي يغطيها التقرير"
                ],
                "نتائج مراقبة الأداء": [
                    "مدى الالتزام بالجدول الزمني",
                    "جودة الخدمة المقدمة",
                    "سرعة الاستجابة والتواصل",
                    "رضا الجهات المستفيدة",
                    "الالتزام بالشروط التعاقدية",
                    "ملاحظات إضافية"
                ],
                "الملخص والتوصيات": [
                    "نتيجة التقييم العام (ممتاز / جيد / مقبول / ضعيف)",
                    "التوصيات والإجراءات المقترحة"
                ],
                "البيانات": [],
                "التوقيع": {
                    "المعد": {
                        "الأسم": "",
                        "التوقيع": ""
                    },
                    "المراجع": {
                        "الأسم": "",
                        "التوقيع": ""
                    },
                    "تاريخ الاعتماد": ""
                }
            },
            "QF-06-03-04: نموذج تقييم تضارب المصالح مع الأطراف الخارجية": {
                "البيانات الأساسية": [
                    "اسم الطرف الخارجي",
                    "نوع الخدمة/النشاط",
                    "مدة التعاقد",
                    "تاريخ التقييم"
                ],
                "أسئلة تقييم تضارب المصالح": [
                    "هل يوجد أي صلة قرابة أو علاقة شخصية بين الطرف الخارجي وأي من موظفي المؤسسة؟",
                    "هل لدى الطرف الخارجي أي مصالح مالية أو تجارية مباشرة أو غير مباشرة مع موظفي المؤسسة؟",
                    "هل سبق للطرف الخارجي العمل مع المؤسسة في مشاريع مشابهة تم تقييمها بشكل غير موضوعي؟",
                    "هل لدى الطرف الخارجي علاقات حالية مع جهات منافسة قد تؤثر على أدائه؟",
                    "هل يوجد أي ملاحظات أو بلاغات سابقة تتعلق بعدم التزامه بالحياد؟"
                ],
                "الحقول": [
                    ("السؤال", "الإجابة (نعم/لا)", "التوضيح")
                ],
                "البيانات": [
                    ("هل يوجد أي صلة قرابة أو علاقة شخصية؟", "لا", ""),
                    ("هل لدى الطرف الخارجي مصالح مالية مع الموظفين؟", "لا", ""),
                    ("هل سبق العمل في مشاريع مشابهة بتقييم غير موضوعي؟", "لا", ""),
                    ("هل توجد علاقات مع جهات منافسة؟", "لا", ""),
                    ("هل توجد ملاحظات سابقة حول عدم الحياد؟", "لا", "")
                ],
                "التوصيات والقرار": [
                    "تقييم مستوى تضارب المصالح (لا يوجد/محتمل/قائم فعلياً)",
                    "الإجراءات المقترحة في حال وجود تضارب"
                ],
                "التوقيع": {
                    "المقيم": {
                        "الأسم": "",
                        "التوقيع": ""
                    },
                    "المراجع": {
                        "الأسم": "",
                        "التوقيع": ""
                    },
                    "تاريخ الاعتماد": ""
                }
            },
        
        # QP-06.4 Forms - الموارد المادية والتقنية
        "QF-06-04-01: نموذج تجهيز قاعات الامتحانات": {
            "الاسم": "نموذج تجهيز قاعات الامتحانات",
            "الهدف": "توثيق تجهيزات قاعات الامتحانات وضمان جاهزيتها للامتحانات",
            "البيانات العامة": [
                "اسم المركز الامتحاني",
                "عنوان القاعة",
                "تاريخ الفحص",
                "اسم المسؤول عن التجهيز"
            ],
            "قائمة التحقق": [
                ("الإضاءة الكافية والطبيعية", "تم (✓) / لم يتم (✗)", "ملاحظات"),
                ("التهوية أو التكييف المناسب", "تم (✓) / لم يتم (✗)", "ملاحظات"),
                ("عدد كافٍ من المقاعد والطاولات", "تم (✓) / لم يتم (✗)", "ملاحظات"),
                ("لافتات إرشادية واضحة (الدخول / الخروج / التعليمات)", "تم (✓) / لم يتم (✗)", "ملاحظات"),
                ("توافر أدوات السلامة (مطفأة حريق، مخارج طوارئ)", "تم (✓) / لم يتم (✗)", "ملاحظات"),
                ("انضباط المسافات بين الممتحنين", "تم (✓) / لم يتم (✗)", "ملاحظات"),
                ("توافر أدوات المراقبة (كاميرات/مراقبون)", "تم (✓) / لم يتم (✗)", "ملاحظات"),
                ("نظافة القاعة وتجهيزها مسبقًا", "تم (✓) / لم يتم (✗)", "ملاحظات"),
                ("تجهيز دورة المياه القريبة وصيانتها", "تم (✓) / لم يتم (✗)", "ملاحظات"),
                ("توفر ساعة حائط واضحة للزمن", "تم (✓) / لم يتم (✗)", "ملاحظات")
            ],
            "الحقول": ["اسم المُعد", "التوقيع المُعد", "اسم المُراجع", "التوقيع المُراجع", "تاريخ الاعتماد"],
            "البيانات": []
        },

        "QF-06-04-02: سجل استخدام الموارد المادية والتقنية": {
            "الاسم": "سجل استخدام الموارد المادية والتقنية",
            "الهدف": "توثيق استخدام الموارد المادية والتقنية في الأنشطة المختلفة",
            "البيانات العامة": [
                "اسم النشاط / الامتحان / التدريب",
                "تاريخ الاستخدام",
                "الجهة المسؤولة / القسم",
                "اسم المسؤول عن الاستخدام"
            ],
            "الحقول": [
                "م",
                "اسم المورد / الأداة",
                "الكمية المستخدمة",
                "الغرض من الاستخدام",
                "ملاحظات"
            ],
            "الاعتماد": ["اسم المُعد", "التوقيع", "اسم المراجع", "التوقيع", "تاريخ الاعتماد"],
            "البيانات": []
        },

        "QF-06-04-03: تقرير مراجعة بيئة الامتحانات": {
            "الاسم": "تقرير مراجعة بيئة الامتحانات",
            "الهدف": "تقييم ومراجعة بيئة الامتحانات للتأكد من ملاءمتها",
            "البيانات العامة": [
                "اسم المركز الامتحاني",
                "عنوان القاعة / القاعات",
                "تاريخ المراجعة",
                "اسم المراجع",
                "الجهة المنظمة للامتحان"
            ],
            "عناصر بيئة الامتحان": [
                ("الإضاءة الطبيعية والصناعية كافية", "التقييم (✓ / ✗)", "ملاحظات"),
                ("التهوية أو التكييف مناسب", "التقييم (✓ / ✗)", "ملاحظات"),
                ("عدد المقاعد مناسب لعدد الممتحنين", "التقييم (✓ / ✗)", "ملاحظات"),
                ("وجود مسافات مناسبة بين المقاعد", "التقييم (✓ / ✗)", "ملاحظات"),
                ("القاعة نظيفة وجاهزة بالكامل", "التقييم (✓ / ✗)", "ملاحظات"),
                ("توفر اللافتات الإرشادية (اتجاهات - تعليمات)", "التقييم (✓ / ✗)", "ملاحظات"),
                ("توفر أدوات الأمان (مخارج الطوارئ - مطفأة حريق)", "التقييم (✓ / ✗)", "ملاحظات"),
                ("توافر أدوات المراقبة (مراقب/كاميرات)", "التقييم (✓ / ✗)", "ملاحظات"),
                ("توفر ساعة حائط واضحة", "التقييم (✓ / ✗)", "ملاحظات"),
                ("دورات المياه نظيفة وقريبة من القاعة", "التقييم (✓ / ✗)", "ملاحظات"),
                ("لا توجد مؤثرات صوتية أو بصرية مشتتة", "التقييم (✓ / ✗)", "ملاحظات")
            ],
            "ملاحظات عامة": "",
            "التوصيات": "",
            "الحقول": ["اسم المراجع", "التوقيع", "تاريخ الاعتماد"],
            "البيانات": []
        },

        "QF-06-04-04: تقرير تقييم الموارد التقنية": {
            "الاسم": "تقرير تقييم الموارد التقنية",
            "الهدف": "تقييم حالة وأداء الموارد التقنية المستخدمة في الاعتماد",
            "البيانات العامة": [
                "اسم القسم/الوحدة",
                "تاريخ التقييم",
                "اسم القائم بالتقييم",
                "الموقع/المبنى"
            ],
            "الحقول": [
                "م",
                "اسم المورد/ الموديل",
                "حالة التشغيل",
                "تاريخ اخر صيانة",
                "ملاحظات"
            ],
            "ملاحظات عامة": "",
            "التوصيات": {
                "تحديث الموارد التالية": "",
                "صيانة عاجلة لـ": "",
                "استبدال الموارد التالية": "",
                "تحسينات مقترحة": ""
            },
            "الاعتماد": ["اسم المقيم", "التوقيع", "اسم المراجع", "التوقيع", "تاريخ الاعتماد"],
            "البيانات": []
        },
        
        # QP-07.1 Forms - إدارة طلبات الامتحان ونتائج التقييم
        "QF-07-01-01: نموذج طلب التقديم للامتحان": {
            "الاسم": "نموذج طلب التقديم للامتحان",
            "الهدف": "تسجيل طلبات المتقدمين للامتحانات مع جميع البيانات المطلوبة",
            "أولاً: البيانات الشخصية": [
                "الاسم الكامل",
                "الرقم القومي / رقم الهوية",
                "تاريخ الميلاد",
                "الجنسية",
                "رقم الهاتف",
                "البريد الإلكتروني",
                "العنوان الكامل"
            ],
            "ثانياً: تفاصيل الامتحان": [
                "اسم الشهادة / البرنامج الامتحاني",
                "الجهة المنظمة",
                "الفرع / المركز",
                "تاريخ التقديم المطلوب",
                "لغة الامتحان (العربية/الإنجليزية/أخرى)",
                "هل تقدمت سابقاً لهذا الامتحان؟ (نعم/لا)",
                "إذا كانت الإجابة نعم، اذكر التاريخ"
            ],
            "ثالثاً: الوثائق المرفقة": [
                "صورة بطاقة الهوية / جواز السفر",
                "صورة شخصية حديثة",
                "إثبات سداد رسوم الامتحان",
                "شهادة المؤهل الدراسي",
                "مستندات أخرى"
            ],
            "رابعاً: إقرار المتقدم": [
                "اسم المتقدم",
                "التوقيع",
                "التاريخ"
            ],
            "خامساً: للاستخدام الإداري فقط": [
                "تم استلام الطلب بواسطة",
                "التاريخ",
                "توقيع الموظف",
                "ملاحظات"
            ],
            "البيانات": []
        },
        
        "QF-07-01-02: سجل نتائج التقييمات والامتحانات": {
            "الاسم": "سجل نتائج التقييمات والامتحانات",
            "الهدف": "توثيق نتائج جميع التقييمات والامتحانات التي تم إجراؤها",
            "البيانات العامة": [
                "اسم البرنامج / الشهادة",
                "تاريخ الامتحان / التقييم",
                "اسم المركز / الفرع",
                "اسم المقيم / المراقب"
            ],
            "جدول نتائج التقييم": [
                "م",
                "إسم المتقدم",
                "رقم الهوية / الكود",
                "الدرجة",
                "التقدير (ناجح / راسب)",
                "ملاحظات"
            ],
            "الملاحظات العامة": "",
            "اعتماد السجل": [
                "اسم المُعد",
                "التوقيع",
                "اسم المراجع",
                "التوقيع",
                "تاريخ الاعتماد"
            ],
            "البيانات": []
        },
        
        "QF-07-01-03: سجل قرارات الاعتماد": {
            "الاسم": "سجل قرارات الاعتماد",
            "الهدف": "توثيق جميع قرارات الاعتماد الصادرة عن لجنة القرارات",
            "البيانات العامة": [
                "اسم الشهادة / البرنامج",
                "تاريخ إصدار القرار",
                "الجهة المعتمدة / اللجنة",
                "رئيس اللجنة"
            ],
            "جدول قرارات الاعتماد": [
                "م",
                "اسم المتقدم",
                "رقم الهوية / الكود",
                "نتيجة التقييم",
                "القرار (معتمد / غير معتمد)",
                "سبب القرار / ملاحظات"
            ],
            "توقيع أعضاء اللجنة": [
                "الاسم",
                "الصفة",
                "التوقيع"
            ],
            "اعتماد السجل": [
                "اسم مسؤول الاعتماد",
                "التوقيع",
                "تاريخ الاعتماد"
            ],
            "البيانات": []
        },
        
        "QF-07-01-04: تقرير شكاوى وتظلمات": {
            "الاسم": "تقرير شكاوى وتظلمات",
            "الهدف": "توثيق ومتابعة الشكاوى والتظلمات المقدمة من المتقدمين",
            "أولاً: بيانات مقدم الشكوى / التظلم": [
                "الاسم الكامل",
                "رقم الهوية / الكود",
                "رقم الهاتف",
                "البريد الإلكتروني",
                "تاريخ التقديم"
            ],
            "ثانياً: نوع الطلب": [
                "شكوى",
                "تظلم من نتيجة",
                "أخرى"
            ],
            "ثالثاً: تفاصيل الشكوى / التظلم": [
                "الموضوع",
                "التفاصيل"
            ],
            "رابعاً: الإجراءات المتخذة": [
                "تاريخ استلام الشكوى / التظلم",
                "الجهة المسؤولة عن التحقيق",
                "الإجراءات المتخذة"
            ],
            "خامساً: القرار النهائي": [
                "قبول الشكوى / التظلم",
                "رفض الشكوى / التظلم",
                "تم اتخاذ إجراء تصحيحي",
                "تم الرد على مقدم الطلب بتاريخ",
                "ملخص القرار"
            ],
            "سادساً: اعتماد التقرير": [
                "اسم المسؤول",
                "التوقيع",
                "الوظيفة",
                "التاريخ"
            ],
            "البيانات": []
        },
        
        "QF-07-01-05: تقرير إتلاف السجلات": {
            "الاسم": "تقرير إتلاف السجلات",
            "الهدف": "توثيق عمليات إتلاف السجلات المنتهية الصلاحية وفقاً للسياسات المعتمدة",
            "أولاً: البيانات العامة": [
                "الجهة / القسم",
                "تاريخ إعداد التقرير",
                "الموقع",
                "اسم المسؤول عن الإتلاف"
            ],
            "ثانياً: تفاصيل السجلات التي تم إتلافها": [
                "م",
                "اسم السجل / الوثيقة",
                "الفترة الزمنية التي تغطيها",
                "طريقة الإتلاف",
                "سبب الإتلاف",
                "ملاحظات"
            ],
            "ثالثاً: التصريح بالإتلاف": [
                "اسم المصرح بالإتلاف",
                "الوظيفة",
                "التوقيع",
                "تاريخ الإذن بالإتلاف"
            ],
            "رابعاً: تنفيذ الإتلاف": [
                "تم الإتلاف بواسطة",
                "تاريخ الإتلاف الفعلي",
                "طريقة الإتلاف"
            ],
            "خامساً: اعتماد التقرير": [
                "اسم المدير المسؤول",
                "التوقيع",
                "تاريخ الاعتماد"
            ],
            "البيانات": []
        },
        
        # QP-08.1 Forms - اعتماد المقيمين
        "QF-08-01-01: نموذج طلب اعتماد مقيم": {
            "الاسم": "نموذج طلب اعتماد مقيم",
            "الهدف": "تسجيل طلبات المقيمين للحصول على اعتماد لتنفيذ عمليات التقييم والاختبار",
            "أولاً: البيانات الشخصية": [
                "الاسم الكامل",
                "الرقم القومي / رقم الهوية",
                "تاريخ الميلاد",
                "الجنسية",
                "رقم الهاتف",
                "البريد الإلكتروني",
                "العنوان الكامل",
                "المؤهل العلمي",
                "التخصص"
            ],
            "ثانياً: الخبرات المهنية": [
                "سنوات الخبرة في مجال التخصص",
                "الوظيفة الحالية",
                "جهة العمل",
                "الخبرات السابقة في التقييم",
                "المؤهلات والشهادات المهنية"
            ],
            "ثالثاً: مجال الاعتماد المطلوب": [
                "نوع التقييم المطلوب",
                "التخصصات المطلوبة",
                "المستوى المطلوب للاعتماد",
                "مبررات الطلب"
            ],
            "رابعاً: المستندات المرفقة": [
                "صورة الهوية",
                "المؤهلات العلمية",
                "شهادات الخبرة",
                "شهادات التدريب",
                "رسائل التوصية"
            ],
            "خامساً: إقرار المتقدم": [
                "إقرار بصحة البيانات",
                "الالتزام بمعايير التقييم",
                "الالتزام بالسرية والحيادية",
                "توقيع المتقدم",
                "التاريخ"
            ],
            "البيانات": []
        },
        
        "QF-08-01-02: سجل تقييم اعتماد المقيم": {
            "الاسم": "سجل تقييم اعتماد المقيم",
            "الهدف": "توثيق عملية تقييم المقيم وتسجيل النتائج والقرارات",
            "بيانات المقيم": [
                "اسم المقيم",
                "رقم الطلب",
                "التخصص المطلوب",
                "تاريخ التقييم"
            ],
            "التقييم النظري": [
                "معرفة معايير التقييم",
                "فهم إجراءات الاعتماد",
                "المعرفة التخصصية",
                "النتيجة النظرية"
            ],
            "التقييم العملي": [
                "القدرة على إجراء التقييم",
                "الموضوعية والحيادية",
                "مهارات التواصل",
                "النتيجة العملية"
            ],
            "تقييم الشخصية والسلوك": [
                "النزاهة والأمانة",
                "الالتزام المهني",
                "القدرة على التعامل مع الضغوط",
                "التقييم الشخصي"
            ],
            "النتيجة النهائية": [
                "النتيجة الإجمالية",
                "التوصية",
                "نطاق الاعتماد المقترح",
                "الملاحظات"
            ],
            "اعتماد التقييم": [
                "اسم المقيم الرئيسي",
                "التوقيع",
                "اسم المراجع",
                "التوقيع",
                "التاريخ"
            ],
            "البيانات": []
        },
        
        "QF-08-01-03: سجل تجديد تعليق سحب اعتماد المقيم": {
            "الاسم": "سجل تجديد تعليق سحب اعتماد المقيم",
            "الهدف": "توثيق جميع الإجراءات المتعلقة بحالة اعتماد المقيم من تجديد أو تعليق أو سحب",
            "بيانات المقيم": [
                "اسم المقيم",
                "رقم الاعتماد",
                "تاريخ الاعتماد الأصلي",
                "نطاق الاعتماد الحالي",
                "تاريخ انتهاء الاعتماد"
            ],
            "نوع الإجراء": [
                "تجديد الاعتماد",
                "تعليق الاعتماد",
                "سحب الاعتماد",
                "تعديل نطاق الاعتماد"
            ],
            "أسباب الإجراء": [
                "انتهاء صلاحية الاعتماد",
                "عدم الالتزام بالمعايير",
                "شكاوى مُبررة",
                "طلب المقيم",
                "تغيير المؤهلات"
            ],
            "تفاصيل الإجراء": [
                "تاريخ الإجراء",
                "الجهة المسؤولة",
                "التبرير التفصيلي",
                "المستندات المرفقة"
            ],
            "القرار النهائي": [
                "قرار اللجنة",
                "تاريخ نفاذ القرار",
                "نطاق الاعتماد الجديد",
                "مدة الاعتماد الجديد",
                "الشروط الخاصة"
            ],
            "اعتماد القرار": [
                "رئيس اللجنة",
                "التوقيع",
                "أعضاء اللجنة",
                "التاريخ"
            ],
            "البيانات": []
        },
        
        # QP-08.2 Forms - اعتماد المراكز
        "QF-08-02-01: نموذج طلب اعتماد مركز": {
            "الاسم": "نموذج طلب اعتماد مركز",
            "الهدف": "تسجيل طلبات المراكز للحصول على اعتماد لتقديم برامج التدريب والتقييم",
            "بيانات المركز": [
                "اسم المركز",
                "الرقم التجاري / رقم التسجيل",
                "العنوان الكامل",
                "رقم الهاتف",
                "البريد الإلكتروني",
                "الموقع الإلكتروني",
                "نوع المؤسسة",
                "سنة التأسيس"
            ],
            "بيانات المسؤول": [
                "اسم المدير العام",
                "المؤهل العلمي",
                "الخبرة المهنية",
                "رقم الهاتف",
                "البريد الإلكتروني"
            ],
            "البرامج المطلوب اعتمادها": [
                "اسم البرنامج",
                "مجال التخصص",
                "المستوى المطلوب",
                "عدد المتدربين المتوقع"
            ],
            "البنية التحتية": [
                "القاعات التدريبية",
                "المعامل والورش",
                "الأجهزة والمعدات",
                "المكتبة والمراجع",
                "التقنيات المتاحة"
            ],
            "الكوادر البشرية": [
                "عدد المدربين",
                "مؤهلات المدربين",
                "خبرات المدربين",
                "عدد الموظفين الإداريين"
            ],
            "المستندات المرفقة": [
                "السجل التجاري",
                "ترخيص المزاولة",
                "المخططات المعمارية",
                "قائمة المعدات",
                "السير الذاتية للمدربين"
            ],
            "البيانات": []
        },
        
        "QF-08-02-02: سجل التقييم والاختبار": {
            "الاسم": "سجل التقييم والاختبار للمراكز",
            "الهدف": "توثيق عملية تقييم المراكز المتقدمة للاعتماد وتسجيل نتائج التقييم",
            "بيانات المركز": [
                "اسم المركز",
                "رقم الطلب",
                "تاريخ الزيارة",
                "فريق التقييم"
            ],
            "تقييم البنية التحتية": [
                "ملاءمة القاعات",
                "توفر المعدات",
                "الأمان والسلامة",
                "النظافة والتنظيم",
                "النتيجة"
            ],
            "تقييم الكوادر البشرية": [
                "كفاءة المدربين",
                "الخبرة والمؤهلات",
                "القدرة على التواصل",
                "الالتزام المهني",
                "النتيجة"
            ],
            "تقييم البرامج": [
                "جودة المناهج",
                "طرق التدريب",
                "أساليب التقييم",
                "المتابعة والتطوير",
                "النتيجة"
            ],
            "تقييم الإدارة": [
                "نظم الإدارة",
                "التوثيق والسجلات",
                "خدمة العملاء",
                "التطوير المستمر",
                "النتيجة"
            ],
            "النتيجة النهائية": [
                "النتيجة الإجمالية",
                "التوصية",
                "الشروط الخاصة",
                "مدة الاعتماد المقترحة"
            ],
            "البيانات": []
        },
        
        "QF-08-02-03: سجل تجديد أو سحب اعتماد المركز": {
            "الاسم": "سجل تجديد أو سحب اعتماد المركز",
            "الهدف": "توثيق إجراءات تجديد أو سحب اعتماد المراكز وفقاً للأداء والالتزام بالمعايير",
            "بيانات المركز": [
                "اسم المركز",
                "رقم الاعتماد",
                "تاريخ الاعتماد الأصلي",
                "نطاق الاعتماد",
                "تاريخ انتهاء الاعتماد"
            ],
            "نوع الإجراء": [
                "تجديد الاعتماد",
                "سحب الاعتماد",
                "تعليق الاعتماد",
                "تعديل النطاق"
            ],
            "تقييم الأداء": [
                "التزام المركز بالمعايير",
                "جودة البرامج المقدمة",
                "رضا المتدربين",
                "معدل النجاح",
                "الشكاوى المسجلة"
            ],
            "أسباب القرار": [
                "انتهاء مدة الاعتماد",
                "تراجع في الأداء",
                "عدم الالتزام بالمعايير",
                "شكاوى مُبررة",
                "طلب المركز"
            ],
            "القرار النهائي": [
                "نوع القرار",
                "تاريخ نفاذ القرار",
                "مدة الاعتماد الجديد",
                "الشروط الجديدة",
                "إجراءات المتابعة"
            ],
            "البيانات": []
        },
        
        # QP-08.3 Forms - تحديد الكفاءات
        "QF-08-03-01: نموذج تحديد الكفاءات المطلوبة": {
            "الاسم": "نموذج تحديد الكفاءات المطلوبة",
            "الهدف": "تحديد وتوثيق الكفاءات المطلوبة للمقيمين والمدربين في التخصصات المختلفة",
            "بيانات البرنامج": [
                "اسم البرنامج",
                "مجال التخصص",
                "المستوى",
                "الفئة المستهدفة",
                "مدة البرنامج"
            ],
            "الكفاءات الفنية": [
                "المعرفة النظرية المطلوبة",
                "المهارات العملية",
                "الخبرة المطلوبة",
                "المؤهلات الأكاديمية",
                "الشهادات المهنية"
            ],
            "الكفاءات السلوكية": [
                "مهارات التواصل",
                "القيادة والتوجيه",
                "العمل الجماعي",
                "حل المشكلات",
                "التطوير الذاتي"
            ],
            "كفاءات التقييم": [
                "مهارات التقييم",
                "الموضوعية والحيادية",
                "إعداد الاختبارات",
                "تحليل النتائج",
                "كتابة التقارير"
            ],
            "معايير القياس": [
                "طرق التقييم",
                "أدوات القياس",
                "معايير النجاح",
                "مؤشرات الأداء"
            ],
            "البيانات": []
        },
        
        "QF-08-03-02: سجل تقييم الكفاءات": {
            "الاسم": "سجل تقييم الكفاءات",
            "الهدف": "توثيق عملية تقييم كفاءات المقيمين والمدربين مقابل المعايير المحددة",
            "بيانات المُقيَّم": [
                "الاسم",
                "التخصص",
                "الوظيفة",
                "تاريخ التقييم",
                "المقيم"
            ],
            "تقييم الكفاءات الفنية": [
                "المعرفة النظرية",
                "المهارات العملية",
                "الخبرة المهنية",
                "التطوير المستمر",
                "النتيجة"
            ],
            "تقييم الكفاءات السلوكية": [
                "التواصل الفعال",
                "القيادة",
                "العمل الجماعي",
                "حل المشكلات",
                "النتيجة"
            ],
            "تقييم كفاءات التقييم": [
                "مهارات التقييم",
                "الموضوعية",
                "إعداد الاختبارات",
                "تحليل النتائج",
                "النتيجة"
            ],
            "النتيجة الإجمالية": [
                "التقدير العام",
                "نقاط القوة",
                "نقاط التحسين",
                "خطة التطوير",
                "التوصيات"
            ],
            "البيانات": []
        },
        
        # QP-08.4 Forms - المتطلبات الإضافية
        "QF-08-04-01: نموذج دمج المتطلبات الإضافية": {
            "الاسم": "نموذج دمج المتطلبات الإضافية في برنامج الاعتماد",
            "الهدف": "توثيق وإدارة المتطلبات الإضافية الخاصة ببعض البرامج والتخصصات",
            "بيانات البرنامج": [
                "اسم البرنامج",
                "الكود",
                "مجال التخصص",
                "الجهة الطالبة",
                "تاريخ الطلب"
            ],
            "المتطلبات الإضافية": [
                "نوع المتطلب",
                "الوصف التفصيلي",
                "المبرر",
                "المعايير الخاصة",
                "طرق التحقق"
            ],
            "التأثير على البرنامج": [
                "التعديلات المطلوبة",
                "الموارد الإضافية",
                "الوقت المطلوب",
                "التكلفة الإضافية"
            ],
            "خطة التنفيذ": [
                "الخطوات المطلوبة",
                "الجدول الزمني",
                "المسؤوليات",
                "مؤشرات النجاح"
            ],
            "الموافقات": [
                "موافقة اللجنة الفنية",
                "موافقة الإدارة",
                "موافقة الجهة الطالبة",
                "تاريخ الاعتماد"
            ],
            "البيانات": []
        },
        
        "QF-08-04-02: سجل المراجعة والتحديث للمتطلبات الإضافية": {
            "الاسم": "سجل المراجعة والتحديث للمتطلبات الإضافية",
            "الهدف": "متابعة ومراجعة المتطلبات الإضافية المطبقة وتحديثها حسب الحاجة",
            "بيانات المراجعة": [
                "اسم البرنامج",
                "رقم المتطلب",
                "تاريخ المراجعة",
                "المراجع",
                "نوع المراجعة"
            ],
            "تقييم فعالية المتطلبات": [
                "مدى تحقيق الأهداف",
                "ردود فعل المستفيدين",
                "التحديات المواجهة",
                "النتائج المحققة"
            ],
            "التحديثات المطلوبة": [
                "نوع التحديث",
                "المبرر",
                "التفاصيل",
                "التأثير المتوقع"
            ],
            "الإجراءات المتخذة": [
                "التعديلات المنفذة",
                "الموارد المضافة",
                "التدريب المطلوب",
                "الجدول الزمني"
            ],
            "المتابعة": [
                "مؤشرات الأداء",
                "تاريخ المراجعة القادمة",
                "المسؤول عن المتابعة",
                "الملاحظات"
            ],
            "البيانات": []
        },
        
        # QP-07.2 Forms - إدارة معلومات البرنامج
        "QF-07-02-01: نموذج معلومات عامة للبرنامج": {
            "الاسم": "نموذج معلومات عامة للبرنامج",
            "الهدف": "توثيق جميع المعلومات التفصيلية عن البرامج المقدمة من الأكاديمية",
            "البيانات الأساسية": [
                "اسم البرنامج",
                "نوع البرنامج",
                "تاريخ الإصدار", 
                "مدة البرنامج",
                "لغة التقديم",
                "الفئة المستهدفة",
                "جهة الاعتماد (إن وُجد)"
            ],
            "أهداف البرنامج": "",
            "مخرجات التعلم المتوقعة": [
                "مخرج التعلم الأول",
                "مخرج التعلم الثاني", 
                "مخرج التعلم الثالث",
                "مخرجات إضافية"
            ],
            "متطلبات الالتحاق": [
                "مؤهل معين",
                "خبرة مهنية",
                "مستوى لغوي",
                "لا توجد متطلبات",
                "متطلبات أخرى"
            ],
            "محتوى البرنامج": [
                ("م", "الوحدة / الموضوع", "عدد الساعات", "طريقة التقييم", "ملاحظات")
            ],
            "طرق التقييم المستخدمة": [
                "اختبارات كتابية",
                "اختبارات عملية", 
                "مقابلات شفوية",
                "تقييم الأداء",
                "طرق أخرى"
            ],
            "معلومات إضافية": [
                "مكان تنفيذ البرنامج",
                "الجهة المنفذة",
                "بيانات الاتصال"
            ],
            "اعتماد النموذج": [
                "اسم المعد",
                "توقيع المعد",
                "اسم المراجع", 
                "توقيع المراجع",
                "تاريخ الاعتماد"
            ],
            "البيانات": []
        },
        
        "QF-07-02-02: تقرير تحديث المعلومات العامة": {
            "الاسم": "تقرير تحديث المعلومات العامة",
            "الهدف": "توثيق عمليات تحديث معلومات البرامج والتغييرات التي تم إجراؤها",
            "البيانات العامة": [
                "اسم البرنامج / الشهادة",
                "القسم / الوحدة المسؤولة",
                "تاريخ التحديث",
                "اسم الشخص المسؤول عن التحديث"
            ],
            "تفاصيل التحديثات": [
                ("م", "البند / القسم الذي تم تحديثه", "المعلومات السابقة", "المعلومات بعد التحديث", "سبب التحديث", "ملاحظات")
            ],
            "الجهات المُبلغة بالتحديث": [
                "فريق التدريب",
                "لجنة الاعتماد",
                "الإدارة العليا",
                "قسم التقييم",
                "المراقبون",
                "جهات أخرى"
            ],
            "توقيع واعتماد التقرير": [
                "اسم المعد",
                "توقيع المعد",
                "اسم المراجع",
                "توقيع المراجع",
                "تاريخ الاعتماد"
            ],
            "البيانات": []
        },
        
        # QP-07.3 Forms - السرية وحماية البيانات الشخصية
        "QF-07-03-01: نموذج اتفاقية سرية للموظفين والمتعاقدين": {
            "الاسم": "نموذج اتفاقية سرية للموظفين والمتعاقدين",
            "الهدف": "ضمان التزام جميع الموظفين والمتعاقدين بحماية البيانات الشخصية والمعلومات السرية",
            "بيانات الموظف/المتعاقد": [
                "الاسم الكامل",
                "رقم الهوية",
                "المنصب/طبيعة العمل",
                "القسم",
                "تاريخ بدء العمل"
            ],
            "بنود الاتفاقية": [
                "الالتزام بعدم إفشاء المعلومات السرية",
                "حماية البيانات الشخصية للعملاء",
                "عدم استخدام المعلومات لأغراض شخصية",
                "الإبلاغ عن أي انتهاكات للبيانات",
                "إرجاع جميع المواد السرية عند انتهاء العمل"
            ],
            "الالتزامات": [
                "مدة سريان الاتفاقية",
                "العقوبات في حالة الانتهاك",
                "إجراءات التعامل مع البيانات",
                "التدريب على حماية البيانات"
            ],
            "التوقيعات": [
                "الموظف/المتعاقد",
                "مدير الموارد البشرية",
                "مسؤول حماية البيانات"
            ],
            "البيانات": []
        },
        
        "QF-07-03-02: تقرير مراجعة البيانات الشخصية": {
            "الاسم": "تقرير مراجعة البيانات الشخصية",
            "الهدف": "توثيق عمليات المراجعة الدورية للبيانات الشخصية المحفوظة لدى الأكاديمية",
            "البيانات العامة": [
                "تاريخ المراجعة",
                "المسؤول عن المراجعة",
                "نطاق المراجعة",
                "الأنظمة المشمولة"
            ],
            "الحقول": [
                "م",
                "نوع البيانات",
                "عدد السجلات",
                "تاريخ آخر استخدام",
                "ضرورة الاحتفاظ",
                "الإجراء المطلوب (حفظ/حذف/أرشفة)"
            ],
            "نتائج المراجعة": [
                "عدد السجلات المحذوفة",
                "عدد السجلات المؤرشفة",
                "البيانات المحدثة",
                "التوصيات"
            ],
            "البيانات": []
        },
        
        # QP-07.4 Forms - أمن المعلومات والحوادث الأمنية  
        "QF-07-04-01: نموذج تقرير عن الحوادث الأمنية": {
            "الاسم": "نموذج تقرير عن الحوادث الأمنية",
            "الهدف": "توثيق الحوادث الأمنية التي تؤثر على أنظمة المعلومات والبيانات",
            "بيانات الحادث": [
                "رقم الحادث",
                "تاريخ ووقت الاكتشاف",
                "الشخص المبلغ",
                "طريقة الاكتشاف"
            ],
            "وصف الحادث": [
                "نوع الحادث الأمني",
                "الأنظمة المتأثرة",
                "وصف تفصيلي للحادث",
                "الأضرار المحتملة",
                "البيانات المتأثرة"
            ],
            "الاستجابة الفورية": [
                "الإجراءات المتخذة فوراً",
                "فريق الاستجابة المُفعل",
                "وقت احتواء الحادث",
                "الأنظمة المعزولة"
            ],
            "الحقول": ["التحليل والأسباب", "الإجراءات التصحيحية", "الإجراءات الوقائية", "المسؤول عن التنفيذ"],
            "البيانات": []
        },
        
        "QF-07-04-02: سجل أمن المعلومات": {
            "الاسم": "سجل أمن المعلومات",
            "الهدف": "توثيق جميع الأنشطة المتعلقة بأمن المعلومات والمراقبة المستمرة للأنظمة",
            "البيانات العامة": [
                "الشهر/السنة",
                "مسؤول أمن المعلومات",
                "نطاق المراقبة",
                "الأنظمة المشمولة"
            ],
            "الأنشطة الأمنية": [
                "تحديث أنظمة الحماية",
                "فحص الثغرات الأمنية",
                "مراجعة صلاحيات الوصول",
                "النسخ الاحتياطية",
                "التدريب على الأمان"
            ],
            "التهديدات والمخاطر": [
                "التهديدات المكتشفة",
                "مستوى الخطورة",
                "الإجراءات المتخذة",
                "النتائج"
            ],
            "الحقول": ["التاريخ", "النشاط", "النتيجة", "التوصيات"],
            "البيانات": []
        },
        
        # QF-09 Forms - Section 9: Certification Process
        "QF-09-01-01: نموذج طلب التقديم للبرنامج": {
            "الاسم": "نموذج طلب التقديم للبرنامج",
            "الهدف": "نموذج رسمي لجمع البيانات الأساسية للمتقدمين للبرامج المعتمدة",
            "البيانات الشخصية": [
                "الاسم الكامل",
                "تاريخ الميلاد",
                "الجنس (ذكر/أنثى)",
                "رقم الهوية/جواز السفر",
                "الجنسية",
                "البريد الإلكتروني",
                "رقم الهاتف",
                "العنوان"
            ],
            "بيانات البرنامج": [
                "اسم البرنامج المتقدم له",
                "كود البرنامج (إن وُجد)",
                "دورة/دفعة رقم",
                "تاريخ البدء المتوقع",
                "طريقة الدراسة (حضور مباشر/أونلاين/مدمج)"
            ],
            "المؤهلات التعليمية": [
                "المؤهل",
                "التخصص", 
                "اسم المؤسسة التعليمية",
                "سنة التخرج"
            ],
            "الخبرات العملية": [
                "جهة العمل",
                "الوظيفة",
                "مدة العمل",
                "ملاحظات"
            ],
            "المستندات المرفقة": [
                "صورة من الهوية/جواز السفر",
                "صورة شخصية",
                "الشهادات الدراسية",
                "السيرة الذاتية",
                "شهادات خبرة (إن وُجدت)",
                "أخرى"
            ],
            "إقرار مقدم الطلب": [
                "الاسم",
                "التوقيع",
                "التاريخ"
            ],
            "النموذج الكامل": """أولًا: البيانات الشخصية لمقدم الطلب
• الاسم الكامل: _______________________________
• تاريخ الميلاد: ____ / ____ / ______
• الجنس: ☐ ذكر  ☐ أنثى
• رقم الهوية / جواز السفر: _______________________________
• الجنسية: _______________________________
• البريد الإلكتروني: _______________________________
• رقم الهاتف: _______________________________
• العنوان: _______________________________
________________________________________
ثانيًا: بيانات البرنامج
• اسم البرنامج المتقدم له: _______________________________
• كود البرنامج (إن وُجد): _______________________________
• دورة / دفعة رقم: _______________________________
• تاريخ البدء المتوقع: ____ / ____ / ______
• طريقة الدراسة:
☐ حضور مباشر    ☐ أونلاين    ☐ مدمج 
________________________________________
ثالثًا: المؤهلات التعليمية
المؤهل | التخصص | اسم المؤسسة التعليمية | سنة التخرج
________|_________|_____________________|__________
        |         |                     |
________________________________________
رابعًا: الخبرات العملية (إن وُجدت)
جهة العمل | الوظيفة | مدة العمل | ملاحظات
__________|_________|___________|_________
          |         |           |
________________________________________
خامسًا: المستندات المرفقة
☐ صورة من الهوية / جواز السفر
☐ صورة شخصية
☐ الشهادات الدراسية
☐ السيرة الذاتية
☐ شهادات خبرة (إن وُجدت)
☐ أخرى___________________________________
________________________________________
سادسًا: إقرار مقدم الطلب
أقر أنا الموقع أدناه بأن جميع البيانات الواردة أعلاه صحيحة وكاملة، وأتحمل المسؤولية القانونية في حال ثبوت خلاف ذلك.
• الاسم: __________________________
• التوقيع: _________________________
• التاريخ: ____ / ____ / ______""",
            "الحقول": ["رقم الطلب", "تاريخ التقديم", "حالة الطلب", "ملاحظات"],
            "البيانات": []
        },
        
        "QF-09-01-02: اتفاقية التزام المتقدم بالبرنامج": {
            "الاسم": "اتفاقية التزام المتقدم بالبرنامج",
            "الهدف": "تنظيم العلاقة بين المتقدم والجهة المنظمة وتحديد الالتزامات المتبادلة",
            "بيانات المتقدم": [
                "الاسم الكامل",
                "رقم الهوية/جواز السفر",
                "البرنامج المتقدم له",
                "الدورة/الدفعة",
                "تاريخ التقديم"
            ],
            "بنود الاتفاقية": [
                "صحة ودقة المعلومات المقدمة",
                "الالتزام بحضور جميع المحاضرات والجلسات",
                "احترام مواعيد البرنامج",
                "الامتناع عن السلوك المخل بآداب التعلم",
                "المحافظة على سرية المواد التدريبية",
                "عدم التصوير أو التسجيل بدون إذن",
                "الالتزام بمتطلبات التقييم والاختبارات",
                "تفويض الجهة باستخدام البيانات للأغراض الأكاديمية"
            ],
            "العواقب": [
                "الإنذار في حالة الإخلال",
                "إلغاء المشاركة دون استرداد الرسوم"
            ],
            "النموذج الكامل": """أولًا: بيانات المتقدم
• الاسم الكامل: __________________________________________
• رقم الهوية / جواز السفر: _______________________________
• البرنامج المتقدم له: _____________________________________
• الدورة / الدفعة: _______________
• تاريخ التقديم: ____ / ____ / ______
________________________________________
ثانيًا: نص الاتفاقية
أنا الموقع أدناه أقر وألتزم بما يلي:
1. أن جميع المعلومات والوثائق التي قدمتها صحيحة ودقيقة.
2. الالتزام الكامل بحضور جميع المحاضرات والجلسات التدريبية الخاصة بالبرنامج، سواء كانت حضورية أو إلكترونية، وفق الجدول المعتمد.
3. احترام مواعيد البرنامج وعدم الانقطاع دون عذر رسمي مقبول.
4. الامتناع عن أي سلوك يخلّ بآداب التعلم أو يسيء إلى زملاء البرنامج أو المدربين أو الجهة المنظمة.
5. المحافظة على سرية أي معلومات أو مواد تدريبية يتم تسليمها خلال البرنامج، وعدم استخدامها إلا لأغراض التعلم.
6. عدم تصوير أو تسجيل أي جلسة تدريبية دون إذن مسبق من الجهة المنظمة.
7. الالتزام بأي متطلبات تقييم أو اختبارات ضمن البرنامج.
8. تفويض الجهة المنظمة باستخدام بياناتي لأغراض التوثيق والتواصل الأكاديمي والتقارير المطلوبة.
9. العلم بأن الإخلال بأي بند من هذه الاتفاقية قد يؤدي إلى إنذاري أو إلغاء مشاركتي في البرنامج دون استرداد أي رسوم (إن وُجدت).
________________________________________
ثالثًا: توقيع الالتزام
• اسم المتقدم: ____________________________
• التوقيع: _________________________________
• التاريخ: ____ / ____ / ______
________________________________________
رابعًا: اعتماد الجهة المنظمة
• اسم ممثل الجهة: _________________________
• الصفة / الوظيفة: _________________________
• التوقيع: _________________________________
• التاريخ: ____ / ____ / ______""",
            "الحقول": ["تاريخ الاتفاقية", "توقيع المتقدم", "توقيع المسؤول"],
            "البيانات": []
        },
        
        "QF-09-01-03: سجل مراجعة طلبات التقديم": {
            "الاسم": "سجل مراجعة طلبات التقديم",
            "الهدف": "توثيق عملية مراجعة وتقييم طلبات التقديم للبرامج",
            "بيانات البرنامج": [
                "اسم البرنامج",
                "الدفعة/الدورة رقم",
                "تاريخ بدء البرنامج",
                "اسم الموظف المسؤول عن المراجعة"
            ],
            "تفاصيل المراجعة": [
                "رقم الطلب",
                "اسم المتقدم",
                "تاريخ التقديم",
                "المستندات مكتملة (✓/✗)",
                "تنطبق الشروط (✓/✗)",
                "الحالة النهائية (مقبول/مرفوض/بحاجة لاستيفاء)",
                "ملاحظات"
            ],
            "إحصائيات القرارات": [
                "عدد الطلبات المستلمة",
                "عدد الطلبات المقبولة",
                "عدد الطلبات المرفوضة",
                "عدد الطلبات التي تحتاج استيفاء"
            ],
            "النموذج الكامل": """أولًا: بيانات البرنامج
• اسم البرنامج: ___________________________________________
• الدفعة / الدورة رقم: _______________
• تاريخ بدء البرنامج: ____ / ____ / ______
• اسم الموظف المسؤول عن المراجعة: __________________________
________________________________________
ثانيًا: تفاصيل مراجعة الطلبات
م | اسم المتقدم | تاريخ التقديم | المستندات مكتملة؟ (✓/✗) | تنطبق الشروط؟ (✓/✗) | الحالة النهائية (مقبول / مرفوض / بحاجة لاستيفاء) | ملاحظات
1 |             |               |                           |                        |                                                              |
2 |             |               |                           |                        |                                                              |
3 |             |               |                           |                        |                                                              |
4 |             |               |                           |                        |                                                              |
________________________________________
ثالثًا: توثيق قرارات المراجعة
• عدد الطلبات المستلمة: ____________
• عدد الطلبات المقبولة: ____________
• عدد الطلبات المرفوضة: ____________
• عدد الطلبات التي تحتاج استيفاء: ____________
________________________________________
رابعًا: توقيع واعتماد المراجع
• الاسم: __________________________
• الوظيفة: _________________________
• التوقيع: _________________________
• التاريخ: ____ / ____ / ______""",
            "الحقول": ["المراجع المسؤول", "تاريخ المراجعة", "النتيجة النهائية", "التوقيع"],
            "البيانات": []
        },
        
        "QF-09-02-01: نموذج تقييم المؤهلات السابقة": {
            "الاسم": "نموذج تقييم المؤهلات السابقة",
            "الهدف": "تقييم وفحص المؤهلات الأكاديمية والمهنية للمتقدمين",
            "المحتوى": """أولًا: بيانات المتقدم
• الاسم الكامل____________________________________________
• رقم الهوية / جواز السفر_________________________________
• البرنامج المتقدم له_______________________________________
• تاريخ التقديم____ / ____ / ______
• تاريخ التقييم____ / ____ / ______
________________________________________
ثانيًا: المؤهلات المقدمة
م	اسم المؤهل	التخصص	الجهة المانحة	سنة التخرج	المرفقات متوفرة؟ (✓/✗)
1					
2					
3					

________________________________________

ثالثًا: معايير التقييم
المعيار	ينطبق (✓)	لا ينطبق (✗)	ملاحظات
المؤهل معتمد من جهة رسمية			
التخصص مرتبط بالبرنامج			
المستوى الأكاديمي مناسب			
توافر الوثائق الداعمة			
المؤهل حديث / ضمن الفترة المطلوبة			

________________________________________
رابعًا: التوصية النهائية
☐ قبول المؤهل واعتباره مستوفيًا للشروط
☐ قبول مشروط – مطلوب استكمال______________________________
☐ عدم قبول المؤهل – الأسباب_________________________________

________________________________________

خامسًا: توقيع المقيم
• الاسم____________________________
• الوظيفة / القسم____________________________
• التوقيع____________________________
• التاريخ____ / ____ / ______""",
            "الحقول": ["اسم المتقدم", "المؤهلات المقدمة", "نتيجة التقييم", "توقيع المقيم"],
            "البيانات": []
        },
        
        "QF-09-02-02: نموذج تقييم الخبرة العملية": {
            "الاسم": "نموذج تقييم الخبرة العملية",
            "الهدف": "تقييم وفحص الخبرة العملية والمهنية للمتقدمين",
            "المحتوى": """أولًا: بيانات المتقدم
• الاسم الكامل__________________________________________
• رقم الهوية / جواز السفر_______________________________
• البرنامج / المسار المتقدم له____________________________
• تاريخ تقديم الطلب____ / ____ / ______
• تاريخ تقييم الخبرة____ / ____ / ______
________________________________________
ثانيًا: تفاصيل الخبرة العملية المقدمة
م	جهة العمل	الوظيفة / المسمى الوظيفي	مدة العمل	طبيعة المهام	يوجد إثبات خبرة؟ (✓/✗)
1					
2					
3					

________________________________________

ثالثًا: معايير التقييم
المعيار	ينطبق (✓)	لا ينطبق (✗)	الملاحظات
الخبرة مرتبطة بتخصص البرنامج			
المدة المطلوبة مستوفاة			
وجود وثائق / شهادات خبرة رسمية			
المهام والوظيفة مناسبة للمستوى المطلوب			
اتساق المعلومات المقدمة مع السيرة الذاتية			

________________________________________
رابعًا: التوصية
☐ الخبرة العملية مقبولة
☐ الخبرة مقبولة جزئيًا – يُطلب توضيح أو استكمال في_______________
☐ الخبرة غير مقبولة – الأسباب_________________________________
________________________________________

خامسًا: توقيع المقيم
• الاسم____________________________
• القسم / الصفة____________________________
• التوقيع____________________________
• التاريخ____ / ____ / ______""",
            "الحقول": ["اسم المتقدم", "تفاصيل الخبرة", "نتيجة التقييم", "توقيع المقيم"],
            "البيانات": []
        },
        
        "QF-09-02-03: نموذج تقييم الامتحانات والتمارين العملية": {
            "الاسم": "نموذج تقييم الامتحانات والتمارين العملية",
            "الهدف": "تقييم الأداء العملي والامتحانات للمتقدمين",
            "المحتوى": """أولًا: بيانات المتقدم
• الاسم الكامل__________________________________________
• رقم الهوية / الكود_______________________________
• البرنامج / الدورة______________________________________
• تاريخ التقييم العملي____ / ____ / ______
• اسم المُقيِّم__________________________________________
________________________________________
ثانيًا: عناصر التقييم العملي
م	بند التقييم	الوزن النسبي	درجة التقييم (من 100 أو حسب التوزيع)	ملاحظات
1	التحضير والتنظيم	%		
2	فهم المتطلبات / التعليمات	%		
3	دقة التنفيذ	%		
4	إدارة الوقت	%		
5	الالتزام بمعايير السلامة / الجودة	%		
6	مهارات التواصل أثناء التنفيذ	%		
7	النتيجة النهائية للعمل	%		

• الدرجة النهائية__________ / 100
• النتيجة☐  ناجح    ☐  لم يجتز
________________________________________
ثالثًا: ملاحظات المُقيِّم
________________________________________
________________________________________
________________________________________
________________________________________

رابعًا: توقيع الأطراف
الاسم	الصفة	التوقيع	التاريخ
المُقيِّم			
المتقدم			""",
            "الحقول": ["اسم المتقدم", "عناصر التقييم", "الدرجة النهائية", "توقيع الأطراف"],
            "البيانات": []
        },
        
        "QF-09-02-04: سجل نتائج التقييم": {
            "الاسم": "سجل نتائج التقييم",
            "الهدف": "توثيق نتائج تقييم جميع المتقدمين للبرامج",
            "المحتوى": """أولًا: بيانات البرنامج
• اسم البرنامج / الشهادة_____________________________________
• رقم الدورة / المجموعة_______________
• تاريخ التقييم____ / ____ / ______
• نوع التقييم:
☐  كتابي   ☐  عملي    ☐  مقابلة  ☐  مراجعة ملف  ☐  أخرى____________
• اسم المقيم / اللجنة_______________________________________
________________________________________
ثانيًا: نتائج المتقدمين
م	اسم المتقدم	الرقم التعريفي	الدرجة النهائية	التقدير (ناجح / لم يجتز)	ملاحظات
1					
2					
3					
4					
5					

ملاحظة: يمكن تخصيص أعمدة إضافية مثل "الدرجة من التقييم العملي" و"الدرجة من المقابلة" حسب الحاجة.
________________________________________
ثالثًا: التوصيات العامة
☐ إصدار الشهادات للناجحين
☐ إعادة التقييم لمن لم يجتز
☐ رفع النتائج إلى النظام الإلكتروني
☐ إخطار المتقدمين بالنتائج
________________________________________
رابعًا: اعتماد السجل
الاسم	الصفة	التوقيع	التاريخ
			""",
            "الحقول": ["البرنامج", "نتائج المتقدمين", "التوصيات", "اعتماد السجل"],
            "البيانات": []
        },
        
        "QF-09-03-01: نموذج الامتحان": {
            "الاسم": "نموذج الامتحان",
            "الهدف": "توثيق إعداد وتنظيم امتحانات الاعتماد المهني",
            "المحتوى": """أولًا: بيانات الامتحان
• اسم البرنامج / الشهادة_____________________________________
• كود الامتحان_______________
• تاريخ الامتحان____ / ____ / ______
• وقت البداية_________ وقت النهاية_________
• مدة الامتحان___________ دقيقة/ساعة
• نوع الامتحان:
☐  نظري كتابي   ☐  عملي    ☐  شفهي  ☐  مختلط  ☐  إلكتروني
• مكان الامتحان________________________________________
• عدد المتقدمين المسجلين_______ عدد الحاضرين_______
________________________________________
ثانيًا: بيانات الأسئلة
• عدد الأسئلة الكلي___________
• توزيع الدرجات:
  - أسئلة اختيار من متعدد: _____ سؤال × _____ درجة = _____ درجة
  - أسئلة مقالية: _____ سؤال × _____ درجة = _____ درجة  
  - أسئلة عملية: _____ سؤال × _____ درجة = _____ درجة
• المجموع الكلي: _____ درجة
• الدرجة الدنيا للنجاح: _____ درجة (%_____)
________________________________________
ثالثًا: الموارد المطلوبة
☐ أوراق الامتحان
☐ أوراق الإجابة  
☐ معدات وأدوات عملية
☐ أجهزة كمبيوتر
☐ آلات حاسبة
☐ مراجع مسموحة
☐ أخرى: ___________________________
________________________________________
رابعًا: فريق العمل
المهمة	الاسم	التوقيع
مدير الامتحان		
مراقب رئيسي		
مراقب فرعي		
مساعد تقني		
________________________________________
خامسًا: ملاحظات خاصة
• تعليمات للمتقدمين:
__________________________________________________
__________________________________________________
• تعليمات للمراقبين:
__________________________________________________
__________________________________________________
• إجراءات الطوارئ:
__________________________________________________
__________________________________________________
________________________________________
سادسًا: اعتماد النموذج
• اسم معد الامتحان____________________________
• التوقيع____________________________
• التاريخ____ / ____ / ______
• اسم مدير الامتحانات____________________________
• التوقيع____________________________
• التاريخ____ / ____ / ______""",
            "الحقول": ["بيانات الامتحان", "بيانات الأسئلة", "الموارد المطلوبة", "فريق العمل", "الاعتماد"],
            "البيانات": []
        },
        
        "QF-09-03-02: سجل الامتحان": {
            "الاسم": "سجل الامتحان",
            "الهدف": "توثيق حضور المتقدمين وسير عملية الامتحان",
            "المحتوى": """أولًا: بيانات الامتحان
• اسم البرنامج_______________________________________
• كود الامتحان_______________
• التاريخ____ / ____ / ______
• الوقت من _______ إلى _______
• القاعة / المكان____________________________________
• عدد المسجلين_______ عدد الحاضرين_______
________________________________________
ثانيًا: سجل حضور المتقدمين
م	الاسم الكامل	رقم الهوية	رقم الجلوس	وقت الحضور	التوقيع	ملاحظات
1						
2						
3						
4						
5						
6						
7						
8						
9						
10						

________________________________________
ثالثًا: سجل توزيع أوراق الامتحان
• وقت توزيع الأوراق_______
• عدد الأوراق الموزعة_______
• رقم أول ورقة_______ رقم آخر ورقة_______
• توقيع الموزع____________________________
________________________________________
رابعًا: سجل جمع أوراق الامتحان
• وقت جمع الأوراق_______
• عدد الأوراق المجمعة_______
• رقم أول ورقة_______ رقم آخر ورقة_______
• الأوراق المفقودة (إن وجدت)_______________________
• توقيع الجامع____________________________
________________________________________
خامسًا: الأحداث أثناء الامتحان
الوقت	نوع الحدث	التفاصيل	الإجراء المتخذ	التوقيع
				
				
				
________________________________________
سادسًا: اعتماد السجل
• اسم مراقب الامتحان الرئيسي____________________________
• التوقيع____________________________
• التاريخ____ / ____ / ______
• اسم مدير الامتحانات____________________________
• التوقيع____________________________  
• التاريخ____ / ____ / ______""",
            "الحقول": ["بيانات الامتحان", "سجل الحضور", "توزيع الأوراق", "جمع الأوراق", "الأحداث", "الاعتماد"],
            "البيانات": []
        },
        
        "QF-09-03-03: تقرير مراقبة الامتحان": {
            "الاسم": "تقرير مراقبة الامتحان",
            "الهدف": "توثيق ملاحظات المراقبين وتقييم جودة تنفيذ الامتحان",
            "المحتوى": """أولًا: بيانات الامتحان
• اسم البرنامج_______________________________________
• كود الامتحان_______________
• التاريخ____ / ____ / ______
• المكان____________________________________
• اسم مراقب الامتحان____________________________
• وقت بداية المراقبة_______ وقت انتهاء المراقبة_______
________________________________________
ثانيًا: تقييم البيئة الفيزيائية للامتحان
العنصر	ممتاز (5)	جيد جداً (4)	جيد (3)	مقبول (2)	ضعيف (1)	ملاحظات
الإضاءة						
التهوية						
مستوى الضوضاء						
ترتيب المقاعد						
نظافة المكان						
الأمان والسلامة						
________________________________________
ثالثًا: تقييم سير الامتحان
العنصر	نعم (✓)	لا (✗)	ملاحظات
بدأ الامتحان في الوقت المحدد			
تم توزيع الأوراق بشكل صحيح			
التزم المتقدمون بالتعليمات			
لم تحدث أي مشاكل تقنية			
تم اتباع إجراءات الأمان			
انتهى الامتحان في الوقت المحدد			
________________________________________
رابعًا: الملاحظات والمخالفات
نوع الملاحظة	الوقت	التفاصيل	الإجراء المتخذ
مخالفة أكاديمية			
مشكلة تقنية			
حالة طارئة			
شكوى متقدم			
أخرى			
________________________________________
خامسًا: تقييم أداء فريق العمل
الاسم	المهمة	تقييم الأداء (1-5)	ملاحظات
			
			
			
________________________________________
سادسًا: التوصيات والمقترحات
• نقاط القوة في تنفيذ الامتحان:
__________________________________________________
__________________________________________________
• نقاط تحتاج لتحسين:
__________________________________________________
__________________________________________________
• توصيات للامتحانات القادمة:
__________________________________________________
__________________________________________________
________________________________________
سابعًا: اعتماد التقرير
• اسم مراقب الامتحان____________________________
• التوقيع____________________________
• التاريخ____ / ____ / ______
• اسم مدير الامتحانات____________________________
• التوقيع____________________________
• التاريخ____ / ____ / ______""",
            "الحقول": ["بيانات الامتحان", "تقييم البيئة", "تقييم السير", "الملاحظات", "تقييم الفريق", "التوصيات", "الاعتماد"],
            "البيانات": []
        },
        
        "QF-09-04-01: نموذج قرار الشهادة": {
            "الاسم": "نموذج قرار الشهادة",
            "الهدف": "توثيق قرار اللجنة المختصة بشأن منح أو رفض الشهادة للمتقدم",
            "المحتوى": """أولًا: بيانات المتقدم
• الاسم الكامل__________________________________________
• الرقم التعريفي / رقم الهوية_____________________________
• البرنامج / الشهادة المهنية________________________________
• رقم الدورة / المجموعة_________________________________
• تاريخ التقديم____ / ____ / ______
• تاريخ استكمال المتطلبات____ / ____ / ______
________________________________________
ثانيًا: نتائج التقييم
نوع التقييم	الدرجة	النتيجة
امتحان نظري		☐ ناجح ☐ لم يجتز
تمرين عملي		☐ ناجح ☐ لم يجتز
مقابلة شخصية		☐ ناجح ☐ لم يجتز
مراجعة ملف		☐ مستوفٍ ☐ غير مستوفٍ

يمكن تخصيص الجدول حسب طبيعة البرنامج
________________________________________
ثالثًا: قرار اللجنة / الجهة المعنية
بعد مراجعة نتائج التقييم واستيفاء المتقدم لكافة الشروط، تقرر اللجنة:
☐ منح الشهادة المهنية / المؤهل للمتقدم
☐ رفض منح الشهادة – مع توضيح السبب____________________________
☐ تأجيل القرار لحين استكمال المتطلبات التالية_____________________
________________________________________
رابعًا: تفاصيل الشهادة
• رقم الشهادة__________________________
• تاريخ الإصدار____ / ____ / ______
• مدة الصلاحية (إن وجدت)__________________________
________________________________________
خامسًا: توقيع أعضاء اللجنة / الجهة المانحة
الاسم	الصفة	التوقيع	التاريخ
			""",
            "الحقول": ["بيانات المتقدم", "نتائج التقييم", "قرار اللجنة", "تفاصيل الشهادة", "توقيع اللجنة"],
            "البيانات": []
        },
        
        "QF-09-04-02: سجل قرارات الشهادات": {
            "الاسم": "سجل قرارات الشهادات",
            "الهدف": "توثيق جميع قرارات منح أو رفض الشهادات لدورة معينة",
            "المحتوى": """أولًا: بيانات البرنامج
• اسم البرنامج / الشهادة_________________________________________
• رقم الدورة / المجموعة_______________
• الجهة المسؤولة عن الاعتماد / التقييم____________________________
• تاريخ إصدار السجل____ / ____ / ______
________________________________________
ثانيًا: جدول قرارات الشهادات
م	اسم المتقدم	الرقم التعريفي	النتيجة النهائية	قرار اللجنة (منح / رفض / تأجيل)	رقم الشهادة (إن وُجد)	تاريخ القرار	ملاحظات
1							
2							
3							
________________________________________
ثالثًا: التوصيات العامة (اختياري)
• ☐ إرسال الشهادات للناجحين
• ☐ إخطار غير المجتازين بالنتائج وخطة إعادة التقييم
• ☐ أرشفة نسخة إلكترونية من السجل
• ☐ إرسال تقرير للإدارة العليا أو جهة الاعتماد (إن لزم)
________________________________________
رابعًا: اعتماد السجل
الاسم	الصفة	التوقيع	التاريخ
			""",
            "الحقول": ["بيانات البرنامج", "جدول القرارات", "التوصيات العامة", "اعتماد السجل"],
            "البيانات": []
        },
        
        "QF-09-04-03: شهادة الاعتماد": {
            "الاسم": "شهادة الاعتماد",
            "الهدف": "إصدار شهادة رسمية للمتقدم الناجح في البرنامج",
            "المحتوى": """
________________________________________
           شـــهـــادة اعـــتـــمـــاد مـــهـــنـــي
                   QB Academy
________________________________________

هذا يشهد بأن:
السيد/ة: ________________________________
رقم الهوية: ____________________________

قد اجتاز بنجاح جميع متطلبات برنامج:
اسم البرنامج: ____________________________
مجال الاختصاص: __________________________
مستوى الشهادة: ___________________________

وبناءً على ذلك تم منحه/ها هذه الشهادة وفقاً لمعايير ISO 17024:2012

رقم الشهادة: ____________________________
تاريخ الإصدار: ___________________________
تاريخ الانتهاء: ___________________________

________________________________________
توقيع المدير التنفيذي          ختم المؤسسة
الاسم: _______________
التاريخ: _____________
________________________________________

ملاحظة: هذه الشهادة صالحة لمدة ثلاث سنوات من تاريخ الإصدار
للتحقق من صحة الشهادة، يرجى زيارة موقعنا الإلكتروني
________________________________________""",
            "الحقول": ["اسم المتقدم", "رقم الهوية", "اسم البرنامج", "مجال الاختصاص", "رقم الشهادة", "تاريخ الإصدار", "تاريخ الانتهاء", "توقيع المدير"],
            "البيانات": []
        },
        
        "QF-09-05-01: نموذج قرار تعليق أو سحب أو تقليص النطاق": {
            "الاسم": "نموذج قرار تعليق أو سحب أو تقليص النطاق",
            "الهدف": "توثيق قرار تعليق أو سحب أو تقليص نطاق الشهادة مع الأسباب والتفاصيل",
            "المحتوى": """نموذج قرار تعليق / سحب / تقليص النطاق
الرقم المرجعي: QF-09-05-01
________________________________________
أولًا: بيانات الجهة / الشخص المعتمد
• الاسم الكامل / اسم الجهة: ____________________________________
• رقم الاعتماد / الترخيص: ____________________________________
• نوع الشهادة / البرنامج: ____________________________________
• تاريخ الإصدار: ____ / ____ / ______
• تاريخ انتهاء الصلاحية (إن وُجد): ____ / ____ / ______
________________________________________
ثانيًا: نوع القرار
يرجى وضع علامة (✓) على القرار المتخذ:
• ☐ تعليق مؤقت للاعتماد
• ☐ سحب الاعتماد بالكامل
• ☐ تقليص نطاق الاعتماد
________________________________________
ثالثًا: سبب القرار
☐ عدم الالتزام بمتطلبات البرنامج / اللوائح التنظيمية
☐ نتائج تقييم / مراجعة غير مرضية
☐ شكاوى مثبتة ضد الجهة / الفرد
☐ طلب مُقدَّم من الجهة نفسها
☐ أسباب أخرى: ___________________________________________
________________________________________
رابعًا: تاريخ سريان القرار
• تاريخ بدء سريان القرار: ____ / ____ / ______
• مدة التعليق (إن وُجد): __________
• تاريخ المراجعة التالية / الموعد المتوقع لإعادة النظر: ____ / ____ / ______
________________________________________
خامسًا: تفاصيل تقليص النطاق (إن وُجد)
البند / النشاط	النطاق السابق	النطاق بعد التقليص	ملاحظات
			
________________________________________
سادسًا: توقيع اللجنة / الجهة المانحة
الاسم	الصفة	التوقيع	التاريخ
			
			
________________________________________
سابعًا: إشعار للجهة المعتمدة
تم إخطار الجهة / الشخص المعني رسميًا بهذا القرار في تاريخ:
____ / ____ / ______ عن طريق:
☐ البريد الإلكتروني ☐ خطاب رسمي ☐ اجتماع مباشر ☐ وسيلة أخرى: ___________""",
            "الحقول": ["بيانات المعتمد", "نوع القرار", "سبب القرار", "تاريخ السريان", "تفاصيل التقليص", "توقيع اللجنة", "إشعار المعتمد"],
            "البيانات": []
        },
        
        "QF-09-05-02: سجل قرارات تعليق أو سحب الشهادات": {
            "الاسم": "سجل قرارات تعليق أو سحب الشهادات",
            "الهدف": "توثيق جميع قرارات تعليق أو سحب الشهادات لفترة معينة",
            "المحتوى": """سجل قرارات تعليق أو سحب الشهادات
الرقم المرجعي: QF-09-05-02
________________________________________
أولًا: بيانات البرنامج / جهة الإصدار
• اسم البرنامج / الشهادة: _________________________________________
• الجهة المانحة / الإدارة المختصة: ________________________________
• الفترة المشمولة بالسجل: من: ____ / ____ / ______ إلى: ____ / ____ / ______
________________________________________
ثانيًا: تفاصيل القرارات المتخذة
م	اسم المعتمد / الجهة	رقم الشهادة	نوع القرار (تعليق / سحب / تقليص)	تاريخ القرار	سبب القرار	حالة الإشعار (✓)	ملاحظات
1						☐ تم  ☐ لم يتم	
2						☐ تم  ☐ لم يتم	
3						☐ تم  ☐ لم يتم	
________________________________________
ثالثًا: متابعة تنفيذ القرار
• هل تم اتخاذ إجراءات توثيق القرار؟ ☐ نعم ☐ لا
• هل تم إعلام المعني رسميًا؟ ☐ نعم ☐ لا
• هل تم تحديث قاعدة بيانات الشهادات؟ ☐ نعم ☐ لا
• هل تم إدراج الحالة في التقارير الدورية؟ ☐ نعم ☐ لا
________________________________________
رابعًا: اعتماد السجل
الاسم	الصفة	التوقيع	التاريخ
			
			""",
            "الحقول": ["بيانات البرنامج", "تفاصيل القرارات", "متابعة التنفيذ", "اعتماد السجل"],
            "البيانات": []
        },
        
        "QF-09-05-03: نموذج تظلم": {
            "الاسم": "نموذج تظلم",
            "الهدف": "تلقي ومعالجة تظلمات المعتمدين بشأن قرارات التقييم أو التعليق أو السحب",
            "المحتوى": """نموذج تظلم
الرقم المرجعي: QF-09-05-03
________________________________________
أولًا: بيانات مقدم التظلم
• الاسم الكامل / اسم الجهة: ____________________________________
• رقم الهوية / رقم الشهادة / الكود: _____________________________
• نوع التظلم:
☐ نتيجة تقييم  ☐ قرار سحب / تعليق شهادة  ☐ رفض اعتماد  ☐ أخرى: ____________
• تاريخ تقديم التظلم: ____ / ____ / ______
• بيانات التواصل (هاتف / بريد): _______________________________
________________________________________
ثانيًا: تفاصيل القرار محل التظلم
• رقم القرار / مرجعه: ____________________________
• تاريخ صدوره: ____ / ____ / ______
• الجهة المُصدِرة للقرار: ____________________________
________________________________________
ثالثًا: مضمون التظلم
يرجى توضيح سبب التظلم بشكل واضح ومفصل، مع إرفاق أي مستندات داعمة:
.........................................................................................
.........................................................................................
.........................................................................................
________________________________________
رابعًا: المستندات المرفقة
☐ نسخة من القرار محل التظلم
☐ مستندات داعمة (تقارير – شهادات – مراسلات...)
☐ صورة الهوية / بيانات الشهادة
☐ أخرى: __________________________
________________________________________
خامسًا: توقيع مقدم التظلم
• الاسم: ____________________________
• الصفة (إن وُجد): ____________________________
• التوقيع: ____________________________
• التاريخ: ____ / ____ / ______
________________________________________
سادسًا: للاستخدام الداخلي (لجنة التظلمات)
الإجراء	تم (✓)	التاريخ	ملاحظات
استلام التظلم			
مراجعة التظلم من قبل اللجنة			
اتخاذ قرار نهائي			
إخطار مقدم التظلم بالنتيجة			""",
            "الحقول": ["بيانات المتظلم", "تفاصيل القرار", "مضمون التظلم", "المستندات المرفقة", "توقيع المتظلم", "الاستخدام الداخلي"],
            "البيانات": []
        },
        
        "QF-09-06-01: نموذج طلب إعادة الاعتماد": {
            "الاسم": "نموذج طلب إعادة الاعتماد",
            "الهدف": "تلقي ومعالجة طلبات إعادة الاعتماد من الأشخاص المعتمدين",
            "المحتوى": """نموذج طلب إعادة الاعتماد
الرقم المرجعي: QF-09-06-01
________________________________________
أولًا: بيانات الجهة / الشخص مقدم الطلب
• الاسم الكامل / اسم الجهة: ____________________________________
• رقم الشهادة / الاعتماد السابق: _________________________________
• تاريخ إصدار الاعتماد السابق: ____ / ____ / ______
• تاريخ انتهاء / سحب / تعليق الاعتماد: ____ / ____ / ______
• سبب طلب إعادة الاعتماد:
☐ انتهاء صلاحية الشهادة
☐ رفع تعليق سابق
☐ بعد معالجة أسباب السحب
☐ تحديث النطاق أو المؤهلات
☐ أخرى: _______________________________
________________________________________
ثانيًا: بيانات البرنامج / النطاق المطلوب إعادة اعتماده
• اسم البرنامج / المجال: __________________________________________
• الفئة المستهدفة: _________________________________________________
• التعديلات (إن وُجدت):
☐ لا يوجد  ☐ يوجد – وضّح أدناه:
...............................................................................
...............................................................................
________________________________________
ثالثًا: المستندات المرفقة
يرجى وضع علامة (✓) أمام ما تم إرفاقه:
• ☐ نسخة من الشهادة السابقة
• ☐ تقرير مراجعة داخلية / تقرير تصحيحي
• ☐ إثبات معالجة أسباب التعليق / السحب
• ☐ مؤهلات وخبرات محدثة
• ☐ مستندات أخرى: __________________________
________________________________________
رابعًا: إقرار مقدم الطلب
أقرّ أنا الموقع أدناه بأنني قد اطلعت على متطلبات إعادة الاعتماد، وأتحمل مسؤولية صحة البيانات والمستندات المقدمة.
• الاسم: ____________________________
• الصفة: ____________________________
• التوقيع: ___________________________
• التاريخ: ____ / ____ / ______
________________________________________
خامسًا: للاستخدام الداخلي
الإجراء	تم (✓)	التاريخ	ملاحظات
استلام الطلب			
مراجعة مبدئية			
تحويل إلى لجنة الاعتماد			
قرار اللجنة	☐ قبول ☐ رفض ☐ طلب استكمال		
تاريخ الإشعار بالقرار			""",
            "الحقول": ["بيانات الطالب", "بيانات البرنامج", "المستندات المرفقة", "إقرار الطالب", "الاستخدام الداخلي"],
            "البيانات": []
        },
        
        "QF-09-06-02: سجل متابعة الأداء المهنى": {
            "الاسم": "سجل متابعة الأداء المهنى",
            "الهدف": "توثيق ومتابعة الأداء المهني للأشخاص المعتمدين",
            "المحتوى": """سجل متابعة الأداء المهني
الرقم المرجعي: QF-09-06-02
________________________________________
أولًا: بيانات المعتمد
• الاسم الكامل / اسم الجهة: ____________________________________
• رقم الشهادة / الاعتماد: _________________________________
• تاريخ منح الشهادة: ____ / ____ / ______
• تاريخ انتهاء الصلاحية: ____ / ____ / ______
• البرنامج / المجال المهني: _________________________________
________________________________________
ثانيًا: محاور المتابعة
م	مجال المتابعة	طريقة التحقق	الملاحظات	الإجراء التصحيحي (إن وجد)
1	الالتزام بالمعايير المهنية	مراجعة ميدانية / تقارير / مقابلة		
2	الأداء الفني والمهني	تحليل نتائج / تقييم صاحب مصلحة		
3	التطوير المهني المستمر	شهادات / أنشطة تدريبية		
4	السلوك الأخلاقي / المهني	شكاوى / تقارير سلوك		
5	توثيق الأعمال والمخرجات	عينات أعمال / نماذج موثقة		
________________________________________
ثالثًا: تقييم الأداء العام
• ☐ مرضٍ جدًا
• ☐ مرضٍ
• ☐ يحتاج إلى تحسين
• ☐ غير مرضٍ – يتطلب إجراء تصحيحي / مراجعة الاعتماد
________________________________________
رابعًا: ملاحظات إضافية
......................................................................................
......................................................................................
......................................................................................
________________________________________
خامسًا: توقيع القائم بالمتابعة
الاسم	الصفة	التوقيع	التاريخ
			""",
            "الحقول": ["بيانات المعتمد", "محاور المتابعة", "تقييم الأداء", "ملاحظات إضافية", "توقيع المتابع"],
            "البيانات": []
        },
        
        "QF-09-06-03: نموذج تقرير إعادة التقييم": {
            "الاسم": "نموذج تقرير إعادة التقييم",
            "الهدف": "توثيق نتائج وقرارات إعادة تقييم الأشخاص المعتمدين",
            "المحتوى": """نموذج تقرير إعادة التقييم
الرقم المرجعي: QF-09-06-03
________________________________________
أولًا: بيانات الجهة / الفرد محل إعادة التقييم
• الاسم الكامل / اسم الجهة: ____________________________________
• رقم الشهادة / الاعتماد: _________________________________
• نوع البرنامج / المجال المهني: _____________________________
• تاريخ الاعتماد السابق: ____ / ____ / ______
• سبب إعادة التقييم:
☐ انتهاء فترة الاعتماد
☐ بعد قرار تعليق / سحب
☐ بناءً على طلب رسمي
☐ توصية من لجنة المراجعة
☐ أخرى: _____________________________
________________________________________
ثانيًا: تفاصيل إعادة التقييم
م	بند التقييم	الوسيلة المستخدمة (مراجعة/مقابلة/أداء عملي...)	النتيجة	الملاحظات
1	المؤهلات والمعايير الفنية			
2	الالتزام باللوائح والمعايير			
3	التحديثات المهنية والتطوير المستمر			
4	السلوك المهني / الشكاوى			
5	نتائج الأداء العملي / التقييمات السابقة			
________________________________________
ثالثًا: قرار لجنة إعادة التقييم
بناءً على نتائج التقييم أعلاه، توصي اللجنة بما يلي:
• ☐ الاستمرار في الاعتماد / تجديد الشهادة
• ☐ تعليق الاعتماد مؤقتًا لحين استيفاء متطلبات محددة
• ☐ سحب الاعتماد لعدم استيفاء المتطلبات
• ☐ توسيع أو تقليص نطاق الاعتماد
• ☐ إعادة التقييم مرة أخرى في موعد لاحق
تفاصيل إضافية:
......................................................................................
......................................................................................
________________________________________
رابعًا: توقيع اللجنة المختصة
الاسم	الصفة	التوقيع	التاريخ
			
			
			""",
            "الحقول": ["بيانات الجهة", "تفاصيل التقييم", "قرار اللجنة", "توقيع اللجنة"],
            "البيانات": []
        },
        
        "QF-09-02-01: نموذج تقييم المتقدمين": {
            "الاسم": "نموذج تقييم المتقدمين",
            "الهدف": "تقييم مؤهلات وقدرات المتقدمين للبرامج",
            "بيانات المتقدم": [
                "اسم المتقدم",
                "رقم الطلب",
                "البرنامج المتقدم له"
            ],
            "معايير التقييم": [
                "المؤهلات الأكاديمية",
                "الخبرة المهنية",
                "المهارات التقنية",
                "المهارات الشخصية",
                "القدرة على التعلم"
            ],
            "درجات التقييم": [
                "ممتاز (90-100)",
                "جيد جداً (80-89)",
                "جيد (70-79)",
                "مقبول (60-69)",
                "غير مقبول (أقل من 60)"
            ],
            "الحقول": ["اسم المقيم", "تاريخ التقييم", "الدرجة النهائية", "التوصية", "ملاحظات"],
            "البيانات": []
        },
        
        "QF-09-02-02: سجل نتائج التقييم": {
            "الاسم": "سجل نتائج التقييم",
            "الهدف": "تسجيل نتائج تقييم جميع المتقدمين",
            "الحقول": [
                "رقم الطلب",
                "اسم المتقدم",
                "البرنامج",
                "المقيم",
                "تاريخ التقييم",
                "الدرجة الأكاديمية",
                "درجة الخبرة",
                "درجة المهارات",
                "الدرجة الإجمالية",
                "القرار النهائي",
                "ملاحظات"
            ],
            "البيانات": []
        },
        
        "QF-09-02-03: تقرير إحصائيات التقييم": {
            "الاسم": "تقرير إحصائيات التقييم",
            "الهدف": "تحليل إحصائيات ونتائج عمليات التقييم",
            "البيانات العامة": [
                "فترة التقرير",
                "المسؤول عن التقرير",
                "عدد المتقدمين المقيمين"
            ],
            "الإحصائيات": [
                "متوسط الدرجات",
                "معدل القبول",
                "معدل الرفض",
                "أعلى وأقل الدرجات"
            ],
            "التحليل": [
                "نقاط القوة في المتقدمين",
                "نقاط الضعف الشائعة",
                "التوصيات للتحسين"
            ],
            "الحقول": ["رقم التقرير", "تاريخ التقرير", "الخلاصة", "التوقيع"],
            "البيانات": []
        },
        
        "QF-09-03-01: نموذج تخطيط الامتحانات": {
            "الاسم": "نموذج تخطيط الامتحانات",
            "الهدف": "التخطيط وتنظيم إجراء الامتحانات والاختبارات",
            "بيانات الامتحان": [
                "اسم الامتحان",
                "رمز الامتحان",
                "البرنامج المرتبط به",
                "نوع الامتحان",
                "المدة الزمنية"
            ],
            "الجدولة": [
                "تاريخ الامتحان",
                "وقت البدء",
                "وقت الانتهاء",
                "مكان الامتحان",
                "عدد المتقدمين"
            ],
            "الموارد المطلوبة": [
                "عدد المراقبين",
                "المعدات المطلوبة",
                "القرطاسية",
                "متطلبات خاصة"
            ],
            "الحقول": ["المسؤول عن التنظيم", "تاريخ التخطيط", "حالة التجهيز", "ملاحظات"],
            "البيانات": []
        },
        
        "QF-09-03-02: سجل سير الامتحانات": {
            "الاسم": "سجل سير الامتحانات",
            "الهدف": "توثيق سير وأحداث الامتحانات أثناء التنفيذ",
            "بيانات الامتحان": [
                "اسم الامتحان",
                "التاريخ والوقت",
                "المكان",
                "عدد الحضور"
            ],
            "سير الامتحان": [
                "وقت بدء الامتحان",
                "وقت انتهاء الامتحان",
                "المراقبون الحاضرون",
                "أي أحداث غير عادية"
            ],
            "المخالفات": [
                "نوع المخالفة",
                "اسم المخالف",
                "الإجراء المتخذ",
                "التوقيت"
            ],
            "الحقول": ["المراقب الرئيسي", "ملاحظات عامة", "توقيع المسؤول"],
            "البيانات": []
        },
        
        "QF-09-03-03: تقرير نتائج الامتحانات": {
            "الاسم": "تقرير نتائج الامتحانات",
            "الهدف": "توثيق وتحليل نتائج الامتحانات",
            "بيانات الامتحان": [
                "اسم الامتحان",
                "تاريخ الامتحان",
                "عدد المتقدمين",
                "عدد الحاضرين"
            ],
            "النتائج": [
                "أعلى درجة",
                "أقل درجة",
                "متوسط الدرجات",
                "معدل النجاح"
            ],
            "التحليل": [
                "نقاط القوة في الأداء",
                "نقاط الضعف",
                "الأسئلة الصعبة",
                "التوصيات"
            ],
            "الحقول": ["المصحح الرئيسي", "تاريخ التصحيح", "الخلاصة النهائية"],
            "البيانات": []
        },
        
        "QF-09-04-01: نموذج قرار الشهادة": {
            "الاسم": "نموذج قرار الشهادة",
            "الهدف": "توثيق قرارات منح أو رفض الشهادات",
            "بيانات المتقدم": [
                "اسم المتقدم",
                "رقم الهوية",
                "رقم الطلب",
                "البرنامج"
            ],
            "نتائج التقييم": [
                "درجة التقييم الأولي",
                "درجة الامتحان",
                "التقييم العملي",
                "الدرجة الإجمالية"
            ],
            "القرار": [
                "منح الشهادة",
                "رفض منح الشهادة",
                "تأجيل القرار",
                "إعادة تقييم"
            ],
            "المبررات": [
                "استيفاء جميع المتطلبات",
                "عدم استيفاء المتطلبات",
                "نقص في الوثائق",
                "الحاجة لتقييم إضافي"
            ],
            "الحقول": ["لجنة القرار", "تاريخ القرار", "رقم القرار", "توقيع المسؤول"],
            "البيانات": []
        },
        
        "QF-09-04-02: سجل إصدار الشهادات": {
            "الاسم": "سجل إصدار الشهادات",
            "الهدف": "تسجيل جميع الشهادات المصدرة",
            "الحقول": [
                "رقم الشهادة",
                "اسم الحاصل على الشهادة",
                "البرنامج",
                "تاريخ الإصدار",
                "تاريخ الانتهاء",
                "حالة الشهادة",
                "المسؤول عن الإصدار",
                "ملاحظات"
            ],
            "البيانات": []
        },
        
        "QF-09-04-03: تقرير إحصائيات الشهادات": {
            "الاسم": "تقرير إحصائيات الشهادات",
            "الهدف": "تحليل إحصائيات إصدار الشهادات",
            "البيانات العامة": [
                "فترة التقرير",
                "المسؤول عن التقرير"
            ],
            "الإحصائيات": [
                "عدد الشهادات المصدرة",
                "عدد الطلبات المرفوضة",
                "معدل النجاح",
                "التوزيع حسب البرامج"
            ],
            "التحليل": [
                "الاتجاهات والأنماط",
                "البرامج الأكثر طلباً",
                "التحديات المواجهة"
            ],
            "الحقول": ["رقم التقرير", "تاريخ التقرير", "الخلاصة"],
            "البيانات": []
        },
        
        "QF-09-05-01: نموذج تعليق الشهادة": {
            "الاسم": "نموذج تعليق الشهادة",
            "الهدف": "توثيق قرارات تعليق الشهادات وأسبابها",
            "بيانات الشهادة": [
                "رقم الشهادة",
                "اسم حامل الشهادة",
                "البرنامج",
                "تاريخ الإصدار"
            ],
            "أسباب التعليق": [
                "مخالفة معايير الممارسة",
                "شكوى مبررة",
                "عدم تجديد المتطلبات",
                "أسباب أخرى"
            ],
            "تفاصيل التعليق": [
                "تاريخ بدء التعليق",
                "مدة التعليق",
                "الشروط لرفع التعليق",
                "الإجراءات المطلوبة"
            ],
            "الحقول": ["لجنة القرار", "تاريخ القرار", "رقم القرار", "حالة التعليق"],
            "البيانات": []
        },
        
        "QF-09-05-02: نموذج سحب الشهادة": {
            "الاسم": "نموذج سحب الشهادة",
            "الهدف": "توثيق قرارات سحب الشهادات نهائياً",
            "بيانات الشهادة": [
                "رقم الشهادة",
                "اسم حامل الشهادة",
                "البرنامج",
                "تاريخ الإصدار"
            ],
            "أسباب السحب": [
                "مخالفة جسيمة",
                "احتيال أو تزوير",
                "عدم الكفاءة",
                "أسباب قانونية"
            ],
            "الإجراءات القانونية": [
                "إشعار حامل الشهادة",
                "فترة الاعتراض",
                "جلسة الاستماع",
                "القرار النهائي"
            ],
            "الحقول": ["لجنة القرار", "تاريخ السحب", "رقم القرار", "حالة السحب"],
            "البيانات": []
        },
        
        "QF-09-05-03: سجل متابعة الشهادات المعلقة والمسحوبة": {
            "الاسم": "سجل متابعة الشهادات المعلقة والمسحوبة",
            "الهدف": "متابعة حالة الشهادات المعلقة والمسحوبة",
            "الحقول": [
                "رقم الشهادة",
                "اسم الحامل",
                "نوع الإجراء",
                "تاريخ الإجراء",
                "السبب",
                "حالة المتابعة",
                "الإجراءات المتخذة",
                "تاريخ المراجعة",
                "النتيجة",
                "ملاحظات"
            ],
            "البيانات": []
        },
        
        "QF-09-06-01: نموذج طلب إعادة الاعتماد": {
            "الاسم": "نموذج طلب إعادة الاعتماد",
            "الهدف": "توثيق طلبات إعادة الاعتماد أو تجديد الشهادات",
            "بيانات المتقدم": [
                "اسم المتقدم",
                "رقم الشهادة السابقة",
                "تاريخ انتهاء الشهادة",
                "البرنامج"
            ],
            "الأنشطة المهنية": [
                "التدريب المستمر",
                "المؤتمرات والندوات",
                "الأنشطة المهنية",
                "ساعات التطوير المهني"
            ],
            "التحديثات": [
                "تغييرات في المؤهلات",
                "خبرات جديدة",
                "مهارات مكتسبة",
                "إنجازات مهنية"
            ],
            "الحقول": ["تاريخ التقديم", "المسؤول عن المراجعة", "حالة الطلب"],
            "البيانات": []
        },
        
        "QF-09-06-02: سجل متابعة الأداء المهني": {
            "الاسم": "سجل متابعة الأداء المهني",
            "الهدف": "متابعة الأداء المهني للمعتمدين",
            "الحقول": [
                "اسم المعتمد",
                "رقم الشهادة",
                "فترة المتابعة",
                "الأنشطة المنجزة",
                "ساعات التطوير",
                "التقييم",
                "نقاط القوة",
                "نقاط التحسين",
                "التوصيات",
                "المراجع"
            ],
            "البيانات": []
        },
        
        "QF-09-06-03: نموذج تقرير إعادة التقييم": {
            "الاسم": "نموذج تقرير إعادة التقييم",
            "الهدف": "توثيق نتائج عمليات إعادة التقييم",
            "بيانات إعادة التقييم": [
                "اسم المتقدم",
                "رقم الطلب",
                "تاريخ إعادة التقييم",
                "سبب إعادة التقييم"
            ],
            "نتائج التقييم": [
                "المعايير المقيمة",
                "الدرجات المحققة",
                "نقاط القوة",
                "نقاط الضعف"
            ],
            "القرار النهائي": [
                "إعادة الاعتماد",
                "رفض إعادة الاعتماد",
                "تدريب إضافي مطلوب",
                "إعادة تقييم جزئي"
            ],
            "الحقول": ["المقيم الرئيسي", "تاريخ التقرير", "النتيجة النهائية"],
            "البيانات": []
        },
        
        "QF-09-07-01: نموذج اتفاقية استخدام الشهادات والشعارات": {
            "الاسم": "نموذج اتفاقية استخدام الشهادات والشعارات",
            "الهدف": "تنظيم استخدام الشهادات والشعارات والعلامات المعتمدة وضمان الالتزام بالشروط",
            "المحتوى": """نموذج اتفاقية استخدام الشهادات والشعارات
الرقم المرجعي: QF-09-07-01
________________________________________
أولًا: بيانات الطرف المستفيد
• الاسم الكامل / اسم الجهة: _____________________________________
• رقم الشهادة / الاعتماد: _____________________________________
• البرنامج / المجال المعتمد: __________________________________
• تاريخ الاعتماد: ____ / ____ / ______
• مدة صلاحية الشهادة: _____________________
________________________________________
ثانيًا: شروط وأحكام استخدام الشهادة / الشعار
بصفتي أحد الحاصلين على شهادة / اعتماد من قبل [اسم الجهة المانحة]، أقرّ بالتزامي التام بالشروط التالية:
1. الاستخدام الصحيح للشهادة / الشعار:
• لا يجوز تحريف أو تعديل الشهادة أو شعار الجهة المانحة.
• يجب استخدام الشعار فقط في الأنشطة المرتبطة بالمجال المعتمد.
2. عدم الإيهام أو التضليل:
• يحظر استخدام الشعار أو الشهادة بطريقة توحي بأن الجهة المانحة تصادق على منتجات أو خدمات أخرى لم يتم اعتمادها.
3. وقف الاستخدام عند انتهاء الصلاحية أو السحب:
• أتعهد بالتوقف الفوري عن استخدام الشهادة أو الشعار في حال انتهاء صلاحية الاعتماد أو سحبه لأي سبب.
4. المراجعة والرقابة:
• أقرّ بحق الجهة المانحة في مراجعة استخدامي للشهادة / الشعار واتخاذ الإجراءات المناسبة في حال حدوث مخالفة.
5. العواقب القانونية:
• في حال مخالفة شروط هذه الاتفاقية، أتحمل كامل المسؤولية القانونية والإدارية.
________________________________________
ثالثًا: توقيع الطرفين
• الطرف المستفيد:
• الاسم: ___________________________
• التوقيع: __________________________
• التاريخ: ____ / ____ / ______
• ممثل الجهة المانحة:
• الاسم: ___________________________
• الوظيفة: __________________________
• التوقيع: __________________________
• التاريخ: ____ / ____ / ______""",
            "الحقول": ["بيانات الطرف المستفيد", "شروط وأحكام الاستخدام", "توقيع الطرفين"],
            "البيانات": []
        },
        
        "QF-09-07-02: تقرير حالة إساءة الاستخدام": {
            "الاسم": "تقرير حالة إساءة الاستخدام",
            "الهدف": "توثيق ومتابعة حالات إساءة استخدام الشهادات والشعارات والعلامات المعتمدة",
            "المحتوى": """تقرير حالة إساءة استخدام شهادة / شعار
الرقم المرجعي: QF-09-07-02
________________________________________
أولًا: معلومات عن الحالة
• تاريخ رصد الحالة / الإبلاغ: ____ / ____ / ______
• طريقة الاكتشاف:
☐ بلاغ ☐ مراجعة دورية ☐ متابعة على مواقع التواصل / الإنترنت ☐ أخرى: _____________
• مصدر البلاغ (إن وُجد): _______________________________
________________________________________
ثانيًا: بيانات الجهة أو الفرد محل البلاغ
• الاسم الكامل / اسم الجهة: __________________________________________
• رقم الشهادة / الاعتماد (إن وُجد): ___________________________________
• عنوان / وسيلة التواصل: ___________________________________________
• علاقة الجهة بالاعتماد السابق:
☐ جهة معتمدة حاليًا ☐ جهة منتهية الاعتماد ☐ لم تحصل على اعتماد مسبق
________________________________________
ثالثًا: وصف الحالة
يرجى وصف حالة إساءة الاستخدام بشكل واضح:
.....................................................................................
.....................................................................................
.....................................................................................
مثال: استخدام شعار الجهة المانحة على موقع إلكتروني دون حصول على اعتماد، أو عرض شهادة منتهية الصلاحية في مواد دعائية.
________________________________________
رابعًا: الأدلة المرفقة
☐ صورة / نسخة من الشهادة المستخدمة
☐ رابط إلكتروني
☐ مطبوعة دعائية أو إعلان
☐ لقطات شاشة
☐ أخرى: ____________________________
________________________________________
خامسًا: الإجراء المتخذ من قبل الجهة المانحة
الإجراء	تم (✓)	التاريخ	ملاحظات
التواصل مع الجهة المخالِفة			
إرسال إشعار رسمي بالإيقاف			
تحويل الحالة للشؤون القانونية			
تعليق / سحب الشهادة (إن وُجدت)			
توثيق الحالة في سجل المخالفات			
________________________________________
سادسًا: توقيع المسؤول
• الاسم: ___________________________
• الصفة / الوظيفة: __________________________
• التوقيع: __________________________
• التاريخ: ____ / ____ / ______""",
            "الحقول": ["معلومات الحالة", "بيانات المخالف", "وصف الحالة", "الأدلة المرفقة", "الإجراءات المتخذة", "توقيع المسؤول"],
            "البيانات": []
        },
        
        "QF-09-07-03: سجل مراجعة الاستخدام السليم للشهادات والعلامات": {
            "الاسم": "سجل مراجعة الاستخدام السليم للشهادات والعلامات",
            "الهدف": "متابعة ومراجعة الاستخدام السليم للشهادات والعلامات المعتمدة بشكل دوري",
            "المحتوى": """سجل مراجعة الاستخدام السليم للشهادات والعلامات
الرقم المرجعي: QF-09-07-03
________________________________________
أولًا: بيانات الجهة محل المراجعة
• الاسم الكامل / اسم الجهة: _______________________________________
• رقم الشهادة / الاعتماد: _________________________________
• نوع الشهادة / المجال: ____________________________________
• تاريخ منح الشهادة: ____ / ____ / ______
• تاريخ انتهاء الصلاحية (إن وُجد): ____ / ____ / ______
________________________________________
ثانيًا: وسائط الاستخدام التي تمت مراجعتها
وسيلة الاستخدام	الرابط / العنوان	تم التحقق	ملاحظات
موقع إلكتروني		☐ نعم ☐ لا	
وسائل تواصل اجتماعي		☐ نعم ☐ لا	
مستندات رسمية		☐ نعم ☐ لا	
مطبوعات دعائية		☐ نعم ☐ لا	
أخرى (وضح):		☐ نعم ☐ لا	
________________________________________
ثالثًا: عناصر المراجعة
م	بند المراجعة	النتيجة (✓/✗)	ملاحظات
1	استخدام الشهادة ضمن المدة السارية		
2	عدم تعديل أو تحريف الشعار		
3	عدم استخدام الشهادة للإيهام بجهات أو خدمات غير معتمدة		
4	ذكر اسم الجهة المانحة بشكل صحيح		
5	توقّف الاستخدام عند انتهاء / سحب الاعتماد		
________________________________________
رابعًا: تقييم الاستخدام العام
☐ استخدام سليم ومتوافق بالكامل
☐ مخالفات طفيفة – تم التوجيه بالتصحيح
☐ مخالفات جوهرية – تتطلب إشعار رسمي
☐ مخالفة جسيمة – تتطلب تحقيق / إجراء قانوني
________________________________________
خامسًا: الإجراء المتخذ (إن وُجد)
....................................................................................
....................................................................................
________________________________________
سادسًا: توقيع المراجع
• الاسم: __________________________
• الصفة / الوظيفة: ___________________
• التوقيع: __________________________
• التاريخ: ____ / ____ / ______""",
            "الحقول": ["بيانات الجهة", "وسائط الاستخدام", "عناصر المراجعة", "تقييم الاستخدام", "الإجراءات المتخذة", "توقيع المراجع"],
            "البيانات": []
        },
        
        "QF-09-08-01: نموذج تقديم التظلم": {
            "الاسم": "نموذج تقديم التظلم",
            "الهدف": "توثيق وتقديم التظلمات ضد القرارات المتخذة من قبل جهة الاعتماد",
            "المحتوى": """نموذج تقديم التظلم
الرقم المرجعي: QF-09-08-01
________________________________________
أولًا: بيانات مقدم التظلم
• الاسم الكامل / اسم الجهة: __________________________________________
• رقم الهوية / رقم الاعتماد / رقم الطلب: _________________________________
• نوع البرنامج / الشهادة: _____________________________________________
• بيانات التواصل:
• الهاتف: ___________________
• البريد الإلكتروني: ___________________
________________________________________
ثانيًا: نوع التظلم
يرجى تحديد نوع التظلم بوضع علامة (✓):
☐ نتيجة تقييم أو امتحان
☐ قرار رفض اعتماد
☐ قرار تعليق / سحب / تقليص الشهادة
☐ تأخر في إصدار الشهادة / الخدمة
☐ أخرى: ________________________________________
________________________________________
ثالثًا: تفاصيل التظلم
يرجى شرح التظلم بالتفصيل مع ذكر القرار أو الواقعة محل الاعتراض:
.....................................................................................
.....................................................................................
.....................................................................................
________________________________________
رابعًا: المستندات الداعمة المرفقة
يرجى وضع علامة (✓) بجوار المستندات المرفقة:
• ☐ نسخة من القرار أو النتيجة المعترض عليها
• ☐ مستندات / إثباتات داعمة للتظلم
• ☐ نسخة من الشهادة (إن وُجدت)
• ☐ أخرى: _______________________________
________________________________________
خامسًا: إقرار مقدم التظلم
أقرّ بأن جميع المعلومات الواردة في هذا النموذج صحيحة، وأتحمل كامل المسؤولية عنها، وأوافق على إجراءات التظلم وفقًا لسياسة الجهة المانحة.
• الاسم: ___________________________
• التوقيع: ___________________________
• التاريخ: ____ / ____ / ______
________________________________________
سادسًا: للاستخدام الداخلي – لجنة التظلمات
الإجراء	تم (✓)	التاريخ	ملاحظات
استلام الطلب			
مراجعة مبدئية			
إحالة إلى اللجنة المختصة			
قرار اللجنة	☐ قبول ☐ رفض ☐ طلب توضيحات إضافية		
إخطار مقدم التظلم بالقرار			""",
            "الحقول": ["بيانات مقدم التظلم", "نوع التظلم", "تفاصيل التظلم", "المستندات الداعمة", "إقرار مقدم التظلم", "الاستخدام الداخلي"],
            "البيانات": []
        },
        
        "QF-09-08-02: سجل التظلمات والقرارات المتخذة": {
            "الاسم": "سجل التظلمات والقرارات المتخذة",
            "الهدف": "تسجيل ومتابعة جميع التظلمات والقرارات المتخذة بشأنها",
            "المحتوى": """سجل التظلمات والقرارات المتخذة
الرقم المرجعي: QF-09-08-02
________________________________________
أولًا: معلومات عامة
• الفترة الزمنية المغطاة بالسجل: من: ____ / ____ / ______ إلى: ____ / ____ / ______
• اسم مسؤول السجل: __________________________
• الجهة المسؤولة عن البت في التظلمات: __________________________
________________________________________
ثانيًا: تفاصيل التظلمات
م	اسم مقدم التظلم	رقم الشهادة / الطلب	تاريخ التقديم	نوع التظلم	القرار المتخذ	تاريخ القرار	حالة الإغلاق	ملاحظات
1							☐ مغلق ☐ مفتوح	
2							☐ مغلق ☐ مفتوح	
3							☐ مغلق ☐ مفتوح	
أنواع التظلمات: نتيجة تقييم – سحب شهادة – تأخر خدمة – رفض اعتماد – أخرى
القرار المتخذ: قبول التظلم – رفض التظلم – إعادة تقييم – تعويض – أخرى
________________________________________
ثالثًا: الإجراءات المتخذة
• هل تم التحقيق الداخلي؟ ☐ نعم ☐ لا
• هل تم إشعار مقدم التظلم بالقرار؟ ☐ نعم ☐ لا ☐ جارٍ الإشعار
• هل تم تعديل الإجراءات الداخلية نتيجة التظلم؟ ☐ نعم ☐ لا ☐ تحت الدراسة
________________________________________
رابعًا: توقيع مسؤول السجل
• الاسم: __________________________
• الوظيفة: __________________________
• التوقيع: __________________________
• التاريخ: ____ / ____ / ______""",
            "الحقول": ["معلومات عامة", "تفاصيل التظلمات", "الإجراءات المتخذة", "توقيع مسؤول السجل"],
            "البيانات": []
        },
        
        "QF-09-08-03: تقرير لجنة التظلمات": {
            "الاسم": "تقرير لجنة التظلمات",
            "الهدف": "توثيق أعمال ونتائج وقرارات لجنة التظلمات",
            "المحتوى": """تقرير لجنة التظلمات
الرقم المرجعي: QF-09-08-03
________________________________________
أولًا: بيانات التظلم
• اسم مقدم التظلم / الجهة: _____________________________________
• رقم الشهادة / الطلب / الاعتماد: _______________________________
• نوع التظلم:
☐ نتيجة تقييم ☐ قرار سحب / تعليق ☐ رفض اعتماد ☐ تأخير في الخدمة ☐ أخرى: __________
• تاريخ تقديم التظلم: ____ / ____ / ______
• تاريخ استلام اللجنة للتظلم: ____ / ____ / ______
________________________________________
ثانيًا: أعضاء اللجنة
الاسم	الوظيفة	التوقيع
		
		
		
________________________________________
ثالثًا: إجراءات دراسة التظلم
• تم الاطلاع على المستندات المقدمة: ☐ نعم ☐ لا
• تم الاستماع إلى مقدم التظلم (عند الحاجة): ☐ نعم ☐ لا
• تم الرجوع إلى السجلات والتقييمات السابقة: ☐ نعم ☐ لا
• تم التواصل مع الأقسام المعنية: ☐ نعم ☐ لا
• مستندات داعمة مرفقة:
☐ نسخة من القرار ☐ نتائج التقييم ☐ تقارير ☐ أخرى: _____________
________________________________________
رابعًا: نتائج الدراسة
......................................................................................
......................................................................................
......................................................................................
________________________________________
خامسًا: قرار اللجنة
☐ قبول التظلم واتخاذ الإجراء التالي: _________________________________
☐ رفض التظلم مع توضيح الأسباب التالية: ____________________________
☐ طلب معلومات / مستندات إضافية من مقدم التظلم
☐ أخرى: __________________________________________________
• تاريخ القرار: ____ / ____ / ______
• هل تم إخطار مقدم التظلم بالنتيجة؟ ☐ نعم ☐ لا ☐ جارٍ الإشعار
________________________________________
سادسًا: توقيع رئيس اللجنة
• الاسم: __________________________
• الوظيفة: __________________________
• التوقيع: __________________________
• التاريخ: ____ / ____ / ______""",
            "الحقول": ["بيانات التظلم", "أعضاء اللجنة", "إجراءات الدراسة", "نتائج الدراسة", "قرار اللجنة", "توقيع رئيس اللجنة"],
            "البيانات": []
        },
        
        "QF-09-09-01: نموذج تقديم الشكوى": {
            "الاسم": "نموذج تقديم الشكوى",
            "الهدف": "توثيق الشكاوى المقدمة حول الخدمات أو الإجراءات",
            "المحتوى": """نموذج تقديم شكوى
الرقم المرجعي: QF-09-09-01
________________________________________
أولًا: بيانات مقدم الشكوى
• الاسم الكامل / اسم الجهة: _______________________________________
• رقم الهوية / الطلب / الشهادة (إن وُجد): _______________________________
• نوع العلاقة بالجهة:
☐ متقدم للاعتماد ☐ جهة معتمدة ☐ مدرب ☐ ممتحن ☐ أخرى: ________________
• بيانات التواصل:
o الهاتف: ___________________
o البريد الإلكتروني: ___________________
________________________________________
ثانيًا: موضوع الشكوى
• تاريخ الواقعة / المشكلة: ____ / ____ / ______
• مكان الواقعة (إن وُجد): ___________________________________
• نوع الشكوى:
☐ سلوك موظف ☐ تأخير في الخدمة ☐ قرار غير عادل ☐ مشكلة تقنية ☐ أخرى: ___________
________________________________________
ثالثًا: تفاصيل الشكوى
يرجى شرح تفاصيل الشكوى بوضوح ودقة:
.....................................................................................
.....................................................................................
.....................................................................................
________________________________________
رابعًا: المستندات المرفقة (إن وُجدت)
☐ مراسلات سابقة
☐ صور أو مستندات داعمة
☐ قرارات أو تقارير ذات صلة
☐ أخرى: _____________________________________
________________________________________
خامسًا: التوقعات من الجهة
☐ الاعتذار الرسمي ☐ إعادة النظر في القرار ☐ تصحيح الإجراء ☐ تحقيق داخلي ☐ أخرى: _______
________________________________________
سادسًا: توقيع مقدم الشكوى
• الاسم: ___________________________
• التوقيع: ___________________________
• التاريخ: ____ / ____ / ______
________________________________________
سابعًا: للاستخدام الداخلي – قسم الشكاوى
الإجراء	تم (✓)	التاريخ	ملاحظات
استلام الشكوى			
تحويل إلى الجهة المختصة			
دراسة الشكوى			
اتخاذ القرار / الإجراء			
إخطار مقدم الشكوى			
إغلاق الشكوى	☐ نعم ☐ لا		""",
            "الحقول": ["بيانات مقدم الشكوى", "موضوع الشكوى", "تفاصيل الشكوى", "المستندات المرفقة", "التوقعات", "توقيع مقدم الشكوى", "الاستخدام الداخلي"],
            "البيانات": []
        },
        
        "QF-09-09-02: سجل الشكاوى والقرارات المتخذة": {
            "الاسم": "سجل الشكاوى والقرارات المتخذة",
            "الهدف": "تسجيل ومتابعة جميع الشكاوى والإجراءات المتخذة",
            "المحتوى": """سجل الشكاوى والقرارات المتخذة
الرقم المرجعي: QF-09-09-02
________________________________________
أولًا: معلومات عامة
• الفترة الزمنية المغطاة بالسجل: من: ____ / ____ / ______ إلى: ____ / ____ / ______
• اسم مسؤول السجل: __________________________
• الجهة المسؤولة عن معالجة الشكاوى: __________________________
________________________________________
ثانيًا: جدول الشكاوى
م	اسم مقدم الشكوى	تاريخ الشكوى	نوع الشكوى	رقم الشهادة / الطلب	الإجراء المتخذ	تاريخ الإجراء	حالة الشكوى (مفتوحة / مغلقة)	ملاحظات
1							☐ مفتوحة ☐ مغلقة	
2							☐ مفتوحة ☐ مغلقة	
3							☐ مفتوحة ☐ مغلقة	
________________________________________
ثالثًا: تصنيف أنواع الشكاوى (للاستخدام الإحصائي والتحليلي)
• ☐ تأخير في الخدمة
• ☐ سلوك غير مهني
• ☐ أخطاء إدارية
• ☐ قرارات غير عادلة
• ☐ مشكلات تقنية
• ☐ أخرى: _______________________
________________________________________
رابعًا: المتابعة والتقارير الدورية
• هل تم الرد على جميع الشكاوى في المدة المحددة؟ ☐ نعم ☐ لا
• هل تم تعديل الإجراءات الداخلية استجابةً لأي شكوى؟ ☐ نعم ☐ لا
• هل تم تصعيد أي شكوى إلى الإدارة العليا؟ ☐ نعم ☐ لا
• ملاحظات حول الشكاوى المتكررة:
..................................................................................
..................................................................................
________________________________________
خامسًا: توقيع مسؤول السجل
• الاسم: __________________________
• الوظيفة: __________________________
• التوقيع: __________________________
• التاريخ: ____ / ____ / ______""",
            "الحقول": ["معلومات عامة", "جدول الشكاوى", "تصنيف أنواع الشكاوى", "المتابعة والتقارير", "توقيع مسؤول السجل"],
            "البيانات": []
        },
        
        "QF-09-09-03: تقرير لجنة معالجة الشكوى": {
            "الاسم": "تقرير لجنة معالجة الشكوى",
            "الهدف": "توثيق أعمال ونتائج لجنة معالجة الشكاوى",
            "المحتوى": """تقرير لجنة معالجة الشكوى
الرقم المرجعي: QF-09-09-03
________________________________________
أولًا: بيانات الشكوى
• اسم مقدم الشكوى: __________________________________________
• رقم الشهادة / الطلب (إن وُجد): _______________________________
• تاريخ تقديم الشكوى: ____ / ____ / ______
• نوع الشكوى:
☐ تأخير في الخدمة ☐ سلوك غير مهني ☐ قرار غير عادل ☐ مشكلة تقنية ☐ أخرى: _____________
• تاريخ استلام اللجنة للشكوى: ____ / ____ / ______
________________________________________
ثانيًا: تشكيل اللجنة
الاسم	الصفة / الوظيفة	التوقيع
		
		
		
________________________________________
ثالثًا: إجراءات دراسة الشكوى
☐ مراجعة الوثائق والسجلات
☐ التواصل مع مقدم الشكوى
☐ الاستماع للطرف ذي العلاقة
☐ فحص الإجراءات المتخذة
☐ تحليل أسباب الشكوى
☐ أخرى: _____________________________________
________________________________________
رابعًا: نتائج الدراسة
يرجى كتابة ملخص واضح لنتائج دراسة الشكوى:
......................................................................................
......................................................................................
......................................................................................
________________________________________
خامسًا: قرار اللجنة
• ☐ قبول الشكوى واتخاذ الإجراءات التالية:
......................................................................................
• ☐ رفض الشكوى مع ذكر الأسباب:
......................................................................................
• ☐ تحويل الموضوع إلى الإدارة العليا / قسم قانوني
• ☐ أخرى: ______________________________________________________
• تاريخ القرار: ____ / ____ / ______
• تم إخطار مقدم الشكوى بالقرار؟ ☐ نعم ☐ لا ☐ جارٍ الإشعار
________________________________________
سادسًا: توصيات اللجنة (إن وُجدت)
☐ تنفيذ إجراء تصحيحي
☐ مراجعة السياسات / الإجراءات
☐ تدريب الفريق المعني
☐ لا حاجة لاتخاذ إجراء إضافي
☐ أخرى: _____________________________________
________________________________________
سابعًا: توقيع رئيس اللجنة
• الاسم: __________________________
• الوظيفة: __________________________
• التوقيع: __________________________
• التاريخ: ____ / ____ / ______""",
            "الحقول": ["بيانات الشكوى", "تشكيل اللجنة", "إجراءات الدراسة", "نتائج الدراسة", "قرار اللجنة", "توصيات اللجنة", "توقيع رئيس اللجنة"],
            "البيانات": []
        },
        
        # QF-10-02-01 Forms - Document Management System
        "QF-10-02-01-01: سجل وثائق نظام الإدارة": {
            "الاسم": "سجل وثائق نظام الإدارة",
            "الهدف": "توثيق وتسجيل جميع وثائق نظام الإدارة في جهة الاعتماد",
            "معلومات عامة": [
                "اسم الجهة / المؤسسة",
                "القسم / الإدارة المسؤولة",
                "مسؤول السجل",
                "تاريخ آخر تحديث للسجل"
            ],
            "تفاصيل الوثائق": [
                "اسم الوثيقة",
                "نوع الوثيقة",
                "الرقم المرجعي",
                "رقم الإصدار",
                "تاريخ الإصدار",
                "الحالة",
                "الجهات المستفيدة",
                "ملاحظات"
            ],
            "أنواع الوثائق": [
                "سياسة",
                "إجراء", 
                "نموذج",
                "سجل",
                "دليل",
                "مرجع خارجي",
                "أخرى"
            ],
            "حالات الوثيقة": [
                "سارية",
                "ملغاة",
                "محدثة",
                "تحت المراجعة"
            ],
            "الحقول": ["معلومات عامة", "تفاصيل الوثائق", "اعتماد مسؤول التوثيق"],
            "البيانات": []
        },
        
        "QF-10-02-01-02: سجل مراجعة الوثائق": {
            "الاسم": "سجل مراجعة الوثائق",
            "الهدف": "توثيق عمليات مراجعة وتحديث وثائق نظام الإدارة",
            "معلومات عامة": [
                "اسم الجهة / المؤسسة",
                "الإدارة / القسم المسؤول عن التوثيق",
                "مسؤول السجل",
                "تاريخ آخر تحديث للسجل"
            ],
            "جدول مراجعة الوثائق": [
                "اسم الوثيقة",
                "الرقم المرجعي",
                "رقم الإصدار الحالي",
                "تاريخ المراجعة",
                "الجهة المراجعة",
                "نوع التعديل",
                "ملخص التعديل",
                "الإجراء المتخذ",
                "المراجع",
                "التوقيع"
            ],
            "أنواع التعديل": [
                "طفيف",
                "جوهري"
            ],
            "الإجراءات المتخذة": [
                "اعتماد",
                "تعديل",
                "إلغاء"
            ],
            "الحقول": ["معلومات عامة", "جدول مراجعة الوثائق", "ملاحظات عامة", "اعتماد مسؤول التوثيق"],
            "البيانات": []
        },
        
        "QF-10-02-01-03: نموذج تحديث الوثائق": {
            "الاسم": "نموذج تحديث الوثائق",
            "الهدف": "نموذج رسمي لطلب تحديث أو تعديل وثائق نظام الإدارة",
            "بيانات الوثيقة": [
                "اسم الوثيقة",
                "الرقم المرجعي",
                "نوع الوثيقة",
                "رقم الإصدار الحالي",
                "تاريخ الإصدار الحالي"
            ],
            "أنواع الوثائق": [
                "سياسة",
                "إجراء",
                "نموذج",
                "سجل",
                "دليل",
                "أخرى"
            ],
            "تفاصيل التحديث المطلوب": [
                "نوع التحديث المطلوب",
                "السبب / المبرر للتحديث",
                "الشرح التفصيلي للتحديثات المطلوبة",
                "الجهة المقترحة للتحديث",
                "اسم المقترح",
                "الوظيفة",
                "التاريخ",
                "التوقيع"
            ],
            "أنواع التحديث": [
                "تعديل صياغة",
                "إضافة محتوى",
                "حذف محتوى",
                "دمج وثائق",
                "إعادة إصدار شامل"
            ],
            "أسباب التحديث": [
                "نتيجة تدقيق داخلي",
                "مراجعة دورية",
                "تغيير تشريعي",
                "اقتراح موظف",
                "أخرى"
            ],
            "الحقول": ["بيانات الوثيقة", "تفاصيل التحديث المطلوب", "رأي مسؤول التوثيق", "اعتماد الإدارة المختصة"],
            "البيانات": []
        },
        
        # QF-10-02-06 Series: Corrective Actions Forms
        "QF-10-02-06-01: سجل حالات عدم المطابقة": {
            "الحقول": [
                ("م", "رقم الحالة", "التاريخ", "مصدر الاكتشاف", "وصف حالة عدم المطابقة", "درجة الخطورة", "القسم المسؤول", "الحالة", "التاريخ المتوقع للإغلاق", "التاريخ الفعلي للإغلاق")
            ],
            "البيانات": [],
            "بيانات_عامة": {
                "اسم الجهة / المؤسسة": "",
                "الإدارة / القسم المعني": "",
                "اسم مسؤول الجودة / منسق السجل": "",
                "الفترة المغطاة من": "",
                "الفترة المغطاة إلى": "",
                "اسم مسؤول المتابعة / الجودة": "",
                "التوقيع": "",
                "تاريخ التحديث الأخير للسجل": ""
            }
        },
        
        "QF-10-02-06-02: تحليل السبب الجذري": {
            "الحقول": [
                "اسم الجهة / المؤسسة",
                "رقم حالة عدم المطابقة / المشكلة",
                "تاريخ الاكتشاف",
                "القسم / العملية المتأثرة", 
                "اسم القائم بالتحليل",
                "التاريخ",
                "وصف المشكلة أو عدم المطابقة",
                "الأداة المستخدمة",
                "سبب المشكلة 1",
                "سبب المشكلة 2", 
                "سبب المشكلة 3",
                "سبب المشكلة 4",
                "سبب المشكلة 5",
                "السبب الجذري النهائي",
                "التوصيات والإجراء التصحيحي المقترح",
                "الجهة المنفذة",
                "التاريخ المتوقع للتنفيذ",
                "اسم مسؤول الجودة / الإدارة",
                "الوظيفة",
                "التوقيع",
                "تاريخ الاعتماد"
            ],
            "البيانات": []
        },
        
        "QF-10-02-06-03: إجراء تصحيحي": {
            "الحقول": [
                "اسم الجهة / المؤسسة",
                "تاريخ فتح الإجراء",
                "رقم الإجراء التصحيحي",
                "مصدر الإجراء",
                "القسم المعني",
                "اسم مقدم الطلب / المكتشف",
                "وصف المشكلة / حالة عدم المطابقة",
                "تحليل السبب الجذري",
                "الإجراء المقترح",
                "الهدف من الإجراء",
                "المسؤول عن التنفيذ",
                "التاريخ المستهدف للتنفيذ",
                "الحالة الحالية",
                "تم تنفيذ الإجراء بالكامل",
                "تم القضاء على السبب الجذري",
                "لم تتكرر المشكلة بعد التنفيذ",
                "اسم المراجع / مسؤول المتابعة",
                "تاريخ المتابعة",
                "نتيجة المتابعة",
                "اسم مسؤول الجودة / الإدارة العليا",
                "التوقيع",
                "تاريخ الإغلاق النهائي"
            ],
            "البيانات": []
        },
        
        "QF-10-02-06-04: متابعة الإجراءات التصحيحية": {
            "الحقول": [
                "اسم الجهة / المؤسسة",
                "رقم الإجراء التصحيحي",
                "القسم / الجهة المعنية",
                "تاريخ فتح الإجراء",
                "اسم الشخص المتابع",
                "تاريخ المتابعة",
                "تم تنفيذ الإجراء التصحيحي وفقاً للخطة",
                "تم القضاء على السبب الجذري للمشكلة",
                "لم تتكرر المشكلة منذ تنفيذ الإجراء",
                "تم توثيق جميع الأدلة المؤيدة للإجراء",
                "تم إشراك الجهات المعنية أثناء التنفيذ",
                "فعالية الإجراء",
                "حاجة لإجراء إضافي",
                "تفاصيل الإجراء الإضافي",
                "القرار النهائي",
                "اسم المتابع / مسؤول الجودة",
                "التوقيع المتابع",
                "تاريخ المتابع",
                "اسم الإدارة",
                "توقيع الإدارة",
                "تاريخ الإدارة"
            ],
            "البيانات": []
        },
        
        # QF-10-02-07 Series: Preventive Actions Forms  
        "QF-10-02-07-01: سجل المخاطر المحتملة": {
            "الحقول": [
                ("م", "وصف الخطر المحتمل", "مصدر الخطر", "احتمال الحدوث (1-5)", "شدة التأثير (1-5)", "درجة الخطورة", "التصنيف", "الإجراءات الوقائية المقترحة", "القسم المسؤول")
            ],
            "البيانات": [],
            "بيانات_عامة": {
                "اسم الجهة / المؤسسة": "",
                "القسم / الإدارة": "",
                "الفترة المغطاة من": "",
                "الفترة المغطاة إلى": "",
                "تاريخ إعداد السجل": "",
                "اسم مسؤول إدارة المخاطر": "",
                "عدد المخاطر المصنفة عالية": "",
                "حاجة لإجراءات عاجلة": "",
                "ملاحظات إضافية / توصيات": "",
                "اسم مسؤول إدارة المخاطر / الجودة": "",
                "الوظيفة": "",
                "التوقيع": "",
                "التاريخ": ""
            }
        },
        
        "QF-10-02-07-02: إجراءات وقائية": {
            "الحقول": [
                "اسم الجهة / المؤسسة",
                "رقم الإجراء الوقائي",
                "تاريخ فتح الإجراء",
                "القسم المعني", 
                "مصدر تحديد الإجراء الوقائي",
                "وصف الخطر / الحالة المحتملة",
                "وصف الإجراء الوقائي المقترح",
                "الهدف من الإجراء",
                "الجهة المنفذة",
                "التاريخ المتوقع للتنفيذ",
                "الموارد المطلوبة",
                "تم تنفيذ الإجراء في الموعد المحدد",
                "تم إشراك الأطراف المعنية",
                "تم توثيق الإجراءات",
                "تم التحقق من فاعلية الإجراء",
                "تقليل احتمال وقوع الخطر",
                "التوصية بإجراءات إضافية",
                "ملاحظات وتوصيات",
                "اسم منفذ الإجراء",
                "توقيع المنفذ",
                "اسم مسؤول المتابعة / الجودة",
                "توقيع المسؤول",
                "تاريخ الاعتماد النهائي"
            ],
            "البيانات": []
        },
        
        "QF-10-02-07-03: متابعة التدابير الوقائية": {
            "الحقول": [
                "اسم الجهة / المؤسسة",
                "رقم الإجراء الوقائي",
                "تاريخ فتح الإجراء",
                "القسم المعني",
                "اسم مسؤول المتابعة",
                "تاريخ المتابعة",
                "وصف الخطر أو المشكلة المحتملة",
                "الإجراء الوقائي المقترح",
                "تاريخ التنفيذ الفعلي",
                "الجهة المنفذة",
                "تنفيذ الإجراء الوقائي كما هو مخطط",
                "توثيق تنفيذ الإجراء",
                "مشاركة الأطراف المعنية",
                "فاعلية الإجراء في تقليل أو منع الخطر",
                "مساهمة الإجراء في تقليل الاحتمالية أو شدة الخطر",
                "ظهور مؤشرات خطر بعد التنفيذ",
                "كفاية الإجراء الوقائي",
                "ملاحظات إضافية / توصيات مستقبلية",
                "اسم مسؤول المتابعة / الجودة",
                "الوظيفة",
                "التوقيع",
                "التاريخ"
            ],
            "البيانات": []
        }
        }
        
        # Load data from database
        stored_forms_data = self.db_manager.get_all_forms_data()
        
        # Merge default structure with stored data
        for form_name, form_structure in default_forms.items():
            if form_name in stored_forms_data:
                # Use stored data
                form_structure["البيانات"] = stored_forms_data[form_name]['data']
        
        return default_forms
    
    def refresh_forms_data(self):
        """Refresh forms data from database"""
        try:
            # Reload data from database
            stored_forms_data = self.db_manager.get_all_forms_data()
            
            # Update forms data
            for form_name in self.forms:
                if form_name in stored_forms_data:
                    self.forms[form_name]["البيانات"] = stored_forms_data[form_name]['data']
                else:
                    # Reset to empty if not found in database
                    self.forms[form_name]["البيانات"] = []
            
            self.status_var.set("تم تحديث البيانات من قاعدة البيانات")
            
        except Exception as e:
            print(f"Error refreshing forms data: {e}")
            messagebox.showerror("خطأ", f"فشل في تحديث البيانات: {str(e)}")
    
    def delete_form_record(self, form_name):
        """Delete form data from database and refresh UI"""
        try:
            if messagebox.askyesno("تأكيد الحذف", f"هل أنت متأكد من حذف بيانات {form_name}؟"):
                success = self.db_manager.delete_form_data(
                    form_name=form_name,
                    user_id=self.current_user['id']
                )
                
                if success:
                    # Refresh UI data
                    self.refresh_forms_data()
                    messagebox.showinfo("تم الحذف", f"تم حذف بيانات {form_name} بنجاح")
                    self.status_var.set(f"تم حذف {form_name} من قاعدة البيانات")
                else:
                    messagebox.showerror("خطأ", f"فشل في حذف بيانات {form_name}")
                    
        except Exception as e:
            print(f"Error deleting form: {e}")
            messagebox.showerror("خطأ", f"حدث خطأ أثناء الحذف: {str(e)}")
    
    def update_form_record(self, form_name, new_data):
        """Update form data in database and refresh UI"""
        try:
            success = self.db_manager.update_form_data(
                form_name=form_name,
                data=new_data,
                user_id=self.current_user['id']
            )
            
            if success:
                # Refresh UI data
                self.refresh_forms_data()
                messagebox.showinfo("تم التحديث", f"تم تحديث بيانات {form_name} بنجاح")
                self.status_var.set(f"تم تحديث {form_name} في قاعدة البيانات")
                return True
            else:
                messagebox.showerror("خطأ", f"فشل في تحديث بيانات {form_name}")
                return False
                
        except Exception as e:
            print(f"Error updating form: {e}")
            messagebox.showerror("خطأ", f"حدث خطأ أثناء التحديث: {str(e)}")
            return False
        # بيانات الإجراءات والنماذج
        self.procedures = {
            "QP-04.1: الوضع القانوني": {
                "الغرض": "تحديد المتطلبات القانونية التي يجب أن تنطبق على QB Academy لضمان الاعتراف بها كجهة قانونية تتحمل المسؤولية الكاملة عن أنشطة الاعتماد التي تنفذها",
                "مجال التطبيق": "ينطبق هذا الإجراء على الوضع القانوني لـ QB Academy كجهة اعتماد معتمدة، وعلى جميع أنشطتها المعنية بمنح الشهادات",
                "التعاريف": [
                    "الكيان القانوني: هو منظمة أو جهة معترف بها رسميًا بموجب القانون، ولها شخصية اعتبارية مستقلة، وتتحمل المسؤولية القانونية عن أفعالها",
                    "الجزء المعرف من كيان قانوني: وحدة تنظيمية داخل كيان قانوني أكبر، لها استقلال إداري واضح، ويمكن تحميلها المسؤولية عن نشاطات محددة مثل أنشطة الاعتماد",
                    "المسؤولية القانونية: هي التزام قانوني يقع على عاتق الجهة في حال حدوث خطأ أو تقصير في تنفيذ أنشطة الاعتماد",
                    "الكيان الحكومي: مؤسسة تابعة للدولة يُعترف بها قانونيًا استنادًا إلى وضعها الرسمي كجهة عامة",
                    "أنشطة الاعتماد: تشمل جميع العمليات المرتبطة بمنح الشهادات، مثل التقييم، والامتحانات، وإصدار الشهادات، والتجديد، والتعليق، والسحب"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من تسجيل الجهة قانونيًا والاحتفاظ بوثائق التسجيل"),
                    ("المستشار القانوني", "مراجعة الوضع القانوني بصفة دورية وضمان التوافق مع الأنظمة المحلية"),
                    ("مدير الجودة", "الاحتفاظ بنسخ محدثة من التراخيص أو الوثائق القانونية المعتمدة")
                ],
                "الإجراءات": [
                    "QB Academy كيانًا قانونيًا مسجلاً رسميًا لدى الجهات المختصة، وجزءًا معرفًا بوضوح ضمن كيان قانوني آخر، مع توضيح نطاق مسؤوليتها القانونية عن أنشطة الاعتماد",
                    "يتم الاحتفاظ بجميع الوثائق الرسمية (مثل: الرخصة التجارية، أو قرار التأسيس، أو قرار الجهة الحكومية) ضمن ملف قانوني مخصص",
                    "يتم مراجعة هذه الوثائق سنويًا من قبل الإدارة القانونية للتأكد من استمرار صلاحيتها القانونية وعدم وجود تعارض قانوني في ممارسة أنشطة الاعتماد"
                ],
                "النماذج": ["QF-04-01-01: سجل الوثائق القانونية", "QF-04-01-02: نموذج مراجعة الوضع القانوني"]
            },
            "QP-04.2: مسؤولية القرارات": {
                "الغرض": "تحديد وضمان مسؤولية QB Academy الكاملة عن جميع قرارات الاعتماد وعدم تفويض هذه المسؤولية لأي جهة خارجية، بما يحقق متطلبات البند 4.2 من المواصفة ISO/IEC 17024:2012",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع قرارات الاعتماد التي تصدر عن QB Academy، وتشمل منح الشهادة، استمرارها، إعادة الاعتماد، توسيع أو تقليص نطاق الشهادة، تعليقها أو سحبها",
                "التعاريف": [
                    "قرار الاعتماد: الإجراء الرسمي الذي تصدره الجهة المعتمدة بشأن حالة شهادة شخص معين",
                    "لجنة القرارات: لجنة داخلية مستقلة مسؤولة عن اتخاذ قرارات الاعتماد",
                    "تفويض القرار: نقل مسؤولية اتخاذ القرار إلى جهة خارج QB Academy، وهو أمر غير مسموح به"
                ],
                "المسؤوليات": [
                    ("لجنة القرارات", "اتخاذ القرار النهائي في جميع مسائل الاعتماد بناءً على التوصيات المقدمة"),
                    ("مدير الشهادات", "تجهيز الملفات وتقديم التوصيات للجنة القرارات"),
                    ("مدير الجودة", "مراقبة التزام العملية بمعايير الاستقلالية والشفافية وعدم التفويض الخارجي")
                ],
                "الإجراءات": [
                    "تقوم الإدارات المختصة (الفنية والتقييم) بإعداد ملفات الترشيح والتوصيات",
                    "تُعرض الملفات والتوصيات على لجنة القرارات التي تُشكل من أعضاء محايدين",
                    "تتخذ اللجنة قرارًا نهائيًا بشأن حالة الاعتماد دون أي تدخل أو تفويض خارجي",
                    "يتم توثيق القرار في سجل قرارات الاعتماد ويُبلّغ به الشخص المعني رسميًا",
                    "تشمل القرارات التي تصدرها اللجنة: منح الشهادة، استمرار الاعتماد، إعادة الاعتماد، توسيع أو تقليص النطاق، تعليق الشهادة أو سحبها"
                ],
                "النماذج": ["QF-04-02-01: محضر اجتماع لجنة القرارات", "QF-04-02-02: سجل قرارات الاعتماد"]
            },
            "QP-04.3: الحيادية": {
                "الغرض": "وضع الإجراءات والضوابط التي تضمن الحيادية التامة في جميع أنشطة الاعتماد في QB Academy، بما يحقق متطلبات البند 4.3 من المواصفة ISO/IEC 17024:2012",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الأنشطة المتعلقة بالاعتماد في QB Academy، ويشمل التوثيق، السياسات، الإجراءات، وضمان حيادية جميع الأطراف المعنية",
                "التعاريف": [
                    "الحيادية: الحفاظ على نزاهة وشفافية العمليات التي تتضمنها جهة الاعتماد، وعدم التأثر بأي ضغوط خارجية أو تداخل مصالح",
                    "التهديدات المحتملة للحيادية: أي عوامل أو مواقف قد تؤثر على حيادية جهة الاعتماد أو عملياتها، سواء كانت واقعية أو متصورة",
                    "التضارب في المصالح: حالة حيث توجد مصلحة شخصية قد تؤثر على اتخاذ القرار المهني أو الحيادي"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "ضمان الحفاظ على الحيادية في جميع الأنشطة المتعلقة بالاعتماد وإصدار بيان عام بذلك"),
                    ("مدير الجودة", "ضمان توثيق السياسات والإجراءات الخاصة بالحيادية ومراجعتها بشكل مستمر"),
                    ("موظفو الاعتماد", "الالتزام بتطبيق السياسات والإجراءات الخاصة بالحيادية في جميع التفاعلات مع المتقدمين")
                ],
                "الإجراءات": [
                    "توثيق الهيكل والسياسات: يجب توثيق هيكل الجهة وسياساتها وإجراءاتها لضمان الحيادية، ويتم تحديث البيان العام عن الحيادية سنويًا ويتم نشره ليكون متاحًا للجمهور",
                    "التعامل بنزاهة: يجب أن تتعامل الجهة بنزاهة مع جميع المتقدمين والمرشحين والأشخاص المعتمدين، مع ضمان العدالة والمساواة في جميع المعاملات",
                    "إجراءات عادلة وغير تمييزية: يجب أن تكون السياسات والإجراءات عادلة ومتساوية للجميع دون أي تمييز بناءً على الجنسية، العرق، الدين، أو أي عامل آخر غير متعلق بالاعتماد",
                    "تحديد التهديدات للحيادية: يجب أن تقوم الجهة بتحديد التهديدات المحتملة للحيادية، بما في ذلك التهديدات من الأنشطة الداخلية أو علاقات خارجية أو مصالح الموظفين والشركاء",
                    "التضارب في المصالح: يجب على الجهة تحليل وتوثيق أي تضارب محتمل في المصالح بين الموظفين أو مع شركاء الاعتماد، ويجب وضع آليات لإزالة أو تقليل تأثير التضارب في المصالح",
                    "هيكلة أنشطة الاعتماد: يجب أن تتم هيكلة الأنشطة بطريقة تضمن الحيادية، بما في ذلك إشراك أصحاب المصلحة بشكل متوازن"
                ],
                "النماذج": ["QF-04-03-01: سجل التهديدات المحتملة للحيادية", "QF-04-03-02: تقرير تضارب المصالح"],
                "المراجعة والتحديث": "تُراجع هذه الوثيقة سنويًا أو عند حدوث تغييرات تؤثر على الحيادية، لضمان استمرارية الالتزام بالمبادئ الواردة في هذا الإجراء"
            },
            "QP-04.4: الموارد المالية والاحتياطات": {
                "الغرض": "وضع الإجراءات والضوابط التي تضمن امتلاك جهة الاعتماد الموارد المالية اللازمة لتشغيل عمليات الاعتماد، مع ضمان وجود ترتيبات مناسبة لتغطية المسؤوليات القانونية والمهنية.",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الأنشطة المالية المتعلقة بعمليات الاعتماد في QB Academy.",
                "التعاريف": [
                    "الموارد المالية: الأموال اللازمة لتغطية جميع التكاليف المرتبطة بالاعتماد، مثل تكاليف الموظفين، النفقات التشغيلية، وتكاليف المراجعة والامتثال",
                    "الاحتياطات المالية: مبالغ مالية يتم تخصيصها لتغطية أي مسؤوليات غير متوقعة قد تنشأ نتيجة لأنشطة الاعتماد"
                ],
                "المسؤوليات": [
                    "الإدارة العليا: ضمان توفر الموارد المالية الكافية والاحتياطات اللازمة لتغطية أي مسؤوليات قانونية أو مهنية قد تترتب",
                    "قسم الشؤون المالية: متابعة الأداء المالي للجهة وتحديد الاحتياجات المالية المستقبلية لضمان استدامة العمليات",
                    "مدير الجودة: التأكد من أن الأنشطة المالية لا تؤثر على الحيادية أو النزاهة في عمليات الاعتماد"
                ],
                "الإجراءات": [
    " تحديد الموارد المالية اللازمة\n"
    "   يجب تحديد الميزانية السنوية المطلوبة لدعم جميع أنشطة الاعتماد\n"
    "   بما في ذلك رواتب الموظفين، الرسوم الإدارية، تكاليف التأمين، والتراخيص",

    " توفير الاحتياطات المالية\n"
    "   على الجهة تخصيص مبلغ مالي كاحتياطي لتغطية المسؤوليات القانونية والمهنية\n"
    "   يشمل ذلك التأمين ضد المخاطر المالية المرتبطة بأنشطة الاعتماد",

    " مراجعة الميزانية المالية\n"
    "   تتم مراجعة الميزانية بشكل دوري لضمان تلبيتها لاحتياجات الاعتماد\n"
    "   يجب أن تشمل المراجعة السنوية من الإدارة العليا تقييم الاستدامة المالية",

    " التأكد من الشفافية المالية\n"
    "   يجب أن تكون العمليات المالية موثقة وشفافة\n"
    "   تُعد التقارير المالية الدورية لضمان الامتثال للمتطلبات القانونية والمهنية"
],

                "المراجعة والتحديث": "يتم مراجعة وتحديث هذا الإجراء سنويًا أو عند حدوث أي تغييرات كبيرة في الوضع المالي للجهة أو في متطلبات الاعتماد.",
                "النماذج": [
                    "QF-04-04-01: سجل الموارد المالية لعمليات الاعتماد",
                    "QF-04-04-02: تقرير الاحتياطات المالية",
                    "QF-04-04-03: تقارير المراجعة المالية السنوية"
                ]
            },
            "QP-06.2: أدوار ومسؤوليات الأفراد": {
                "الغرض": "تحديد أدوار ومسؤوليات الأفراد المشاركين في أنشطة الاعتماد لضمان الفصل الواضح بين المهام ومنع تضارب المصالح",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الأفراد المشاركين في أنشطة الاعتماد في QB Academy، بما في ذلك الموظفين الدائمين والمتعاقدين والمقيمين الخارجيين",
                "التعاريف": [
                    "المقيم: الشخص المسؤول عن تقييم مدى استيفاء المتقدمين لمتطلبات الاعتماد",
                    "مدير الاعتماد: الشخص المسؤول عن الإشراف على عملية الاعتماد واتخاذ القرارات النهائية",
                    "لجنة الاعتماد: الهيئة المسؤولة عن مراجعة نتائج التقييم واتخاذ قرارات الاعتماد"
                ],
                "المسؤوليات": [
                    ("مدير الجودة", "تحديد وتوثيق الأدوار والمسؤوليات لجميع الأفراد المشاركين في أنشطة الاعتماد"),
                    ("مدير الموارد البشرية", "ضمان أن جميع الأفراد لديهم المهارات والمعرفة اللازمة لأداء مهامهم"),
                    ("المقيمين", "إجراء التقييمات بموضوعية ونزاهة ووفقًا للإجراءات المعتمدة")
                ],
                "الإجراءات": [
                    "يتم تحديد الأدوار والمسؤوليات لجميع الأفراد المشاركين في أنشطة الاعتماد وتوثيقها في وصف وظيفي واضح",
                    "يتم تدريب جميع الأفراد على واجباتهم ومسؤولياتهم والإجراءات ذات الصلة قبل بدء مهامهم",
                    "يتم مراجعة أداء الأفراد سنويًا لضمان استمرار قدرتهم على أداء مهامهم بكفاءة وموضوعية",
                    "يتم توثيق أي تغييرات في الأدوار والمسؤوليات والحصول على الموافقات اللازمة قبل تنفيذها"
                ],
                "النماذج": ["QF-06-02-01: قائمة الأدوار والمسؤوليات", "QF-06-02-02: إقرار الحيادية والسرية", "QF-06-02-03: سجل مراجعة تضارب المصالح"]
            },
            "QP-07.1: طلب الاعتماد": {
                "الغرض": "تحديد إجراءات تلقي ومعالجة طلبات الاعتماد من المتقدمين",
                "مجال التطبيق": "ينطبق على جميع طلبات الاعتماد المقدمة لـ QB Academy",
                "التعاريف": [
                    "طلب الاعتماد: الطلب الرسمي المقدم من شخص للحصول على شهادة اعتماد",
                    "المتقدم: الشخص الذي يطلب الحصول على شهادة الاعتماد"
                ],
                "المسؤوليات": [
                    ("إدارة الاستقبال", "استلام وتسجيل طلبات الاعتماد"),
                    ("إدارة التقييم", "مراجعة اكتمال الطلبات والوثائق المطلوبة")
                ],
                "الإجراءات": [
                    "استلام طلب الاعتماد مع الوثائق المطلوبة",
                    "التحقق من اكتمال الطلب ومطابقته للمتطلبات",
                    "إرسال إقرار استلام للمتقدم"
                ],
                "النماذج": ["QF-07-01-01: نموذج طلب الاعتماد", "QF-07-01-02: إقرار استلام الطلب"]
            },
            "QP-07.2: مراجعة الطلب": {
                "الغرض": "ضمان مراجعة طلبات الاعتماد والتحقق من استيفائها للمتطلبات",
                "مجال التطبيق": "جميع طلبات الاعتماد المستلمة",
                "التعاريف": [
                    "مراجعة الطلب: التحقق من اكتمال ومطابقة الطلب للمعايير المحددة"
                ],
                "المسؤوليات": [
                    ("لجنة المراجعة", "فحص ومراجعة الطلبات"),
                    ("مدير التقييم", "إصدار قرار قبول أو رفض الطلب")
                ],
                "الإجراءات": [
                    "مراجعة اكتمال الوثائق المطلوبة",
                    "التحقق من استيفاء المتطلبات الأساسية",
                    "إصدار قرار بقبول أو رفض الطلب"
                ],
                "النماذج": ["QF-07-02-01: تقرير مراجعة الطلب", "QF-07-02-02: إشعار قبول/رفض الطلب"]
            },
            "QP-08.1: طرق التقييم": {
                "الغرض": "تحديد طرق وأساليب التقييم المختلفة المستخدمة في عملية الاعتماد",
                "مجال التطبيق": "جميع عمليات التقييم في QB Academy",
                "التعاريف": [
                    "التقييم النظري: اختبار المعرفة النظرية للمتقدم",
                    "التقييم العملي: اختبار المهارات العملية والتطبيقية"
                ],
                "المسؤوليات": [
                    ("لجنة التقييم", "تحديد طرق التقييم المناسبة"),
                    ("المقيمون", "تنفيذ عملية التقييم وفقاً للطرق المحددة")
                ],
                "الإجراءات": [
                    "تحديد طريقة التقييم المناسبة للتخصص",
                    "إعداد أدوات ومواد التقييم",
                    "تنفيذ عملية التقييم"
                ],
                "النماذج": ["QF-08-01-01: خطة التقييم", "QF-08-01-02: تقرير التقييم"]
            },
            
            "QP-10.1: إدارة المعلومات": {
                "الغرض": "ضمان إدارة فعالة وآمنة لجميع المعلومات المتعلقة بعملية الاعتماد",
                "مجال التطبيق": "جميع المعلومات والبيانات في نظام QB Academy",
                "التعاريف": [
                    "المعلومات السرية: البيانات التي تتطلب حماية خاصة",
                    "قاعدة البيانات: النظام المستخدم لتخزين واسترجاع المعلومات"
                ],
                "المسؤوليات": [
                    ("مدير تقنية المعلومات", "إدارة أنظمة المعلومات وضمان أمانها"),
                    ("مدير الجودة", "ضمان دقة واكتمال المعلومات")
                ],
                "الإجراءات": [
                    "تصنيف المعلومات حسب مستوى السرية",
                    "تحديد صلاحيات الوصول للمعلومات",
                    "إجراء نسخ احتياطية دورية للبيانات"
                ],
                "النماذج": ["QF-10-01-01: سجل الوصول للمعلومات", "QF-10-01-02: تقرير النسخ الاحتياطي"]
            },
            "QP-05.1: هيكل الإدارة": {
                "الغرض": "وضع الإجراءات التي تضمن تنظيم وإدارة أنشطة جهة الاعتماد بطريقة تحافظ على الحيادية، مع توثيق الهيكل التنظيمي وتحديد الواجبات والمسؤوليات والصلاحيات",
                "مجال التطبيق": "ينطبق هذا الإجراء على جميع الأنشطة المتعلقة بإدارة جهة الاعتماد داخل QB Academy",
                "التعاريف": [
                    "الحيادية: الحفاظ على النزاهة في جميع الأنشطة دون التأثر بأي ضغوط خارجية أو تضارب في المصالح",
                    "الهيكل التنظيمي: التوزيع الرسمي للأدوار والواجبات داخل الجهة، بما في ذلك تحديد المسؤوليات والصلاحيات لكل وظيفة أو دور"
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من أن هيكل الجهة يضمن الحيادية والشفافية في جميع الأنشطة، وتوثيق الهيكل التنظيمي بشكل دقيق"),
                    ("اللجان المعنية", "التعاون مع إدارة الاعتماد لتنفيذ الأنشطة وضمان الحيادية في جميع مراحل عملية الاعتماد"),
                    ("مدير الجودة", "متابعة تنفيذ الهيكل التنظيمي وضمان أن جميع الموظفين يدركون مسؤولياتهم وصلاحياتهم في إطار الحفاظ على الحيادية")
                ],
                "الإجراءات": [
                    "تنظيم الأنشطة لضمان الحيادية: يجب تنظيم جميع الأنشطة المتعلقة بالاعتماد بطريقة تضمن عدم تأثرها بأي ضغوط أو تداخل مصالح. يتم تحديد مسؤوليات وصلاحيات جميع الأفراد المشاركين في الأنشطة، بما في ذلك العاملين في الاعتماد",
                    "توثيق الهيكل التنظيمي: يجب على الجهة توثيق هيكلها التنظيمي بشكل رسمي في الوثائق المقررة. يشمل هذا التوثيق تحديد جميع الأقسام المعنية بأنشطة الاعتماد، مع الإشارة إلى الواجبات والمسؤوليات والصلاحيات الخاصة بكل إدارة أو فرد",
                    "تحديد الواجبات والمسؤوليات: يجب تحديد الواجبات والمسؤوليات لكل من الإدارة (اتخاذ القرارات الاستراتيجية وتوفير التوجيه العام)، والعاملين في الاعتماد (تنفيذ الأنشطة الفنية المتعلقة بالاعتماد)، واللجان (القيام بدور استشاري أو فني في اتخاذ القرارات)",
                    "مراجعة الهيكل التنظيمي: يتم مراجعة الهيكل التنظيمي بشكل دوري لضمان توافقه مع المتطلبات القانونية ومعايير الجودة الخاصة بالاعتماد"
                ],
                "المراجعة والتحديث": "يتم مراجعة وتحديث الهيكل التنظيمي والإجراءات المتعلقة به بشكل دوري لضمان استمرار توافقها مع المتطلبات التنظيمية ومعايير الاعتماد",
                "النماذج": [
                    "QF-05-01-01: الهيكل التنظيمي لجهة الاعتماد",
                    "QF-05-01-02: سجل توزيع الواجبات والمسؤوليات",
                    "QF-05-01-03: تقارير مراجعة الهيكل التنظيمي السنوي"
                ]
            },
            "QP-10-02-01: إدارة الوثائق": {
                "الغرض": "توضيح المتطلبات الخاصة بوثائق نظام الإدارة اللازمة لضمان تقديم خدمات الاعتماد بجودة عالية ووفقًا للمعايير الدولية.",
                "مجال التطبيق": "يطبق هذا الإجراء على جميع الوثائق المتعلقة بنظام الإدارة داخل جهة الاعتماد والتي تساهم في تنظيم وتوجيه عمليات الاعتماد.",
                "التعاريف": [
                    "وثائق نظام الإدارة (Management System Documents): الوثائق التي تحتوي على السياسات العامة، الأهداف، الإجراءات، والتعليمات التي تنظم وتحكم الأنشطة والعمليات في جهة الاعتماد.",
                    "الوثائق: تشمل السياسات، الإجراءات، التعليمات، النماذج، والنطاق الذي يغطيه الاعتماد."
                ],
                "المسؤوليات": [
                    ("الإدارة العليا", "التأكد من توفير جميع الوثائق اللازمة لدعم تنفيذ النظام الإداري."),
                    ("مدير الجودة", "المسؤول عن إعداد وتوثيق وصيانة الوثائق المتعلقة بالنظام الإداري وضمان تحديثها بانتظام."),
                    ("الموظفون", "الالتزام باستخدام الوثائق حسب الحاجة في تنفيذ الأنشطة اليومية.")
                ],
                "الإجراءات": [
                    "إنشاء الوثائق:\n• يجب على جهة الاعتماد إنشاء الوثائق اللازمة التي تغطي السياسات العامة، الأهداف، الإجراءات، والتعليمات التي تنظم عمل النظام الإداري. يمكن أن يكون النظام الإداري مستقلًا أو جزءًا من نظام إدارة شامل.\n• تشمل الوثائق:\n  ○ السياسات العامة: تحديد الأهداف الكبرى والإرشادات التي توجه العمليات والقرارات داخل الجهة.\n  ○ الأهداف: تحديد الأهداف المحددة لتحقيق الجودة في خدمات الاعتماد.\n  ○ الإجراءات والتعليمات: توثيق العمليات اليومية التي يجب اتباعها لضمان أنشطة الاعتماد تتم بنزاهة وكفاءة.\n  ○ النماذج: تضم نماذج مخصصة لمتابعة وتوثيق البيانات والنتائج.\n  ○ النطاق: توضيح نطاق الاعتماد الذي تغطيه العمليات والأنشطة.",
                    "إصدار الوثائق:\n• يجب إصدار الوثائق بشكل واضح وسهل الوصول إليها من قبل المعنيين داخل الجهة.\n• يجب أن يتم مراجعة الوثائق بانتظام للتأكد من أنها محدثة ومتوافقة مع المعايير الحالية.",
                    "مراجعة الوثائق وتحديثها:\n• يجب مراجعة الوثائق بشكل دوري لضمان توافقها مع التغييرات في الأنظمة أو القوانين ذات الصلة.\n• عند الحاجة إلى إجراء أي تعديلات، يجب أن يتم تحديث الوثائق وتوزيعها على المعنيين.",
                    "إدارة الوثائق:\n• يجب الاحتفاظ بنسخ من الوثائق في مكان آمن لضمان الوصول إليها عند الحاجة.\n• يجب توثيق جميع التعديلات والإصدارات للوثائق."
                ],
                "النماذج": [
                    "QF-10-02-01-01: سجل وثائق نظام الإدارة",
                    "QF-10-02-01-02: سجل مراجعة الوثائق", 
                    "QF-10-02-01-03: نموذج تحديث الوثائق"
                ],
                "المراجعة والتحديث": "يجب مراجعة الوثائق المتعلقة بنظام الإدارة سنويًا أو عند حدوث تغييرات كبيرة في العمليات أو المعايير الدولية لضمان استمرارية فعاليتها."
            }
        }
        
        # تحميل النماذج من قاعدة البيانات فقط
    
    def show_welcome_content(self):
        """عرض المحتوى الترحيبي الافتراضي"""
        # مسح المحتوى الحالي
        for widget in self.content_frame.winfo_children():
            widget.destroy()
        
        # إطار الترحيب
        welcome_frame = tk.Frame(self.content_frame, bg=self.premium_colors['background'])
        welcome_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # عنوان الترحيب
        welcome_title = tk.Label(welcome_frame, 
                                text="مرحباً بك في نظام إدارة الجودة - أكاديمية QB",
                                font=("Arial", 24, "bold"),
                                fg="#FFD700",
                                bg=self.premium_colors['background'])
        welcome_title.pack(pady=(20, 30))
        
        # رسالة ترحيبية
        welcome_msg = tk.Label(welcome_frame, 
                              text="اختر إجراءً من الشريط الجانبي لعرض محتواه",
                              font=("Arial", 16),
                              fg="white",
                              bg=self.premium_colors['background'])
        welcome_msg.pack(pady=10)
        
        # معلومات إضافية
        info_msg = tk.Label(welcome_frame, 
                           text="يمكنك الوصول إلى جميع الإجراءات والنماذج من خلال القائمة الجانبية",
                           font=("Arial", 14),
                           fg="#AAAAAA",
                           bg=self.premium_colors['background'])
        info_msg.pack(pady=5)
    
    def clear_content_area(self):
        """مسح منطقة المحتوى"""
        for widget in self.content_frame.winfo_children():
            widget.destroy()

    def show_procedure(self, procedure_name):
        """عرض محتوى الإجراء المحدد"""
        print(f"Attempting to show procedure: {procedure_name}")
        
        # مسح المحتوى الحالي
        self.clear_content_area()
        
        # إطار التمرير
        canvas = tk.Canvas(self.content_frame, bg="#2D0A4D", highlightthickness=0)
        scrollbar = tk.Scrollbar(self.content_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#2D0A4D")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # إضافة رأس الوثيقة للإجراءات الخاصة
        if "QP-10-02-01" in procedure_name:
            print("Adding document header for QP-10-02-01")
            # رأس الوثيقة
            doc_header_frame = tk.Frame(scrollable_frame, bg="#1A0A2E", pady=15)
            doc_header_frame.pack(fill=tk.X, pady=(10, 0))
            
            doc_type_label = tk.Label(doc_header_frame, 
                                    text="وثيقــــة",
                                    font=("Arial", 18, "bold"),
                                    fg="#FFD700",
                                    bg="#1A0A2E",
                                    anchor="center")
            doc_type_label.pack(pady=(5, 0))
            
            doc_title_label = tk.Label(doc_header_frame, 
                                     text="وثائق نظام الإدارة",
                                     font=("Arial", 16, "bold"),
                                     fg="#87CEEB",
                                     bg="#1A0A2E",
                                     anchor="center")
            doc_title_label.pack(pady=(0, 5))
        
        # عرض عنوان الإجراء
        title_label = tk.Label(scrollable_frame, 
                              text=procedure_name,
                              font=("Arial", 22, "bold"),
                              fg="#FFD700",
                              bg="#2D0A4D",
                              anchor="center",
                              justify="center")
        title_label.pack(fill=tk.X, pady=(10, 20))
        
        # التحقق من وجود الإجراء
        if procedure_name in self.procedures:
            print(f"Procedure found: {procedure_name}")
            procedure = self.procedures[procedure_name]
            
            # عرض الغرض
            self.create_section(scrollable_frame, "1. الغرض", procedure["الغرض"])
            
            # عرض مجال التطبيق
            self.create_section(scrollable_frame, "2. مجال التطبيق", procedure["مجال التطبيق"])
            
            # عرض التعاريف
            if "التعاريف" in procedure:
                definitions_frame = tk.Frame(scrollable_frame, bg="#3C1361", padx=10, pady=10)
                definitions_frame.pack(fill=tk.X, pady=(0, 15))
                
                section_label = tk.Label(definitions_frame, 
                                       text="3. التعاريف",
                                       font=self.arabic_font_large,
                                       fg="#FFD700",
                                       bg="#3C1361",
                                       anchor="w")
                section_label.pack(fill=tk.X, padx=10, pady=(0, 10))
                
                for i, definition in enumerate(procedure["التعاريف"]):
                    def_label = tk.Label(definitions_frame, 
                                       text=f"• {definition}",
                                       font=self.arabic_font,
                                       fg="white",
                                       bg="#3C1361",
                                       anchor="w",
                                       justify="right")
                    def_label.pack(fill=tk.X, padx=20, pady=2)
            
            # عرض المسؤوليات
            if "المسؤوليات" in procedure:
                responsibilities_frame = tk.Frame(scrollable_frame, bg="#3C1361", padx=10, pady=10)
                responsibilities_frame.pack(fill=tk.X, pady=(0, 15))
                
                section_label = tk.Label(responsibilities_frame, 
                                       text="4. المسؤوليات",
                                       font=self.arabic_font_large,
                                       fg="#FFD700",
                                       bg="#3C1361",
                                       anchor="w")
                section_label.pack(fill=tk.X, padx=10, pady=(0, 10))
                
                # التحقق من نوع البيانات وعرضها بشكل مناسب
                if procedure["المسؤوليات"] and isinstance(procedure["المسؤوليات"][0], tuple):
                    # إذا كانت البيانات على شكل tuples (الوظيفة، المسؤولية)
                    # جدول المسؤوليات
                    tree = ttk.Treeview(responsibilities_frame, columns=("الوظيفة", "المسؤولية"), show="headings", height=len(procedure["المسؤوليات"]))
                    
                    # تخصيص التصميم
                    style = ttk.Style()
                    style.configure("Treeview", 
                                   background="#3C1361",
                                   foreground="white",
                                   fieldbackground="#3C1361",
                                   font=self.arabic_font,
                                   rowheight=30)
                    style.configure("Treeview.Heading", 
                                  background="#5A2A9C",
                                  foreground="#FFD700",
                                  font=self.arabic_font_bold)
                    style.configure("Treeview.Cell", anchor="center")
                    
                    # تعريف الأعمدة
                    tree.heading("الوظيفة", text="الوظيفة")
                    tree.heading("المسؤولية", text="المسؤولية")
                    tree.column("الوظيفة", width=200, anchor="center")
                    tree.column("المسؤولية", width=400, anchor="center")
                    
                    # إضافة البيانات
                    for role, responsibility in procedure["المسؤوليات"]:
                        tree.insert("", tk.END, values=(role, responsibility))
                    
                    tree.pack(fill=tk.X, padx=10, pady=10)
                else:
                    # إذا كانت البيانات على شكل نصوص بسيطة
                    for i, responsibility in enumerate(procedure["المسؤوليات"]):
                        resp_label = tk.Label(responsibilities_frame, 
                                           text=f"• {responsibility}",
                                           font=self.arabic_font,
                                           fg="white",
                                           bg="#3C1361",
                                           anchor="w",
                                           justify="right",
                                           wraplength=650)
                        resp_label.pack(fill=tk.X, padx=20, pady=2)
            
            # عرض الإجراءات
            if "الإجراءات" in procedure:
                procedures_frame = tk.Frame(scrollable_frame, bg="#3C1361", padx=10, pady=10)
                procedures_frame.pack(fill=tk.X, pady=(0, 15))
                
                section_label = tk.Label(procedures_frame, 
                                       text="5. الإجراءات",
                                       font=self.arabic_font_large,
                                       fg="#FFD700",
                                       bg="#3C1361",
                                       anchor="w")
                section_label.pack(fill=tk.X, padx=10, pady=(0, 10))
                
                for i, step in enumerate(procedure["الإجراءات"]):
                    step_frame = tk.Frame(procedures_frame, bg="#3C1361")
                    step_frame.pack(fill=tk.X, padx=10, pady=5)
                    
                    num_label = tk.Label(step_frame, 
                                       text=f"{i+1}.",
                                       font=self.arabic_font_bold,
                                       fg="#FFD700",
                                       bg="#3C1361",
                                       width=3)
                    num_label.pack(side=tk.LEFT)
                    
                    step_label = tk.Label(step_frame, 
                                       text=step,
                                       font=self.arabic_font,
                                       fg="white",
                                       bg="#3C1361",
                                       anchor="w",
                                       justify="right",
                                       wraplength=650)
                    step_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
            
            # عرض النماذج والسجلات
            if "النماذج" in procedure:
                forms_frame = tk.Frame(scrollable_frame, bg="#3C1361", padx=10, pady=10)
                forms_frame.pack(fill=tk.X, pady=(0, 20))
                
                section_label = tk.Label(forms_frame, 
                                       text="6. النماذج والسجلات",
                                       font=self.arabic_font_large,
                                       fg="#FFD700",
                                       bg="#3C1361",
                                       anchor="w")
                section_label.pack(fill=tk.X, padx=10, pady=(0, 10))
                
                # إنشاء جدول النماذج
                forms_table_frame = tk.Frame(forms_frame, bg="#3C1361")
                forms_table_frame.pack(fill=tk.X, padx=10, pady=(0, 15))
                
                # Create table with proper styling
                columns = ("الرمز", "الاسم")
                tree = ttk.Treeview(forms_table_frame, columns=columns, show="headings", height=len(procedure["النماذج"]))
                
                # تخصيص التصميم
                style = ttk.Style()
                style.configure("Treeview", 
                               background="#3C1361",
                               foreground="white",
                               fieldbackground="#3C1361",
                               font=self.arabic_font,
                               rowheight=35)
                style.configure("Treeview.Heading", 
                              background="#5A2A9C",
                              foreground="#FFD700",
                              font=self.arabic_font_bold)
                style.map("Treeview", background=[("selected", "#8A2BE2")])
                
                # تعريف الأعمدة
                tree.heading("الرمز", text="الرمز")
                tree.heading("الاسم", text="الاسم")
                tree.column("الرمز", width=200, anchor="center")
                tree.column("الاسم", width=400, anchor="center")
                
                # إضافة البيانات
                for form in procedure["النماذج"]:
                    if ":" in form:
                        code, name = form.split(":", 1)
                        tree.insert("", tk.END, values=(code.strip(), name.strip()))
                    else:
                        tree.insert("", tk.END, values=(form, ""))
                
                tree.pack(fill=tk.X, padx=10, pady=10)
                
                # إضافة عنوان فرعي للأزرار
                buttons_label = tk.Label(forms_frame, 
                                       text="الوصول السريع للنماذج:",
                                       font=self.arabic_font_bold,
                                       fg="#87CEEB",
                                       bg="#3C1361",
                                       anchor="w")
                buttons_label.pack(fill=tk.X, padx=10, pady=(10, 5))
                
                # أزرار النماذج
                for form in procedure["النماذج"]:
                    form_btn = tk.Button(forms_frame, 
                                       text=form,
                                       font=self.arabic_font_bold,
                                       fg="white",
                                       bg="#5A2A9C",
                                       relief=tk.RAISED,
                                       padx=10,
                                       pady=5,
                                       command=lambda f=form: self.open_form(f))
                    form_btn.pack(fill=tk.X, padx=10, pady=3)
            
            # عرض المراجعة والتحديث
            if "المراجعة والتحديث" in procedure:
                review_frame = tk.Frame(scrollable_frame, bg="#3C1361", padx=10, pady=10)
                review_frame.pack(fill=tk.X, pady=(0, 20))
                
                section_label = tk.Label(review_frame, 
                                       text="7. المراجعة والتحديث",
                                       font=self.arabic_font_large,
                                       fg="#FFD700",
                                       bg="#3C1361",
                                       anchor="w")
                section_label.pack(fill=tk.X, padx=10, pady=(0, 10))
                
                review_content = tk.Label(review_frame, 
                                        text=procedure["المراجعة والتحديث"],
                                        font=self.arabic_font,
                                        fg="white",
                                        bg="#3C1361",
                                        anchor="w",
                                        justify="right",
                                        wraplength=700)
                review_content.pack(fill=tk.X, padx=20, pady=5)
            
            print(f"Successfully displayed procedure: {procedure_name}")
        
        else:
            print(f"Procedure not found: {procedure_name}")
            print(f"Available procedures: {list(self.procedures.keys())}")
            # إذا لم يتم العثور على الإجراء
            not_found_frame = tk.Frame(scrollable_frame, bg="#2D0A4D", padx=20, pady=50)
            not_found_frame.pack(fill=tk.BOTH, expand=True)
            
            not_found_label = tk.Label(not_found_frame, 
                                      text="جاري تطوير هذا الإجراء",
                                      font=("Arial", 18),
                                      fg="white",
                                      bg="#2D0A4D")
            not_found_label.pack(pady=20)
            
            info_label = tk.Label(not_found_frame, 
                                text="سيتم توفير محتوى هذا الإجراء في التحديثات القادمة",
                                font=("Arial", 14),
                                fg="#AAAAAA",
                                bg="#2D0A4D")
            info_label.pack(pady=10)
    
    def create_section(self, parent, title, content):
        section_frame = tk.Frame(parent, bg="#3C1361", padx=10, pady=10)
        section_frame.pack(fill=tk.X, pady=(0, 15))
        
        title_label = tk.Label(section_frame, 
                             text=title,
                             font=self.arabic_font_large,
                             fg="#FFD700",
                             bg="#3C1361",
                             anchor="w")
        title_label.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        content_label = tk.Label(section_frame, 
                               text=content,
                               font=self.arabic_font,
                               fg="white",
                               bg="#3C1361",
                               anchor="w",
                               justify="right",
                               wraplength=700)
        content_label.pack(fill=tk.X, padx=20, pady=5)
    
    def open_form(self, form_name):
        # Get the actual form name using mapping
        actual_form_name = self.get_actual_form_name(form_name)
        
        form_window = tk.Toplevel(self.root)
        form_window.title(form_name)
        
        # Get screen dimensions for responsive sizing
        screen_width = form_window.winfo_screenwidth()
        screen_height = form_window.winfo_screenheight()
        
        # Calculate optimal window size (90% of screen, with better minimum limits)
        min_width, min_height = 1000, 700
        max_width, max_height = 1800, 1400
        
        # Use 90% of screen size for better content visibility
        width = max(min_width, min(max_width, int(screen_width * 0.90)))
        height = max(min_height, min(max_height, int(screen_height * 0.90)))
        
        # Center the window on screen
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        
        form_window.geometry(f"{width}x{height}+{x}+{y}")
        form_window.configure(bg="#2D0A4D")
        form_window.resizable(True, True)
        form_window.minsize(min_width, min_height)
        form_window.maxsize(max_width, max_height)
        
        # Create main frame with optimized spacing for better width utilization
        main_frame = tk.Frame(form_window, bg="#2D0A4D")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create canvas and scrollbar for scrolling
        canvas = tk.Canvas(main_frame, bg="#2D0A4D", highlightthickness=0)
        scrollbar = tk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#2D0A4D")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Add mouse wheel scrolling support
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # عنوان النموذج
        title_frame = tk.Frame(scrollable_frame, bg="#4A1B8D", height=70)
        title_frame.pack(fill=tk.X)
        
        title_label = tk.Label(title_frame, 
                              text=form_name,
                              font=("Arial", 18, "bold"),
                              fg="white",
                              bg="#4A1B8D")
        title_label.pack(pady=20)
        
        # إطار النموذج - reduced padding for better space utilization
        form_frame = tk.Frame(scrollable_frame, bg="#3C1361")
        form_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=8)
        
        # حقل تاريخ اليوم - reduced padding
        date_frame = tk.Frame(form_frame, bg="#3C1361")
        date_frame.pack(fill=tk.X, padx=15, pady=8)
        
        date_label = tk.Label(date_frame, 
                             text="تاريخ اليوم:",
                             font=self.arabic_font_bold,
                             fg="#FFD700",
                             bg="#3C1361")
        date_label.pack(side=tk.RIGHT)
        
        today = datetime.now().strftime("%Y/%m/%d")
        date_value = tk.Label(date_frame, 
                             text=today,
                             font=self.arabic_font_bold,
                             fg="#FFD700",
                             bg="#3C1361")
        date_value.pack(side=tk.RIGHT, padx=10)
        
        # نموذج سجل الوثائق القانونية
        if "سجل الوثائق القانونية" in form_name:
            self.create_editable_table(form_frame, actual_form_name)
        
        # نموذج مراجعة الوضع القانوني
        elif "نموذج مراجعة الوضع القانوني" in form_name:
            self.create_editable_table(form_frame, form_name)
            
            # حقل توقيع مدير الشركة
            sign_frame = tk.Frame(form_frame, bg="#3C1361")
            sign_frame.pack(fill=tk.X, padx=20, pady=20)
            
            sign_label = tk.Label(sign_frame, 
                                text="توقيع مدير الشركة:",
                                font=self.arabic_font_bold,
                                fg="#FFD700",
                                bg="#3C1361")
            sign_label.pack(side=tk.RIGHT, padx=10)
            
            sign_entry = tk.Entry(sign_frame, 
                                 font=self.arabic_font,
                                 width=30)
            sign_entry.pack(side=tk.RIGHT, padx=10)
        
        # نموذج محضر اجتماع لجنة القرارات
        elif "محضر اجتماع لجنة القرارات" in form_name:
            self.create_minutes_form(form_frame, form_name)
            
        # نموذج سجل التهديدات المحتملة للحيادية
        elif "سجل التهديدات المحتملة للحيادية" in form_name:
            self.create_threats_register_form(form_frame, form_name)
            
        # نموذج تقرير تضارب المصالح
        elif "تقرير تضارب المصالح" in form_name:
            self.create_conflict_interest_form(form_frame, form_name)
            
        # نماذج QP-04-04 - الموارد المالية والاحتياطات
        elif "سجل الموارد المالية لعمليات الاعتماد" in form_name:
            self.create_financial_resources_form(form_frame, form_name)
            
        elif "تقرير الاحتياطات المالية" in form_name:
            self.create_financial_reserves_form(form_frame, form_name)
            
        elif "تقارير المراجعة المالية السنوية" in form_name:
            self.create_annual_financial_review_form(form_frame, form_name)
            
        # نماذج QP-05.1 - هيكل الإدارة
        elif "الهيكل التنظيمي لجهة الاعتماد" in form_name:
            self.create_organizational_structure_form(form_frame, form_name)
            
        elif "سجل توزيع الواجبات والمسؤوليات" in form_name:
            self.create_duties_responsibilities_form(form_frame, form_name)
            
        elif "تقارير مراجعة الهيكل التنظيمي السنوي" in form_name:
            self.create_annual_structure_review_form(form_frame, form_name)
            
        # نماذج QP-05.2 - الفصل بين التدريب والاعتماد
        elif "سجل الأنشطة التدريبية المقدمة" in form_name:
            self.create_editable_table(form_frame, form_name)
            
        elif "تقرير فصل الأنشطة التدريبية عن التقييم" in form_name:
            self.create_editable_table(form_frame, form_name)
            
        elif "سجل مراجعة الحيادية في التدريب" in form_name:
            self.create_editable_table(form_frame, form_name)
            
        # نماذج QP-06.1 - كفاءة الأفراد
        elif "سجل المؤهلات المطلوبة للأفراد" in form_name:
            self.create_editable_table(form_frame, form_name)
            
        elif "تقرير المراجعة الدورية لكفاءة الأفراد" in form_name:
            self.create_editable_table(form_frame, form_name)
            
        elif "سجل برامج التدريب والتطوير المهنى" in form_name:
            self.create_editable_table(form_frame, form_name)
            
        # نماذج QP-06.2 - أدوار ومسؤوليات الأفراد  
        elif "قائمة الأدوار والمسؤوليات للأفراد المشاركين في أنشطة الاعتماد" in form_name:
            self.create_editable_table(form_frame, actual_form_name)
            
        elif "قائمة الأدوار والمسؤوليات" in form_name and "QF-06-02-01" in form_name:
            self.create_editable_table(form_frame, actual_form_name)
            
        elif "إقرار الحيادية والسرية للأفراد" in actual_form_name:
            self.create_neutrality_declaration_form(form_frame, actual_form_name)
            
        elif "إقرار الحيادية والسرية" in form_name and "QF-06-02-02" in form_name:
            self.create_neutrality_declaration_form(form_frame, actual_form_name)
            
        elif "سجل مراجعة تضارب المصالح" in form_name:
            self.create_editable_table(form_frame, actual_form_name)
            
        # نماذج QP-06.3 - الاستعانة بالأطراف الخارجية
        elif "نموذج عقد التعاقد مع الأطراف الخارجية" in form_name:
            self.create_contract_form(form_frame, actual_form_name)
            
        elif "سجل تقييم أداء الأطراف الخارجية" in form_name:
            self.create_editable_table(form_frame, actual_form_name)
            
        elif "تقرير مراقبة الأداء والتقييم الدوري" in form_name:
            self.create_performance_report_form(form_frame, actual_form_name)
            
        elif "نموذج تقييم تضارب المصالح مع الأطراف الخارجية" in form_name:
            self.create_conflict_assessment_form(form_frame, actual_form_name)
            
        elif "تقرير تدريب الأفراد حول الحيادية وتضارب المصالح" in form_name:
            self.create_editable_table(form_frame, actual_form_name)
            
        # نماذج QP-06.4 - الموارد المادية والتقنية
        elif "نموذج تجهيز قاعات الامتحانات" in form_name:
            self.create_exam_room_setup_form(form_frame, actual_form_name)
            
        elif "سجل استخدام الموارد المادية والتقنية" in form_name:
            self.create_resources_usage_form(form_frame, actual_form_name)
            
        elif "تقرير مراجعة بيئة الامتحانات" in form_name:
            self.create_exam_environment_review_form(form_frame, actual_form_name)
            
        elif "تقرير تقييم الموارد التقنية" in form_name:
            self.create_technical_resources_evaluation_form(form_frame, actual_form_name)
            
        # نماذج QP-07.1 - إدارة طلبات الامتحان ونتائج التقييم
        elif "QF-07-01-01" in form_name or "نموذج طلب التقديم للامتحان" in form_name:
            self.create_exam_application_form(form_frame, actual_form_name)
            
        elif "QF-07-01-02" in form_name or "سجل نتائج التقييمات والامتحانات" in form_name:
            self.create_exam_results_record_form(form_frame, actual_form_name)
            
        elif "QF-07-01-03" in form_name or ("سجل قرارات الاعتماد" in form_name and "QF-07-01" in form_name):
            self.create_certification_decisions_record_form(form_frame, actual_form_name)
            
        elif "QF-07-01-04" in form_name or "تقرير شكاوى وتظلمات" in form_name:
            self.create_complaints_report_form(form_frame, actual_form_name)
            
        elif "QF-07-01-05" in form_name or "تقرير إتلاف السجلات" in form_name:
            self.create_records_destruction_report_form(form_frame, actual_form_name)
            
        # نماذج QP-08.1 - اعتماد المقيمين
        elif "QF-08-01-01" in form_name or "نموذج طلب اعتماد مقيم" in form_name:
            self.create_evaluator_accreditation_application_form(form_frame, actual_form_name)
            
        elif "QF-08-01-02" in form_name or "سجل تقييم اعتماد المقيم" in form_name:
            self.create_evaluator_assessment_record_form(form_frame, actual_form_name)
            
        elif "QF-08-01-03" in form_name or "سجل تجديد تعليق سحب اعتماد المقيم" in form_name:
            self.create_evaluator_renewal_suspension_withdrawal_form(form_frame, actual_form_name)
            
        # نماذج QP-08.2 - اعتماد المراكز
        elif "QF-08-02-01" in form_name or "نموذج طلب اعتماد مركز" in form_name:
            self.create_center_accreditation_application_form(form_frame, actual_form_name)
            
        elif "QF-08-02-02" in form_name or "سجل التقييم والاختبار" in form_name:
            self.create_center_assessment_report_form(form_frame, actual_form_name)
            
        elif "QF-08-02-03" in form_name or "سجل تجديد أو سحب اعتماد" in form_name:
            self.create_center_renewal_withdrawal_form(form_frame, actual_form_name)
            
        # نماذج QP-08.3 - تحديد الكفاءات
        elif "QF-08-03-01" in form_name or "نموذج تحديد الكفاءات المطلوبة" in form_name:
            self.create_competency_determination_form(form_frame, actual_form_name)
            
        elif "QF-08-03-02" in form_name or "سجل تقييم الكفاءات" in form_name:
            self.create_competency_assessment_record_form(form_frame, actual_form_name)
            
        # نماذج QP-08.4 - المتطلبات الإضافية
        elif "QF-08-04-01" in form_name or "نموذج دمج المتطلبات الإضافية" in form_name:
            self.create_additional_requirements_form(form_frame, actual_form_name)
            
        elif "QF-08-04-02" in form_name or "سجل المراجعة والتحديث للمتطلبات الإضافية" in form_name:
            self.create_additional_requirements_review_form(form_frame, actual_form_name)
            
        # نماذج QP-07.2 - إدارة معلومات البرنامج
        elif "نموذج معلومات عامة للبرنامج" in form_name:
            self.create_program_information_form(form_frame, actual_form_name)
            
        elif "تقرير تحديث المعلومات العامة" in form_name:
            self.create_information_update_report_form(form_frame, actual_form_name)
            
        # نماذج QP-07.3 - السرية وحماية البيانات الشخصية
        elif "نموذج اتفاقية سرية للموظفين والمتعاقدين" in form_name:
            self.create_confidentiality_agreement_form(form_frame, actual_form_name)
            
        elif "تقرير مراجعة البيانات الشخصية" in form_name:
            self.create_personal_data_review_report_form(form_frame, actual_form_name)
            
        # نماذج QP-07.4 - أمن المعلومات والحوادث الأمنية
        elif "نموذج تقرير عن الحوادث الأمنية" in form_name:
            self.create_security_incident_report_form(form_frame, actual_form_name)
            
        elif "سجل أمن المعلومات" in form_name:
            self.create_information_security_log_form(form_frame, actual_form_name)
            
        # نماذج QP-09.1 - التقديم للبرامج
        elif "QF-09-01-01" in form_name or "نموذج طلب التقديم للبرنامج" in form_name:
            self.create_program_application_form(form_frame, actual_form_name)
            
        elif "QF-09-01-02" in form_name or "اتفاقية التزام المتقدم بالبرنامج" in form_name:
            self.create_applicant_commitment_agreement_form(form_frame, actual_form_name)
            
        elif "QF-09-01-03" in form_name or "سجل مراجعة طلبات التقديم" in form_name:
            self.create_application_review_record_form(form_frame, actual_form_name)
            
        # نماذج QP-09.2 - إجراءات التقييم
        elif "QF-09-02-01" in form_name or "نموذج تقييم المؤهلات السابقة" in form_name:
            self.create_qualifications_assessment_form(form_frame, actual_form_name)
            
        elif "QF-09-02-02" in form_name or "نموذج تقييم الخبرة العملية" in form_name:
            self.create_experience_assessment_form(form_frame, actual_form_name)
            
        elif "QF-09-02-03" in form_name or "نموذج تقييم الامتحانات والتمارين العملية" in form_name:
            self.create_practical_assessment_form(form_frame, actual_form_name)
            
        elif "QF-09-02-04" in form_name or "سجل نتائج التقييم" in form_name:
            self.create_assessment_results_record_form(form_frame, actual_form_name)
            
        # نماذج QP-09.3 - إجراءات الامتحان
        elif "QF-09-03-01" in form_name or "نموذج الامتحان" in form_name:
            self.create_examination_form(form_frame, actual_form_name)
            
        elif "QF-09-03-02" in form_name or "سجل الامتحان" in form_name:
            self.create_examination_record_form(form_frame, actual_form_name)
            
        elif "QF-09-03-03" in form_name or "تقرير مراقبة الامتحان" in form_name:
            self.create_examination_monitoring_report_form(form_frame, actual_form_name)
            
        # نماذج QP-09.4 - قرار الشهادة
        elif "QF-09-04-01" in form_name or "نموذج قرار الشهادة" in form_name:
            self.create_certificate_decision_form(form_frame, actual_form_name)
            
        elif "QF-09-04-02" in form_name or "سجل قرارات الشهادات" in form_name:
            self.create_certificate_decisions_record_form(form_frame, actual_form_name)
            
        elif "QF-09-04-03" in form_name or "شهادة الاعتماد" in form_name:
            self.create_accreditation_certificate_form(form_frame, actual_form_name)
            
        # نماذج QP-09.5 - تعليق أو سحب الشهادة
        elif "QF-09-05-01" in form_name or "نموذج قرار تعليق أو سحب أو تقليص النطاق" in form_name:
            self.create_suspension_withdrawal_decision_form(form_frame, actual_form_name)
            
        elif "QF-09-05-02" in form_name or "سجل قرارات تعليق أو سحب الشهادات" in form_name:
            self.create_suspension_withdrawal_record_form(form_frame, actual_form_name)
            
        elif "QF-09-05-03" in form_name or "نموذج تظلم" in form_name:
            self.create_complaint_form(form_frame, actual_form_name)
            
        # نماذج QP-09-06 - إعادة الاعتماد
        elif "QF-09-06-01" in form_name or "نموذج طلب إعادة الاعتماد" in form_name:
            self.create_recertification_application_form(form_frame, actual_form_name)
            
        elif "QF-09-06-02" in form_name or "سجل متابعة الأداء المهنى" in form_name:
            self.create_professional_performance_monitoring_form(form_frame, actual_form_name)
            
        elif "QF-09-06-03" in form_name or "نموذج تقرير إعادة التقييم" in form_name:
            self.create_reevaluation_report_form(form_frame, actual_form_name)
            
        # نماذج QP-09-07 - استخدام الشهادات والشعارات
        elif "QF-09-07-01" in form_name or "نموذج اتفاقية استخدام الشهادات والشعارات" in form_name:
            self.create_certificate_logo_usage_agreement_form(form_frame, actual_form_name)
            
        elif "QF-09-07-02" in form_name or "تقرير حالة إساءة الاستخدام" in form_name:
            self.create_misuse_report_form(form_frame, actual_form_name)
            
        elif "QF-09-07-03" in form_name or "سجل مراجعة الاستخدام السليم للشهادات والعلامات" in form_name:
            self.create_proper_usage_review_form(form_frame, actual_form_name)
            
        elif "QF-09-08-01" in form_name or "نموذج تقديم التظلم" in form_name:
            self.create_appeal_submission_form(form_frame, actual_form_name)
            
        elif "QF-09-08-02" in form_name or "سجل التظلمات والقرارات المتخذة" in form_name:
            self.create_appeals_records_form(form_frame, actual_form_name)
            
        elif "QF-09-08-03" in form_name or "تقرير لجنة التظلمات" in form_name:
            self.create_appeals_committee_report_form(form_frame, actual_form_name)
            
        elif "QF-09-09-01" in form_name or "نموذج تقديم الشكوى" in form_name:
            self.create_complaint_submission_form(form_frame, actual_form_name)
            
        elif "QF-09-09-02" in form_name or "سجل الشكاوى والقرارات المتخذة" in form_name:
            self.create_complaints_records_form(form_frame, actual_form_name)
            
        elif "QF-09-09-03" in form_name or "تقرير لجنة معالجة الشكوى" in form_name:
            self.create_complaints_committee_report_form(form_frame, actual_form_name)
            
        # نماذج QP-10-01 - النظام الإداري
        elif "QF-10-01-01" in form_name or "سجل مكونات النظام الإداري" in form_name:
            self.create_QF_10_01_01_form(form_frame)
            
        elif "QF-10-01-02" in form_name or "تقرير مراجعة النظام الإداري" in form_name:
            self.create_QF_10_01_02_form(form_frame)
            
        elif "QF-10-01-03" in form_name or "سجل التحسين المستمر" in form_name:
            self.create_QF_10_01_03_form(form_frame)
            
        # نماذج QP-10-02-01 - وثائق نظام الإدارة
        elif "QF-10-02-01-01" in form_name or "سجل وثائق نظام الإدارة" in form_name:
            self.create_QF_10_02_01_01_form(form_frame)
            
        elif "QF-10-02-01-02" in form_name or "سجل مراجعة الوثائق" in form_name:
            self.create_QF_10_02_01_02_form(form_frame)
            
        elif "QF-10-02-01-03" in form_name or "نموذج تحديث الوثائق" in form_name:
            self.create_QF_10_02_01_03_form(form_frame)
            
        # نماذج QP-10-02-02 - ضبط الوثائق
        elif "QF-10-02-02-01" in form_name or "نموذج مراجعة الوثائق" in form_name:
            self.create_QF_10_02_02_01_form(form_frame)
            
        elif "QF-10-02-02-02" in form_name or "نموذج توزيع الوثائق" in form_name:
            self.create_QF_10_02_02_02_form(form_frame)
            
        elif "QF-10-02-02-03" in form_name or "نموذج حفظ الوثائق المؤرشفة" in form_name:
            self.create_QF_10_02_02_03_form(form_frame)
            
        # نماذج QP-10-02-03 - ضبط السجلات
        elif "QF-10-02-03-01" in form_name or "نموذج تحديد السجلات وحفظها" in form_name:
            self.create_QF_10_02_03_01_form(form_frame)
            
        elif "QF-10-02-03-02" in form_name or "نموذج إجراء استرجاع السجلات" in form_name:
            self.create_QF_10_02_03_02_form(form_frame)
            
        elif "QF-10-02-03-03" in form_name or "نموذج إجراءات التخلص من السجلات" in form_name:
            self.create_QF_10_02_03_03_form(form_frame)
            
        # نماذج QP-10-02-04 - مراجعة الإدارة
        elif "QF-10-02-04-01" in form_name or "نموذج تقرير مراجعة الإدارة" in form_name:
            self.create_QF_10_02_04_01_form(form_frame)
            
        elif "QF-10-02-04-02" in form_name or "نموذج قائمة التحقق للمراجعة السنوية" in form_name:
            self.create_QF_10_02_04_02_form(form_frame)
            
        elif "QF-10-02-04-03" in form_name or "نموذج تحليل التغذية الراجعة والشكاوى" in form_name:
            self.create_QF_10_02_04_03_form(form_frame)
            
        # نماذج QP-10-02-05 - التدقيق الداخلي
        elif "QF-10-02-05-01" in form_name or "نموذج خطة التدقيق الداخلي السنوي" in form_name:
            self.create_QF_10_02_05_01_form(form_frame)
            
        elif "QF-10-02-05-02" in form_name or "نموذج تقرير التدقيق الداخلي" in form_name:
            self.create_QF_10_02_05_02_form(form_frame)
            
        elif "QF-10-02-05-03" in form_name or "نموذج إجراءات تصحيحية" in form_name:
            self.create_QF_10_02_05_03_form(form_frame)
            
        elif "QF-10-02-05-04" in form_name or "نموذج متابعة الإجراءات التصحيحية" in form_name:
            self.create_QF_10_02_05_04_form(form_frame)
            
        # نماذج QP-10-02-06 - الإجراءات التصحيحية
        elif "QF-10-02-06-01" in form_name or "سجل حالات عدم المطابقة" in form_name:
            self.create_QF_10_02_06_01_form(form_frame)
            
        elif "QF-10-02-06-02" in form_name or "تحليل السبب الجذري" in form_name:
            self.create_QF_10_02_06_02_form(form_frame)
            
        elif "QF-10-02-06-03" in form_name or "إجراء تصحيحي" in form_name:
            self.create_QF_10_02_06_03_form(form_frame)
            
        elif "QF-10-02-06-04" in form_name or "متابعة الإجراءات التصحيحية" in form_name:
            self.create_QF_10_02_06_04_form(form_frame)
            
        # نماذج QP-10-02-07 - الإجراءات الوقائية
        elif "QF-10-02-07-01" in form_name or "سجل المخاطر المحتملة" in form_name:
            self.create_QF_10_02_07_01_form(form_frame)
            
        elif "QF-10-02-07-02" in form_name or "إجراءات وقائية" in form_name:
            self.create_QF_10_02_07_02_form(form_frame)
            
        elif "QF-10-02-07-03" in form_name or "متابعة التدابير الوقائية" in form_name:
            self.create_QF_10_02_07_03_form(form_frame)
            
        # نموذج افتراضي
        else:
            form_label = tk.Label(form_frame, 
                                text="هذا النموذج قيد التطوير",
                                font=("Arial", 14),
                                fg="white",
                                bg="#3C1361")
            form_label.pack(pady=50)
    
    def create_minutes_form(self, parent, form_name):
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # حقول النموذج
        fields = self.forms[form_name]["الحقول"]
        data = self.forms[form_name]["البيانات"][0] if self.forms[form_name]["البيانات"] else [""]*len(fields)
        
        # حقول النص الطويلة
        long_fields = [
            "أسماء الحضور", "جدول الأعمال", "تفاصيل المناقشات", 
            "القرارات المتخذة", "التوصيات", "متابعة تنفيذ القرارات السابقة"
        ]
        
        entries = {}
        
        for i, field in enumerate(fields):
            row_frame = tk.Frame(scrollable_frame, bg="#3C1361", padx=10, pady=5)
            row_frame.pack(fill=tk.X)
            
            label = tk.Label(row_frame, 
                           text=f"{field}:",
                           font=self.arabic_font_bold,
                           fg="#FFD700",
                           bg="#3C1361",
                           anchor="e",
                           width=25)
            label.pack(side=tk.RIGHT, padx=10)
            
            if field in long_fields:
                # إنشاء إطار للنص متعدد الأسطر
                text_frame = tk.Frame(row_frame, bg="#3C1361")
                text_frame.pack(side=tk.RIGHT, fill=tk.X, expand=True)
                
                text_widget = scrolledtext.ScrolledText(text_frame, 
                                                      font=self.arabic_font,
                                                      height=4,
                                                      wrap=tk.WORD)
                text_widget.pack(fill=tk.X, padx=10)
                text_widget.insert(tk.END, data[i] if i < len(data) else "")
                
                entries[field] = text_widget
            else:
                entry = tk.Entry(row_frame, 
                                font=self.arabic_font,
                                width=40)
                entry.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=10)
                entry.insert(0, data[i] if i < len(data) else "")
                entries[field] = entry
        
        # أزرار التحكم
        btn_frame = tk.Frame(parent, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=20)
        
        save_btn = tk.Button(btn_frame, 
                           text="حفظ المحضر",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#4CAF50",
                           width=15,
                           command=lambda: self.save_minutes_form(form_name, entries))
        save_btn.pack(side=tk.RIGHT, padx=5)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=15,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(side=tk.RIGHT, padx=5)
    
    def create_decisions_form(self, parent, form_name):
        # إنشاء إطار للجدول وأزرار التحكم
        table_frame = tk.Frame(parent, bg="#3C1361")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
        # إنشاء جدول
        if form_name in self.forms:
            columns = self.forms[form_name]["الحقول"][0]
            
            tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=10)
            
            # تخصيص التصميم
            style = ttk.Style()
            style.configure("Treeview", 
                           background="#3C1361",
                           foreground="white",
                           fieldbackground="#3C1361",
                           font=self.arabic_font,
                           rowheight=30)
            style.configure("Treeview.Heading", 
                          background="#5A2A9C",
                          foreground="#FFD700",
                          font=self.arabic_font_bold)
            style.map("Treeview", background=[("selected", "#8A2BE2")])
            
            # تعريف الأعمدة
            for col in columns:
                tree.heading(col, text=col)
                tree.column(col, width=120, anchor="center")
            
            # إضافة شريط تمرير
            scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
            tree.configure(yscrollcommand=scrollbar.set)
            
            tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
            
            # إضافة بيانات
            for doc in self.forms[form_name]["البيانات"]:
                tree.insert("", tk.END, values=doc)
            
            # أزرار التحكم
            btn_frame = tk.Frame(parent, bg="#3C1361")
            btn_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
            
            add_btn = tk.Button(btn_frame, 
                               text="إضافة قرار جديد",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.add_record(tree, form_name))
            add_btn.pack(side=tk.RIGHT, padx=5)
            
            edit_btn = tk.Button(btn_frame, 
                               text="تعديل القرار",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.edit_record(tree, form_name))
            edit_btn.pack(side=tk.RIGHT, padx=5)
            
            delete_btn = tk.Button(btn_frame, 
                               text="حذف القرار",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#8B0000",
                               width=15,
                               command=lambda: self.delete_record(tree, form_name))
            delete_btn.pack(side=tk.RIGHT, padx=5)
            
            pdf_btn = tk.Button(btn_frame, 
                               text="تصدير إلى PDF",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.export_form_to_pdf(form_name))
            pdf_btn.pack(side=tk.RIGHT, padx=5)
            
            save_btn = tk.Button(btn_frame, 
                                text="حفظ السجل",
                                font=self.arabic_font_bold,
                                fg="white",
                                bg="#4CAF50",
                                width=15,
                                command=lambda: self.save_form(form_name, tree))
            save_btn.pack(side=tk.RIGHT, padx=5)
    
    def create_conflict_interest_form(self, parent, form_name):
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # حقول النموذج
        fields = self.forms[form_name]["الحقول"]
        data = self.forms[form_name]["البيانات"][0] if self.forms[form_name]["البيانات"] else [""]*len(fields)
        
        entries = {}
        
        for i, field in enumerate(fields):
            row_frame = tk.Frame(scrollable_frame, bg="#3C1361", padx=10, pady=5)
            row_frame.pack(fill=tk.X)
            
            label = tk.Label(row_frame, 
                           text=f"{field}:",
                           font=self.arabic_font_bold,
                           fg="#FFD700",
                           bg="#3C1361",
                           width=20,
                           anchor="e")
            label.pack(side=tk.RIGHT, padx=10)
            
            # حقول النص الطويلة
            if field in ["وصف الحالة", "تقييم الحالة من قبل الإدارة", "التوصيات والإجراءات التصحيحية"]:
                text_widget = tk.Text(row_frame, 
                                    font=self.arabic_font,
                                    width=50,
                                    height=6,
                                    wrap=tk.WORD)
                text_widget.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
                if i < len(data):
                    text_widget.insert("1.0", data[i])
                entries[field] = text_widget
            elif field == "طبيعة تضارب المصالح":
                # قائمة خيارات للاختيار
                choice_frame = tk.Frame(row_frame, bg="#3C1361")
                choice_frame.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
                
                options = ["شخصية", "مالية", "مهنية", "أخرى"]
                selected_option = tk.StringVar(value=data[i] if i < len(data) else options[0])
                
                for option in options:
                    rb = tk.Radiobutton(choice_frame,
                                       text=f"- {option}",
                                       variable=selected_option,
                                       value=option,
                                       font=self.arabic_font,
                                       fg="white",
                                       bg="#3C1361",
                                       selectcolor="#5A2A9C",
                                       anchor="w")
                    rb.pack(anchor=tk.E, padx=5, pady=2)
                
                entries[field] = selected_option
            else:
                entry = tk.Entry(row_frame, 
                               font=self.arabic_font,
                               width=40)
                entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
                if i < len(data):
                    entry.insert(0, data[i])
                entries[field] = entry
        
        # أزرار التحكم
        btn_frame = tk.Frame(scrollable_frame, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=20)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=15,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(side=tk.RIGHT, padx=5)
        
        save_btn = tk.Button(btn_frame, 
                            text="حفظ النموذج",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#4CAF50",
                            width=15,
                            command=lambda: self.save_conflict_form(form_name, entries))
        save_btn.pack(side=tk.RIGHT, padx=5)
    
    def create_threats_register_form(self, parent, form_name):
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # الحصول على بيانات النموذج
        form_data = self.forms[form_name]["البيانات"][0] if self.forms[form_name]["البيانات"] else None
        
        entries = {}
        
        # قسم معلومات الموظف
        employee_frame = tk.LabelFrame(scrollable_frame, 
                                     text="معلومات الموظف",
                                     font=self.arabic_font_bold,
                                     fg="#FFD700",
                                     bg="#3C1361")
        employee_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # اسم الموظف
        name_frame = tk.Frame(employee_frame, bg="#3C1361")
        name_frame.pack(fill=tk.X, padx=10, pady=5)
        
        name_label = tk.Label(name_frame, 
                            text="اسم الموظف:",
                            font=self.arabic_font_bold,
                            fg="#FFD700",
                            bg="#3C1361")
        name_label.pack(side=tk.RIGHT, padx=10)
        
        name_entry = tk.Entry(name_frame, 
                            font=self.arabic_font,
                            width=40)
        name_entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
        if form_data:
            name_entry.insert(0, form_data[0])
        entries["اسم الموظف"] = name_entry
        
        # المسمى الوظيفي
        title_frame = tk.Frame(employee_frame, bg="#3C1361")
        title_frame.pack(fill=tk.X, padx=10, pady=5)
        
        title_label = tk.Label(title_frame, 
                             text="المسمى الوظيفي:",
                             font=self.arabic_font_bold,
                             fg="#FFD700",
                             bg="#3C1361")
        title_label.pack(side=tk.RIGHT, padx=10)
        
        title_entry = tk.Entry(title_frame, 
                             font=self.arabic_font,
                             width=40)
        title_entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
        if form_data:
            title_entry.insert(0, form_data[1])
        entries["المسمى الوظيفي"] = title_entry
        
        # التاريخ
        date_frame = tk.Frame(employee_frame, bg="#3C1361")
        date_frame.pack(fill=tk.X, padx=10, pady=5)
        
        date_label = tk.Label(date_frame, 
                            text="التاريخ:",
                            font=self.arabic_font_bold,
                            fg="#FFD700",
                            bg="#3C1361")
        date_label.pack(side=tk.RIGHT, padx=10)
        
        date_entry = tk.Entry(date_frame, 
                            font=self.arabic_font,
                            width=40)
        date_entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
        if form_data:
            date_entry.insert(0, form_data[2])
        else:
            date_entry.insert(0, datetime.now().strftime("%Y-%m-%d"))
        entries["التاريخ"] = date_entry
        
        # قسم جدول التهديدات
        threats_frame = tk.LabelFrame(scrollable_frame, 
                                    text="جدول التهديدات",
                                    font=self.arabic_font_bold,
                                    fg="#FFD700",
                                    bg="#3C1361")
        threats_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # إنشاء جدول التهديدات
        table_frame = tk.Frame(threats_frame, bg="#3C1361")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # أعمدة الجدول
        columns = self.forms[form_name]["جدول التهديدات"][0]
        
        tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=8)
        
        # تخصيص التصميم
        style = ttk.Style()
        style.configure("Treeview", 
                       background="#3C1361",
                       foreground="white",
                       fieldbackground="#3C1361",
                       font=self.arabic_font,
                       rowheight=30)
        style.configure("Treeview.Heading", 
                      background="#5A2A9C",
                      foreground="#FFD700",
                      font=self.arabic_font_bold)
        style.map("Treeview", background=[("selected", "#8A2BE2")])
        
        # تعريف الأعمدة
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=100, anchor="center")
        
        # إضافة شريط تمرير
        tree_scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
        tree.configure(yscrollcommand=tree_scrollbar.set)
        
        tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        tree_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # إضافة البيانات الموجودة
        if form_data and len(form_data) > 3:
            for threat_data in form_data[3]:
                tree.insert("", tk.END, values=threat_data)
        
        entries["جدول التهديدات"] = tree
        
        # أزرار إدارة الجدول
        table_btn_frame = tk.Frame(threats_frame, bg="#3C1361")
        table_btn_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        add_threat_btn = tk.Button(table_btn_frame, 
                                 text="إضافة تهديد",
                                 font=self.arabic_font_bold,
                                 fg="white",
                                 bg="#5A2A9C",
                                 width=12,
                                 command=lambda: self.add_threat_record(tree))
        add_threat_btn.pack(side=tk.RIGHT, padx=5)
        
        edit_threat_btn = tk.Button(table_btn_frame, 
                                  text="تعديل",
                                  font=self.arabic_font_bold,
                                  fg="white",
                                  bg="#5A2A9C",
                                  width=12,
                                  command=lambda: self.edit_threat_record(tree))
        edit_threat_btn.pack(side=tk.RIGHT, padx=5)
        
        delete_threat_btn = tk.Button(table_btn_frame, 
                                    text="حذف",
                                    font=self.arabic_font_bold,
                                    fg="white",
                                    bg="#8B0000",
                                    width=12,
                                    command=lambda: self.delete_threat_record(tree))
        delete_threat_btn.pack(side=tk.RIGHT, padx=5)
        
        # قسم المراجعة
        review_frame = tk.LabelFrame(scrollable_frame, 
                                   text="مراجعة السجل",
                                   font=self.arabic_font_bold,
                                   fg="#FFD700",
                                   bg="#3C1361")
        review_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # تم مراجعة السجل من قبل مسؤول الحيادية
        reviewer_frame = tk.Frame(review_frame, bg="#3C1361")
        reviewer_frame.pack(fill=tk.X, padx=10, pady=5)
        
        reviewer_label = tk.Label(reviewer_frame, 
                                text="تم مراجعة السجل من قبل مسؤول الحيادية:",
                                font=self.arabic_font_bold,
                                fg="#FFD700",
                                bg="#3C1361")
        reviewer_label.pack(side=tk.RIGHT, padx=10)
        
        reviewer_entry = tk.Entry(reviewer_frame, 
                                font=self.arabic_font,
                                width=40)
        reviewer_entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
        if form_data and len(form_data) > 4:
            reviewer_entry.insert(0, form_data[4])
        entries["تم مراجعة السجل من قبل مسؤول الحيادية"] = reviewer_entry
        
        # تاريخ المراجعة
        review_date_frame = tk.Frame(review_frame, bg="#3C1361")
        review_date_frame.pack(fill=tk.X, padx=10, pady=5)
        
        review_date_label = tk.Label(review_date_frame, 
                                   text="تاريخ المراجعة:",
                                   font=self.arabic_font_bold,
                                   fg="#FFD700",
                                   bg="#3C1361")
        review_date_label.pack(side=tk.RIGHT, padx=10)
        
        review_date_entry = tk.Entry(review_date_frame, 
                                   font=self.arabic_font,
                                   width=40)
        review_date_entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
        if form_data and len(form_data) > 5:
            review_date_entry.insert(0, form_data[5])
        entries["تاريخ المراجعة"] = review_date_entry
        
        # أزرار التحكم الرئيسية
        main_btn_frame = tk.Frame(scrollable_frame, bg="#3C1361")
        main_btn_frame.pack(fill=tk.X, padx=20, pady=20)
        
        pdf_btn = tk.Button(main_btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=15,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(side=tk.RIGHT, padx=5)
        
        save_btn = tk.Button(main_btn_frame, 
                            text="حفظ السجل",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#4CAF50",
                            width=15,
                            command=lambda: self.save_threats_register(form_name, entries))
        save_btn.pack(side=tk.RIGHT, padx=5)
        
        # Add refresh button
        refresh_btn = tk.Button(main_btn_frame, 
                            text="تحديث البيانات",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#2196F3",
                            width=15,
                            command=lambda: self.refresh_forms_data())
        refresh_btn.pack(side=tk.RIGHT, padx=5)
        
        # Add delete button
        delete_btn = tk.Button(main_btn_frame, 
                            text="حذف البيانات",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#f44336",
                            width=15,
                            command=lambda: self.delete_form_record(form_name))
        delete_btn.pack(side=tk.RIGHT, padx=5)
    
    def add_threat_record(self, tree):
        """إضافة تهديد جديد إلى الجدول"""
        self.open_threat_editor(tree, None)
    
    def edit_threat_record(self, tree):
        """تعديل تهديد محدد"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "الرجاء تحديد تهديد لتعديله")
            return
        self.open_threat_editor(tree, selected[0])
    
    def delete_threat_record(self, tree):
        """حذف تهديد محدد"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "الرجاء تحديد تهديد لحذفه")
            return
            
        if messagebox.askyesno("تأكيد الحذف", "هل أنت متأكد من رغبتك في حذف هذا التهديد؟"):
            tree.delete(selected)
            self.status_var.set("تم حذف التهديد من السجل")
    
    def create_neutrality_declaration_form(self, parent, form_name):
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # عرض المحتوى النصي للإقرار
        if form_name in self.forms and "المحتوى" in self.forms[form_name]:
            content_frame = tk.Frame(scrollable_frame, bg="#3C1361", padx=20, pady=20)
            content_frame.pack(fill=tk.BOTH, expand=True)
            
            content_label = tk.Label(content_frame,
                                   text=self.forms[form_name]["المحتوى"],
                                   font=self.arabic_font,
                                   fg="white",
                                   bg="#3C1361",
                                   justify="right",
                                   wraplength=800,
                                   anchor="ne")
            content_label.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
        
        # جدول التوقيعات
        self.create_editable_table(scrollable_frame, form_name)
    
    def open_threat_editor(self, tree, item_id):
        """فتح محرر لإضافة أو تعديل تهديد"""
        editor = tk.Toplevel(self.root)
        editor.title("محرر التهديدات" if item_id else "إضافة تهديد جديد")
        editor.geometry("600x400")
        editor.configure(bg="#2D0A4D")
        
        # أعمدة الجدول
        fields = ["م", "نوع التهديد", "تاريخ اكتشاف التهديد", "وصف التهديد", "الإجراء المتخذ", "ملاحظات"]
        
        # الحصول على بيانات السجل المحدد إذا كان تعديلاً
        record_data = []
        if item_id:
            record_data = tree.item(item_id, "values")
        
        # إطار الحقول
        fields_frame = tk.Frame(editor, bg="#3C1361", padx=20, pady=20)
        fields_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        entries = []
        for i, field in enumerate(fields):
            row_frame = tk.Frame(fields_frame, bg="#3C1361")
            row_frame.pack(fill=tk.X, pady=5)
            
            label = tk.Label(row_frame, 
                           text=field + ":",
                           font=self.arabic_font_bold,
                           fg="#FFD700",
                           bg="#3C1361",
                           width=20,
                           anchor="e")
            label.pack(side=tk.RIGHT, padx=10)
            
            # استخدام Text widget للحقول الطويلة
            if field in ["وصف التهديد", "الإجراء المتخذ"]:
                text_widget = tk.Text(row_frame, 
                                    font=self.arabic_font,
                                    width=40,
                                    height=3,
                                    wrap=tk.WORD)
                text_widget.pack(side=tk.RIGHT, fill=tk.X, expand=True)
                if i < len(record_data):
                    text_widget.insert("1.0", record_data[i])
                entries.append(text_widget)
            else:
                entry = tk.Entry(row_frame, 
                                font=self.arabic_font,
                                width=30)
                entry.pack(side=tk.RIGHT, fill=tk.X, expand=True)
                
                # ملء البيانات إذا كانت موجودة
                if i < len(record_data):
                    entry.insert(0, record_data[i])
                elif field == "م" and not item_id:
                    # إذا كان إضافة جديدة، احسب الرقم التالي
                    next_num = len(tree.get_children()) + 1
                    entry.insert(0, str(next_num))
                elif field == "تاريخ اكتشاف التهديد" and not item_id:
                    # إدراج التاريخ الحالي للتهديدات الجديدة
                    entry.insert(0, datetime.now().strftime("%Y-%m-%d"))
                
                entries.append(entry)
        
        # أزرار الحفظ والإلغاء
        btn_frame = tk.Frame(editor, bg="#2D0A4D")
        btn_frame.pack(fill=tk.X, padx=20, pady=(0, 20))
        
        save_btn = tk.Button(btn_frame, 
                           text="حفظ",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#4CAF50",
                           width=15,
                           command=lambda: self.save_threat_record(tree, item_id, entries, editor))
        save_btn.pack(side=tk.LEFT, padx=10)
        
        cancel_btn = tk.Button(btn_frame, 
                           text="إلغاء",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#8B0000",
                           width=15,
                           command=editor.destroy)
        cancel_btn.pack(side=tk.RIGHT, padx=10)
    
    def save_threat_record(self, tree, item_id, entries, editor):
        """حفظ بيانات التهديد"""
        # جمع البيانات من حقول الإدخال
        values = []
        for entry in entries:
            if isinstance(entry, tk.Text):
                values.append(entry.get("1.0", tk.END).strip())
            else:
                values.append(entry.get())
        
        # التحقق من عدم وجود حقول فارغة (ما عدا الملاحظات)
        if any(value.strip() == "" for value in values[:-1]):  # ما عدا الحقل الأخير (الملاحظات)
            messagebox.showwarning("تحذير", "الرجاء ملء جميع الحقول المطلوبة")
            return
        
        # إضافة أو تحديث السجل
        if item_id:
            tree.item(item_id, values=values)
            self.status_var.set("تم تحديث التهديد في السجل")
        else:
            tree.insert("", tk.END, values=values)
            self.status_var.set("تم إضافة تهديد جديد إلى السجل")
        
        editor.destroy()
    
    def save_threats_register(self, form_name, entries):
        """Save threats register to database"""
        try:
            # جمع بيانات الموظف
            employee_data = [
                entries["اسم الموظف"].get(),
                entries["المسمى الوظيفي"].get(),
                entries["التاريخ"].get()
            ]
            
            # جمع بيانات الجدول
            tree = entries["جدول التهديدات"]
            threats_data = []
            for item in tree.get_children():
                values = tree.item(item, 'values')
                threats_data.append(values)
            
            # بيانات المراجعة
            review_data = [
                entries["تم مراجعة السجل من قبل مسؤول الحيادية"].get(),
                entries["تاريخ المراجعة"].get()
            ]
            
            # تجميع جميع البيانات
            complete_data = employee_data + [threats_data] + review_data
            
            # Save to database
            success = self.db_manager.save_form_data(
                form_name=form_name,
                data=[complete_data],  # Wrap in list
                user_id=self.current_user['id']
            )
            
            if success:
                # Refresh data from database
                self.refresh_forms_data()
                messagebox.showinfo("تم الحفظ", f"تم حفظ سجل التهديدات: {form_name}")
                self.status_var.set(f"تم حفظ {form_name} بنجاح في قاعدة البيانات")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات:\n{str(e)}")
    
    def create_financial_resources_form(self, parent, form_name):
        """إنشاء نموذج سجل الموارد المالية لعمليات الاعتماد"""
        # إنشاء إطار للجدول وأزرار التحكم
        table_frame = tk.Frame(parent, bg="#3C1361")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
        # إنشاء جدول
        if form_name in self.forms:
            columns = self.forms[form_name]["الحقول"][0]
            
            tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=10)
            
            # تخصيص التصميم
            style = ttk.Style()
            style.configure("Treeview", 
                           background="#3C1361",
                           foreground="white",
                           fieldbackground="#3C1361",
                           font=self.arabic_font,
                           rowheight=30)
            style.configure("Treeview.Heading", 
                          background="#5A2A9C",
                          foreground="#FFD700",
                          font=self.arabic_font_bold)
            style.map("Treeview", background=[("selected", "#8A2BE2")])
            
            # تعريف الأعمدة
            for col in columns:
                tree.heading(col, text=col)
                tree.column(col, width=100, anchor="center")
            
            # إضافة شريط تمرير
            scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
            tree.configure(yscrollcommand=scrollbar.set)
            
            tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
            
            # إضافة بيانات
            for doc in self.forms[form_name]["البيانات"]:
                tree.insert("", tk.END, values=doc)
            
            # أزرار التحكم
            btn_frame = tk.Frame(parent, bg="#3C1361")
            btn_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
            
            add_btn = tk.Button(btn_frame, 
                               text="إضافة بند جديد",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.add_record(tree, form_name))
            add_btn.pack(side=tk.RIGHT, padx=5)
            
            edit_btn = tk.Button(btn_frame, 
                               text="تعديل البند",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.edit_record(tree, form_name))
            edit_btn.pack(side=tk.RIGHT, padx=5)
            
            delete_btn = tk.Button(btn_frame, 
                               text="حذف البند",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#8B0000",
                               width=15,
                               command=lambda: self.delete_record(tree, form_name))
            delete_btn.pack(side=tk.RIGHT, padx=5)
            
            pdf_btn = tk.Button(btn_frame, 
                               text="تصدير إلى PDF",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.export_form_to_pdf(form_name))
            pdf_btn.pack(side=tk.RIGHT, padx=5)
            
            save_btn = tk.Button(btn_frame, 
                                text="حفظ السجل",
                                font=self.arabic_font_bold,
                                fg="white",
                                bg="#4CAF50",
                                width=15,
                                command=lambda: self.save_form(form_name, tree))
            save_btn.pack(side=tk.RIGHT, padx=5)
    
    def create_financial_reserves_form(self, parent, form_name):
        """إنشاء نموذج تقرير الاحتياطات المالية"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # حقول النموذج
        fields = self.forms[form_name]["الحقول"]
        data = self.forms[form_name]["البيانات"][0] if self.forms[form_name]["البيانات"] else [""]*len(fields)
        
        entries = {}
        
        # حقول النص الطويلة
        long_fields = [
            "وصف عام للاحتياطات المالية", "مصادر الاحتياطات", "الغرض من الاحتياطات",
            "مدى كفاية الاحتياطات لتغطية التكاليف المستقبلية", "التوصيات"
        ]
        
        for i, field in enumerate(fields):
            row_frame = tk.Frame(scrollable_frame, bg="#3C1361", padx=10, pady=5)
            row_frame.pack(fill=tk.X)
            
            label = tk.Label(row_frame, 
                           text=f"{field}:",
                           font=self.arabic_font_bold,
                           fg="#FFD700",
                           bg="#3C1361",
                           width=25,
                           anchor="e")
            label.pack(side=tk.RIGHT, padx=10)
            
            if field in long_fields:
                text_widget = tk.Text(row_frame, 
                                    font=self.arabic_font,
                                    width=50,
                                    height=4,
                                    wrap=tk.WORD)
                text_widget.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
                if i < len(data):
                    text_widget.insert("1.0", data[i])
                entries[field] = text_widget
            else:
                entry = tk.Entry(row_frame, 
                               font=self.arabic_font,
                               width=40)
                entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
                if i < len(data):
                    entry.insert(0, data[i])
                entries[field] = entry
        
        # أزرار التحكم
        btn_frame = tk.Frame(scrollable_frame, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=20)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=15,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(side=tk.RIGHT, padx=5)
        
        save_btn = tk.Button(btn_frame, 
                            text="حفظ التقرير",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#4CAF50",
                            width=15,
                            command=lambda: self.save_financial_reserves_form(form_name, entries))
        save_btn.pack(side=tk.RIGHT, padx=5)
    
    def create_annual_financial_review_form(self, parent, form_name):
        """إنشاء نموذج تقارير المراجعة المالية السنوية"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # حقول النموذج
        fields = self.forms[form_name]["الحقول"]
        data = self.forms[form_name]["البيانات"][0] if self.forms[form_name]["البيانات"] else [""]*len(fields)
        
        entries = {}
        
        # حقول النص الطويلة
        long_fields = [
            "الجهات التي تم مراجعتها", "ملخص نتائج المراجعة", "الملاحظات والتوصيات",
            "الإجراءات التصحيحية", "مدى الالتزام بالسياسات والإجراءات المالية"
        ]
        
        for i, field in enumerate(fields):
            row_frame = tk.Frame(scrollable_frame, bg="#3C1361", padx=10, pady=5)
            row_frame.pack(fill=tk.X)
            
            label = tk.Label(row_frame, 
                           text=f"{field}:",
                           font=self.arabic_font_bold,
                           fg="#FFD700",
                           bg="#3C1361",
                           width=25,
                           anchor="e")
            label.pack(side=tk.RIGHT, padx=10)
            
            if field in long_fields:
                text_widget = tk.Text(row_frame, 
                                    font=self.arabic_font,
                                    width=50,
                                    height=5,
                                    wrap=tk.WORD)
                text_widget.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
                if i < len(data):
                    text_widget.insert("1.0", data[i])
                entries[field] = text_widget
            else:
                entry = tk.Entry(row_frame, 
                               font=self.arabic_font,
                               width=40)
                entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
                if i < len(data):
                    entry.insert(0, data[i])
                entries[field] = entry
        
        # أزرار التحكم
        btn_frame = tk.Frame(scrollable_frame, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=20)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=15,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(side=tk.RIGHT, padx=5)
        
        save_btn = tk.Button(btn_frame, 
                            text="حفظ التقرير",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#4CAF50",
                            width=15,
                            command=lambda: self.save_annual_financial_review_form(form_name, entries))
        save_btn.pack(side=tk.RIGHT, padx=5)
    
    def save_financial_reserves_form(self, form_name, entries):
        """Save financial reserves form to database"""
        try:
            # جمع البيانات من حقول الإدخال
            data = []
            for field in self.forms[form_name]["الحقول"]:
                if field in entries:
                    widget = entries[field]
                    if isinstance(widget, tk.Text):
                        value = widget.get("1.0", tk.END).strip()
                    else:
                        value = widget.get()
                    data.append(value)
                else:
                    data.append("")
            
            # Save to database
            success = self.db_manager.save_form_data(
                form_name=form_name,
                data=[data],  # Wrap in list
                user_id=self.current_user['id']
            )
            
            if success:
                # Refresh data from database
                self.refresh_forms_data()
                messagebox.showinfo("تم الحفظ", f"تم حفظ التقرير: {form_name}")
                self.status_var.set(f"تم حفظ {form_name} بنجاح في قاعدة البيانات")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات:\n{str(e)}")
    
    def save_annual_financial_review_form(self, form_name, entries):
        """Save annual financial review form to database"""
        try:
            # جمع البيانات من حقول الإدخال
            data = []
            for field in self.forms[form_name]["الحقول"]:
                if field in entries:
                    widget = entries[field]
                    if isinstance(widget, tk.Text):
                        value = widget.get("1.0", tk.END).strip()
                    else:
                        value = widget.get()
                    data.append(value)
                else:
                    data.append("")
            
            # Save to database
            success = self.db_manager.save_form_data(
                form_name=form_name,
                data=[data],  # Wrap in list
                user_id=self.current_user['id']
            )
            
            if success:
                # Refresh data from database
                self.refresh_forms_data()
                messagebox.showinfo("تم الحفظ", f"تم حفظ التقرير: {form_name}")
                self.status_var.set(f"تم حفظ {form_name} بنجاح في قاعدة البيانات")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات:\n{str(e)}")
    
    def create_organizational_structure_form(self, parent, form_name):
        """إنشاء نموذج الهيكل التنظيمي لجهة الاعتماد"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame, 
                              text="الهيكل التنظيمي لجهة الاعتماد",
                              font=self.arabic_font_large,
                              fg="#FFD700",
                              bg="#3C1361")
        title_label.pack(pady=20)
        
        # حقول النموذج
        fields = self.forms[form_name]["الحقول"]
        data = self.forms[form_name]["البيانات"] if self.forms[form_name]["البيانات"] else []
        
        entries = {}
        
        # إطار الجدول
        table_frame = tk.Frame(scrollable_frame, bg="#3C1361")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # إنشاء جدول
        columns = fields
        
        tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=8)
        
        # تخصيص التصميم
        style = ttk.Style()
        style.configure("Treeview", 
                       background="#3C1361",
                       foreground="white",
                       fieldbackground="#3C1361",
                       font=self.arabic_font,
                       rowheight=30)
        style.configure("Treeview.Heading", 
                      background="#5A2A9C",
                      foreground="#FFD700",
                      font=self.arabic_font_bold)
        style.map("Treeview", background=[("selected", "#8A2BE2")])
        
        # تعريف الأعمدة
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=200, anchor="center")
        
        # إضافة شريط تمرير
        tree_scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
        tree.configure(yscrollcommand=tree_scrollbar.set)
        
        tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        tree_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # إضافة البيانات الموجودة
        for record in data:
            tree.insert("", tk.END, values=record)
        
        # أزرار التحكم
        btn_frame = tk.Frame(scrollable_frame, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=20)
        
        add_btn = tk.Button(btn_frame, 
                           text="إضافة عضو",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=15,
                           command=lambda: self.add_record(tree, form_name))
        add_btn.pack(side=tk.RIGHT, padx=5)
        
        edit_btn = tk.Button(btn_frame, 
                           text="تعديل العضو",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=15,
                           command=lambda: self.edit_record(tree, form_name))
        edit_btn.pack(side=tk.RIGHT, padx=5)
        
        delete_btn = tk.Button(btn_frame, 
                             text="حذف العضو",
                             font=self.arabic_font_bold,
                             fg="white",
                             bg="#8B0000",
                             width=15,
                             command=lambda: self.delete_record(tree, form_name))
        delete_btn.pack(side=tk.RIGHT, padx=5)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=15,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(side=tk.RIGHT, padx=5)
        
        save_btn = tk.Button(btn_frame, 
                            text="حفظ الهيكل",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#4CAF50",
                            width=15,
                            command=lambda: self.save_form(form_name, tree))
        save_btn.pack(side=tk.RIGHT, padx=5)
    
    def create_duties_responsibilities_form(self, parent, form_name):
        """إنشاء نموذج سجل توزيع الواجبات والمسؤوليات"""
        # إنشاء إطار للجدول وأزرار التحكم
        table_frame = tk.Frame(parent, bg="#3C1361")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
        # إنشاء جدول
        if form_name in self.forms:
            columns = self.forms[form_name]["الحقول"][0]
            
            tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=10)
            
            # تخصيص التصميم
            style = ttk.Style()
            style.configure("Treeview", 
                           background="#3C1361",
                           foreground="white",
                           fieldbackground="#3C1361",
                           font=self.arabic_font,
                           rowheight=30)
            style.configure("Treeview.Heading", 
                          background="#5A2A9C",
                          foreground="#FFD700",
                          font=self.arabic_font_bold)
            style.map("Treeview", background=[("selected", "#8A2BE2")])
            
            # تعريف الأعمدة
            for col in columns:
                tree.heading(col, text=col)
                tree.column(col, width=120, anchor="center")
            
            # إضافة شريط تمرير
            scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
            tree.configure(yscrollcommand=scrollbar.set)
            
            tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
            
            # إضافة بيانات
            for doc in self.forms[form_name]["البيانات"]:
                tree.insert("", tk.END, values=doc)
            
            # أزرار التحكم
            btn_frame = tk.Frame(parent, bg="#3C1361")
            btn_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
            
            add_btn = tk.Button(btn_frame, 
                               text="إضافة موظف",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.add_record(tree, form_name))
            add_btn.pack(side=tk.RIGHT, padx=5)
            
            edit_btn = tk.Button(btn_frame, 
                               text="تعديل الموظف",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.edit_record(tree, form_name))
            edit_btn.pack(side=tk.RIGHT, padx=5)
            
            delete_btn = tk.Button(btn_frame, 
                               text="حذف الموظف",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#8B0000",
                               width=15,
                               command=lambda: self.delete_record(tree, form_name))
            delete_btn.pack(side=tk.RIGHT, padx=5)
            
            pdf_btn = tk.Button(btn_frame, 
                               text="تصدير إلى PDF",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.export_form_to_pdf(form_name))
            pdf_btn.pack(side=tk.RIGHT, padx=5)
            
            save_btn = tk.Button(btn_frame, 
                                text="حفظ السجل",
                                font=self.arabic_font_bold,
                                fg="white",
                                bg="#4CAF50",
                                width=15,
                                command=lambda: self.save_form(form_name, tree))
            save_btn.pack(side=tk.RIGHT, padx=5)
    
    def create_annual_structure_review_form(self, parent, form_name):
        """إنشاء نموذج تقارير مراجعة الهيكل التنظيمي السنوي"""
        # إنشاء إطار للجدول وأزرار التحكم
        table_frame = tk.Frame(parent, bg="#3C1361")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
        # إنشاء جدول
        if form_name in self.forms:
            columns = self.forms[form_name]["الحقول"][0]
            
            tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=10)
            
            # تخصيص التصميم
            style = ttk.Style()
            style.configure("Treeview", 
                           background="#3C1361",
                           foreground="white",
                           fieldbackground="#3C1361",
                           font=self.arabic_font,
                           rowheight=30)
            style.configure("Treeview.Heading", 
                          background="#5A2A9C",
                          foreground="#FFD700",
                          font=self.arabic_font_bold)
            style.map("Treeview", background=[("selected", "#8A2BE2")])
            
            # تعريف الأعمدة
            for col in columns:
                tree.heading(col, text=col)
                tree.column(col, width=150, anchor="center")
            
            # إضافة شريط تمرير
            scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
            tree.configure(yscrollcommand=scrollbar.set)
            
            tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
            
            # إضافة بيانات
            for doc in self.forms[form_name]["البيانات"]:
                tree.insert("", tk.END, values=doc)
            
            # أزرار التحكم
            btn_frame = tk.Frame(parent, bg="#3C1361")
            btn_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
            
            add_btn = tk.Button(btn_frame, 
                               text="إضافة مراجعة",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.add_record(tree, form_name))
            add_btn.pack(side=tk.RIGHT, padx=5)
            
            edit_btn = tk.Button(btn_frame, 
                               text="تعديل المراجعة",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.edit_record(tree, form_name))
            edit_btn.pack(side=tk.RIGHT, padx=5)
            
            delete_btn = tk.Button(btn_frame, 
                               text="حذف المراجعة",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#8B0000",
                               width=15,
                               command=lambda: self.delete_record(tree, form_name))
            delete_btn.pack(side=tk.RIGHT, padx=5)
            
            pdf_btn = tk.Button(btn_frame, 
                               text="تصدير إلى PDF",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.export_form_to_pdf(form_name))
            pdf_btn.pack(side=tk.RIGHT, padx=5)
            
            save_btn = tk.Button(btn_frame, 
                                text="حفظ التقرير",
                                font=self.arabic_font_bold,
                                fg="white",
                                bg="#4CAF50",
                                width=15,
                                command=lambda: self.save_form(form_name, tree))
            save_btn.pack(side=tk.RIGHT, padx=5)
    
    def create_editable_table(self, parent, form_name):
        # إنشاء إطار للجدول وأزرار التحكم
        table_frame = tk.Frame(parent, bg="#3C1361")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
        # Map short form names to full form names
        actual_form_name = self.get_actual_form_name(form_name)
        
        # إنشاء جدول
        if actual_form_name in self.forms:
            columns = self.forms[actual_form_name]["الحقول"][0]
            
            tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=10)
            
            # تخصيص التصميم
            style = ttk.Style()
            style.configure("Treeview", 
                           background="#3C1361",
                           foreground="white",
                           fieldbackground="#3C1361",
                           font=self.arabic_font,
                           rowheight=30)
            style.configure("Treeview.Heading", 
                          background="#5A2A9C",
                          foreground="#FFD700",
                          font=self.arabic_font_bold)
            style.map("Treeview", background=[("selected", "#8A2BE2")])
            
            # تعريف الأعمدة
            for col in columns:
                tree.heading(col, text=col)
                tree.column(col, width=120, anchor="center")
            
            # إضافة شريط تمرير
            scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
            tree.configure(yscrollcommand=scrollbar.set)
            
            tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
            
            # إضافة بيانات
            for doc in self.forms[actual_form_name]["البيانات"]:
                tree.insert("", tk.END, values=doc)
            
            # أزرار التحكم
            btn_frame = tk.Frame(parent, bg="#3C1361")
            btn_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
            
            add_btn = tk.Button(btn_frame, 
                               text="إضافة سجل جديد",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.add_record(tree, actual_form_name))
            add_btn.pack(side=tk.RIGHT, padx=5)
            
            edit_btn = tk.Button(btn_frame, 
                               text="تعديل السجل",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.edit_record(tree, actual_form_name))
            edit_btn.pack(side=tk.RIGHT, padx=5)
            
            delete_btn = tk.Button(btn_frame, 
                               text="حذف السجل",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#8B0000",
                               width=15,
                               command=lambda: self.delete_record(tree, actual_form_name))
            delete_btn.pack(side=tk.RIGHT, padx=5)
            
            pdf_btn = tk.Button(btn_frame, 
                               text="تصدير إلى PDF",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               width=15,
                               command=lambda: self.export_form_to_pdf(actual_form_name))
            pdf_btn.pack(side=tk.RIGHT, padx=5)
            
            save_btn = tk.Button(btn_frame, 
                                text="حفظ النموذج",
                                font=self.arabic_font_bold,
                                fg="white",
                                bg="#4CAF50",
                                width=15,
                                command=lambda: self.save_form(actual_form_name, tree))
            save_btn.pack(side=tk.RIGHT, padx=5)
    
    def add_record(self, tree, actual_form_name):
        self.open_record_editor(tree, actual_form_name, None)
    
    def edit_record(self, tree, actual_form_name):
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "الرجاء تحديد سجل لتعديله")
            return
        self.open_record_editor(tree, actual_form_name, selected[0])
    
    def delete_record(self, tree, actual_form_name):
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "الرجاء تحديد سجل لحذفه")
            return
            
        if messagebox.askyesno("تأكيد الحذف", "هل أنت متأكد من رغبتك في حذف هذا السجل؟"):
            try:
                # Delete from UI
                for item in selected:
                    tree.delete(item)
                
                # Get all remaining records from the tree
                remaining_records = []
                for item in tree.get_children(''):
                    values = tree.item(item, 'values')
                    remaining_records.append(values)
                
                # Update database with remaining records
                success = self.db_manager.save_form_data(
                    form_name=actual_form_name,
                    data=remaining_records,
                    user_id=self.current_user['id']
                )

                if success:
                    # Update local forms data
                    if actual_form_name in self.forms:
                        self.forms[actual_form_name]["البيانات"] = remaining_records
                    
                    messagebox.showinfo("تم الحذف", "تم حذف السجل بنجاح وحفظه في قاعدة البيانات")
                    self.status_var.set(f"تم حذف السجل من {actual_form_name} وحفظه في قاعدة البيانات")
                else:
                    messagebox.showerror("خطأ", "تم حذف السجل من الواجهة ولكن فشل في حفظه في قاعدة البيانات")
                    
            except Exception as e:
                print(f"Error deleting record: {e}")
                messagebox.showerror("خطأ", f"حدث خطأ أثناء الحذف: {str(e)}")
    
    def open_record_editor(self, tree, actual_form_name, item_id):
        editor = tk.Toplevel(self.root)
        editor.title("محرر السجلات" if item_id else "إضافة سجل جديد")
        editor.geometry("600x400")
        editor.configure(bg="#2D0A4D")
        
        form_data = self.forms[actual_form_name]
        fields = form_data["الحقول"][0]
        
        # الحصول على بيانات السجل المحدد إذا كان تعديلاً
        record_data = []
        if item_id:
            record_data = tree.item(item_id, "values")
        
        # إطار الحقول
        fields_frame = tk.Frame(editor, bg="#3C1361", padx=20, pady=20)
        fields_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        entries = []
        for i, field in enumerate(fields):
            row_frame = tk.Frame(fields_frame, bg="#3C1361")
            row_frame.pack(fill=tk.X, pady=5)
            
            label = tk.Label(row_frame, 
                           text=field + ":",
                           font=self.arabic_font_bold,
                           fg="#FFD700",
                           bg="#3C1361",
                           width=20,
                           anchor="e")
            label.pack(side=tk.RIGHT, padx=10)
            
            entry = tk.Entry(row_frame, 
                            font=self.arabic_font,
                            width=30)
            entry.pack(side=tk.RIGHT, fill=tk.X, expand=True)
            
            # ملء البيانات إذا كانت موجودة
            if i < len(record_data):
                entry.insert(0, record_data[i])
            
            entries.append(entry)
        
        # أزرار الحفظ والإلغاء
        btn_frame = tk.Frame(editor, bg="#2D0A4D")
        btn_frame.pack(fill=tk.X, padx=20, pady=(0, 20))
        
        save_btn = tk.Button(btn_frame, 
                           text="حفظ",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#4CAF50",
                           width=15,
                           command=lambda: self.save_record(tree, actual_form_name, item_id, entries, editor))
        save_btn.pack(side=tk.LEFT, padx=10)
        
        cancel_btn = tk.Button(btn_frame, 
                           text="إلغاء",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#8B0000",
                           width=15,
                           command=editor.destroy)
        cancel_btn.pack(side=tk.RIGHT, padx=10)
    
    def save_record(self, tree, actual_form_name, item_id, entries, editor):
        # جمع البيانات من حقول الإدخال
        values = [entry.get() for entry in entries]
        
        # التحقق من عدم وجود حقول فارغة
        if any(value.strip() == "" for value in values):
            messagebox.showwarning("تحذير", "الرجاء ملء جميع الحقول")
            return
        
        try:
            # إضافة أو تحديث السجل في الواجهة
            if item_id:
                tree.item(item_id, values=values)
                action_msg = "تم تحديث السجل"
            else:
                tree.insert("", tk.END, values=values)
                action_msg = "تم إضافة سجل جديد"
            
            # جمع جميع البيانات من الجدول
            all_data = []
            for item in tree.get_children():
                item_values = tree.item(item, 'values')
                all_data.append(item_values)
            
            # حفظ في قاعدة البيانات
            success = self.db_manager.save_form_data(
                form_name=actual_form_name,
                data=all_data,
                user_id=self.current_user['id']
            )

            if success:
                # Update local forms data
                if actual_form_name in self.forms:
                    self.forms[actual_form_name]["البيانات"] = all_data
                
                self.status_var.set(f"{action_msg} في {actual_form_name} وتم حفظه في قاعدة البيانات")
                editor.destroy()
            else:
                messagebox.showerror("خطأ", f"{action_msg} في الواجهة ولكن فشل في حفظه في قاعدة البيانات")
                
        except Exception as e:
            print(f"Error saving record: {e}")
            messagebox.showerror("خطأ", f"حدث خطأ أثناء الحفظ: {str(e)}")
    
    def save_form(self, actual_form_name, tree):
        """Save form data to database"""
        try:
            # جمع البيانات من الجدول
            data = []
            for item in tree.get_children():
                values = tree.item(item, 'values')
                data.append(values)
            
            # Save to database
            success = self.db_manager.save_form_data(
                form_name=actual_form_name,
                data=data,
                user_id=self.current_user['id']
            )
            
            if success:
                # Refresh data from database
                self.refresh_forms_data()
                
                messagebox.showinfo("تم الحفظ", f"تم حفظ بيانات النموذج: {actual_form_name}")
                self.status_var.set(f"تم حفظ {actual_form_name} بنجاح في قاعدة البيانات")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات في قاعدة البيانات")
                self.status_var.set("فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات:\n{str(e)}")
            self.status_var.set("خطأ في حفظ البيانات")
    
    def save_minutes_form(self, form_name, entries):
        """Save meeting minutes form to database"""
        try:
            # جمع البيانات من حقول الإدخال
            data = []
            for field, widget in entries.items():
                if isinstance(widget, scrolledtext.ScrolledText):
                    data.append(widget.get("1.0", tk.END).strip())
                else:
                    data.append(widget.get())
            
            # Save to database
            success = self.db_manager.save_form_data(
                form_name=form_name,
                data=[data],  # Wrap in list to match expected format
                user_id=self.current_user['id']
            )
            
            if success:
                # Update memory
                self.forms[form_name]["البيانات"] = [data]
                
                messagebox.showinfo("تم الحفظ", f"تم حفظ محضر الاجتماع: {form_name}")
                self.status_var.set(f"تم حفظ {form_name} بنجاح في قاعدة البيانات")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات:\n{str(e)}")
        
    def save_form_data_generic(self, form_name, entries):
        """Generic function to save form data to database"""
        try:
            # جمع البيانات من حقول الإدخال
            data = []
            for field_name, widget in entries.items():
                try:
                    if isinstance(widget, tk.Text):
                        value = widget.get("1.0", tk.END).strip()
                    elif isinstance(widget, tk.Entry):
                        value = widget.get().strip()
                    elif isinstance(widget, tk.BooleanVar):
                        value = "نعم" if widget.get() else "لا"
                    else:
                        value = str(widget)
                    data.append(f"{field_name}: {value}")
                except:
                    continue
            
            # Save to database
            success = self.db_manager.save_form_data(
                form_name=form_name,
                data=[data],  # Wrap in list to match expected format
                user_id=self.current_user['id']
            )
            
            if success:
                # Update memory
                if form_name in self.forms:
                    self.forms[form_name]["البيانات"] = [data]
                
                messagebox.showinfo("تم الحفظ", f"تم حفظ النموذج: {form_name}")
                self.status_var.set(f"تم حفظ {form_name} بنجاح في قاعدة البيانات")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات:\n{str(e)}")

    def create_universal_enhanced_form_buttons(self, parent, form_id, form_name, entries):
        """Create enhanced form buttons that work with any QF form in Section 9"""
        btn_frame = tk.Frame(parent, bg=self.premium_colors['background'])
        btn_frame.pack(fill=tk.X, padx=20, pady=20)
        
        # حفظ النموذج (Save Form) - Green
        save_btn = tk.Button(btn_frame, 
                           text=self.format_arabic_text("حفظ النموذج"),
                           font=self.fonts['body'],
                           fg="white",
                           bg="#4CAF50",
                           width=15, height=2,
                           command=lambda: self.save_universal_form(form_id, form_name, entries))
        save_btn.pack(side=tk.LEFT, padx=5)
        
        # تصدير إلى PDF (Export to PDF) - Purple
        pdf_btn = tk.Button(btn_frame, 
                           text=self.format_arabic_text("تصدير إلى PDF"),
                           font=self.fonts['body'],
                           fg="white",
                           bg="#9C27B0",
                           width=15, height=2,
                           command=lambda: self.export_universal_form_to_pdf(form_id, form_name, entries))
        pdf_btn.pack(side=tk.LEFT, padx=5)
        
        # حذف السجل (Delete Record) - Red
        delete_btn = tk.Button(btn_frame, 
                             text=self.format_arabic_text("حذف السجل"),
                             font=self.fonts['body'],
                             fg="white",
                             bg="#F44336",
                             width=15, height=2,
                             command=lambda: self.delete_universal_form_record(form_id, form_name))
        delete_btn.pack(side=tk.LEFT, padx=5)
        
        # تعديل السجل (Edit Record) - Dark
        edit_btn = tk.Button(btn_frame, 
                           text=self.format_arabic_text("تعديل السجل"),
                           font=self.fonts['body'],
                           fg="white",
                           bg="#424242",
                           width=15, height=2,
                           command=lambda: self.edit_universal_form_record(form_id, form_name, entries))
        edit_btn.pack(side=tk.LEFT, padx=5)
        
        # إضافة سجل جديد (Add New Record) - Purple
        add_btn = tk.Button(btn_frame, 
                          text=self.format_arabic_text("إضافة سجل جديد"),
                          font=self.fonts['body'],
                          fg="white",
                          bg="#673AB7",
                          width=15, height=2,
                          command=lambda: self.add_new_universal_form_record(form_id, form_name, entries))
        add_btn.pack(side=tk.LEFT, padx=5)
        
        return btn_frame
    
    def save_universal_form(self, form_id, form_name, entries):
        """Save any universal form data to database"""
        try:
            # Collect form data
            form_data = {}
            
            # Get data from entry fields
            for field_name, widget in entries.items():
                try:
                    if hasattr(widget, 'get'):
                        if hasattr(widget, 'get') and len(widget.get.__code__.co_varnames) > 2:
                            # Text widget with get(start, end)
                            form_data[field_name] = widget.get(1.0, tk.END).strip()
                        else:
                            # Entry widget with get()
                            form_data[field_name] = widget.get()
                    else:
                        # Handle other widget types
                        form_data[field_name] = str(widget)
                except Exception as e:
                    print(f"Error getting data from {field_name}: {e}")
                    form_data[field_name] = ""
            
            # Add metadata
            form_data['form_id'] = form_id
            form_data['form_name'] = form_name
            form_data['created_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            form_data['last_modified'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # Save to database
            success = self.db_manager.save_form_data(form_id, form_data)
            
            if success:
                messagebox.showinfo("نجح الحفظ", f"تم حفظ بيانات النموذج {form_id} بنجاح")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات:\n{str(e)}")
    
    def export_universal_form_to_pdf(self, form_id, form_name, entries):
        """Export any universal form to PDF"""
        try:
            if not PDF_AVAILABLE:
                messagebox.showerror("خطأ", "مكتبة PDF غير متوفرة. يرجى تثبيت reportlab")
                return
            
            filename = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("PDF files", "*.pdf")],
                title=f"حفظ النموذج {form_id} كملف PDF"
            )
            
            if filename:
                self.generate_universal_form_pdf(form_id, form_name, entries, filename)
                messagebox.showinfo("تم التصدير", f"تم تصدير النموذج إلى:\n{filename}")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير PDF:\n{str(e)}")
    
    def delete_universal_form_record(self, form_id, form_name):
        """Delete any universal form record from database"""
        try:
            # Confirm deletion
            result = messagebox.askyesno("تأكيد الحذف", 
                                       f"هل أنت متأكد من حذف سجل النموذج {form_id}؟\nلا يمكن التراجع عن هذه العملية.")
            
            if result:
                success = self.db_manager.delete_form_data(form_id)
                if success:
                    messagebox.showinfo("تم الحذف", f"تم حذف سجل النموذج {form_id} بنجاح")
                else:
                    messagebox.showerror("خطأ", "فشل في حذف السجل")
                    
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف السجل:\n{str(e)}")
    
    def edit_universal_form_record(self, form_id, form_name, entries):
        """Enable editing mode for any universal form record"""
        try:
            # Load existing data from database
            data = self.db_manager.load_form_data(form_id)
            
            if data:
                # Populate form fields with existing data
                for field_name, value in data.items():
                    if field_name in entries:
                        widget = entries[field_name]
                        try:
                            if hasattr(widget, 'delete') and hasattr(widget, 'insert'):
                                if hasattr(widget, 'get') and len(widget.get.__code__.co_varnames) > 2:
                                    # Text widget
                                    widget.delete(1.0, tk.END)
                                    widget.insert(1.0, str(value))
                                else:
                                    # Entry widget
                                    widget.delete(0, tk.END)
                                    widget.insert(0, str(value))
                        except Exception as e:
                            print(f"Error populating {field_name}: {e}")
                
                messagebox.showinfo("وضع التعديل", f"تم تحميل البيانات الموجودة للنموذج {form_id} للتعديل")
            else:
                messagebox.showinfo("لا توجد بيانات", f"لا توجد بيانات محفوظة للنموذج {form_id}")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تحميل البيانات:\n{str(e)}")
    
    def add_new_universal_form_record(self, form_id, form_name, entries):
        """Clear form to add new record for any universal form"""
        try:
            result = messagebox.askyesno("سجل جديد", 
                                       f"هل تريد مسح النموذج {form_id} الحالي لإضافة سجل جديد؟")
            
            if result:
                # Clear all form fields
                for field_name, widget in entries.items():
                    try:
                        if hasattr(widget, 'delete'):
                            if hasattr(widget, 'get') and len(widget.get.__code__.co_varnames) > 2:
                                # Text widget
                                widget.delete(1.0, tk.END)
                            else:
                                # Entry widget
                                widget.delete(0, tk.END)
                    except Exception as e:
                        print(f"Error clearing {field_name}: {e}")
                
                messagebox.showinfo("سجل جديد", f"تم مسح النموذج {form_id}. يمكنك الآن إدخال بيانات جديدة")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ:\n{str(e)}")
    
    def standardize_section9_form_buttons(self, main_frame, form_id, form_name, entries_dict=None):
        """
        Standardized function to replace any basic buttons in Section 9 forms with enhanced buttons
        Call this at the end of any Section 9 form creation function instead of creating basic buttons
        """
        # Remove any existing button frames (if any)
        for widget in main_frame.winfo_children():
            if isinstance(widget, tk.Frame) and any(isinstance(child, tk.Button) for child in widget.winfo_children()):
                widget.destroy()
        
        # Add enhanced buttons
        if entries_dict is None:
            entries_dict = {}
        
        self.create_universal_enhanced_form_buttons(main_frame, form_id, form_name, entries_dict)
        
        return True

    def enhance_all_section9_forms(self):
        """Systematically enhance all Section 9 forms with universal buttons"""
        # This method serves as documentation for all Section 9 forms that have been enhanced
        section9_forms = {
            "QF-09-01-01": "نموذج طلب التقديم للبرنامج",
            "QF-09-01-02": "اتفاقية التزام المتقدم بالبرنامج", 
            "QF-09-01-03": "سجل مراجعة طلبات التقديم",
            "QF-09-02-01": "نموذج تقييم المؤهلات السابقة",
            "QF-09-02-02": "نموذج تقييم الخبرة العملية",
            "QF-09-02-03": "نموذج تقييم الامتحانات والتمارين العملية",
            "QF-09-02-04": "سجل نتائج التقييم",
            "QF-09-03-01": "نموذج الامتحان",
            "QF-09-03-02": "سجل الامتحان",
            "QF-09-03-03": "تقرير مراقبة الامتحان",
            "QF-09-04-01": "نموذج قرار الشهادة",
            "QF-09-04-02": "سجل قرارات الشهادات",
            "QF-09-04-03": "شهادة الاعتماد",
            "QF-09-05-01": "نموذج قرار تعليق أو سحب أو تقليص النطاق",
            "QF-09-05-02": "سجل قرارات تعليق أو سحب الشهادات",
            "QF-09-05-03": "نموذج تظلم",
            "QF-09-06-01": "نموذج طلب إعادة الاعتماد",
            "QF-09-06-02": "سجل متابعة الأداء المهنى",
            "QF-09-06-03": "نموذج تقرير إعادة التقييم",
            "QF-09-07-01": "نموذج اتفاقية استخدام الشهادات والشعارات",
            "QF-09-07-02": "تقرير حالة إساءة الاستخدام",
            "QF-09-07-03": "سجل مراجعة الاستخدام السليم للشهادات والعلامات",
            "QF-09-08-01": "نموذج تقديم التظلم",
            "QF-09-08-02": "سجل التظلمات والقرارات المتخذة",
            "QF-09-08-03": "تقرير لجنة التظلمات",
            "QF-09-09-01": "نموذج تقديم الشكوى",
            "QF-09-09-02": "سجل الشكاوى والقرارات المتخذة", 
            "QF-09-09-03": "تقرير لجنة معالجة الشكوى"
        }
        return section9_forms

    def add_enhanced_buttons_to_form(self, parent_frame, form_id, form_name, entries_dict=None):
        """Universal helper to add enhanced buttons to any form with proper spacing"""
        # Create separator space
        separator = tk.Frame(parent_frame, bg=parent_frame.cget('bg'), height=20)
        separator.pack(fill=tk.X)
        
        # Add enhanced buttons
        if entries_dict:
            self.create_universal_enhanced_form_buttons(parent_frame, form_id, form_name, entries_dict)
        else:
            # If no entries dict provided, create empty one (buttons will still work for basic functions)
            self.create_universal_enhanced_form_buttons(parent_frame, form_id, form_name, {})
    
    def get_form_id_from_name(self, form_name):
        """Extract QF form ID from form name"""
        import re
        match = re.search(r'QF-\d+-\d+-\d+', form_name)
        if match:
            return match.group(0)
        return form_name

    def generate_universal_form_pdf(self, form_id, form_name, entries, filename):
        """Generate PDF for any universal form"""
        try:
            doc = SimpleDocTemplate(filename, pagesize=A4, rightMargin=72, leftMargin=72,
                                  topMargin=72, bottomMargin=18)
            
            # Create story content
            story = []
            
            # Title
            title_style = ParagraphStyle(
                'ArabicTitle',
                parent=getSampleStyleSheet()['Title'],
                alignment=TA_CENTER,
                fontSize=16,
                spaceAfter=30
            )
            
            title = Paragraph(f"{form_id}: {form_name}", title_style)
            story.append(title)
            story.append(Spacer(1, 12))
            
            # Form data
            data_style = ParagraphStyle(
                'ArabicData',
                parent=getSampleStyleSheet()['Normal'],
                alignment=TA_RIGHT,
                fontSize=12,
                spaceAfter=6
            )
            
            # Add form fields to PDF
            for field_name, widget in entries.items():
                try:
                    if hasattr(widget, 'get'):
                        if hasattr(widget, 'get') and len(widget.get.__code__.co_varnames) > 2:
                            # Text widget
                            value = widget.get(1.0, tk.END).strip()
                        else:
                            # Entry widget
                            value = widget.get()
                    else:
                        value = str(widget)
                    
                    field_para = Paragraph(f"{field_name}: {value}", data_style)
                    story.append(field_para)
                except Exception as e:
                    print(f"Error adding {field_name} to PDF: {e}")
            
            # Build PDF
            doc.build(story)
            
        except Exception as e:
            raise Exception(f"Error generating PDF: {str(e)}")

    def create_enhanced_form_buttons(self, parent, form_name, entries):
        """Create enhanced form buttons with improved layout and responsiveness"""
        btn_frame = tk.Frame(parent, bg=self.premium_colors['background'])
        btn_frame.pack(fill=tk.X, padx=25, pady=25)
        
        # Create buttons with better layout - using grid for better control
        buttons = [
            ("حفظ النموذج", "#4CAF50", lambda: self.save_form_data_universal(form_name, entries)),
            ("تصدير إلى PDF", "#9C27B0", lambda: self.export_form_to_pdf_universal(form_name, entries)),
            ("حذف السجل", "#F44336", lambda: self.delete_form_record_universal(form_name)),
            ("تعديل السجل", "#424242", lambda: self.edit_form_record_universal(form_name, entries)),
            ("إضافة سجل جديد", "#673AB7", lambda: self.add_new_form_record_universal(form_name)),
            ("مسح النموذج", "#FF9800", lambda: self.clear_form_universal(form_name))
        ]
        
        # Configure grid columns for responsive button layout
        for i in range(len(buttons)):
            btn_frame.grid_columnconfigure(i, weight=1, pad=10)
        
        # Create buttons with consistent sizing
        for i, (text, color, command) in enumerate(buttons):
            btn = tk.Button(btn_frame, 
                           text=self.format_arabic_text(text),
                           font=self.fonts['body'],
                           fg="white",
                           bg=color,
                           height=2,
                           relief=tk.FLAT,
                           bd=0,
                           command=command)
            btn.grid(row=0, column=i, sticky="ew", padx=5, pady=5, ipadx=10)
        add_btn.pack(side=tk.LEFT, padx=5)
        
        return btn_frame

    # ==================== Universal Form Database Operations ====================
    
    def save_form_data_universal(self, form_name, entries):
        """Universal form data save method for any QF form"""
        try:
            # Create form data dictionary
            form_data = {}
            form_data['form_name'] = form_name
            form_data['save_date'] = datetime.now().isoformat()
            
            # Extract data from entries based on widget type
            for field_name, widget in entries.items():
                try:
                    if isinstance(widget, tk.Entry):
                        form_data[field_name] = widget.get()
                    elif isinstance(widget, tk.Text):
                        form_data[field_name] = widget.get(1.0, tk.END).strip()
                    elif isinstance(widget, tk.BooleanVar):
                        form_data[field_name] = widget.get()
                    elif isinstance(widget, list):  # For table data
                        # Extract table data
                        table_data = []
                        for row in widget:
                            row_data = {}
                            for cell_name, cell_widget in row.items():
                                if isinstance(cell_widget, tk.Entry):
                                    row_data[cell_name] = cell_widget.get()
                                elif isinstance(cell_widget, tk.Label):
                                    row_data[cell_name] = cell_widget.cget('text')
                            table_data.append(row_data)
                        form_data[field_name] = table_data
                    else:
                        # Handle other widget types
                        try:
                            form_data[field_name] = str(widget.get())
                        except:
                            form_data[field_name] = str(widget)
                except Exception as field_error:
                    print(f"Error extracting field {field_name}: {field_error}")
                    form_data[field_name] = ""
            
            # Set form ID
            form_data['form_id'] = form_name
            
            # Save to database using existing database manager
            success = self.db_manager.save_form_data(form_name, form_data)
            
            if success:
                messagebox.showinfo("حفظ", f"تم حفظ {form_name} بنجاح")
                self.log_activity(f"Form {form_name} saved successfully")
            else:
                messagebox.showerror("خطأ", f"فشل في حفظ {form_name}")
            
        except Exception as e:
            error_msg = f"حدث خطأ أثناء حفظ {form_name}:\n{str(e)}"
            messagebox.showerror("خطأ", error_msg)
            print(f"Save error for {form_name}: {e}")

    def export_form_to_pdf_universal(self, form_name, entries):
        """Universal PDF export method for any QF form"""
        try:
            from tkinter import filedialog
            
            # Ask user for save location
            filename = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("PDF files", "*.pdf")],
                title=f"حفظ {form_name} كـ PDF"
            )
            
            if filename:
                # Create PDF document
                doc = SimpleDocTemplate(filename, pagesize=A4, rightMargin=72, leftMargin=72,
                                      topMargin=72, bottomMargin=18)
                
                # Create story content
                story = []
                
                # Title
                title_style = ParagraphStyle(
                    'ArabicTitle',
                    parent=getSampleStyleSheet()['Title'],
                    alignment=TA_CENTER,
                    fontSize=16,
                    spaceAfter=30
                )
                
                title = Paragraph(f"{form_name}", title_style)
                story.append(title)
                story.append(Spacer(1, 12))
                
                # Form data
                data_style = ParagraphStyle(
                    'ArabicData',
                    parent=getSampleStyleSheet()['Normal'],
                    alignment=TA_RIGHT,
                    fontSize=12,
                    spaceAfter=12
                )
                
                # Add form fields
                for field_name, widget in entries.items():
                    try:
                        if isinstance(widget, tk.Entry):
                            value = widget.get()
                            if value:
                                text = f"{field_name}: {value}"
                                para = Paragraph(text, data_style)
                                story.append(para)
                        elif isinstance(widget, tk.Text):
                            value = widget.get(1.0, tk.END).strip()
                            if value:
                                text = f"{field_name}: {value}"
                                para = Paragraph(text, data_style)
                                story.append(para)
                        elif isinstance(widget, tk.BooleanVar):
                            value = "نعم" if widget.get() else "لا"
                            text = f"{field_name}: {value}"
                            para = Paragraph(text, data_style)
                            story.append(para)
                    except Exception as field_error:
                        print(f"Error processing field {field_name} for PDF: {field_error}")
                
                # Build PDF
                doc.build(story)
                messagebox.showinfo("تصدير PDF", f"تم تصدير {form_name} إلى PDF بنجاح")
                
        except Exception as e:
            error_msg = f"حدث خطأ أثناء تصدير {form_name} إلى PDF:\n{str(e)}"
            messagebox.showerror("خطأ", error_msg)
            print(f"PDF export error for {form_name}: {e}")

    def delete_form_record_universal(self, form_name):
        """Universal delete method for any QF form"""
        try:
            result = messagebox.askyesno("حذف السجل", 
                                       f"هل أنت متأكد من حذف سجل {form_name}؟\nلا يمكن التراجع عن هذا الإجراء.")
            
            if result:
                success = self.db_manager.delete_form_data(form_name)
                if success:
                    messagebox.showinfo("حذف", f"تم حذف سجل {form_name} بنجاح")
                    self.log_activity(f"Form {form_name} record deleted")
                else:
                    messagebox.showerror("خطأ", f"فشل في حذف سجل {form_name}")
                    
        except Exception as e:
            error_msg = f"حدث خطأ أثناء حذف سجل {form_name}:\n{str(e)}"
            messagebox.showerror("خطأ", error_msg)
            print(f"Delete error for {form_name}: {e}")

    def edit_form_record_universal(self, form_name, entries):
        """Universal edit method for any QF form"""
        try:
            # Load existing data from database
            data = self.db_manager.load_form_data(form_name)
            
            if data:
                # Populate form fields with existing data
                for field_name, value in data.items():
                    if field_name in entries:
                        widget = entries[field_name]
                        try:
                            if isinstance(widget, tk.Entry):
                                widget.delete(0, tk.END)
                                widget.insert(0, str(value))
                            elif isinstance(widget, tk.Text):
                                widget.delete(1.0, tk.END)
                                widget.insert(1.0, str(value))
                            elif isinstance(widget, tk.BooleanVar):
                                widget.set(bool(value))
                        except Exception as field_error:
                            print(f"Error populating field {field_name}: {field_error}")
                
                messagebox.showinfo("تعديل", f"تم تحميل بيانات {form_name} للتعديل")
                self.log_activity(f"Form {form_name} loaded for editing")
            else:
                messagebox.showinfo("تعديل", f"لا توجد بيانات محفوظة لـ {form_name}")
                
        except Exception as e:
            error_msg = f"حدث خطأ أثناء تحميل بيانات {form_name} للتعديل:\n{str(e)}"
            messagebox.showerror("خطأ", error_msg)
            print(f"Edit load error for {form_name}: {e}")

    def add_new_form_record_universal(self, form_name):
        """Universal add new record method for any QF form"""
        try:
            result = messagebox.askyesno("سجل جديد", 
                                       f"هل تريد مسح {form_name} الحالي لإضافة سجل جديد؟")
            
            if result:
                self.clear_form_universal(form_name)
                messagebox.showinfo("سجل جديد", f"تم مسح {form_name}. يمكنك الآن إدخال بيانات جديدة")
                self.log_activity(f"Form {form_name} cleared for new record")
                
        except Exception as e:
            error_msg = f"حدث خطأ أثناء إضافة سجل جديد لـ {form_name}:\n{str(e)}"
            messagebox.showerror("خطأ", error_msg)
            print(f"Add new error for {form_name}: {e}")

    def clear_form_universal(self, form_name):
        """Universal form clearing method for any QF form"""
        try:
            # Get the appropriate entries dictionary based on form name
            entries = None
            if hasattr(self, f'{form_name.lower().replace("-", "_")}_entries'):
                entries = getattr(self, f'{form_name.lower().replace("-", "_")}_entries')
            
            if entries:
                for field_name, widget in entries.items():
                    try:
                        if isinstance(widget, tk.Entry):
                            widget.delete(0, tk.END)
                        elif isinstance(widget, tk.Text):
                            widget.delete(1.0, tk.END)
                        elif isinstance(widget, tk.BooleanVar):
                            widget.set(False)
                        elif isinstance(widget, list):  # For table data
                            for row in widget:
                                for cell_name, cell_widget in row.items():
                                    if isinstance(cell_widget, tk.Entry):
                                        cell_widget.delete(0, tk.END)
                    except Exception as field_error:
                        print(f"Error clearing field {field_name}: {field_error}")
            else:
                print(f"No entries dictionary found for {form_name}")
                
        except Exception as e:
            print(f"Error clearing form {form_name}: {e}")

    def log_activity(self, message):
        """Log activity with timestamp"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f"[{timestamp}] {message}")
            # Could also log to file or database if needed
        except Exception as e:
            print(f"Error logging activity: {e}")

    # ==================== QF-10-02-01 Form Implementations ====================
        """Save QF-10-01-01 form data to database"""
        try:
            # Collect form data
            form_data = {}
            
            # Get data from entry fields
            for field_name, widget in entries.items():
                if field_name == 'general_notes':
                    form_data[field_name] = widget.get(1.0, tk.END).strip()
                elif field_name == 'table_data':
                    # Handle table data separately
                    form_data[field_name] = self.get_table_data_from_widgets(widget)
                else:
                    form_data[field_name] = widget.get()
            
            # Add metadata
            form_data['form_id'] = 'QF-10-01-01'
            form_data['form_name'] = 'سجل مكونات النظام الإداري'
            form_data['created_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            form_data['last_modified'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # Save to database
            success = self.db_manager.save_form_data('QF-10-01-01', form_data)
            
            if success:
                messagebox.showinfo("نجح الحفظ", "تم حفظ بيانات النموذج بنجاح")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات:\n{str(e)}")
    
    def export_qf_10_01_01_to_pdf(self, entries):
        """Export QF-10-01-01 form to PDF"""
        try:
            if not PDF_AVAILABLE:
                messagebox.showerror("خطأ", "مكتبة PDF غير متوفرة. يرجى تثبيت reportlab")
                return
            
            filename = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("PDF files", "*.pdf")],
                title="حفظ النموذج كملف PDF"
            )
            
            if filename:
                self.generate_qf_10_01_01_pdf(entries, filename)
                messagebox.showinfo("تم التصدير", f"تم تصدير النموذج إلى:\n{filename}")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير PDF:\n{str(e)}")
    
    def delete_qf_10_01_01_record(self):
        """Delete QF-10-01-01 record from database"""
        try:
            # Confirm deletion
            result = messagebox.askyesno("تأكيد الحذف", 
                                       "هل أنت متأكد من حذف هذا السجل؟\nلا يمكن التراجع عن هذه العملية.")
            
            if result:
                success = self.db_manager.delete_form_data('QF-10-01-01')
                if success:
                    messagebox.showinfo("تم الحذف", "تم حذف السجل بنجاح")
                    # Clear the form
                    self.clear_qf_10_01_01_form()
                else:
                    messagebox.showerror("خطأ", "فشل في حذف السجل")
                    
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف السجل:\n{str(e)}")
    
    def edit_qf_10_01_01_record(self, entries):
        """Enable editing mode for QF-10-01-01 record"""
        try:
            # Load existing data from database
            data = self.db_manager.load_form_data('QF-10-01-01')
            
            if data:
                # Populate form fields with existing data
                for field_name, value in data.items():
                    if field_name in entries:
                        widget = entries[field_name]
                        if field_name == 'general_notes':
                            widget.delete(1.0, tk.END)
                            widget.insert(1.0, str(value))
                        elif field_name == 'table_data':
                            self.populate_table_data(widget, value)
                        else:
                            widget.delete(0, tk.END)
                            widget.insert(0, str(value))
                
                messagebox.showinfo("وضع التعديل", "تم تحميل البيانات الموجودة للتعديل")
            else:
                messagebox.showinfo("لا توجد بيانات", "لا توجد بيانات محفوظة لهذا النموذج")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تحميل البيانات:\n{str(e)}")
    
    def add_new_qf_10_01_01_record(self):
        """Clear form to add new QF-10-01-01 record"""
        try:
            result = messagebox.askyesno("سجل جديد", 
                                       "هل تريد مسح النموذج الحالي لإضافة سجل جديد؟")
            
            if result:
                self.clear_qf_10_01_01_form()
                messagebox.showinfo("سجل جديد", "تم مسح النموذج. يمكنك الآن إدخال بيانات جديدة")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ:\n{str(e)}")
    
    def clear_qf_10_01_01_form(self):
        """Clear all fields in QF-10-01-01 form"""
        try:
            if hasattr(self, 'qf_10_01_01_entries'):
                for field_name, widget in self.qf_10_01_01_entries.items():
                    if field_name == 'general_notes':
                        widget.delete(1.0, tk.END)
                    elif field_name == 'table_data':
                        # Clear table data
                        self.clear_table_data(widget)
                    else:
                        widget.delete(0, tk.END)
        except Exception as e:
            print(f"Error clearing form: {e}")
    
    def get_table_data_from_widgets(self, table_widgets):
        """Extract table data from widgets"""
        # This would extract data from the table widgets
        # Implementation depends on how the table is structured
        return []
    
    def populate_table_data(self, table_widgets, data):
        """Populate table widgets with data"""
        # This would populate the table widgets with data
        # Implementation depends on how the table is structured
        pass
    
    def clear_table_data(self, table_widgets):
        """Clear table widget data"""
        # This would clear the table widgets
        # Implementation depends on how the table is structured
        pass
    
    def generate_qf_10_01_01_pdf(self, entries, filename):
        """Generate PDF for QF-10-01-01 form"""
        try:
            doc = SimpleDocTemplate(filename, pagesize=A4, rightMargin=72, leftMargin=72,
                                  topMargin=72, bottomMargin=18)
            
            # Create story content
            story = []
            
            # Title
            title_style = ParagraphStyle(
                'ArabicTitle',
                parent=getSampleStyleSheet()['Title'],
                alignment=TA_CENTER,
                fontSize=16,
                spaceAfter=30
            )
            
            title = Paragraph("QF-10-01-01: سجل مكونات النظام الإداري", title_style)
            story.append(title)
            story.append(Spacer(1, 12))
            
            # Form data
            data_style = ParagraphStyle(
                'ArabicData',
                parent=getSampleStyleSheet()['Normal'],
                alignment=TA_RIGHT,
                fontSize=12,
                spaceAfter=6
            )
            
            # Add form fields to PDF
            for field_name, widget in entries.items():
                if field_name != 'table_data':
                    if field_name == 'general_notes':
                        value = widget.get(1.0, tk.END).strip()
                    else:
                        value = widget.get()
                    
                    field_para = Paragraph(f"{field_name}: {value}", data_style)
                    story.append(field_para)
            
            # Build PDF
            doc.build(story)
            
        except Exception as e:
            raise Exception(f"Error generating PDF: {str(e)}")

    def add_form_buttons(self, parent, form_name, entries):
        """Add Save and Export buttons to a form"""
        btn_frame = tk.Frame(parent, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=20)
        
        save_btn = tk.Button(btn_frame, 
                           text="حفظ النموذج",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#4CAF50",
                           width=15,
                           command=lambda: self.save_form_data_generic(form_name, entries))
        save_btn.pack(side=tk.RIGHT, padx=5)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=15,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(side=tk.RIGHT, padx=5)
        
        return btn_frame
    
    def create_form_field(self, parent, label_text, field_name, row):
        """Create a form field with premium styling and better space utilization"""
        # Create frame for each field with improved layout
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=15, pady=8)
        
        # Label with improved width management
        formatted_label = self.format_arabic_text(label_text)
        label = tk.Label(field_frame, 
                        text=formatted_label,
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        anchor="e",
                        width=25)  # Fixed width for consistent alignment
        label.pack(side=tk.RIGHT, padx=(0, 15))
        
        # Entry field with better expansion and sizing
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['text_light'],
                        relief=tk.FLAT,
                        bd=1)
        entry.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(0, 15), ipady=5)
        
        # Store in entries dictionary
        self.qf_10_01_01_entries[field_name] = entry
        
        return entry
    
    def create_components_table(self, parent):
        """Create the components details table with improved layout and space utilization"""
        # Table frame with better padding
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # Table headers in Arabic (RTL)
        headers = [
            "م", "نوع المكون", "الاسم / العنوان", "الكود المرجعي", 
            "تاريخ الإصدار", "تاريخ آخر تعديل", "الحالة (فعال/ملغى/محدث)", "ملاحظات"
        ]
        
        # Create header row with improved styling
        for col, header in enumerate(headers):
            formatted_header = self.format_arabic_text(header)
            header_label = tk.Label(table_frame,
                                  text=formatted_header,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['accent'],
                                  relief=tk.RAISED,
                                  bd=1,
                                  padx=8, pady=8)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Enhanced grid weights for better column sizing
        table_frame.grid_columnconfigure(0, weight=0, minsize=40)  # Serial number
        table_frame.grid_columnconfigure(1, weight=1, minsize=120) # Component type
        table_frame.grid_columnconfigure(2, weight=2, minsize=200) # Name/Title
        table_frame.grid_columnconfigure(3, weight=1, minsize=120) # Reference code
        table_frame.grid_columnconfigure(4, weight=1, minsize=100) # Issue date
        table_frame.grid_columnconfigure(5, weight=1, minsize=100) # Last modified
        table_frame.grid_columnconfigure(6, weight=1, minsize=150) # Status
        table_frame.grid_columnconfigure(7, weight=2, minsize=150) # Notes
        
        # Default data rows as specified in the requirements
        default_data = [
            ["1", "سياسة", "سياسة الجودة العامة", "POL-01", "01/01/2023", "15/06/2024", "فعال", ""],
            ["2", "إجراء", "إجراء تقييم الكفاءة", "PR-05-02", "10/02/2023", "01/04/2025", "محدث", "تحديث وفق التدقيق الداخلي"],
            ["3", "نموذج", "نموذج طلب اعتماد", "QF-08-01-01", "05/03/2023", "-", "فعال", ""],
            ["4", "سجل", "سجل نتائج التقييم", "QF-07-01-02", "15/04/2023", "-", "فعال", ""],
            ["5", "وثيقة مرجعية", "ISO/IEC 17024:2012", "REF-01", "-", "-", "فعال", "مرجع دولي"]
        ]
        
        # Store table entries for saving/loading
        self.qf_10_01_01_entries['table_data'] = []
        
        # Create data rows
        for row_idx, row_data in enumerate(default_data, start=1):
            row_entries = []
            for col_idx, cell_data in enumerate(row_data):
                if col_idx == 0:  # Serial number - read only
                    cell = tk.Label(table_frame,
                                  text=self.format_arabic_text(cell_data),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['secondary'],
                                  relief=tk.RAISED,
                                  bd=1,
                                  padx=5, pady=2)
                    cell.grid(row=row_idx, column=col_idx, sticky="ew", padx=1, pady=1)
                    row_entries.append(cell_data)  # Store the value directly
                else:
                    cell = tk.Entry(table_frame,
                                  font=self.fonts['body'],
                                  bg=self.premium_colors['background'],
                                  fg=self.premium_colors['text_light'],
                                  insertbackground=self.premium_colors['text_light'],
                                  relief=tk.FLAT,
                                  bd=1,
                                  justify='right')  # Right justify for Arabic text
                    cell.insert(0, cell_data)
                    cell.grid(row=row_idx, column=col_idx, sticky="ew", padx=2, pady=2, ipadx=5, ipady=3)
                    row_entries.append(cell)
            
            self.qf_10_01_01_entries['table_data'].append(row_entries)
        
        # Add button to add more rows
        add_row_btn = tk.Button(table_frame,
                              text=self.format_arabic_text("إضافة صف جديد"),
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['success'],
                              command=lambda: self.add_table_row(table_frame))
        add_row_btn.grid(row=len(default_data)+1, column=0, columnspan=len(headers), pady=10)
    
    def add_table_row(self, table_frame):
        """Add a new row to the components table"""
        current_rows = len(self.qf_10_01_01_entries['table_data'])
        new_row_num = current_rows + 1
        
        # Create new row entries
        row_entries = []
        
        # Serial number
        serial_label = tk.Label(table_frame,
                              text=str(new_row_num),
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['secondary'],
                              relief=tk.RAISED,
                              bd=1,
                              padx=5, pady=2)
        serial_label.grid(row=new_row_num, column=0, sticky="ew", padx=1, pady=1)
        row_entries.append(str(new_row_num))
        
        # Data columns
        for col in range(1, 8):  # 7 data columns
            cell = tk.Entry(table_frame,
                          font=self.fonts['body'],
                          bg=self.premium_colors['background'],
                          fg=self.premium_colors['text_light'],
                          insertbackground=self.premium_colors['text_light'],
                          relief=tk.FLAT,
                          bd=1)
            cell.grid(row=new_row_num, column=col, sticky="ew", padx=1, pady=1)
            row_entries.append(cell)
        
        # Add to entries list
        self.qf_10_01_01_entries['table_data'].append(row_entries)
        
        # Update add button position
        add_btn = table_frame.grid_slaves(row=current_rows+1, column=0)[0]
        add_btn.grid(row=new_row_num+1, column=0, columnspan=8, pady=10)
    
    def save_form_data(self, form_name, entries):
        """Save form data to database - Fixed method"""
        try:
            form_data = {}
            
            # Handle QF-10-01-01 form specially
            if form_name == "QF-10-01-01" and hasattr(self, 'qf_10_01_01_entries'):
                entries = self.qf_10_01_01_entries
                
                # Save simple fields
                for field_name, widget in entries.items():
                    if field_name == 'table_data':
                        # Handle table data specially
                        table_data = []
                        for row in widget:
                            row_data = []
                            for cell in row:
                                if isinstance(cell, tk.Entry):
                                    row_data.append(cell.get())
                                else:
                                    row_data.append(str(cell))
                            table_data.append(row_data)
                        form_data[field_name] = table_data
                    elif isinstance(widget, tk.Text):
                        form_data[field_name] = widget.get("1.0", tk.END).strip()
                    elif isinstance(widget, tk.Entry):
                        form_data[field_name] = widget.get()
                    else:
                        form_data[field_name] = str(widget)
            else:
                # Handle other forms normally
                for field_name, widget in entries.items():
                    if isinstance(widget, tk.Text):
                        form_data[field_name] = widget.get("1.0", tk.END).strip()
                    elif isinstance(widget, tk.Entry):
                        form_data[field_name] = widget.get()
                    else:
                        form_data[field_name] = str(widget)
            
            # Save to database
            success = self.db_manager.save_form_data(
                form_name=form_name,
                data=form_data,
                user_id=self.current_user['id'] if hasattr(self, 'current_user') else 1
            )
            
            if success:
                messagebox.showinfo("نجح الحفظ", f"تم حفظ النموذج {form_name} بنجاح")
                self.status_var.set(f"تم حفظ {form_name} بنجاح")
            else:
                messagebox.showerror("خطأ في الحفظ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات:\n{str(e)}")
    
    def load_form_data(self, form_name, entries):
        """Load form data from database - Fixed method"""
        try:
            # Load data from database
            form_data = self.db_manager.load_form_data(form_name)
            
            if not form_data:
                messagebox.showinfo("لا توجد بيانات", f"لا توجد بيانات محفوظة للنموذج {form_name}")
                return
            
            # Handle QF-10-01-01 form specially
            if form_name == "QF-10-01-01" and hasattr(self, 'qf_10_01_01_entries'):
                entries = self.qf_10_01_01_entries
                
                for field_name, value in form_data.items():
                    if field_name == 'table_data' and field_name in entries:
                        # Handle table data specially
                        table_data = entries[field_name]
                        for row_idx, row_data in enumerate(value):
                            if row_idx < len(table_data):
                                row = table_data[row_idx]
                                for col_idx, cell_value in enumerate(row_data):
                                    if col_idx > 0 and col_idx < len(row):  # Skip serial number
                                        cell = row[col_idx]
                                        if isinstance(cell, tk.Entry):
                                            cell.delete(0, tk.END)
                                            cell.insert(0, str(cell_value))
                    elif field_name in entries:
                        widget = entries[field_name]
                        if isinstance(widget, tk.Text):
                            widget.delete("1.0", tk.END)
                            widget.insert("1.0", str(value))
                        elif isinstance(widget, tk.Entry):
                            widget.delete(0, tk.END)
                            widget.insert(0, str(value))
            else:
                # Handle other forms normally
                for field_name, value in form_data.items():
                    if field_name in entries:
                        widget = entries[field_name]
                        if isinstance(widget, tk.Text):
                            widget.delete("1.0", tk.END)
                            widget.insert("1.0", str(value))
                        elif isinstance(widget, tk.Entry):
                            widget.delete(0, tk.END)
                            widget.insert(0, str(value))
            
            messagebox.showinfo("نجح التحميل", f"تم تحميل بيانات النموذج {form_name} بنجاح")
            self.status_var.set(f"تم تحميل {form_name} بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تحميل البيانات:\n{str(e)}")
    
    def clear_form_data(self, entries):
        """Clear all form data - Fixed method"""
        try:
            # Handle QF-10-01-01 form specially
            if hasattr(self, 'qf_10_01_01_entries') and entries == self.qf_10_01_01_entries:
                for field_name, widget in entries.items():
                    if field_name == 'table_data':
                        # Clear table data
                        for row in widget:
                            for cell in row:
                                if isinstance(cell, tk.Entry):
                                    cell.delete(0, tk.END)
                    elif isinstance(widget, tk.Text):
                        widget.delete("1.0", tk.END)
                    elif isinstance(widget, tk.Entry):
                        widget.delete(0, tk.END)
            else:
                # Handle other forms normally
                for widget in entries.values():
                    if isinstance(widget, tk.Text):
                        widget.delete("1.0", tk.END)
                    elif isinstance(widget, tk.Entry):
                        widget.delete(0, tk.END)
            
            messagebox.showinfo("تم المسح", "تم مسح جميع البيانات من النموذج")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء مسح البيانات:\n{str(e)}")

        # حفظ البيانات
        self.forms[form_name]["البيانات"] = [data]
        messagebox.showinfo("تم الحفظ", f"تم حفظ محضر الاجتماع: {form_name}")
        self.status_var.set(f"تم حفظ {form_name} بنجاح")
    
    def save_conflict_form(self, form_name, entries):
        """Save conflict of interest form to database"""
        try:
            # جمع البيانات من حقول الإدخال
            data = []
            for field in self.forms[form_name]["الحقول"]:
                widget = entries.get(field)
                if widget:
                    if isinstance(widget, tk.Text):
                        data.append(widget.get("1.0", tk.END).strip())
                    elif isinstance(widget, tk.StringVar):
                        data.append(widget.get())
                    else:
                        data.append(widget.get())
                else:
                    data.append("")
            
            # Save to database
            success = self.db_manager.save_form_data(
                form_name=form_name,
                data=[data],  # Wrap in list
                user_id=self.current_user['id']
            )
            
            if success:
                # Refresh data from database
                self.refresh_forms_data()
                
                messagebox.showinfo("تم الحفظ", f"تم حفظ تقرير تضارب المصالح: {form_name}")
                self.status_var.set(f"تم حفظ {form_name} بنجاح في قاعدة البيانات")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات:\n{str(e)}")
    
    def export_to_pdf(self, form_name=None, data=None):
        """تصدير البيانات إلى ملف PDF"""
        
        if not PDF_AVAILABLE:
            # إذا لم تكن مكتبة reportlab متوفرة، استخدم طريقة بديلة
            self.export_to_text_file(form_name, data)
            return
            
        try:
            # اختيار مكان حفظ الملف
            file_path = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")],
                title="حفظ ملف PDF"
            )
            
            if not file_path:
                return
            
            # تسجيل خط عربي إذا كان متوفراً
            try:
                # محاولة استخدام خط الويندوز العربي
                from reportlab.pdfbase.ttfonts import TTFont
                from reportlab.pdfbase import pdfmetrics
                
                # البحث عن خط عربي في النظام
                arabic_font_path = None
                possible_fonts = [
                    "C:/Windows/Fonts/arial.ttf",  # Arial Unicode
                    "C:/Windows/Fonts/calibri.ttf",  # Calibri
                    "C:/Windows/Fonts/tahoma.ttf",  # Tahoma
                    "/System/Library/Fonts/Arial.ttf",  # macOS
                    "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",  # Linux
                ]
                
                for font_path in possible_fonts:
                    if os.path.exists(font_path):
                        arabic_font_path = font_path
                        break
                
                if arabic_font_path:
                    pdfmetrics.registerFont(TTFont('ArabicFont', arabic_font_path))
                    font_name = 'ArabicFont'
                else:
                    font_name = 'Helvetica'  # fallback
                    
            except Exception:
                font_name = 'Helvetica'  # fallback إذا فشل تحميل الخط
                
            # إنشاء مستند PDF
            doc = SimpleDocTemplate(file_path, pagesize=A4)
            story = []
            
            # إعداد الأنماط مع دعم العربية
            styles = getSampleStyleSheet()
            
            # إنشاء نمط للنص العربي مع إعدادات محسنة
            arabic_style = ParagraphStyle(
                'Arabic',
                parent=styles['Normal'],
                fontName=font_name,
                fontSize=12,
                alignment=2,  # محاذاة لليمين
                rightIndent=20,
                leftIndent=20,
                spaceAfter=12,
                encoding='utf-8'  # تأكيد ترميز UTF-8
            )
            
            title_style = ParagraphStyle(
                'ArabicTitle',
                parent=styles['Title'],
                fontName=font_name,
                fontSize=16,
                alignment=1,  # محاذاة في المنتصف
                spaceAfter=20,
                encoding='utf-8'
            )
            
            # إضافة عنوان المستند
            if form_name:
                # تحويل النص العربي لتنسيق مناسب للـ PDF
                title_text = self._prepare_arabic_text_safe(f"{APP_NAME} - {form_name}")
            else:
                title_text = self._prepare_arabic_text_safe(f"{APP_NAME} - تقرير النظام")
                
            story.append(self._create_safe_paragraph(title_text, title_style))
            story.append(Spacer(1, 12))
            
            # إضافة التاريخ
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            date_text = self._prepare_arabic_text_safe(f"تاريخ التصدير: {current_date}")
            story.append(self._create_safe_paragraph(date_text, arabic_style))
            story.append(Spacer(1, 12))
            
            # إضافة البيانات
            if data and form_name:
                self._add_form_data_to_pdf(story, form_name, data, arabic_style, font_name)
            else:
                # تصدير جميع البيانات
                self._add_all_data_to_pdf(story, arabic_style, font_name)
            
            # بناء وحفظ المستند
            doc.build(story)
            
            messagebox.showinfo("نجح التصدير", f"تم تصدير الملف بنجاح إلى:\n{file_path}")
            self.status_var.set(f"تم تصدير PDF بنجاح: {os.path.basename(file_path)}")
            
        except Exception as e:
            messagebox.showerror("خطأ في التصدير", f"حدث خطأ أثناء تصدير الملف:\n{str(e)}")
            self.status_var.set("فشل في تصدير PDF")
    
    def _prepare_arabic_text(self, text):
        """تحضير النص العربي للعرض في PDF"""
        if not text:
            return ""
            
        try:
            # تنظيف النص من أي رموز غير مرغوبة
            clean_text = str(text).strip()
            
            # محاولة استخدام مكتبة bidi لترتيب النص العربي
            from bidi.algorithm import get_display
            import arabic_reshaper
            
            # إعادة تشكيل النص العربي
            reshaped_text = arabic_reshaper.reshape(clean_text)
            # ترتيب النص للعرض الصحيح
            display_text = get_display(reshaped_text)
            
            # إرجاع النص المعالج بدون markup إضافي
            return display_text
            
        except ImportError:
            # إذا لم تكن المكتبات متوفرة، استخدم النص كما هو
            return str(text).strip()
        except Exception as e:
            # في حالة حدوث خطأ، أعد النص الأساسي
            print(f"خطأ في معالجة النص العربي: {e}")
            return str(text).strip()
    
    def _prepare_arabic_text_safe(self, text):
        """تحضير النص العربي بطريقة آمنة للـ PDF"""
        if not text:
            return ""
        
        try:
            # تنظيف النص أولاً
            clean_text = str(text)
            
            # إزالة أي رموز HTML أو XML
            clean_text = clean_text.replace('<', '').replace('>', '')
            clean_text = clean_text.replace('&lt;', '').replace('&gt;', '')
            clean_text = clean_text.replace('&amp;', '&')
            
            # إزالة علامات القوس والأقواس المربعة
            clean_text = clean_text.replace('[', '').replace(']', '')
            clean_text = clean_text.replace('{', '').replace('}', '')
            
            # تنظيف الأسطر الجديدة والمسافات الزائدة
            clean_text = clean_text.replace('\n', ' ').replace('\r', ' ')
            clean_text = ' '.join(clean_text.split())  # إزالة المسافات المتعددة
            
            if not clean_text.strip():
                return ""
            
            # معالجة النص العربي
            try:
                from bidi.algorithm import get_display
                import arabic_reshaper
                
                # إعادة تشكيل النص العربي
                reshaped_text = arabic_reshaper.reshape(clean_text)
                # ترتيب النص للعرض الصحيح (من اليمين لليسار)
                display_text = get_display(reshaped_text)
                return display_text
            except ImportError:
                # إذا لم تكن المكتبات متوفرة، إرجاع النص الأصلي
                return clean_text
            except Exception as e:
                print(f"تحذير: مشكلة في معالجة النص العربي: {e}")
                return clean_text
                
        except Exception as e:
            print(f"خطأ في تحضير النص: {e}")
            # في حالة حدوث خطأ، إرجاع نص بسيط نظيف
            try:
                return str(text).replace('<', '').replace('>', '').strip()
            except:
                return "نص غير صالح"
    
    def _create_safe_paragraph(self, text, style):
        """إنشاء فقرة آمنة مع النص العربي المُعالج"""
        try:
            # التأكد من أن النص نظيف وآمن
            if not text or text.strip() == "":
                return Spacer(1, 1)  # مساحة فارغة بدلاً من فقرة فارغة
            
            # تنظيف أي رموز HTML متبقية
            safe_text = str(text).strip()
            safe_text = safe_text.replace('&', '&amp;')  # ترميز & أولاً
            safe_text = safe_text.replace('<', '&lt;')
            safe_text = safe_text.replace('>', '&gt;')
            safe_text = safe_text.replace('"', '&quot;')
            safe_text = safe_text.replace("'", '&#39;')
            
            # إنشاء الفقرة
            return Paragraph(safe_text, style)
            
        except Exception as e:
            print(f"خطأ في إنشاء الفقرة: {e}")
            # في حالة الفشل، إرجاع مساحة فارغة
            return Spacer(1, 1)
    
    def _add_form_data_to_pdf(self, story, form_name, data, style, font_name):
        """إضافة بيانات نموذج محدد إلى PDF"""
        
        # عنوان النموذج
        form_title = self._prepare_arabic_text_safe(f"النموذج: {form_name}")
        story.append(self._create_safe_paragraph(form_title, style))
        story.append(Spacer(1, 12))
        
        if form_name in self.forms:
            form_data = self.forms[form_name]
            
            # إذا كان النموذج يحتوي على جدول
            if "الحقول" in form_data and "البيانات" in form_data:
                # إنشاء جدول مع النص العربي المُعدّل
                headers = form_data["الحقول"][0] if isinstance(form_data["الحقول"][0], (list, tuple)) else form_data["الحقول"]
                table_data = []
                
                # تحضير الرؤوس - معالجة بسيطة للنص العربي
                arabic_headers = []
                for header in headers:
                    processed_header = self._prepare_arabic_text_safe(str(header))
                    arabic_headers.append(processed_header)
                
                table_data.append(arabic_headers)
                
                # تحضير البيانات - معالجة بسيطة للنص العربي
                for row in form_data["البيانات"]:
                    arabic_row = []
                    for cell in row:
                        processed_cell = self._prepare_arabic_text_safe(str(cell))
                        arabic_row.append(processed_cell)
                    table_data.append(arabic_row)
                
                # إضافة معلومات إضافية عن النموذج
                count_text = self._prepare_arabic_text_safe(f"عدد السجلات: {len(form_data['البيانات'])}")
                story.append(self._create_safe_paragraph(count_text, style))
                story.append(Spacer(1, 6))
                
                if table_data and len(table_data) > 1:  # التأكد من وجود بيانات
                    # إنشاء الجدول
                    table = Table(table_data)
                    
                    # تنسيق الجدول مع دعم الخط العربي
                    table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                        ('FONTNAME', (0, 0), (-1, 0), font_name),
                        ('FONTSIZE', (0, 0), (-1, 0), 12),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                        ('FONTNAME', (0, 1), (-1, -1), font_name),
                        ('FONTSIZE', (0, 1), (-1, -1), 10),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black),
                        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                        ('LEFTPADDING', (0, 0), (-1, -1), 6),
                        ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                    ]))
                    
                    story.append(table)
                    story.append(Spacer(1, 12))
                else:
                    no_data_text = self._prepare_arabic_text_safe("لا توجد بيانات في هذا النموذج")
                    story.append(self._create_safe_paragraph(no_data_text, style))
                    story.append(Spacer(1, 12))
            
            # إذا كان النموذج يحتوي على حقول نصية
            elif isinstance(data, dict):
                for field, value in data.items():
                    field_text = self._prepare_arabic_text_safe(f"{field}: {value}")
                    story.append(self._create_safe_paragraph(field_text, style))
                    story.append(Spacer(1, 6))
        
        # إضافة خط فاصل
        story.append(Spacer(1, 20))
    
    def _add_all_data_to_pdf(self, story, style, font_name):
        """إضافة جميع بيانات النظام إلى PDF"""
        
        title_text = self._prepare_arabic_text_safe("تقرير شامل للنظام")
        story.append(self._create_safe_paragraph(title_text, style))
        story.append(Spacer(1, 20))
        
        # إضافة ملخص النظام
        summary_title = self._prepare_arabic_text_safe("ملخص النظام:")
        story.append(self._create_safe_paragraph(summary_title, style))
        story.append(Spacer(1, 12))
        
        total_procedures = len(self.procedures)
        total_forms = len(self.forms)
        total_records = sum(len(form_data.get("البيانات", [])) for form_data in self.forms.values())
        
        summary_text = self._prepare_arabic_text_safe(f"• إجمالي الإجراءات: {total_procedures}")
        story.append(self._create_safe_paragraph(summary_text, style))
        
        summary_text = self._prepare_arabic_text_safe(f"• إجمالي النماذج: {total_forms}")
        story.append(self._create_safe_paragraph(summary_text, style))
        
        summary_text = self._prepare_arabic_text_safe(f"• إجمالي السجلات: {total_records}")
        story.append(self._create_safe_paragraph(summary_text, style))
        
        story.append(Spacer(1, 20))
        
        # إضافة الإجراءات
        procedures_title = self._prepare_arabic_text_safe("الإجراءات المتوفرة:")
        story.append(self._create_safe_paragraph(procedures_title, style))
        story.append(Spacer(1, 12))
        
        for i, proc_name in enumerate(self.procedures.keys(), 1):
            proc_text = self._prepare_arabic_text_safe(f"{i}. {proc_name}")
            story.append(self._create_safe_paragraph(proc_text, style))
        
        story.append(Spacer(1, 20))
        
        # إضافة النماذج مع التفاصيل
        forms_title = self._prepare_arabic_text_safe("النماذج والبيانات التفصيلية:")
        story.append(self._create_safe_paragraph(forms_title, style))
        story.append(Spacer(1, 12))
        
        for form_name, form_data in self.forms.items():
            # عنوان النموذج
            form_title = self._prepare_arabic_text_safe(f"النموذج: {form_name}")
            
            # إنشاء نمط فرعي للعناوين
            subtitle_style = ParagraphStyle(
                'ArabicSubtitle',
                parent=style,
                fontSize=14,
                textColor=colors.darkblue,
                spaceAfter=8,
                spaceBefore=16
            )
            
            story.append(self._create_safe_paragraph(form_title, subtitle_style))
            
            # إضافة عدد السجلات
            if "البيانات" in form_data:
                count = len(form_data["البيانات"])
                count_text = self._prepare_arabic_text_safe(f"عدد السجلات: {count}")
                story.append(self._create_safe_paragraph(count_text, style))
                
                # إضافة الجدول إذا كانت هناك بيانات
                if count > 0 and "الحقول" in form_data:
                    self._add_form_data_to_pdf(story, form_name, None, style, font_name)
                else:
                    no_data_text = self._prepare_arabic_text_safe("لا توجد بيانات مدخلة في هذا النموذج")
                    story.append(self._create_safe_paragraph(no_data_text, style))
            
            story.append(Spacer(1, 12))
        
        # إضافة معلومات النظام
        story.append(Spacer(1, 20))
        system_info_title = self._prepare_arabic_text_safe("معلومات النظام:")
        story.append(self._create_safe_paragraph(system_info_title, style))
        story.append(Spacer(1, 12))
        
        iso_text = self._prepare_arabic_text_safe("• نظام إدارة الجودة متوافق مع معيار ISO/IEC 17024:2012")
        story.append(self._create_safe_paragraph(iso_text, style))
        
        academy_text = self._prepare_arabic_text_safe(f"• نظام {APP_COPYRIGHT}")
        story.append(self._create_safe_paragraph(academy_text, style))
        
        version_text = self._prepare_arabic_text_safe("• إصدار النظام: 1.0")
        story.append(self._create_safe_paragraph(version_text, style))
    
    def export_to_text_file(self, form_name=None, data=None):
        """طريقة بديلة لتصدير البيانات كملف نصي إذا لم تكن مكتبة PDF متوفرة"""
        
        try:
            # اختيار مكان حفظ الملف
            file_path = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
                title="حفظ ملف نصي"
            )
            
            if not file_path:
                return
                
            with open(file_path, 'w', encoding='utf-8') as f:
                # كتابة الرأس
                f.write(f"{APP_DESCRIPTION}\n")
                f.write("=" * 50 + "\n\n")
                
                # كتابة التاريخ
                current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                f.write(f"تاريخ التصدير: {current_date}\n\n")
                
                if form_name and form_name in self.forms:
                    # تصدير نموذج محدد
                    f.write(f"النموذج: {form_name}\n")
                    f.write("-" * 30 + "\n\n")
                    
                    form_data = self.forms[form_name]
                    
                    if "الحقول" in form_data and "البيانات" in form_data:
                        headers = form_data["الحقول"][0]
                        
                        # كتابة الرؤوس
                        f.write(" | ".join(headers) + "\n")
                        f.write("-" * (len(" | ".join(headers))) + "\n")
                        
                        # كتابة البيانات
                        for row in form_data["البيانات"]:
                            f.write(" | ".join(str(cell) for cell in row) + "\n")
                else:
                    # تصدير جميع البيانات
                    f.write("تقرير شامل للنظام\n")
                    f.write("-" * 20 + "\n\n")
                    
                    # كتابة الإجراءات
                    f.write("الإجراءات المتوفرة:\n")
                    for proc_name in self.procedures.keys():
                        f.write(f"• {proc_name}\n")
                    
                    f.write("\n" + "=" * 50 + "\n\n")
                    
                    # كتابة النماذج
                    f.write("النماذج والبيانات:\n\n")
                    
                    for form_name, form_data in self.forms.items():
                        f.write(f"{form_name}:\n")
                        f.write("-" * len(form_name) + "\n")
                        
                        if "الحقول" in form_data and "البيانات" in form_data:
                            headers = form_data["الحقول"][0]
                            f.write(" | ".join(headers) + "\n")
                            f.write("-" * (len(" | ".join(headers))) + "\n")
                            
                            for row in form_data["البيانات"]:
                                f.write(" | ".join(str(cell) for cell in row) + "\n")
                        
                        f.write("\n" + "-" * 30 + "\n\n")
            
            messagebox.showinfo("نجح التصدير", f"تم تصدير الملف بنجاح إلى:\n{file_path}")
            self.status_var.set(f"تم تصدير الملف النصي بنجاح: {os.path.basename(file_path)}")
            
        except Exception as e:
            messagebox.showerror("خطأ في التصدير", f"حدث خطأ أثناء تصدير الملف:\n{str(e)}")
            self.status_var.set("فشل في تصدير الملف")
    
    def system_settings(self):
        settings_window = tk.Toplevel(self.root)
        settings_window.title("إعدادات النظام")
        settings_window.geometry("600x400")
        settings_window.configure(bg="#2D0A4D")
        
        title_label = tk.Label(settings_window, 
                             text="إعدادات النظام",
                             font=("Arial", 20, "bold"),
                             fg="#FFD700",
                             bg="#2D0A4D")
        title_label.pack(pady=20)
        
        # إطار الإعدادات
        settings_frame = tk.Frame(settings_window, bg="#3C1361", padx=20, pady=20)
        settings_frame.pack(fill=tk.BOTH, expand=True, padx=40, pady=20)
        
        # إعدادات المستخدم
        user_frame = tk.Frame(settings_frame, bg="#3C1361")
        user_frame.pack(fill=tk.X, pady=10)
        
        user_label = tk.Label(user_frame, 
                            text="اسم المستخدم:",
                            font=self.arabic_font_bold,
                            fg="#FFD700",
                            bg="#3C1361",
                            width=15,
                            anchor="e")
        user_label.pack(side=tk.RIGHT, padx=10)
        
        user_entry = tk.Entry(user_frame, 
                            font=self.arabic_font,
                            width=25)
        user_entry.pack(side=tk.RIGHT, fill=tk.X, expand=True)
        user_entry.insert(0, "مدير النظام")
        
        # إعدادات النسخ الاحتياطي
        backup_frame = tk.Frame(settings_frame, bg="#3C1361")
        backup_frame.pack(fill=tk.X, pady=10)
        
        backup_label = tk.Label(backup_frame, 
                              text="مسار النسخ الاحتياطي:",
                              font=self.arabic_font_bold,
                              fg="#FFD700",
                              bg="#3C1361",
                              width=15,
                              anchor="e")
        backup_label.pack(side=tk.RIGHT, padx=10)
        
        backup_entry = tk.Entry(backup_frame, 
                              font=self.arabic_font,
                              width=25)
        backup_entry.pack(side=tk.RIGHT, fill=tk.X, expand=True)
        backup_entry.insert(0, "C:/QB_Backup")
        
        # إعدادات التحديثات
        update_frame = tk.Frame(settings_frame, bg="#3C1361")
        update_frame.pack(fill=tk.X, pady=10)
        
        update_label = tk.Label(update_frame, 
                              text="تحديثات تلقائية:",
                              font=self.arabic_font_bold,
                              fg="#FFD700",
                              bg="#3C1361",
                              width=15,
                              anchor="e")
        update_label.pack(side=tk.RIGHT, padx=10)
        
        update_var = tk.BooleanVar(value=True)
        update_check = tk.Checkbutton(update_frame, 
                                    variable=update_var,
                                    bg="#3C1361")
        update_check.pack(side=tk.RIGHT)
        
        # أزرار الحفظ والإغلاق
        btn_frame = tk.Frame(settings_window, bg="#2D0A4D")
        btn_frame.pack(fill=tk.X, padx=40, pady=(0, 20))
        
        save_btn = tk.Button(btn_frame, 
                           text="حفظ الإعدادات",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#4CAF50",
                           width=15)
        save_btn.pack(side=tk.LEFT, padx=10)
        
        backup_btn = tk.Button(btn_frame, 
                           text="نسخ احتياطي الآن",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=15)
        backup_btn.pack(side=tk.LEFT, padx=10)
        
        close_btn = tk.Button(btn_frame, 
                           text="إغلاق",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#8B0000",
                           width=15,
                           command=settings_window.destroy)
        close_btn.pack(side=tk.RIGHT, padx=10)
    
    def export_form_to_pdf(self, actual_form_name):
        """تصدير نموذج محدد إلى PDF مع جميع تفاصيله"""
        
        if not PDF_AVAILABLE:
            self.export_to_text_file(actual_form_name, None)
            return
            
        try:
            # اختيار مكان حفظ الملف
            file_path = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")],
                title=f"حفظ ملف PDF - {actual_form_name}"
            )
            
            if not file_path:
                return
            
            # تسجيل خط عربي
            try:
                from reportlab.pdfbase.ttfonts import TTFont
                from reportlab.pdfbase import pdfmetrics
                
                arabic_font_path = None
                possible_fonts = [
                    # Windows Arabic fonts
                    "C:/Windows/Fonts/arial.ttf",
                    "C:/Windows/Fonts/calibri.ttf", 
                    "C:/Windows/Fonts/tahoma.ttf",
                    "C:/Windows/Fonts/times.ttf",
                    "C:/Windows/Fonts/trebuc.ttf",
                    # macOS fonts
                    "/System/Library/Fonts/Arial.ttf",
                    "/System/Library/Fonts/Times.ttf",
                    "/Library/Fonts/Arial.ttf",
                    # Linux fonts
                    "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
                    "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",
                    "/usr/share/fonts/truetype/liberation/LiberationSerif-Regular.ttf",
                ]
                
                for font_path in possible_fonts:
                    if os.path.exists(font_path):
                        try:
                            pdfmetrics.registerFont(TTFont('ArabicFont', font_path))
                            arabic_font_path = font_path
                            font_name = 'ArabicFont'
                            print(f"تم تحميل الخط: {font_path}")
                            break
                        except Exception as e:
                            print(f"فشل في تحميل الخط {font_path}: {e}")
                            continue
                
                if not arabic_font_path:
                    font_name = 'Helvetica'
                    print("تحذير: لم يتم العثور على خط عربي مناسب، سيتم استخدام Helvetica")
                    
            except Exception as e:
                font_name = 'Helvetica'
                print(f"خطأ في تسجيل الخط: {e}")
                
            # إنشاء مستند PDF
            doc = SimpleDocTemplate(file_path, pagesize=A4)
            story = []
            
            # إعداد الأنماط
            styles = getSampleStyleSheet()
            
            title_style = ParagraphStyle(
                'ArabicTitle',
                parent=styles['Title'],
                fontName=font_name,
                fontSize=18,
                alignment=TA_CENTER,  # محاذاة في الوسط
                spaceAfter=20,
                textColor=colors.darkblue,
                leading=24
            )
            
            subtitle_style = ParagraphStyle(
                'ArabicSubtitle',
                parent=styles['Normal'],
                fontName=font_name,
                fontSize=14,
                alignment=TA_RIGHT,  # محاذاة يمين للعربية
                spaceAfter=12,
                textColor=colors.darkgreen,
                leading=18,
                rightIndent=10
            )
            
            normal_style = ParagraphStyle(
                'Arabic',
                parent=styles['Normal'],
                fontName=font_name,
                fontSize=12,
                alignment=TA_RIGHT,  # محاذاة يمين للعربية
                rightIndent=20,
                leftIndent=20,
                spaceAfter=8,
                leading=16
            )
            
            # إضافة نمط للجداول
            table_style = ParagraphStyle(
                'ArabicTable',
                parent=styles['Normal'],
                fontName=font_name,
                fontSize=10,
                alignment=TA_RIGHT,
                leading=14
            )
            
            # عنوان المستند
            title_text = self._prepare_arabic_text_safe(f"{APP_NAME} - {actual_form_name}")
            story.append(self._create_safe_paragraph(title_text, title_style))
            story.append(Spacer(1, 20))
            
            # التاريخ
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            date_text = self._prepare_arabic_text_safe(f"تاريخ التصدير: {current_date}")
            story.append(self._create_safe_paragraph(date_text, normal_style))
            story.append(Spacer(1, 20))
            
            # معلومات النموذج
            if actual_form_name in self.forms:
                form_data = self.forms[actual_form_name]
                
                # إضافة وصف النموذج
                desc_title = self._prepare_arabic_text_safe("وصف النموذج:")
                story.append(Paragraph(desc_title, subtitle_style))
                
                desc_text = self._prepare_arabic_text(f"هذا النموذج جزء من نظام إدارة الجودة المتوافق مع معيار ISO/IEC 17024:2012")
                story.append(Paragraph(desc_text, normal_style))
                story.append(Spacer(1, 15))
                
                # إحصائيات النموذج
                stats_title = self._prepare_arabic_text("إحصائيات النموذج:")
                story.append(Paragraph(stats_title, subtitle_style))
                
                if "البيانات" in form_data and "الحقول" in form_data:
                    records_count = len(form_data["البيانات"])
                    fields_count = len(form_data["الحقول"][0])
                    
                    stats_text = self._prepare_arabic_text(f"• عدد الحقول: {fields_count}")
                    story.append(Paragraph(stats_text, normal_style))
                    
                    stats_text = self._prepare_arabic_text(f"• عدد السجلات: {records_count}")
                    story.append(Paragraph(stats_text, normal_style))
                    
                    if records_count > 0:
                        last_update = datetime.now().strftime("%Y-%m-%d")
                        stats_text = self._prepare_arabic_text(f"• آخر تحديث: {last_update}")
                        story.append(Paragraph(stats_text, normal_style))
                
                story.append(Spacer(1, 20))
                
                # البيانات التفصيلية
                data_title = self._prepare_arabic_text("البيانات التفصيلية:")
                story.append(Paragraph(data_title, subtitle_style))
                
                # إضافة الجدول
                self._add_form_data_to_pdf(story, actual_form_name, None, normal_style, font_name)
                
                # إضافة تحليل البيانات إذا كانت متوفرة
                if "البيانات" in form_data and len(form_data["البيانات"]) > 0:
                    story.append(Spacer(1, 20))
                    analysis_title = self._prepare_arabic_text("ملخص وتحليل:")
                    story.append(Paragraph(analysis_title, subtitle_style))
                    
                    analysis_text = self._prepare_arabic_text(f"يحتوي هذا النموذج على {len(form_data['البيانات'])} سجل من البيانات")
                    story.append(Paragraph(analysis_text, normal_style))
                    
                    if len(form_data["البيانات"]) > 0:
                        analysis_text = self._prepare_arabic_text("جميع السجلات متاحة للمراجعة والتدقيق")
                        story.append(Paragraph(analysis_text, normal_style))
                    
                # إضافة توقيع النظام
                story.append(Spacer(1, 30))
                signature_text = self._prepare_arabic_text(f"تم إنشاء هذا التقرير بواسطة {APP_COPYRIGHT}")
                story.append(Paragraph(signature_text, normal_style))
                
                iso_text = self._prepare_arabic_text("نظام متوافق مع معيار ISO/IEC 17024:2012")
                story.append(Paragraph(iso_text, normal_style))
            
            # بناء وحفظ المستند
            doc.build(story)
            
            messagebox.showinfo("نجح التصدير", f"تم تصدير تقرير {actual_form_name} بنجاح إلى:\n{file_path}")
            self.status_var.set(f"تم تصدير تقرير {actual_form_name} بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ في التصدير", f"حدث خطأ أثناء تصدير الملف:\n{str(e)}")
            self.status_var.set(f"فشل في تصدير تقرير {actual_form_name}")
    
    def quick_upload_file(self):
        """رفع ملف مباشر بدون فتح نافذة إدارة الملفات"""
        try:
            if not self.file_upload_manager:
                self.file_upload_manager = FileUploadManager(self.root, self.db_manager, self.current_user)
            
            # فتح نافذة رفع الملف مباشرة
            self.file_upload_manager.create_file_upload_dialog()
            
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في فتح نافذة رفع الملف:\n{str(e)}")
    
    def show_file_manager(self):
        """عرض مدير الملفات"""
        try:
            if not self.file_upload_manager:
                self.file_upload_manager = FileUploadManager(self.root, self.db_manager, self.current_user)
            self.file_upload_manager.create_file_manager_window()
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في فتح مدير الملفات:\n{str(e)}")
    
    def show_user_management(self):
        """عرض إدارة المستخدمين"""
        try:
            self.login_system.create_user_management_window(self.root)
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في فتح إدارة المستخدمين:\n{str(e)}")
    
    def create_backup(self):
        """إنشاء نسخة احتياطية من قاعدة البيانات والنماذج"""
        try:
            # Database backup
            db_backup_path = self.db_manager.backup_database()
            
            # Forms data backup
            forms_backup_file = self.db_manager.backup_forms_data()
            
            backup_message = f"تم إنشاء النسخ الاحتياطية بنجاح:\n\nقاعدة البيانات: {db_backup_path}"
            
            if forms_backup_file:
                backup_message += f"\n\nبيانات النماذج: {forms_backup_file}"
            
            messagebox.showinfo("نجح النسخ الاحتياطي", backup_message)
            
            # تسجيل النشاط
            self.db_manager.log_activity(
                user_id=self.current_user['id'],
                action="إنشاء نسخة احتياطية شاملة",
                table_name="system",
                record_id=None
            )
            
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في إنشاء النسخة الاحتياطية:\n{str(e)}")

    def backup_all_forms_data(self):
        """Create backup of all forms data"""
        try:
            backup_file = self.db_manager.backup_forms_data()
            if backup_file:
                messagebox.showinfo("نجح النسخ الاحتياطي", 
                                   f"تم إنشاء نسخة احتياطية من بيانات النماذج:\n{backup_file}")
                
                # Log the activity
                self.db_manager.log_activity(
                    user_id=self.current_user['id'],
                    action="إنشاء نسخة احتياطية لبيانات النماذج",
                    table_name="form_data",
                    record_id=None
                )
            else:
                messagebox.showerror("خطأ", "فشل في إنشاء النسخة الاحتياطية")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في إنشاء النسخة الاحتياطية:\n{str(e)}")

    def show_forms_data_management(self):
        """عرض نافذة إدارة بيانات النماذج"""
        forms_window = tk.Toplevel(self.root)
        forms_window.title("إدارة بيانات النماذج")
        
        # Get screen dimensions for responsive sizing
        screen_width = forms_window.winfo_screenwidth()
        screen_height = forms_window.winfo_screenheight()
        
        # Calculate optimal window size (80% of screen, with minimum limits)
        min_width, min_height = 900, 700
        width = max(min_width, int(screen_width * 0.8))
        height = max(min_height, int(screen_height * 0.8))
        
        # Center the window on screen
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        
        forms_window.geometry(f"{width}x{height}+{x}+{y}")
        forms_window.configure(bg="#2D0A4D")
        forms_window.resizable(True, True)
        forms_window.minsize(min_width, min_height)
        
        # Title
        title_label = tk.Label(forms_window, 
                              text="إدارة بيانات النماذج",
                              font=("Arial", 18, "bold"),
                              fg="#FFD700",
                              bg="#2D0A4D")
        title_label.pack(pady=20)
        
        # Frame for forms list
        forms_frame = tk.Frame(forms_window, bg="#3C1361")
        forms_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Treeview for forms
        columns = ("اسم النموذج", "عدد السجلات", "آخر تحديث")
        tree = ttk.Treeview(forms_frame, columns=columns, show="headings", height=15)
        
        # Configure columns
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=200, anchor="center")
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(forms_frame, orient="vertical", command=tree.yview)
        tree.configure(yscrollcommand=scrollbar.set)
        
        tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Load forms data
        def refresh_forms_list():
            tree.delete(*tree.get_children())
            stored_forms = self.db_manager.get_all_forms_data()
            
            for form_name, form_info in stored_forms.items():
                data = form_info['data']
                record_count = len(data) if isinstance(data, list) else 1
                updated_at = form_info.get('updated_at', 'غير محدد')
                
                tree.insert("", tk.END, values=(form_name, record_count, updated_at))
        
        refresh_forms_list()
        
        # Buttons frame
        btn_frame = tk.Frame(forms_window, bg="#2D0A4D")
        btn_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Refresh button
        refresh_btn = tk.Button(btn_frame,
                               text="تحديث القائمة",
                               font=self.arabic_font_bold,
                               fg="white",
                               bg="#5A2A9C",
                               command=refresh_forms_list)
        refresh_btn.pack(side=tk.LEFT, padx=5)
        
        # View/Edit selected form button
        view_edit_btn = tk.Button(btn_frame,
                                 text="عرض/تعديل المحدد",
                                 font=self.arabic_font_bold,
                                 fg="white",
                                 bg="#2196F3",
                                 command=lambda: self.view_edit_selected_form(tree))
        view_edit_btn.pack(side=tk.LEFT, padx=5)
        
        # Delete selected form button
        delete_btn = tk.Button(btn_frame,
                              text="حذف المحدد",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#F44336",
                              command=lambda: self.delete_selected_form(tree, refresh_forms_list))
        delete_btn.pack(side=tk.LEFT, padx=5)
        
        # Export selected form to PDF button
        export_single_btn = tk.Button(btn_frame,
                                     text="تصدير المحدد إلى PDF",
                                     font=self.arabic_font_bold,
                                     fg="white",
                                     bg="#9C27B0",
                                     command=lambda: self.export_selected_form_to_pdf(tree))
        export_single_btn.pack(side=tk.LEFT, padx=5)
        
        # Backup forms data button
        backup_btn = tk.Button(btn_frame,
                              text="نسخ احتياطي للنماذج",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#4CAF50",
                              command=self.backup_all_forms_data)
        backup_btn.pack(side=tk.LEFT, padx=5)
        
        # Export all forms button
        export_btn = tk.Button(btn_frame,
                              text="تصدير جميع النماذج",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#FF9800",
                              command=lambda: self.export_to_pdf())
        export_btn.pack(side=tk.LEFT, padx=5)
        
        # Close button
        close_btn = tk.Button(btn_frame,
                             text="إغلاق",
                             font=self.arabic_font_bold,
                             fg="white",
                             bg="#8B0000",
                             command=forms_window.destroy)
        close_btn.pack(side=tk.RIGHT, padx=5)
    
    def show_saved_forms_manager(self):
        """عرض نافذة إدارة النماذج المحفوظة"""
        if hasattr(self, 'saved_forms_manager'):
            self.saved_forms_manager.show_saved_forms_window()
        else:
            messagebox.showerror("خطأ", "لم يتم تهيئة مدير النماذج المحفوظة بعد")
    
    def create_contract_form(self, parent, form_name):
        """Create contract form for QF-06-03-01"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Get form data
        if form_name in self.forms:
            form_data = self.forms[form_name]
            
            # عرض النص التوضيحي للعقد
            intro_frame = tk.Frame(scrollable_frame, bg="#3C1361")
            intro_frame.pack(fill="x", padx=20, pady=10)
            
            intro_text = """
هذا النموذج مخصص لتوثيق العقود المبرمة مع الأطراف الخارجية في إطار أنشطة الاعتماد.
يهدف هذا العقد إلى تحديد الشروط والأحكام التي تحكم العلاقة بين جهة الاعتماد والطرف الخارجي،
وضمان الالتزام بمعايير الجودة والحيادية المطلوبة وفقاً لمعيار ISO/IEC 17024:2012.

يرجى ملء جميع البيانات المطلوبة بدقة والتأكد من صحة المعلومات قبل الحفظ.
            """
            
            intro_label = tk.Label(intro_frame,
                                 text=intro_text.strip(),
                                 font=self.arabic_font,
                                 fg="#E8E8E8",
                                 bg="#3C1361",
                                 wraplength=750,
                                 justify="right")
            intro_label.pack(fill="x", padx=10, pady=10)
            
            # خط فاصل
            separator = tk.Frame(scrollable_frame, height=2, bg="#FFD700")
            separator.pack(fill="x", padx=30, pady=10)
            
            # البيانات الأساسية للعقد
            basic_frame = tk.LabelFrame(scrollable_frame,
                                      text="البيانات الأساسية للعقد",
                                      font=self.arabic_font_bold,
                                      fg="white",
                                      bg="#3C1361")
            basic_frame.pack(fill="x", padx=20, pady=10)
            
            # تاريخ العقد
            date_frame = tk.Frame(basic_frame, bg="#3C1361")
            date_frame.pack(fill="x", padx=5, pady=5)
            
            tk.Label(date_frame, text="تاريخ العقد (يوم/شهر/سنة):", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            date_container = tk.Frame(date_frame, bg="#3C1361")
            date_container.pack(fill="x", pady=2)
            
            entries["day"] = tk.Entry(date_container, font=self.arabic_font, width=5)
            entries["day"].pack(side="right", padx=2)
            tk.Label(date_container, text="/", fg="white", bg="#3C1361").pack(side="right")
            
            entries["month"] = tk.Entry(date_container, font=self.arabic_font, width=10)
            entries["month"].pack(side="right", padx=2)
            tk.Label(date_container, text="/", fg="white", bg="#3C1361").pack(side="right")
            
            entries["year"] = tk.Entry(date_container, font=self.arabic_font, width=8)
            entries["year"].pack(side="right", padx=2)
            
            # بيانات الطرف الأول
            party1_data_frame = tk.Frame(basic_frame, bg="#3C1361")
            party1_data_frame.pack(fill="x", padx=5, pady=5)
            
            tk.Label(party1_data_frame, text="الطرف الأول (اسم الجهة أو الشركة):", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entries["party1_name"] = tk.Entry(party1_data_frame, font=self.arabic_font)
            entries["party1_name"].pack(fill="x", pady=2)
            
            tk.Label(party1_data_frame, text="مقر الطرف الأول:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entries["party1_location"] = tk.Entry(party1_data_frame, font=self.arabic_font)
            entries["party1_location"].pack(fill="x", pady=2)
            
            # بيانات الطرف الثاني
            party2_data_frame = tk.Frame(basic_frame, bg="#3C1361")
            party2_data_frame.pack(fill="x", padx=5, pady=5)
            
            tk.Label(party2_data_frame, text="الطرف الثاني (اسم المقاول/المتعاقد الخارجي):", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entries["party2_name"] = tk.Entry(party2_data_frame, font=self.arabic_font)
            entries["party2_name"].pack(fill="x", pady=2)
            
            tk.Label(party2_data_frame, text="مقر الطرف الثاني:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entries["party2_location"] = tk.Entry(party2_data_frame, font=self.arabic_font)
            entries["party2_location"].pack(fill="x", pady=2)
            
            # عرض مواد العقد
            if "الحقول" in form_data:
                # إضافة نص توضيحي لمواد العقد
                articles_intro_frame = tk.Frame(scrollable_frame, bg="#3C1361")
                articles_intro_frame.pack(fill="x", padx=20, pady=10)
                
                articles_intro_text = """
مواد العقد وشروطه:
يرجى تحديد تفاصيل كل مادة من مواد العقد وفقاً للمتطلبات القانونية والتنظيمية.
يجب أن تشمل المواد جميع الجوانب المتعلقة بالخدمة، الالتزامات، الشروط المالية، والأحكام العامة.
                """
                
                articles_intro_label = tk.Label(articles_intro_frame,
                                               text=articles_intro_text.strip(),
                                               font=self.arabic_font,
                                               fg="#90EE90",
                                               bg="#3C1361",
                                               wraplength=750,
                                               justify="right")
                articles_intro_label.pack(fill="x", padx=10, pady=5)
                
                for i, field in enumerate(form_data["الحقول"]):
                    field_frame = tk.Frame(scrollable_frame, bg="#3C1361")
                    field_frame.pack(fill="x", padx=20, pady=5)
                    
                    field_label = tk.Label(field_frame,
                                         text=field,
                                         font=self.arabic_font_bold,
                                         fg="#90EE90",
                                         bg="#3C1361")
                    field_label.pack(anchor="e")
                    
                    entries[f"article_{i}"] = tk.Text(field_frame,
                                                    font=self.arabic_font,
                                                    height=3,
                                                    wrap=tk.WORD)
                    entries[f"article_{i}"].pack(fill="x", pady=5)
                    
                    # إضافة نص توضيحي لكل مادة
                    placeholder_texts = {
                        0: "تحديد طبيعة ونوع الخدمة المطلوبة، النطاق والمتطلبات التقنية...",
                        1: "تحديد مدة العقد، تاريخ البدء والانتهاء، إمكانية التجديد...",
                        2: "المبلغ المتفق عليه، شروط السداد، الدفعات المرحلية...",
                        3: "التزامات الطرف الثاني بتقديم الخدمة، معايير الجودة، المواعيد...",
                        4: "التزامات الطرف الأول بالدفع، توفير المعلومات، التعاون...",
                        5: "شروط السرية، عدم إفشاء المعلومات، حماية البيانات...",
                        6: "التعويضات في حالة الإخلال، المسؤوليات القانونية...",
                        7: "أسباب وإجراءات فسخ العقد، الإنذارات المطلوبة...",
                        8: "القانون الواجب التطبيق، تسوية النزاعات، التعديلات..."
                    }
                    
                    if i in placeholder_texts:
                        entries[f"article_{i}"].insert("1.0", placeholder_texts[i])
                        entries[f"article_{i}"].config(fg="gray")
                        
                        # إضافة حدث للتفاعل مع النص التوضيحي
                        def on_focus_in(event, text_widget=entries[f"article_{i}"], placeholder=placeholder_texts[i]):
                            if text_widget.get("1.0", tk.END).strip() == placeholder:
                                text_widget.delete("1.0", tk.END)
                                text_widget.config(fg="black")
                        
                        def on_focus_out(event, text_widget=entries[f"article_{i}"], placeholder=placeholder_texts[i]):
                            if not text_widget.get("1.0", tk.END).strip():
                                text_widget.insert("1.0", placeholder)
                                text_widget.config(fg="gray")
                        
                        entries[f"article_{i}"].bind("<FocusIn>", on_focus_in)
                        entries[f"article_{i}"].bind("<FocusOut>", on_focus_out)
            
            # قسم التوقيعات
            signatures_frame = tk.LabelFrame(scrollable_frame, 
                                           text="التوقيعات",
                                           font=self.arabic_font_bold,
                                           fg="white",
                                           bg="#3C1361")
            signatures_frame.pack(fill="x", padx=20, pady=10)
            
            # توقيع الطرف الأول
            party1_frame = tk.LabelFrame(signatures_frame,
                                       text="الطرف الأول",
                                       font=self.arabic_font,
                                       fg="white",
                                       bg="#3C1361")
            party1_frame.pack(side="right", fill="both", expand=True, padx=5, pady=5)
            
            for field in ["الإسم", "الوظيفة", "التوقيع", "التاريخ"]:
                field_frame = tk.Frame(party1_frame, bg="#3C1361")
                field_frame.pack(fill="x", padx=5, pady=2)
                
                tk.Label(field_frame, text=f"{field}:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                entries[f"party1_{field}"] = tk.Entry(field_frame, font=self.arabic_font)
                entries[f"party1_{field}"].pack(fill="x")
            
            # توقيع الطرف الثاني
            party2_frame = tk.LabelFrame(signatures_frame,
                                       text="الطرف الثاني",
                                       font=self.arabic_font,
                                       fg="white",
                                       bg="#3C1361")
            party2_frame.pack(side="left", fill="both", expand=True, padx=5, pady=5)
            
            for field in ["الإسم", "الوظيفة", "التوقيع", "التاريخ"]:
                field_frame = tk.Frame(party2_frame, bg="#3C1361")
                field_frame.pack(fill="x", padx=5, pady=2)
                
                tk.Label(field_frame, text=f"{field}:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                entries[f"party2_{field}"] = tk.Entry(field_frame, font=self.arabic_font)
                entries[f"party2_{field}"].pack(fill="x")
        
        # التعبئة والتمرير
        canvas.pack(side="right", fill="both", expand=True)
        scrollbar.pack(side="left", fill="y")
        
        # أزرار التحكم
        btn_frame = tk.Frame(parent, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
        
        save_btn = tk.Button(btn_frame, 
                            text="حفظ العقد",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#4CAF50",
                            width=20,
                            command=lambda: self.save_contract_form(form_name, entries))
        save_btn.pack(pady=5)
        
        update_btn = tk.Button(btn_frame, 
                              text="تحديث البيانات",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#5A2A9C",
                              width=20,
                              command=lambda: self.update_contract_form(form_name, entries))
        update_btn.pack(pady=5)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=20,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(pady=5)
        
        clear_btn = tk.Button(btn_frame, 
                             text="مسح البيانات",
                             font=self.arabic_font_bold,
                             fg="white",
                             bg="#8B0000",
                             width=20,
                             command=lambda: self.clear_contract_form(entries))
        clear_btn.pack(pady=5)
        
        # ربط عجلة الماوس بالتمرير
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
    
    def create_performance_report_form(self, parent, form_name):
        """Create performance monitoring report form for QF-06-03-03"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Get form data
        if form_name in self.forms:
            form_data = self.forms[form_name]
            
            # عرض النص التوضيحي للتقرير
            intro_frame = tk.Frame(scrollable_frame, bg="#3C1361")
            intro_frame.pack(fill="x", padx=20, pady=10)
            
            intro_text = """
تقرير مراقبة الأداء والتقييم الدوري للأطراف الخارجية

هذا التقرير مصمم لتوثيق ومراقبة أداء الأطراف الخارجية المتعاملة مع المؤسسة بشكل دوري.
الغرض من هذا التقرير هو ضمان الالتزام بمعايير الجودة والكفاءة المطلوبة، وتحقيق الأهداف المحددة
في العقود والاتفاقيات، مع تقديم تقييم شامل لأداء الطرف الخارجي.

يرجى ملء جميع الأقسام بعناية وتقديم تقييم موضوعي ودقيق للأداء.
            """
            
            intro_label = tk.Label(intro_frame,
                                 text=intro_text.strip(),
                                 font=self.arabic_font,
                                 fg="#E8E8E8",
                                 bg="#3C1361",
                                 wraplength=750,
                                 justify="right")
            intro_label.pack(fill="x", padx=10, pady=10)
            
            # خط فاصل
            separator = tk.Frame(scrollable_frame, height=2, bg="#FFD700")
            separator.pack(fill="x", padx=30, pady=10)
            
            # عرض الهدف
            if "الهدف" in form_data:
                purpose_label = tk.Label(scrollable_frame,
                                       text=f"الهدف: {form_data['الهدف']}",
                                       font=self.arabic_font,
                                       fg="white",
                                       bg="#3C1361",
                                       wraplength=800,
                                       justify="right")
                purpose_label.pack(fill="x", padx=20, pady=10)
            
            # البيانات العامة
            if "البيانات العامة" in form_data:
                general_frame = tk.LabelFrame(scrollable_frame,
                                            text="البيانات العامة",
                                            font=self.arabic_font_bold,
                                            fg="white",
                                            bg="#3C1361")
                general_frame.pack(fill="x", padx=20, pady=10)
                
                # نص توضيحي للبيانات العامة
                general_info_label = tk.Label(general_frame,
                                            text="يرجى ملء البيانات الأساسية للطرف الخارجي والفترة المشمولة بالتقييم:",
                                            font=self.arabic_font,
                                            fg="#E8E8E8",
                                            bg="#3C1361")
                general_info_label.pack(anchor="e", padx=5, pady=5)
                
                for field in form_data["البيانات العامة"]:
                    field_frame = tk.Frame(general_frame, bg="#3C1361")
                    field_frame.pack(fill="x", padx=5, pady=2)
                    
                    tk.Label(field_frame, text=f"{field}:", 
                            font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                    tk.Entry(field_frame, font=self.arabic_font).pack(fill="x")
            
            # نتائج مراقبة الأداء
            if "نتائج مراقبة الأداء" in form_data:
                performance_frame = tk.LabelFrame(scrollable_frame,
                                                text="نتائج مراقبة الأداء",
                                                font=self.arabic_font_bold,
                                                fg="white",
                                                bg="#3C1361")
                performance_frame.pack(fill="x", padx=20, pady=10)
                
                # نص توضيحي لمراقبة الأداء
                performance_info_label = tk.Label(performance_frame,
                                                text="يرجى تقييم أداء الطرف الخارجي في المجالات التالية بناءً على المعايير المتفق عليها:",
                                                font=self.arabic_font,
                                                fg="#E8E8E8",
                                                bg="#3C1361")
                performance_info_label.pack(anchor="e", padx=5, pady=5)
                
                for field in form_data["نتائج مراقبة الأداء"]:
                    field_frame = tk.Frame(performance_frame, bg="#3C1361")
                    field_frame.pack(fill="x", padx=5, pady=2)
                    
                    tk.Label(field_frame, text=f"{field}:", 
                            font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                    if field == "ملاحظات إضافية":
                        tk.Text(field_frame, font=self.arabic_font, height=3).pack(fill="x")
                    else:
                        tk.Entry(field_frame, font=self.arabic_font).pack(fill="x")
            
            # الملخص والتوصيات
            if "الملخص والتوصيات" in form_data:
                summary_frame = tk.LabelFrame(scrollable_frame,
                                            text="الملخص والتوصيات",
                                            font=self.arabic_font_bold,
                                            fg="white",
                                            bg="#3C1361")
                summary_frame.pack(fill="x", padx=20, pady=10)
                
                # نص توضيحي للملخص والتوصيات
                summary_info_label = tk.Label(summary_frame,
                                            text="يرجى تقديم ملخص شامل للتقييم والتوصيات المناسبة للتحسين:",
                                            font=self.arabic_font,
                                            fg="#E8E8E8",
                                            bg="#3C1361")
                summary_info_label.pack(anchor="e", padx=5, pady=5)
                
                for field in form_data["الملخص والتوصيات"]:
                    field_frame = tk.Frame(summary_frame, bg="#3C1361")
                    field_frame.pack(fill="x", padx=5, pady=2)
                    
                    tk.Label(field_frame, text=f"{field}:", 
                            font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                    tk.Text(field_frame, font=self.arabic_font, height=3).pack(fill="x")
            
            # قسم التوقيعات
            if "التوقيع" in form_data:
                signatures_frame = tk.LabelFrame(scrollable_frame,
                                               text="اعتماد ومراجعة التقرير",
                                               font=self.arabic_font_bold,
                                               fg="white",
                                               bg="#3C1361")
                signatures_frame.pack(fill="x", padx=20, pady=10)
                
                # معد التقرير
                preparer_frame = tk.Frame(signatures_frame, bg="#3C1361")
                preparer_frame.pack(fill="x", padx=5, pady=5)
                
                tk.Label(preparer_frame, text="اسم المعد:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                tk.Entry(preparer_frame, font=self.arabic_font).pack(fill="x", pady=2)
                
                tk.Label(preparer_frame, text="التوقيع:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                tk.Entry(preparer_frame, font=self.arabic_font).pack(fill="x", pady=2)
                
                # المراجع
                reviewer_frame = tk.Frame(signatures_frame, bg="#3C1361")
                reviewer_frame.pack(fill="x", padx=5, pady=5)
                
                tk.Label(reviewer_frame, text="اسم المراجع:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                tk.Entry(reviewer_frame, font=self.arabic_font).pack(fill="x", pady=2)
                
                tk.Label(reviewer_frame, text="التوقيع:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                tk.Entry(reviewer_frame, font=self.arabic_font).pack(fill="x", pady=2)
                
                # تاريخ الاعتماد
                date_frame = tk.Frame(signatures_frame, bg="#3C1361")
                date_frame.pack(fill="x", padx=5, pady=5)
                
                tk.Label(date_frame, text="تاريخ الاعتماد:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                tk.Entry(date_frame, font=self.arabic_font).pack(fill="x", pady=2)
        
        # التعبئة والتمرير
        canvas.pack(side="right", fill="both", expand=True)
        scrollbar.pack(side="left", fill="y")
        
        # أزرار التحكم
        btn_frame = tk.Frame(parent, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
        
        save_btn = tk.Button(btn_frame, 
                            text="حفظ التقرير",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#4CAF50",
                            width=20,
                            command=lambda: self.save_performance_report(form_name))
        save_btn.pack(pady=5)
        
        update_btn = tk.Button(btn_frame, 
                              text="تحديث البيانات",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#5A2A9C",
                              width=20,
                              command=lambda: self.update_performance_report(form_name))
        update_btn.pack(pady=5)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=20,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(pady=5)
        
        clear_btn = tk.Button(btn_frame, 
                             text="مسح البيانات",
                             font=self.arabic_font_bold,
                             fg="white",
                             bg="#8B0000",
                             width=20,
                             command=lambda: self.clear_performance_report(form_name))
        clear_btn.pack(pady=5)
        
        # ربط عجلة الماوس بالتمرير
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
    
    def create_conflict_assessment_form(self, parent, form_name):
        """Create conflict of interest assessment form for QF-06-03-04"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Get form data
        if form_name in self.forms:
            form_data = self.forms[form_name]
            
            # عرض النص التوضيحي للتقييم
            intro_frame = tk.Frame(scrollable_frame, bg="#3C1361")
            intro_frame.pack(fill="x", padx=20, pady=10)
            
            intro_text = """
نموذج تقييم تضارب المصالح مع الأطراف الخارجية

هذا النموذج مصمم لتقييم وتحليل أي تضارب محتمل في المصالح بين المؤسسة والأطراف الخارجية
المتعاملة معها في إطار أنشطة الاعتماد. الهدف من هذا التقييم هو ضمان الحيادية والنزاهة
في جميع العمليات وفقاً لمتطلبات معيار ISO/IEC 17024:2012.

يرجى الإجابة على جميع الأسئلة بصدق ودقة، وتقديم التوضيحات اللازمة عند الحاجة.
أي تضارب محتمل في المصالح يجب الإفصاح عنه واتخاذ الإجراءات المناسبة للتعامل معه.
            """
            
            intro_label = tk.Label(intro_frame,
                                 text=intro_text.strip(),
                                 font=self.arabic_font,
                                 fg="#E8E8E8",
                                 bg="#3C1361",
                                 wraplength=750,
                                 justify="right")
            intro_label.pack(fill="x", padx=10, pady=10)
            
            # خط فاصل
            separator = tk.Frame(scrollable_frame, height=2, bg="#FFD700")
            separator.pack(fill="x", padx=30, pady=10)
            
            # البيانات الأساسية
            if "البيانات الأساسية" in form_data:
                basic_frame = tk.LabelFrame(scrollable_frame,
                                          text="أولاً: بيانات الطرف الخارجي",
                                          font=self.arabic_font_bold,
                                          fg="white",
                                          bg="#3C1361")
                basic_frame.pack(fill="x", padx=20, pady=10)
                
                # نص توضيحي للبيانات الأساسية
                basic_info_label = tk.Label(basic_frame,
                                          text="يرجى ملء البيانات الأساسية للطرف الخارجي المراد تقييمه:",
                                          font=self.arabic_font,
                                          fg="#E8E8E8",
                                          bg="#3C1361")
                basic_info_label.pack(anchor="e", padx=5, pady=5)
                
                for field in form_data["البيانات الأساسية"]:
                    field_frame = tk.Frame(basic_frame, bg="#3C1361")
                    field_frame.pack(fill="x", padx=5, pady=2)
                    
                    tk.Label(field_frame, text=f"• {field}:", 
                            font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                    tk.Entry(field_frame, font=self.arabic_font).pack(fill="x")
            
            # أسئلة تقييم تضارب المصالح
            if "أسئلة تقييم تضارب المصالح" in form_data:
                questions_frame = tk.LabelFrame(scrollable_frame,
                                              text="ثانياً: أسئلة تقييم تضارب المصالح",
                                              font=self.arabic_font_bold,
                                              fg="white",
                                              bg="#3C1361")
                questions_frame.pack(fill="x", padx=20, pady=10)
                
                instruction_label = tk.Label(questions_frame,
                                            text="يرجى الإجابة بـ (نعم / لا) مع التوضيح إن وُجد.",
                                            font=self.arabic_font,
                                            fg="#90EE90",
                                            bg="#3C1361")
                instruction_label.pack(anchor="e", padx=5, pady=5)
                
                # إنشاء جدول للأسئلة
                if "البيانات" in form_data:
                    for i, (question, answer, explanation) in enumerate(form_data["البيانات"]):
                        question_frame = tk.Frame(questions_frame, bg="#3C1361", relief="ridge", bd=1)
                        question_frame.pack(fill="x", padx=5, pady=2)
                        
                        # السؤال
                        q_label = tk.Label(question_frame,
                                         text=f"{i+1}. {question}",
                                         font=self.arabic_font,
                                         fg="white",
                                         bg="#3C1361",
                                         wraplength=600,
                                         justify="right")
                        q_label.pack(anchor="e", padx=5, pady=2)
                        
                        # الإجابة
                        answer_frame = tk.Frame(question_frame, bg="#3C1361")
                        answer_frame.pack(fill="x", padx=5, pady=2)
                        
                        tk.Label(answer_frame, text="الإجابة:", 
                                font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
                        
                        answer_var = tk.StringVar(value=answer)
                        tk.Radiobutton(answer_frame, text="نعم", variable=answer_var, value="نعم",
                                     font=self.arabic_font, fg="white", bg="#3C1361",
                                     selectcolor="#5A2A9C").pack(side="right", padx=5)
                        tk.Radiobutton(answer_frame, text="لا", variable=answer_var, value="لا",
                                     font=self.arabic_font, fg="white", bg="#3C1361",
                                     selectcolor="#5A2A9C").pack(side="right", padx=5)
                        
                        # التوضيح
                        explanation_frame = tk.Frame(question_frame, bg="#3C1361")
                        explanation_frame.pack(fill="x", padx=5, pady=2)
                        
                        tk.Label(explanation_frame, text="التوضيح:", 
                                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                        tk.Entry(explanation_frame, font=self.arabic_font).pack(fill="x")
            
            # التوصيات والقرار
            if "التوصيات والقرار" in form_data:
                recommendations_frame = tk.LabelFrame(scrollable_frame,
                                                    text="ثالثاً: التوصيات والقرار",
                                                    font=self.arabic_font_bold,
                                                    fg="white",
                                                    bg="#3C1361")
                recommendations_frame.pack(fill="x", padx=20, pady=10)
                
                # تقييم مستوى تضارب المصالح
                level_frame = tk.Frame(recommendations_frame, bg="#3C1361")
                level_frame.pack(fill="x", padx=5, pady=5)
                
                tk.Label(level_frame, text="• تقييم مستوى تضارب المصالح:",
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                
                level_var = tk.StringVar()
                level_options_frame = tk.Frame(level_frame, bg="#3C1361")
                level_options_frame.pack(fill="x", pady=2)
                
                for option in ["لا يوجد", "محتمل", "قائم فعلياً"]:
                    tk.Radiobutton(level_options_frame, text=option, variable=level_var, value=option,
                                 font=self.arabic_font, fg="white", bg="#3C1361",
                                 selectcolor="#5A2A9C").pack(side="right", padx=10)
                
                # الإجراءات المقترحة
                actions_frame = tk.Frame(recommendations_frame, bg="#3C1361")
                actions_frame.pack(fill="x", padx=5, pady=5)
                
                tk.Label(actions_frame, text="• الإجراءات المقترحة في حال وجود تضارب:",
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                tk.Text(actions_frame, font=self.arabic_font, height=3).pack(fill="x", pady=2)
            
            # قسم الاعتماد
            if "التوقيع" in form_data:
                approval_frame = tk.LabelFrame(scrollable_frame,
                                             text="رابعاً: الاعتماد",
                                             font=self.arabic_font_bold,
                                             fg="white",
                                             bg="#3C1361")
                approval_frame.pack(fill="x", padx=20, pady=10)
                
                # المقيم
                evaluator_frame = tk.Frame(approval_frame, bg="#3C1361")
                evaluator_frame.pack(fill="x", padx=5, pady=5)
                
                tk.Label(evaluator_frame, text="• اسم المقيم:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                tk.Entry(evaluator_frame, font=self.arabic_font).pack(fill="x", pady=2)
                
                tk.Label(evaluator_frame, text="• التوقيع:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                tk.Entry(evaluator_frame, font=self.arabic_font).pack(fill="x", pady=2)
                
                # المراجع
                reviewer_frame = tk.Frame(approval_frame, bg="#3C1361")
                reviewer_frame.pack(fill="x", padx=5, pady=5)
                
                tk.Label(reviewer_frame, text="• اسم المراجع:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                tk.Entry(reviewer_frame, font=self.arabic_font).pack(fill="x", pady=2)
                
                tk.Label(reviewer_frame, text="• التوقيع:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                tk.Entry(reviewer_frame, font=self.arabic_font).pack(fill="x", pady=2)
                
                # تاريخ الاعتماد
                date_frame = tk.Frame(approval_frame, bg="#3C1361")
                date_frame.pack(fill="x", padx=5, pady=5)
                
                tk.Label(date_frame, text="• تاريخ الاعتماد:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                tk.Entry(date_frame, font=self.arabic_font).pack(fill="x", pady=2)
        
        # التعبئة والتمرير
        canvas.pack(side="right", fill="both", expand=True)
        scrollbar.pack(side="left", fill="y")
        
        # أزرار التحكم
        btn_frame = tk.Frame(parent, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
        
        save_btn = tk.Button(btn_frame, 
                            text="حفظ التقييم",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#4CAF50",
                            width=20,
                            command=lambda: self.save_conflict_assessment(form_name))
        save_btn.pack(pady=5)
        
        update_btn = tk.Button(btn_frame, 
                              text="تحديث البيانات",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#5A2A9C",
                              width=20,
                              command=lambda: self.update_conflict_assessment(form_name))
        update_btn.pack(pady=5)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=20,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(pady=5)
        
        clear_btn = tk.Button(btn_frame, 
                             text="مسح البيانات",
                             font=self.arabic_font_bold,
                             fg="white",
                             bg="#8B0000",
                             width=20,
                             command=lambda: self.clear_conflict_assessment(form_name))
        clear_btn.pack(pady=5)
        
        # ربط عجلة الماوس بالتمرير
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
    
    def save_contract_form(self, form_name, entries):
        """Save contract form data"""
        try:
            # Collect data from all entries
            contract_data = {}
            for key, widget in entries.items():
                if isinstance(widget, tk.Text):
                    contract_data[key] = widget.get("1.0", tk.END).strip()
                else:
                    contract_data[key] = widget.get().strip()
            
            # Save to database or file
            self.db_manager.save_form_data(form_name, contract_data)
            messagebox.showinfo("تم الحفظ", "تم حفظ بيانات العقد بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات: {str(e)}")
    
    def update_contract_form(self, form_name, entries):
        """Update contract form data"""
        try:
            self.save_contract_form(form_name, entries)
            self.refresh_forms_data()
            messagebox.showinfo("تم التحديث", "تم تحديث بيانات العقد بنجاح")
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تحديث البيانات: {str(e)}")
    
    def clear_contract_form(self, entries):
        """Clear all contract form fields"""
        if messagebox.askyesno("تأكيد المسح", "هل تريد مسح جميع البيانات المدخلة؟"):
            for key, widget in entries.items():
                if isinstance(widget, tk.Text):
                    widget.delete("1.0", tk.END)
                else:
                    widget.delete(0, tk.END)
            messagebox.showinfo("تم المسح", "تم مسح جميع البيانات")
    
    def save_performance_report(self, form_name):
        """Save performance report data"""
        try:
            messagebox.showinfo("تم الحفظ", "تم حفظ تقرير الأداء بنجاح")
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات: {str(e)}")
    
    def update_performance_report(self, form_name):
        """Update performance report data"""
        try:
            self.refresh_forms_data()
            messagebox.showinfo("تم التحديث", "تم تحديث تقرير الأداء بنجاح")
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تحديث البيانات: {str(e)}")
    
    def clear_performance_report(self, form_name):
        """Clear performance report data"""
        if messagebox.askyesno("تأكيد المسح", "هل تريد مسح جميع بيانات التقرير؟"):
            messagebox.showinfo("تم المسح", "تم مسح بيانات التقرير")
    
    def save_conflict_assessment(self, form_name):
        """Save conflict assessment data"""
        try:
            messagebox.showinfo("تم الحفظ", "تم حفظ تقييم تضارب المصالح بنجاح")
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات: {str(e)}")
    
    def update_conflict_assessment(self, form_name):
        """Update conflict assessment data"""
        try:
            self.refresh_forms_data()
            messagebox.showinfo("تم التحديث", "تم تحديث تقييم تضارب المصالح بنجاح")
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تحديث البيانات: {str(e)}")
    
    def clear_conflict_assessment(self, form_name):
        """Clear conflict assessment data"""
        if messagebox.askyesno("تأكيد المسح", "هل تريد مسح جميع بيانات التقييم؟"):
            messagebox.showinfo("تم المسح", "تم مسح بيانات التقييم")
    
    # QP-06.4 Form Creation Methods
    
    def create_exam_room_setup_form(self, parent, form_name):
        """Create exam room setup form for QF-06-04-01"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Get form data
        if form_name in self.forms:
            form_data = self.forms[form_name]
            
            # عنوان النموذج
            title_label = tk.Label(scrollable_frame,
                                 text="نموذج تجهيز قاعات الامتحانات",
                                 font=self.arabic_font_large,
                                 fg="#FFD700",
                                 bg="#3C1361")
            title_label.pack(pady=20)
            
            # النص التوضيحي
            intro_frame = tk.Frame(scrollable_frame, bg="#3C1361")
            intro_frame.pack(fill="x", padx=20, pady=10)
            
            intro_text = """
هذا النموذج مخصص لتوثيق عملية تجهيز قاعات الامتحانات والتأكد من جاهزيتها لاستقبال المتقدمين.
يهدف إلى ضمان توفر جميع المتطلبات الأساسية لبيئة امتحان آمنة وعادلة ومناسبة.
يجب إكمال هذا النموذج قبل كل جلسة امتحان للتأكد من الجاهزية الكاملة.
            """
            
            intro_label = tk.Label(intro_frame,
                                 text=intro_text.strip(),
                                 font=self.arabic_font,
                                 fg="#E8E8E8",
                                 bg="#3C1361",
                                 wraplength=750,
                                 justify="right")
            intro_label.pack(fill="x", padx=10, pady=10)
            
            # خط فاصل
            separator = tk.Frame(scrollable_frame, height=2, bg="#FFD700")
            separator.pack(fill="x", padx=30, pady=10)
            
            # البيانات العامة
            general_frame = tk.LabelFrame(scrollable_frame,
                                        text="البيانات العامة",
                                        font=self.arabic_font_bold,
                                        fg="white",
                                        bg="#3C1361")
            general_frame.pack(fill="x", padx=20, pady=10)
            
            if "البيانات العامة" in form_data:
                for field in form_data["البيانات العامة"]:
                    field_frame = tk.Frame(general_frame, bg="#3C1361")
                    field_frame.pack(fill="x", padx=5, pady=5)
                    
                    tk.Label(field_frame, text=f"{field}:", 
                            font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                    entries[field] = tk.Entry(field_frame, font=self.arabic_font)
                    entries[field].pack(fill="x", pady=2)
            
            # قائمة التحقق
            checklist_frame = tk.LabelFrame(scrollable_frame,
                                          text="قائمة التحقق من تجهيزات القاعة",
                                          font=self.arabic_font_bold,
                                          fg="white",
                                          bg="#3C1361")
            checklist_frame.pack(fill="x", padx=20, pady=10)
            
            # جدول قائمة التحقق
            if "قائمة التحقق" in form_data:
                # إنشاء جدول
                tree_frame = tk.Frame(checklist_frame, bg="#3C1361")
                tree_frame.pack(fill="both", expand=True, padx=10, pady=10)
                
                columns = ("م", "البند", "الحالة", "ملاحظات")
                tree = ttk.Treeview(tree_frame, columns=columns, show="headings", height=12)
                
                # تخصيص التصميم
                style = ttk.Style()
                style.configure("Treeview", 
                               background="#3C1361",
                               foreground="white",
                               fieldbackground="#3C1361",
                               font=self.arabic_font,
                               rowheight=30)
                style.configure("Treeview.Heading", 
                              background="#5A2A9C",
                              foreground="#FFD700",
                              font=self.arabic_font_bold)
                style.map("Treeview", background=[("selected", "#8A2BE2")])
                
                # تعريف الأعمدة
                for col in columns:
                    tree.heading(col, text=col)
                    if col == "م":
                        tree.column(col, width=50, anchor="center")
                    elif col == "البند":
                        tree.column(col, width=400, anchor="center")
                    elif col == "الحالة":
                        tree.column(col, width=120, anchor="center")
                    else:
                        tree.column(col, width=200, anchor="center")
                
                # إضافة شريط التمرير
                tree_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=tree.yview)
                tree.configure(yscrollcommand=tree_scrollbar.set)
                
                tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
                tree_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
                
                # إضافة عناصر قائمة التحقق
                for i, (item, status, notes) in enumerate(form_data["قائمة التحقق"], 1):
                    tree.insert("", tk.END, values=(i, item, "لم يتم", ""))
                
                entries["checklist_tree"] = tree
            
            # قسم الاعتماد
            approval_frame = tk.LabelFrame(scrollable_frame,
                                         text="الاعتماد",
                                         font=self.arabic_font_bold,
                                         fg="white",
                                         bg="#3C1361")
            approval_frame.pack(fill="x", padx=20, pady=10)
            
            if "الحقول" in form_data:
                for field in form_data["الحقول"]:
                    field_frame = tk.Frame(approval_frame, bg="#3C1361")
                    field_frame.pack(fill="x", padx=5, pady=5)
                    
                    tk.Label(field_frame, text=f"{field}:", 
                            font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                    entries[field] = tk.Entry(field_frame, font=self.arabic_font)
                    entries[field].pack(fill="x", pady=2)
        
        # التعبئة والتمرير
        canvas.pack(side="right", fill="both", expand=True)
        scrollbar.pack(side="left", fill="y")
        
        # أزرار التحكم
        btn_frame = tk.Frame(parent, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
        
        save_btn = tk.Button(btn_frame, 
                            text="حفظ النموذج",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#4CAF50",
                            width=20,
                            command=lambda: self.save_exam_room_setup(form_name, entries))
        save_btn.pack(pady=5)
        
        update_btn = tk.Button(btn_frame, 
                              text="تحديث البيانات",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#5A2A9C",
                              width=20,
                              command=lambda: self.update_exam_room_setup(form_name, entries))
        update_btn.pack(pady=5)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=20,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(pady=5)
        
        clear_btn = tk.Button(btn_frame, 
                             text="مسح البيانات",
                             font=self.arabic_font_bold,
                             fg="white",
                             bg="#8B0000",
                             width=20,
                             command=lambda: self.clear_exam_room_setup(entries))
        clear_btn.pack(pady=5)
        
        # ربط عجلة الماوس بالتمرير
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
    
    def create_resources_usage_form(self, parent, form_name):
        """Create resources usage form for QF-06-04-02"""
        self.create_editable_table(parent, form_name)
    
    def create_exam_environment_review_form(self, parent, form_name):
        """Create exam environment review form for QF-06-04-03"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Get form data
        if form_name in self.forms:
            form_data = self.forms[form_name]
            
            # عنوان النموذج
            title_label = tk.Label(scrollable_frame,
                                 text="تقرير مراجعة بيئة الامتحانات",
                                 font=self.arabic_font_large,
                                 fg="#FFD700",
                                 bg="#3C1361")
            title_label.pack(pady=20)
            
            # النص التوضيحي
            intro_frame = tk.Frame(scrollable_frame, bg="#3C1361")
            intro_frame.pack(fill="x", padx=20, pady=10)
            
            intro_text = """
تقرير شامل لمراجعة بيئة الامتحانات والتأكد من ملاءمتها وجاهزيتها
يهدف هذا التقرير إلى تقييم جميع جوانب بيئة الامتحان للتأكد من توفر الشروط المطلوبة
لإجراء امتحان عادل وآمن ومناسب لجميع المتقدمين.
            """
            
            intro_label = tk.Label(intro_frame,
                                 text=intro_text.strip(),
                                 font=self.arabic_font,
                                 fg="#E8E8E8",
                                 bg="#3C1361",
                                 wraplength=750,
                                 justify="right")
            intro_label.pack(fill="x", padx=10, pady=10)
            
            # البيانات العامة
            general_frame = tk.LabelFrame(scrollable_frame,
                                        text="البيانات العامة",
                                        font=self.arabic_font_bold,
                                        fg="white",
                                        bg="#3C1361")
            general_frame.pack(fill="x", padx=20, pady=10)
            
            if "البيانات العامة" in form_data:
                for field in form_data["البيانات العامة"]:
                    field_frame = tk.Frame(general_frame, bg="#3C1361")
                    field_frame.pack(fill="x", padx=5, pady=5)
                    
                    tk.Label(field_frame, text=f"{field}:", 
                            font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                    entries[field] = tk.Entry(field_frame, font=self.arabic_font)
                    entries[field].pack(fill="x", pady=2)
            
            # عناصر بيئة الامتحان
            if "عناصر بيئة الامتحان" in form_data:
                elements_frame = tk.LabelFrame(scrollable_frame,
                                             text="عناصر بيئة الامتحان",
                                             font=self.arabic_font_bold,
                                             fg="white",
                                             bg="#3C1361")
                elements_frame.pack(fill="x", padx=20, pady=10)
                
                # إنشاء جدول
                tree_frame = tk.Frame(elements_frame, bg="#3C1361")
                tree_frame.pack(fill="both", expand=True, padx=10, pady=10)
                
                columns = ("م", "البند", "التقييم", "ملاحظات")
                tree = ttk.Treeview(tree_frame, columns=columns, show="headings", height=12)
                
                # تخصيص التصميم
                style = ttk.Style()
                style.configure("Treeview", 
                               background="#3C1361",
                               foreground="white",
                               fieldbackground="#3C1361",
                               font=self.arabic_font,
                               rowheight=30)
                style.configure("Treeview.Heading", 
                              background="#5A2A9C",
                              foreground="#FFD700",
                              font=self.arabic_font_bold)
                
                # تعريف الأعمدة
                for col in columns:
                    tree.heading(col, text=col)
                    if col == "م":
                        tree.column(col, width=50, anchor="center")
                    elif col == "البند":
                        tree.column(col, width=400, anchor="center")
                    elif col == "التقييم":
                        tree.column(col, width=120, anchor="center")
                    else:
                        tree.column(col, width=200, anchor="center")
                
                # إضافة شريط التمرير
                tree_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=tree.yview)
                tree.configure(yscrollcommand=tree_scrollbar.set)
                
                tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
                tree_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
                
                # إضافة عناصر المراجعة
                for i, (item, evaluation, notes) in enumerate(form_data["عناصر بيئة الامتحان"], 1):
                    tree.insert("", tk.END, values=(i, item, "غير محدد", ""))
                
                entries["elements_tree"] = tree
            
            # ملاحظات عامة
            notes_frame = tk.LabelFrame(scrollable_frame,
                                      text="ملاحظات عامة",
                                      font=self.arabic_font_bold,
                                      fg="white",
                                      bg="#3C1361")
            notes_frame.pack(fill="x", padx=20, pady=10)
            
            entries["ملاحظات عامة"] = tk.Text(notes_frame, 
                                             font=self.arabic_font,
                                             height=4,
                                             wrap=tk.WORD)
            entries["ملاحظات عامة"].pack(fill="x", padx=5, pady=5)
            
            # التوصيات
            recommendations_frame = tk.LabelFrame(scrollable_frame,
                                                text="التوصيات",
                                                font=self.arabic_font_bold,
                                                fg="white",
                                                bg="#3C1361")
            recommendations_frame.pack(fill="x", padx=20, pady=10)
            
            entries["التوصيات"] = tk.Text(recommendations_frame, 
                                        font=self.arabic_font,
                                        height=4,
                                        wrap=tk.WORD)
            entries["التوصيات"].pack(fill="x", padx=5, pady=5)
            
            # الاعتماد
            approval_frame = tk.LabelFrame(scrollable_frame,
                                         text="الاعتماد",
                                         font=self.arabic_font_bold,
                                         fg="white",
                                         bg="#3C1361")
            approval_frame.pack(fill="x", padx=20, pady=10)
            
            if "الحقول" in form_data:
                for field in form_data["الحقول"]:
                    field_frame = tk.Frame(approval_frame, bg="#3C1361")
                    field_frame.pack(fill="x", padx=5, pady=5)
                    
                    tk.Label(field_frame, text=f"{field}:", 
                            font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                    entries[field] = tk.Entry(field_frame, font=self.arabic_font)
                    entries[field].pack(fill="x", pady=2)
        
        # التعبئة والتمرير
        canvas.pack(side="right", fill="both", expand=True)
        scrollbar.pack(side="left", fill="y")
        
        # أزرار التحكم
        btn_frame = tk.Frame(parent, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
        
        save_btn = tk.Button(btn_frame, 
                            text="حفظ التقرير",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#4CAF50",
                            width=20,
                            command=lambda: self.save_exam_environment_review(form_name, entries))
        save_btn.pack(pady=5)
        
        update_btn = tk.Button(btn_frame, 
                              text="تحديث البيانات",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#5A2A9C",
                              width=20,
                              command=lambda: self.update_exam_environment_review(form_name, entries))
        update_btn.pack(pady=5)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=20,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(pady=5)
        
        clear_btn = tk.Button(btn_frame, 
                             text="مسح البيانات",
                             font=self.arabic_font_bold,
                             fg="white",
                             bg="#8B0000",
                             width=20,
                             command=lambda: self.clear_exam_environment_review(entries))
        clear_btn.pack(pady=5)
        
        # ربط عجلة الماوس بالتمرير
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
    
    def create_technical_resources_evaluation_form(self, parent, form_name):
        """Create technical resources evaluation form for QF-06-04-04"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Get form data
        if form_name in self.forms:
            form_data = self.forms[form_name]
            
            # عنوان النموذج
            title_label = tk.Label(scrollable_frame,
                                 text="تقرير تقييم الموارد التقنية",
                                 font=self.arabic_font_large,
                                 fg="#FFD700",
                                 bg="#3C1361")
            title_label.pack(pady=20)
            
            # النص التوضيحي
            intro_frame = tk.Frame(scrollable_frame, bg="#3C1361")
            intro_frame.pack(fill="x", padx=20, pady=10)
            
            intro_text = """
تقرير شامل لتقييم حالة وأداء الموارد التقنية المستخدمة في عمليات الاعتماد
يهدف هذا التقرير إلى مراجعة الأنظمة والمعدات التقنية للتأكد من كفاءتها
وملاءمتها لمتطلبات العمل وتحديد الاحتياجات للصيانة أو التحديث.
            """
            
            intro_label = tk.Label(intro_frame,
                                 text=intro_text.strip(),
                                 font=self.arabic_font,
                                 fg="#E8E8E8",
                                 bg="#3C1361",
                                 wraplength=750,
                                 justify="right")
            intro_label.pack(fill="x", padx=10, pady=10)
            
            # البيانات العامة
            general_frame = tk.LabelFrame(scrollable_frame,
                                        text="البيانات العامة",
                                        font=self.arabic_font_bold,
                                        fg="white",
                                        bg="#3C1361")
            general_frame.pack(fill="x", padx=20, pady=10)
            
            if "البيانات العامة" in form_data:
                for field in form_data["البيانات العامة"]:
                    field_frame = tk.Frame(general_frame, bg="#3C1361")
                    field_frame.pack(fill="x", padx=5, pady=5)
                    
                    tk.Label(field_frame, text=f"{field}:", 
                            font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                    entries[field] = tk.Entry(field_frame, font=self.arabic_font)
                    entries[field].pack(fill="x", pady=2)
            
            # تفاصيل الموارد التقنية
            resources_frame = tk.LabelFrame(scrollable_frame,
                                          text="تفاصيل الموارد التقنية الخاضعة للتقييم",
                                          font=self.arabic_font_bold,
                                          fg="white",
                                          bg="#3C1361")
            resources_frame.pack(fill="x", padx=20, pady=10)
            
            # جدول الموارد التقنية
            if "الحقول" in form_data:
                tree_frame = tk.Frame(resources_frame, bg="#3C1361")
                tree_frame.pack(fill="both", expand=True, padx=10, pady=10)
                
                columns = form_data["الحقول"]
                tree = ttk.Treeview(tree_frame, columns=columns, show="headings", height=8)
                
                # تخصيص التصميم
                style = ttk.Style()
                style.configure("Treeview", 
                               background="#3C1361",
                               foreground="white",
                               fieldbackground="#3C1361",
                               font=self.arabic_font,
                               rowheight=35)
                style.configure("Treeview.Heading", 
                              background="#5A2A9C",
                              foreground="#FFD700",
                              font=self.arabic_font_bold)
                
                # تعريف الأعمدة
                for col in columns:
                    tree.heading(col, text=col)
                    if col == "م":
                        tree.column(col, width=50, anchor="center")
                    elif col == "حالة التشغيل":
                        tree.column(col, width=120, anchor="center")
                    else:
                        tree.column(col, width=200, anchor="center")
                
                # إضافة شريط التمرير
                tree_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=tree.yview)
                tree.configure(yscrollcommand=tree_scrollbar.set)
                
                tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
                tree_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
                
                entries["resources_tree"] = tree
                
                # أزرار إدارة الجدول
                table_btn_frame = tk.Frame(resources_frame, bg="#3C1361")
                table_btn_frame.pack(fill=tk.X, padx=10, pady=5)
                
                add_resource_btn = tk.Button(table_btn_frame, 
                                           text="إضافة مورد",
                                           font=self.arabic_font_bold,
                                           fg="white",
                                           bg="#5A2A9C",
                                           width=12,
                                           command=lambda: self.add_technical_resource(tree))
                add_resource_btn.pack(side=tk.RIGHT, padx=5)
                
                edit_resource_btn = tk.Button(table_btn_frame, 
                                            text="تعديل المورد",
                                            font=self.arabic_font_bold,
                                            fg="white",
                                            bg="#5A2A9C",
                                            width=12,
                                            command=lambda: self.edit_technical_resource(tree))
                edit_resource_btn.pack(side=tk.RIGHT, padx=5)
                
                delete_resource_btn = tk.Button(table_btn_frame, 
                                               text="حذف المورد",
                                               font=self.arabic_font_bold,
                                               fg="white",
                                               bg="#8B0000",
                                               width=12,
                                               command=lambda: self.delete_technical_resource(tree))
                delete_resource_btn.pack(side=tk.RIGHT, padx=5)
            
            # ملاحظات عامة
            notes_frame = tk.LabelFrame(scrollable_frame,
                                      text="ملاحظات عامة",
                                      font=self.arabic_font_bold,
                                      fg="white",
                                      bg="#3C1361")
            notes_frame.pack(fill="x", padx=20, pady=10)
            
            entries["ملاحظات عامة"] = tk.Text(notes_frame, 
                                             font=self.arabic_font,
                                             height=4,
                                             wrap=tk.WORD)
            entries["ملاحظات عامة"].pack(fill="x", padx=5, pady=5)
            
            # التوصيات
            recommendations_frame = tk.LabelFrame(scrollable_frame,
                                                text="التوصيات",
                                                font=self.arabic_font_bold,
                                                fg="white",
                                                bg="#3C1361")
            recommendations_frame.pack(fill="x", padx=20, pady=10)
            
            if "التوصيات" in form_data:
                for rec_key, rec_value in form_data["التوصيات"].items():
                    rec_frame = tk.Frame(recommendations_frame, bg="#3C1361")
                    rec_frame.pack(fill="x", padx=5, pady=5)
                    
                    tk.Label(rec_frame, text=f"{rec_key}:", 
                            font=self.arabic_font_bold, fg="#90EE90", bg="#3C1361").pack(anchor="e")
                    entries[rec_key] = tk.Text(rec_frame, 
                                             font=self.arabic_font,
                                             height=2,
                                             wrap=tk.WORD)
                    entries[rec_key].pack(fill="x", pady=2)
            
            # الاعتماد
            approval_frame = tk.LabelFrame(scrollable_frame,
                                         text="الاعتماد",
                                         font=self.arabic_font_bold,
                                         fg="white",
                                         bg="#3C1361")
            approval_frame.pack(fill="x", padx=20, pady=10)
            
            if "الاعتماد" in form_data:
                for field in form_data["الاعتماد"]:
                    field_frame = tk.Frame(approval_frame, bg="#3C1361")
                    field_frame.pack(fill="x", padx=5, pady=5)
                    
                    tk.Label(field_frame, text=f"{field}:", 
                            font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                    entries[field] = tk.Entry(field_frame, font=self.arabic_font)
                    entries[field].pack(fill="x", pady=2)
        
        # التعبئة والتمرير
        canvas.pack(side="right", fill="both", expand=True)
        scrollbar.pack(side="left", fill="y")
        
        # أزرار التحكم
        btn_frame = tk.Frame(parent, bg="#3C1361")
        btn_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
        
        save_btn = tk.Button(btn_frame, 
                            text="حفظ التقرير",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#4CAF50",
                            width=20,
                            command=lambda: self.save_technical_resources_evaluation(form_name, entries))
        save_btn.pack(pady=5)
        
        update_btn = tk.Button(btn_frame, 
                              text="تحديث البيانات",
                              font=self.arabic_font_bold,
                              fg="white",
                              bg="#5A2A9C",
                              width=20,
                              command=lambda: self.update_technical_resources_evaluation(form_name, entries))
        update_btn.pack(pady=5)
        
        pdf_btn = tk.Button(btn_frame, 
                           text="تصدير إلى PDF",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#5A2A9C",
                           width=20,
                           command=lambda: self.export_form_to_pdf(form_name))
        pdf_btn.pack(pady=5)
        
        clear_btn = tk.Button(btn_frame, 
                             text="مسح البيانات",
                             font=self.arabic_font_bold,
                             fg="white",
                             bg="#8B0000",
                             width=20,
                             command=lambda: self.clear_technical_resources_evaluation(entries))
        clear_btn.pack(pady=5)
        
        # ربط عجلة الماوس بالتمرير
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
    
    # Button handler methods for QP-06.4 forms
    
    def save_exam_room_setup(self, form_name, entries):
        """Save exam room setup data"""
        try:
            data = {}
            for key, widget in entries.items():
                if key == "checklist_tree":
                    # Handle checklist tree data
                    checklist_data = []
                    for item in widget.get_children():
                        values = widget.item(item)["values"]
                        checklist_data.append(values)
                    data[key] = checklist_data
                elif hasattr(widget, 'get'):
                    data[key] = widget.get()
            
            # Save to database
            success = self.db_manager.save_form_data(
                form_name=form_name,
                data=[data],
                user_id=self.current_user['id']
            )
            
            if success:
                messagebox.showinfo("تم الحفظ", "تم حفظ نموذج تجهيز قاعات الامتحانات بنجاح")
                self.status_var.set(f"تم حفظ {form_name} بنجاح")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات: {str(e)}")
    
    def update_exam_room_setup(self, form_name, entries):
        """Update exam room setup data"""
        try:
            self.refresh_forms_data()
            messagebox.showinfo("تم التحديث", "تم تحديث نموذج تجهيز قاعات الامتحانات بنجاح")
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تحديث البيانات: {str(e)}")
    
    def clear_exam_room_setup(self, entries):
        """Clear exam room setup data"""
        if messagebox.askyesno("تأكيد المسح", "هل تريد مسح جميع بيانات النموذج؟"):
            for key, widget in entries.items():
                if key == "checklist_tree":
                    # Clear tree
                    for item in widget.get_children():
                        widget.delete(item)
                elif hasattr(widget, 'delete'):
                    widget.delete(0, tk.END)
            messagebox.showinfo("تم المسح", "تم مسح بيانات النموذج")
    
    def save_exam_environment_review(self, form_name, entries):
        """Save exam environment review data"""
        try:
            data = {}
            for key, widget in entries.items():
                if key == "elements_tree":
                    # Handle elements tree data
                    elements_data = []
                    for item in widget.get_children():
                        values = widget.item(item)["values"]
                        elements_data.append(values)
                    data[key] = elements_data
                elif hasattr(widget, 'get'):
                    if isinstance(widget, tk.Text):
                        data[key] = widget.get("1.0", tk.END).strip()
                    else:
                        data[key] = widget.get()
            
            # Save to database
            success = self.db_manager.save_form_data(
                form_name=form_name,
                data=[data],
                user_id=self.current_user['id']
            )
            
            if success:
                messagebox.showinfo("تم الحفظ", "تم حفظ تقرير مراجعة بيئة الامتحانات بنجاح")
                self.status_var.set(f"تم حفظ {form_name} بنجاح")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات: {str(e)}")
    
    def update_exam_environment_review(self, form_name, entries):
        """Update exam environment review data"""
        try:
            self.refresh_forms_data()
            messagebox.showinfo("تم التحديث", "تم تحديث تقرير مراجعة بيئة الامتحانات بنجاح")
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تحديث البيانات: {str(e)}")
    
    def clear_exam_environment_review(self, entries):
        """Clear exam environment review data"""
        if messagebox.askyesno("تأكيد المسح", "هل تريد مسح جميع بيانات التقرير؟"):
            for key, widget in entries.items():
                if key == "elements_tree":
                    # Clear tree
                    for item in widget.get_children():
                        widget.delete(item)
                elif hasattr(widget, 'delete'):
                    if isinstance(widget, tk.Text):
                        widget.delete("1.0", tk.END)
                    else:
                        widget.delete(0, tk.END)
            messagebox.showinfo("تم المسح", "تم مسح بيانات التقرير")
    
    def save_technical_resources_evaluation(self, form_name, entries):
        """Save technical resources evaluation data"""
        try:
            data = {}
            for key, widget in entries.items():
                if key == "resources_tree":
                    # Handle resources tree data
                    resources_data = []
                    for item in widget.get_children():
                        values = widget.item(item)["values"]
                        resources_data.append(values)
                    data[key] = resources_data
                elif hasattr(widget, 'get'):
                    if isinstance(widget, tk.Text):
                        data[key] = widget.get("1.0", tk.END).strip()
                    else:
                        data[key] = widget.get()
            
            # Save to database
            success = self.db_manager.save_form_data(
                form_name=form_name,
                data=[data],
                user_id=self.current_user['id']
            )
            
            if success:
                messagebox.showinfo("تم الحفظ", "تم حفظ تقرير تقييم الموارد التقنية بنجاح")
                self.status_var.set(f"تم حفظ {form_name} بنجاح")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات: {str(e)}")
    
    def update_technical_resources_evaluation(self, form_name, entries):
        """Update technical resources evaluation data"""
        try:
            self.refresh_forms_data()
            messagebox.showinfo("تم التحديث", "تم تحديث تقرير تقييم الموارد التقنية بنجاح")
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تحديث البيانات: {str(e)}")
    
    def clear_technical_resources_evaluation(self, entries):
        """Clear technical resources evaluation data"""
        if messagebox.askyesno("تأكيد المسح", "هل تريد مسح جميع بيانات التقرير؟"):
            for key, widget in entries.items():
                if key == "resources_tree":
                    # Clear tree
                    for item in widget.get_children():
                        widget.delete(item)
                elif hasattr(widget, 'delete'):
                    if isinstance(widget, tk.Text):
                        widget.delete("1.0", tk.END)
                    else:
                        widget.delete(0, tk.END)
            messagebox.showinfo("تم المسح", "تم مسح بيانات التقرير")
    
    def add_technical_resource(self, tree):
        """Add a new technical resource to the tree"""
        # Create simple dialog for adding resource
        dialog = tk.Toplevel()
        dialog.title("إضافة مورد تقني")
        dialog.geometry("400x300")
        dialog.configure(bg="#2D0A4D")
        
        entries = {}
        fields = ["اسم المورد/ الموديل", "حالة التشغيل", "تاريخ اخر صيانة", "ملاحظات"]
        
        for field in fields:
            frame = tk.Frame(dialog, bg="#3C1361")
            frame.pack(fill="x", padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "حالة التشغيل":
                entries[field] = ttk.Combobox(frame, 
                                            values=["جيد", "متوسط", "متعطل"],
                                            font=self.arabic_font)
            else:
                entries[field] = tk.Entry(frame, font=self.arabic_font)
            entries[field].pack(fill="x", pady=2)
        
        def save_resource():
            values = []
            # Add sequential number
            values.append(len(tree.get_children()) + 1)
            
            for field in fields:
                values.append(entries[field].get())
            
            tree.insert("", tk.END, values=values)
            dialog.destroy()
        
        save_btn = tk.Button(dialog, text="حفظ", command=save_resource,
                           font=self.arabic_font_bold, fg="white", bg="#4CAF50")
        save_btn.pack(pady=10)
    
    def edit_technical_resource(self, tree):
        """Edit selected technical resource"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى اختيار مورد للتعديل")
            return
        
        item = selected[0]
        current_values = tree.item(item)["values"]
        
        # Create edit dialog similar to add dialog
        dialog = tk.Toplevel()
        dialog.title("تعديل مورد تقني")
        dialog.geometry("400x300")
        dialog.configure(bg="#2D0A4D")
        
        entries = {}
        fields = ["اسم المورد/ الموديل", "حالة التشغيل", "تاريخ اخر صيانة", "ملاحظات"]
        
        for i, field in enumerate(fields):
            frame = tk.Frame(dialog, bg="#3C1361")
            frame.pack(fill="x", padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "حالة التشغيل":
                entries[field] = ttk.Combobox(frame, 
                                            values=["جيد", "متوسط", "متعطل"],
                                            font=self.arabic_font)
            else:
                entries[field] = tk.Entry(frame, font=self.arabic_font)
            
            entries[field].pack(fill="x", pady=2)
            
            # Set current value
            if i + 1 < len(current_values):
                if field == "حالة التشغيل":
                    entries[field].set(current_values[i + 1])
                else:
                    entries[field].insert(0, current_values[i + 1])
        
        def save_changes():
            values = [current_values[0]]  # Keep the sequential number
            
            for field in fields:
                values.append(entries[field].get())
            
            tree.item(item, values=values)
            dialog.destroy()
        
        save_btn = tk.Button(dialog, text="حفظ التغييرات", command=save_changes,
                           font=self.arabic_font_bold, fg="white", bg="#4CAF50")
        save_btn.pack(pady=10)
    
    def delete_technical_resource(self, tree):
        """Delete selected technical resource"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى اختيار مورد للحذف")
            return
        
        if messagebox.askyesno("تأكيد الحذف", "هل أنت متأكد من حذف هذا المورد؟"):
            tree.delete(selected[0])
    
    # QP-08 Form Creation Methods - Management System Requirements
    
    # QP-08.1 Form Creation Methods - اعتماد المقيمين
    
    def create_evaluator_accreditation_application_form(self, parent, form_name):
        """Create evaluator accreditation application form for QF-08-01-01"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-08-01-01 نموذج طلب اعتماد مقيم",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # بيانات الجهة/الشخص
        entity_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        entity_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(entity_frame, text="بيانات الجهة/الشخص",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        entity_fields = [
            "اسم الجهة/الشخص", "النوع (فرد/مؤسسة)", "رقم الهوية/السجل التجاري",
            "الجنسية", "العنوان الكامل", "المدينة", "الرمز البريدي",
            "رقم الهاتف", "رقم الفاكس", "البريد الإلكتروني", "الموقع الإلكتروني",
            "اسم الشخص المسؤول", "منصبه", "رقم هاتفه المباشر", "بريده الإلكتروني"
        ]
        
        for field in entity_fields:
            field_frame = tk.Frame(entity_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # نوع الاعتماد
        type_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        type_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(type_frame, text="نوع الاعتماد",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        type_fields = [
            "نوع الاعتماد المطلوب", "مجال الاعتماد", "التخصص الفرعي",
            "المعايير المرجعية", "النطاق الجغرافي للاعتماد", "مدة الاعتماد المطلوبة"
        ]
        
        for field in type_fields:
            field_frame = tk.Frame(type_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # تفاصيل البرنامج
        program_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        program_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(program_frame, text="تفاصيل البرنامج",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        program_fields = [
            "اسم البرنامج", "وصف البرنامج", "الأهداف", "الفئة المستهدفة",
            "متطلبات القبول", "مدة البرنامج", "طريقة التقييم", "شهادة الإنجاز"
        ]
        
        for field in program_fields:
            field_frame = tk.Frame(program_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["وصف البرنامج", "الأهداف", "متطلبات القبول"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # الوثائق المرفقة
        docs_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        docs_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(docs_frame, text="الوثائق المرفقة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Document checklist
        doc_list = [
            "نسخة من الهوية الوطنية أو جواز السفر",
            "السجل التجاري (للمؤسسات)",
            "ترخيص مزاولة المهنة (إن وجد)",
            "السيرة الذاتية",
            "المؤهلات العلمية",
            "شهادات الخبرة",
            "شهادات التدريب ذات الصلة",
            "عينات من الأعمال السابقة",
            "خطابات التوصية",
            "إثبات دفع الرسوم"
        ]
        
        doc_vars = {}
        for doc in doc_list:
            doc_frame = tk.Frame(docs_frame, bg="#3C1361")
            doc_frame.pack(fill="x", padx=10, pady=2)
            
            var = tk.BooleanVar()
            cb = tk.Checkbutton(doc_frame, text=f"☐ {doc}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361")
            cb.pack(anchor="e")
            doc_vars[doc] = var
            entries[f"وثيقة_{doc}"] = var
        
        # إقرار مقدم الطلب
        declaration_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        declaration_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(declaration_frame, text="إقرار مقدم الطلب",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        declaration_text = ("أقر أنا الموقع أدناه بأن جميع المعلومات الواردة في هذا الطلب صحيحة ودقيقة، "
                          "وأتعهد بإبلاغ الجهة المختصة بأي تغييرات قد تطرأ على هذه المعلومات. "
                          "كما أوافق على الالتزام بجميع المتطلبات والمعايير المحددة للحصول على الاعتماد "
                          "والمحافظة عليه.")
        
        tk.Label(declaration_frame, text=declaration_text, wraplength=600,
                font=self.arabic_font, fg="white", bg="#3C1361", justify="right").pack(anchor="e", padx=10, pady=5)
        
        declaration_fields = ["اسم مقدم الطلب", "التوقيع", "التاريخ"]
        
        for field in declaration_fields:
            field_frame = tk.Frame(declaration_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5)
            entries[field] = entry
        
        # للاستخدام الداخلي
        internal_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        internal_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(internal_frame, text="للاستخدام الداخلي",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        internal_fields = [
            "رقم الطلب", "تاريخ الاستلام", "الموظف المستلم",
            "حالة الطلب", "ملاحظات أولية", "تاريخ المراجعة الأولية"
        ]
        
        for field in internal_fields:
            field_frame = tk.Frame(internal_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "حالة الطلب":
                status_var = tk.StringVar()
                status_combo = tk.OptionMenu(field_frame, status_var, 
                                           "مستلم", "قيد المراجعة", "مكتمل", "ناقص", "مرفوض")
                status_combo.config(font=self.arabic_font, bg="white")
                status_combo.pack(anchor="e", padx=5)
                entry = status_var
            elif field == "ملاحظات أولية":
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
                entry.pack(anchor="e", padx=5, fill="x")
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
                entry.pack(anchor="e", padx=5)
            
            entries[field] = entry
            
            if field == "مبررات الطلب":
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Section 4: Documents (المستندات المرفقة)
        docs_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        docs_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(docs_frame, text="رابعاً: المستندات المرفقة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        documents = ["صورة الهوية", "المؤهلات العلمية", "شهادات الخبرة", "شهادات التدريب", "رسائل التوصية"]
        
        entries["المستندات المرفقة"] = {}
        for doc in documents:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(docs_frame, text=f"☐ {doc}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["المستندات المرفقة"][doc] = var
        
        # Section 5: Declaration (إقرار المتقدم)
        declaration_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        declaration_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(declaration_frame, text="خامساً: إقرار المتقدم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        declarations = [
            "إقرار بصحة البيانات",
            "الالتزام بمعايير التقييم",
            "الالتزام بالسرية والحيادية"
        ]
        
        entries["الإقرار"] = {}
        for declaration in declarations:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(declaration_frame, text=f"☐ {declaration}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["الإقرار"][declaration] = var
        
        # Signature fields
        sig_frame = tk.Frame(declaration_frame, bg="#3C1361")
        sig_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(sig_frame, text="• توقيع المتقدم:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        sig_entry = tk.Entry(sig_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
        sig_entry.pack(anchor="e", padx=5)
        entries["توقيع المتقدم"] = sig_entry
        
        tk.Label(sig_frame, text="• التاريخ:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        date_entry = tk.Entry(sig_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
        date_entry.pack(anchor="e", padx=5)
        entries["تاريخ التوقيع"] = date_entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_evaluator_application,
                                update_func=self.update_evaluator_application,
                                clear_func=self.clear_evaluator_application)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_evaluator_assessment_record_form(self, parent, form_name):
        """Create evaluator assessment record form for QF-08-01-02"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-08-01-02 سجل تقييم طلب اعتماد المقيم",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # البيانات العامة
        general_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        general_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(general_frame, text="البيانات العامة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        general_fields = [
            "اسم مقدم الطلب", "رقم الطلب", "تاريخ الطلب", "نوع الاعتماد المطلوب",
            "المجال التخصصي", "أعضاء لجنة التقييم", "تاريخ التقييم", "مكان التقييم"
        ]
        
        for field in general_fields:
            field_frame = tk.Frame(general_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "أعضاء لجنة التقييم":
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # معايير التقييم (جدول)
        criteria_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        criteria_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(criteria_frame, text="معايير التقييم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Create table headers
        headers_frame = tk.Frame(criteria_frame, bg="#3C1361")
        headers_frame.pack(fill="x", padx=10, pady=2)
        
        headers = ["المعيار", "الوزن النسبي", "الدرجة المستحقة", "الدرجة الكاملة", "الملاحظات"]
        for header in headers:
            tk.Label(headers_frame, text=header, font=self.arabic_font_bold, 
                    fg="#FFD700", bg="#3C1361", relief="solid", bd=1, width=15).pack(side="right", padx=1)
        
        # Assessment criteria rows
        criteria_list = [
            "المؤهلات العلمية والمهنية",
            "الخبرة في مجال التخصص",
            "المعرفة بمعايير ومتطلبات الاعتماد",
            "مهارات التقييم والمراجعة",
            "النزاهة والحيادية",
            "مهارات التواصل",
            "القدرة على العمل ضمن فريق",
            "الالتزام بأخلاقيات المهنة"
        ]
        
        for criterion in criteria_list:
            row_frame = tk.Frame(criteria_frame, bg="#3C1361")
            row_frame.pack(fill="x", padx=10, pady=1)
            
            # المعيار
            tk.Label(row_frame, text=criterion, font=self.arabic_font, 
                    fg="white", bg="#3C1361", relief="solid", bd=1, width=25).pack(side="right", padx=1)
            
            # الوزن النسبي
            weight_entry = tk.Entry(row_frame, font=self.arabic_font, width=10, relief="solid", bd=1)
            weight_entry.pack(side="right", padx=1)
            entries[f"{criterion}_الوزن"] = weight_entry
            
            # الدرجة المستحقة
            earned_entry = tk.Entry(row_frame, font=self.arabic_font, width=10, relief="solid", bd=1)
            earned_entry.pack(side="right", padx=1)
            entries[f"{criterion}_الدرجة_المستحقة"] = earned_entry
            
            # الدرجة الكاملة
            full_entry = tk.Entry(row_frame, font=self.arabic_font, width=10, relief="solid", bd=1)
            full_entry.pack(side="right", padx=1)
            entries[f"{criterion}_الدرجة_الكاملة"] = full_entry
            
            # الملاحظات
            notes_entry = tk.Entry(row_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            notes_entry.pack(side="right", padx=1)
            entries[f"{criterion}_الملاحظات"] = notes_entry
        
        # التوصية النهائية
        recommendation_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        recommendation_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(recommendation_frame, text="التوصية النهائية",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # النتيجة الإجمالية
        total_frame = tk.Frame(recommendation_frame, bg="#3C1361")
        total_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(total_frame, text="• النتيجة الإجمالية:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        total_entry = tk.Entry(total_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
        total_entry.pack(anchor="e", padx=5)
        entries["النتيجة الإجمالية"] = total_entry
        
        # التوصية
        rec_frame = tk.Frame(recommendation_frame, bg="#3C1361")
        rec_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(rec_frame, text="• التوصية:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        rec_var = tk.StringVar()
        rec_options = ["منح الاعتماد", "منح الاعتماد مشروط", "رفض الاعتماد", "إعادة التقييم"]
        rec_combo = tk.OptionMenu(rec_frame, rec_var, *rec_options)
        rec_combo.config(font=self.arabic_font, bg="white")
        rec_combo.pack(anchor="e", padx=5)
        entries["التوصية"] = rec_var
        
        # نطاق الاعتماد المقترح
        scope_frame = tk.Frame(recommendation_frame, bg="#3C1361")
        scope_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(scope_frame, text="• نطاق الاعتماد المقترح:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        scope_text = tk.Text(scope_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
        scope_text.pack(anchor="e", padx=5, fill="x")
        entries["نطاق الاعتماد المقترح"] = scope_text
        
        # مدة الاعتماد المقترحة
        duration_frame = tk.Frame(recommendation_frame, bg="#3C1361")
        duration_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(duration_frame, text="• مدة الاعتماد المقترحة:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        duration_entry = tk.Entry(duration_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
        duration_entry.pack(anchor="e", padx=5)
        entries["مدة الاعتماد المقترحة"] = duration_entry
        
        # شروط الاعتماد (إن وجدت)
        conditions_frame = tk.Frame(recommendation_frame, bg="#3C1361")
        conditions_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(conditions_frame, text="• شروط الاعتماد (إن وجدت):", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        conditions_text = tk.Text(conditions_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
        conditions_text.pack(anchor="e", padx=5, fill="x")
        entries["شروط الاعتماد"] = conditions_text
        
        # توقيع اللجنة
        signature_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        signature_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(signature_frame, text="توقيع اللجنة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        committee_members = [
            "رئيس اللجنة",
            "العضو الأول",
            "العضو الثاني",
            "العضو الثالث"
        ]
        
        for member in committee_members:
            member_frame = tk.Frame(signature_frame, bg="#3C1361")
            member_frame.pack(fill="x", padx=10, pady=2)
            
            # Name
            name_frame = tk.Frame(member_frame, bg="#3C1361")
            name_frame.pack(side="right", padx=10)
            tk.Label(name_frame, text=f"• {member}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            name_entry = tk.Entry(name_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            name_entry.pack(side="right", padx=5)
            entries[f"{member}_الاسم"] = name_entry
            
            # Signature
            sig_frame = tk.Frame(member_frame, bg="#3C1361")
            sig_frame.pack(side="right", padx=10)
            tk.Label(sig_frame, text="التوقيع:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            sig_entry = tk.Entry(sig_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            sig_entry.pack(side="right", padx=5)
            entries[f"{member}_التوقيع"] = sig_entry
        
        # التاريخ
        date_frame = tk.Frame(signature_frame, bg="#3C1361")
        date_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(date_frame, text="• تاريخ التقييم:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        date_entry = tk.Entry(date_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
        date_entry.pack(anchor="e", padx=5)
        entries["تاريخ التقييم_النهائي"] = date_entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_evaluator_assessment,
                                update_func=self.update_evaluator_assessment,
                                clear_func=self.clear_evaluator_assessment)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_evaluator_accreditation_status_form(self, parent, form_name):
        """Create evaluator accreditation status form for QF-08-01-03"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-08-01-03 سجل قرار اعتماد المقيم",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # البيانات العامة
        general_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        general_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(general_frame, text="البيانات العامة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        general_fields = [
            "اسم مقدم الطلب", "رقم الطلب", "تاريخ الطلب", "نوع الاعتماد",
            "المجال التخصصي", "تاريخ التقييم", "رقم القرار", "تاريخ القرار"
        ]
        
        for field in general_fields:
            field_frame = tk.Frame(general_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # تفاصيل القرار (جدول)
        decision_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        decision_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(decision_frame, text="تفاصيل القرار",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Create table headers
        headers_frame = tk.Frame(decision_frame, bg="#3C1361")
        headers_frame.pack(fill="x", padx=10, pady=2)
        
        headers = ["البند", "التفاصيل", "الملاحظات"]
        for header in headers:
            tk.Label(headers_frame, text=header, font=self.arabic_font_bold, 
                    fg="#FFD700", bg="#3C1361", relief="solid", bd=1, width=20).pack(side="right", padx=1)
        
        # Decision details rows
        decision_items = [
            "نوع القرار",
            "نطاق الاعتماد الممنوح",
            "مدة الاعتماد",
            "تاريخ البداية",
            "تاريخ الانتهاء",
            "الشروط والقيود"
        ]
        
        for item in decision_items:
            row_frame = tk.Frame(decision_frame, bg="#3C1361")
            row_frame.pack(fill="x", padx=10, pady=1)
            
            # البند
            tk.Label(row_frame, text=item, font=self.arabic_font, 
                    fg="white", bg="#3C1361", relief="solid", bd=1, width=20).pack(side="right", padx=1)
            
            # التفاصيل
            details_entry = tk.Entry(row_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
            details_entry.pack(side="right", padx=1)
            entries[f"{item}_التفاصيل"] = details_entry
            
            # الملاحظات
            notes_entry = tk.Entry(row_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            notes_entry.pack(side="right", padx=1)
            entries[f"{item}_الملاحظات"] = notes_entry
        
        # تفاصيل الأسباب
        reasons_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        reasons_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(reasons_frame, text="تفاصيل الأسباب",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # أسباب منح الاعتماد
        grant_frame = tk.Frame(reasons_frame, bg="#3C1361")
        grant_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(grant_frame, text="• أسباب منح الاعتماد:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        grant_text = tk.Text(grant_frame, font=self.arabic_font, height=4, width=50, relief="solid", bd=1)
        grant_text.pack(anchor="e", padx=5, fill="x")
        entries["أسباب منح الاعتماد"] = grant_text
        
        # أسباب الرفض (إن وجدت)
        reject_frame = tk.Frame(reasons_frame, bg="#3C1361")
        reject_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(reject_frame, text="• أسباب الرفض (إن وجدت):", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        reject_text = tk.Text(reject_frame, font=self.arabic_font, height=4, width=50, relief="solid", bd=1)
        reject_text.pack(anchor="e", padx=5, fill="x")
        entries["أسباب الرفض"] = reject_text
        
        # الشروط المفروضة
        conditions_frame = tk.Frame(reasons_frame, bg="#3C1361")
        conditions_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(conditions_frame, text="• الشروط المفروضة:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        conditions_text = tk.Text(conditions_frame, font=self.arabic_font, height=4, width=50, relief="solid", bd=1)
        conditions_text.pack(anchor="e", padx=5, fill="x")
        entries["الشروط المفروضة"] = conditions_text
        
        # الإجراءات التصحيحية
        corrective_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        corrective_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(corrective_frame, text="الإجراءات التصحيحية",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # الإجراءات المطلوبة
        required_frame = tk.Frame(corrective_frame, bg="#3C1361")
        required_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(required_frame, text="• الإجراءات المطلوبة:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        required_text = tk.Text(required_frame, font=self.arabic_font, height=4, width=50, relief="solid", bd=1)
        required_text.pack(anchor="e", padx=5, fill="x")
        entries["الإجراءات المطلوبة"] = required_text
        
        # المهلة الزمنية للتنفيذ
        deadline_frame = tk.Frame(corrective_frame, bg="#3C1361")
        deadline_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(deadline_frame, text="• المهلة الزمنية للتنفيذ:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        deadline_entry = tk.Entry(deadline_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
        deadline_entry.pack(anchor="e", padx=5, fill="x")
        entries["المهلة الزمنية للتنفيذ"] = deadline_entry
        
        # المسؤول عن المتابعة
        responsible_frame = tk.Frame(corrective_frame, bg="#3C1361")
        responsible_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(responsible_frame, text="• المسؤول عن المتابعة:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        responsible_entry = tk.Entry(responsible_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
        responsible_entry.pack(anchor="e", padx=5, fill="x")
        entries["المسؤول عن المتابعة"] = responsible_entry
        
        # التوصية النهائية
        final_recommendation_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        final_recommendation_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(final_recommendation_frame, text="التوصية النهائية",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # نوع التوصية
        recommendation_type_frame = tk.Frame(final_recommendation_frame, bg="#3C1361")
        recommendation_type_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(recommendation_type_frame, text="• نوع التوصية:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        rec_var = tk.StringVar()
        rec_options = ["منح الاعتماد", "منح الاعتماد مشروط", "رفض الاعتماد", "تأجيل القرار", "إعادة التقييم"]
        rec_combo = tk.OptionMenu(recommendation_type_frame, rec_var, *rec_options)
        rec_combo.config(font=self.arabic_font, bg="white")
        rec_combo.pack(anchor="e", padx=5)
        entries["نوع التوصية"] = rec_var
        
        # تبرير التوصية
        justification_frame = tk.Frame(final_recommendation_frame, bg="#3C1361")
        justification_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(justification_frame, text="• تبرير التوصية:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        justification_text = tk.Text(justification_frame, font=self.arabic_font, height=4, width=50, relief="solid", bd=1)
        justification_text.pack(anchor="e", padx=5, fill="x")
        entries["تبرير التوصية"] = justification_text
        
        # توقيع واعتماد القرار
        approval_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        approval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(approval_frame, text="توقيع واعتماد القرار",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # معد التقرير
        preparer_frame = tk.Frame(approval_frame, bg="#3C1361")
        preparer_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(preparer_frame, text="معد التقرير:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        preparer_fields = ["الاسم", "المنصب", "التوقيع", "التاريخ"]
        for field in preparer_fields:
            field_frame = tk.Frame(preparer_frame, bg="#3C1361")
            field_frame.pack(side="right", padx=5)
            
            tk.Label(field_frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack()
            entry = tk.Entry(field_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
            entry.pack()
            entries[f"معد التقرير_{field}"] = entry
        
        # المراجع
        reviewer_frame = tk.Frame(approval_frame, bg="#3C1361")
        reviewer_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(reviewer_frame, text="المراجع:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        reviewer_fields = ["الاسم", "المنصب", "التوقيع", "التاريخ"]
        for field in reviewer_fields:
            field_frame = tk.Frame(reviewer_frame, bg="#3C1361")
            field_frame.pack(side="right", padx=5)
            
            tk.Label(field_frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack()
            entry = tk.Entry(field_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
            entry.pack()
            entries[f"المراجع_{field}"] = entry
        
        # المعتمد
        approver_frame = tk.Frame(approval_frame, bg="#3C1361")
        approver_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(approver_frame, text="المعتمد:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        approver_fields = ["الاسم", "المنصب", "التوقيع", "التاريخ"]
        for field in approver_fields:
            field_frame = tk.Frame(approver_frame, bg="#3C1361")
            field_frame.pack(side="right", padx=5)
            
            tk.Label(field_frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack()
            entry = tk.Entry(field_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
            entry.pack()
            entries[f"المعتمد_{field}"] = entry
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "حالة الاعتماد الحالية":
                # Status selection
                status_var = tk.StringVar()
                status_combo = tk.OptionMenu(field_frame, status_var, 
                                           "نشط", "منتهي الصلاحية", "مُجمد", "مُلغى", "قيد المراجعة")
                status_combo.config(font=self.arabic_font, bg="white")
                status_combo.pack(anchor="e", padx=5)
                entry = status_var
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
                entry.pack(anchor="e", padx=5, fill="x")
            
            entries[field] = entry
        
        # Performance History
        performance_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        performance_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(performance_frame, text="سجل الأداء",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        performance_fields = [
            "عدد التقييمات المنجزة", "آخر تقييم تم إجراؤه", "تقييم الأداء العام",
            "الشكاوى المسجلة", "الإجراءات التصحيحية المطلوبة"
        ]
        
        for field in performance_fields:
            field_frame = tk.Frame(performance_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "تقييم الأداء العام":
                # Rating scale
                rating_frame = tk.Frame(field_frame, bg="#3C1361")
                rating_frame.pack(anchor="e", padx=5)
                
                rating_var = tk.StringVar()
                ratings = ["ممتاز", "جيد جداً", "جيد", "مقبول", "ضعيف"]
                for rating in ratings:
                    rb = tk.Radiobutton(rating_frame, text=rating, variable=rating_var, value=rating,
                                      font=self.arabic_font, fg="white", bg="#3C1361")
                    rb.pack(side="right", padx=5)
                entry = rating_var
            elif field in ["الشكاوى المسجلة", "الإجراءات التصحيحية المطلوبة"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            
            if field not in ["تقييم الأداء العام"]:
                entry.pack(anchor="e", padx=5, fill="x")
            
            entries[field] = entry
        
        # Training and Development
        training_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        training_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(training_frame, text="التدريب والتطوير",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        training_fields = [
            "آخر برنامج تدريبي حضره", "تاريخ التدريب", "البرامج التدريبية المطلوبة",
            "خطة التطوير المستقبلية"
        ]
        
        for field in training_fields:
            field_frame = tk.Frame(training_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["البرامج التدريبية المطلوبة", "خطة التطوير المستقبلية"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Status Update
        update_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        update_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(update_frame, text="تحديث الحالة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        update_fields = [
            "تاريخ آخر تحديث", "سبب التحديث", "الحالة الجديدة", "ملاحظات التحديث"
        ]
        
        for field in update_fields:
            field_frame = tk.Frame(update_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "الحالة الجديدة":
                status_var = tk.StringVar()
                status_combo = tk.OptionMenu(field_frame, status_var, 
                                           "نشط", "منتهي الصلاحية", "مُجمد", "مُلغى", "قيد المراجعة")
                status_combo.config(font=self.arabic_font, bg="white")
                status_combo.pack(anchor="e", padx=5)
                entry = status_var
            elif field in ["سبب التحديث", "ملاحظات التحديث"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
                entry.pack(anchor="e", padx=5, fill="x")
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
                entry.pack(anchor="e", padx=5, fill="x")
            
            entries[field] = entry
        
        # Responsible Officer
        officer_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        officer_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(officer_frame, text="المسؤول عن المتابعة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        officer_fields = ["اسم المسؤول", "المنصب", "التوقيع", "التاريخ"]
        
        for field in officer_fields:
            field_frame = tk.Frame(officer_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5)
            entries[field] = entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_evaluator_status,
                                update_func=self.update_evaluator_status,
                                clear_func=self.clear_evaluator_status)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    # QP-08.2 Form Creation Methods - اعتماد المراكز
    
    def create_center_accreditation_application_form(self, parent, form_name):
        """Create center accreditation application form for QF-08-02-01"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-08-02-01 نموذج طلب اعتماد",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # أولاً: بيانات مقدم الطلب
        applicant_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        applicant_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(applicant_frame, text="أولاً: بيانات مقدم الطلب",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        applicant_fields = [
            "الاسم الكامل", "الصفة / الوظيفة", "اسم الجهة / المؤسسة", 
            "العنوان", "رقم الهاتف", "البريد الإلكتروني", "تاريخ تقديم الطلب"
        ]
        
        for field in applicant_fields:
            field_frame = tk.Frame(applicant_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # ثانيًا: نوع الاعتماد المطلوب
        accreditation_type_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        accreditation_type_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(accreditation_type_frame, text="ثانيًا: نوع الاعتماد المطلوب",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        accreditation_types = [
            "اعتماد مدرب",
            "اعتماد مركز امتحانات",
            "اعتماد جهة تقييم",
            "اعتماد وحدة داخلية",
            "أخرى"
        ]
        
        entries["نوع الاعتماد"] = {}
        for acc_type in accreditation_types:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(accreditation_type_frame, text=f"☐ {acc_type}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["نوع الاعتماد"][acc_type] = var
        
        # أخرى field
        other_frame = tk.Frame(accreditation_type_frame, bg="#3C1361")
        other_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(other_frame, text="• أخرى (حدد):", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        other_entry = tk.Entry(other_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
        other_entry.pack(anchor="e", padx=5)
        entries["أخرى_تحديد"] = other_entry
        
        # ثالثًا: تفاصيل الجهة / الشخص المطلوب اعتماده
        details_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        details_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(details_frame, text="ثالثًا: تفاصيل الجهة / الشخص المطلوب اعتماده",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        details_fields = [
            "الاسم / الوحدة / الجهة", "الخبرة أو المؤهلات ذات الصلة", 
            "مدة العمل / التشغيل (بالسنوات)", "جهة الاعتماد السابقة (إن وجدت)"
        ]
        
        for field in details_fields:
            field_frame = tk.Frame(details_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "الخبرة أو المؤهلات ذات الصلة":
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # سابقًا تم الاعتماد من جهة أخرى؟
        previous_frame = tk.Frame(details_frame, bg="#3C1361")
        previous_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(previous_frame, text="• سابقًا تم الاعتماد من جهة أخرى؟", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        previous_var = tk.StringVar()
        yes_rb = tk.Radiobutton(previous_frame, text="نعم", variable=previous_var, value="نعم",
                              font=self.arabic_font, fg="white", bg="#3C1361")
        yes_rb.pack(side="right", padx=5)
        no_rb = tk.Radiobutton(previous_frame, text="لا", variable=previous_var, value="لا",
                             font=self.arabic_font, fg="white", bg="#3C1361")
        no_rb.pack(side="right", padx=5)
        entries["اعتماد سابق"] = previous_var
        
        # رابعًا: المستندات المرفقة
        docs_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        docs_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(docs_frame, text="رابعًا: المستندات المرفقة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        documents = [
            "السيرة الذاتية / ملف تعريفي",
            "شهادات الخبرة أو المؤهلات",
            "سجل الأداء السابق",
            "خطة العمل أو دليل الإجراءات",
            "إثبات الهوية أو الترخيص",
            "أخرى"
        ]
        
        entries["المستندات المرفقة"] = {}
        for doc in documents:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(docs_frame, text=f"☐ {doc}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["المستندات المرفقة"][doc] = var
        
        # أخرى field for documents
        docs_other_frame = tk.Frame(docs_frame, bg="#3C1361")
        docs_other_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(docs_other_frame, text="• أخرى (حدد):", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        docs_other_entry = tk.Entry(docs_other_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
        docs_other_entry.pack(anchor="e", padx=5)
        entries["مستندات_أخرى_تحديد"] = docs_other_entry
        
        # خامسًا: إقرار مقدم الطلب
        declaration_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        declaration_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(declaration_frame, text="خامسًا: إقرار مقدم الطلب",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        declaration_text = ("أقر بأن جميع البيانات أعلاه صحيحة وأني ألتزم بالشروط والمعايير المعتمدة في نظام الاعتماد، "
                          "وأفوض الجهة المعنية بالتحقق من أي بيانات واردة في هذا النموذج.")
        
        tk.Label(declaration_frame, text=declaration_text, wraplength=600,
                font=self.arabic_font, fg="white", bg="#3C1361", justify="right").pack(anchor="e", padx=10, pady=5)
        
        declaration_fields = ["اسم مقدم الطلب", "التوقيع", "التاريخ"]
        
        for field in declaration_fields:
            field_frame = tk.Frame(declaration_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5)
            entries[f"إقرار_{field}"] = entry
        
        # سادسًا: للمراجعة الداخلية
        review_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        review_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(review_frame, text="سادسًا: للمراجعة الداخلية",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Create review table
        review_items = [
            "جميع المستندات مكتملة",
            "الشروط الأساسية متوفرة",
            "الحاجة لمراجعة إضافية"
        ]
        
        entries["مراجعة داخلية"] = {}
        for item in review_items:
            item_frame = tk.Frame(review_frame, bg="#3C1361")
            item_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(item_frame, text=f"• {item}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            # Yes/No options
            choice_frame = tk.Frame(item_frame, bg="#3C1361")
            choice_frame.pack(anchor="e", padx=5)
            
            var = tk.StringVar()
            yes_rb = tk.Radiobutton(choice_frame, text="نعم", variable=var, value="نعم",
                                  font=self.arabic_font, fg="white", bg="#3C1361")
            yes_rb.pack(side="right", padx=5)
            no_rb = tk.Radiobutton(choice_frame, text="لا", variable=var, value="لا",
                                 font=self.arabic_font, fg="white", bg="#3C1361")
            no_rb.pack(side="right", padx=5)
            entries["مراجعة داخلية"][item] = var
            
            # Notes field
            notes_frame = tk.Frame(item_frame, bg="#3C1361")
            notes_frame.pack(anchor="e", padx=5, fill="x")
            
            tk.Label(notes_frame, text="الملاحظات:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            notes_entry = tk.Entry(notes_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
            notes_entry.pack(anchor="e", fill="x")
            entries["مراجعة داخلية"][f"{item}_ملاحظات"] = notes_entry
        
        # Reviewer details
        reviewer_frame = tk.Frame(review_frame, bg="#3C1361")
        reviewer_frame.pack(fill="x", padx=10, pady=5)
        
        reviewer_fields = ["اسم الموظف المراجع", "التوقيع", "التاريخ"]
        
        for field in reviewer_fields:
            field_frame = tk.Frame(reviewer_frame, bg="#3C1361")
            field_frame.pack(side="right", padx=10)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack()
            entry = tk.Entry(field_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            entry.pack()
            entries[f"مراجع_{field}"] = entry
            
            if field in ["نوع الخدمات المقدمة", "التخصصات المطلوبة"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Infrastructure and Resources
        infrastructure_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        infrastructure_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(infrastructure_frame, text="البنية التحتية والموارد",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        infrastructure_fields = [
            "المساحة الإجمالية", "عدد القاعات", "مواصفات القاعات", "التجهيزات التقنية",
            "المكتبة والمراجع", "أدوات التقييم المتاحة", "معدات السلامة"
        ]
        
        for field in infrastructure_fields:
            field_frame = tk.Frame(infrastructure_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["مواصفات القاعات", "التجهيزات التقنية", "المكتبة والمراجع", "أدوات التقييم المتاحة"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Human Resources
        hr_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        hr_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(hr_frame, text="الموارد البشرية",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        hr_fields = [
            "عدد الموظفين الإداريين", "عدد المقيمين المعتمدين", "عدد المقيمين تحت التدريب",
            "مؤهلات المقيمين", "برامج التدريب المتاحة", "نظام إدارة الموارد البشرية"
        ]
        
        for field in hr_fields:
            field_frame = tk.Frame(hr_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["مؤهلات المقيمين", "برامج التدريب المتاحة", "نظام إدارة الموارد البشرية"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Quality System
        quality_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        quality_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(quality_frame, text="نظام إدارة الجودة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        quality_fields = [
            "شهادة نظام الجودة", "دليل الجودة", "إجراءات التقييم", "نظام التوثيق",
            "برنامج المراجعة الداخلية", "إجراءات الشكاوى", "نظام التحسين المستمر"
        ]
        
        for field in quality_fields:
            field_frame = tk.Frame(quality_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["دليل الجودة", "إجراءات التقييم", "نظام التوثيق", "برنامج المراجعة الداخلية"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Supporting Documents
        docs_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        docs_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(docs_frame, text="المستندات الداعمة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        documents = [
            "السجل التجاري", "الترخيص البلدي", "شهادات المقيمين", "دليل الجودة",
            "إجراءات العمل", "تقرير التقييم الذاتي", "خطة العمل", "مخططات المبنى"
        ]
        
        entries["المستندات الداعمة"] = {}
        for doc in documents:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(docs_frame, text=f"☐ {doc}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["المستندات الداعمة"][doc] = var
        
        # Declaration and Commitment
        declaration_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        declaration_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(declaration_frame, text="الإقرار والالتزام",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        declarations = [
            "الالتزام بمعايير الاعتماد",
            "الالتزام بالشفافية والحيادية",
            "الالتزام بالتطوير المستمر",
            "الالتزام بالقوانين واللوائح"
        ]
        
        entries["الإقرار والالتزام"] = {}
        for declaration in declarations:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(declaration_frame, text=f"☐ {declaration}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["الإقرار والالتزام"][declaration] = var
        
        # Signature
        sig_frame = tk.Frame(declaration_frame, bg="#3C1361")
        sig_frame.pack(fill="x", padx=10, pady=10)
        
        # Manager signature
        manager_frame = tk.Frame(sig_frame, bg="#3C1361")
        manager_frame.pack(side="right", padx=20)
        
        tk.Label(manager_frame, text="• توقيع المدير المسؤول:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        manager_sig = tk.Entry(manager_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
        manager_sig.pack(anchor="e", padx=5)
        entries["توقيع المدير"] = manager_sig
        
        # Date
        date_frame = tk.Frame(sig_frame, bg="#3C1361")
        date_frame.pack(side="right", padx=20)
        
        tk.Label(date_frame, text="• التاريخ:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        date_entry = tk.Entry(date_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
        date_entry.pack(anchor="e", padx=5)
        entries["تاريخ التوقيع"] = date_entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_center_application,
                                update_func=self.update_center_application,
                                clear_func=self.clear_center_application)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_center_assessment_report_form(self, parent, form_name):
        """Create center assessment report form for QF-08-02-02"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-08-02-02 سجل التقييم والاختبار",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # أولاً: البيانات العامة
        general_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        general_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(general_frame, text="أولاً: البيانات العامة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        general_fields = [
            "اسم البرنامج / الشهادة / الغرض من التقييم",
            "تاريخ التقييم",
            "مكان التقييم",
            "اسم المقيم / اللجنة"
        ]
        
        for field in general_fields:
            field_frame = tk.Frame(general_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # نوع التقييم
        assessment_type_frame = tk.Frame(general_frame, bg="#3C1361")
        assessment_type_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(assessment_type_frame, text="• نوع التقييم:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        assessment_types = [
            "اختبار كتابي",
            "اختبار عملي", 
            "مقابلة",
            "مراجعة ملف",
            "أخرى"
        ]
        
        entries["نوع التقييم"] = {}
        for ass_type in assessment_types:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(assessment_type_frame, text=f"☐ {ass_type}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361")
            cb.pack(anchor="e", padx=10, pady=1)
            entries["نوع التقييم"][ass_type] = var
        
        # أخرى field for assessment type
        other_type_frame = tk.Frame(assessment_type_frame, bg="#3C1361")
        other_type_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(other_type_frame, text="أخرى (حدد):", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        other_type_entry = tk.Entry(other_type_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
        other_type_entry.pack(anchor="e", padx=5)
        entries["نوع_التقييم_أخرى"] = other_type_entry
        
        # ثانيًا: بيانات الأفراد الذين تم تقييمهم
        individuals_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        individuals_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(individuals_frame, text="ثانيًا: بيانات الأفراد الذين تم تقييمهم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Create table headers
        headers_frame = tk.Frame(individuals_frame, bg="#3C1361")
        headers_frame.pack(fill="x", padx=10, pady=2)
        
        headers = ["م", "الاسم الكامل", "الرقم التعريفي / الكود", "نوع التقييم", "الدرجة", "التقدير (ناجح / راسب)", "ملاحظات"]
        header_widths = [5, 20, 15, 15, 10, 15, 20]
        
        for i, (header, width) in enumerate(zip(headers, header_widths)):
            tk.Label(headers_frame, text=header, font=self.arabic_font_bold, 
                    fg="#FFD700", bg="#3C1361", relief="solid", bd=1, width=width).pack(side="right", padx=1)
        
        # Assessment rows (5 rows by default)
        entries["أفراد التقييم"] = {}
        for row_num in range(1, 6):
            row_frame = tk.Frame(individuals_frame, bg="#3C1361")
            row_frame.pack(fill="x", padx=10, pady=1)
            
            entries["أفراد التقييم"][row_num] = {}
            
            # م
            tk.Label(row_frame, text=str(row_num), font=self.arabic_font, 
                    fg="white", bg="#3C1361", relief="solid", bd=1, width=5).pack(side="right", padx=1)
            
            # الاسم الكامل
            name_entry = tk.Entry(row_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            name_entry.pack(side="right", padx=1)
            entries["أفراد التقييم"][row_num]["الاسم"] = name_entry
            
            # الرقم التعريفي / الكود
            id_entry = tk.Entry(row_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
            id_entry.pack(side="right", padx=1)
            entries["أفراد التقييم"][row_num]["الرقم"] = id_entry
            
            # نوع التقييم
            type_entry = tk.Entry(row_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
            type_entry.pack(side="right", padx=1)
            entries["أفراد التقييم"][row_num]["نوع_التقييم"] = type_entry
            
            # الدرجة
            grade_entry = tk.Entry(row_frame, font=self.arabic_font, width=10, relief="solid", bd=1)
            grade_entry.pack(side="right", padx=1)
            entries["أفراد التقييم"][row_num]["الدرجة"] = grade_entry
            
            # التقدير (ناجح / راسب)
            rating_entry = tk.Entry(row_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
            rating_entry.pack(side="right", padx=1)
            entries["أفراد التقييم"][row_num]["التقدير"] = rating_entry
            
            # ملاحظات
            notes_entry = tk.Entry(row_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            notes_entry.pack(side="right", padx=1)
            entries["أفراد التقييم"][row_num]["ملاحظات"] = notes_entry
        
        # ثالثًا: ملاحظات عامة من فريق التقييم
        general_notes_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        general_notes_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(general_notes_frame, text="ثالثًا: ملاحظات عامة من فريق التقييم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        notes_text = tk.Text(general_notes_frame, font=self.arabic_font, height=6, width=60, relief="solid", bd=1)
        notes_text.pack(anchor="e", padx=10, pady=5, fill="x")
        entries["ملاحظات عامة"] = notes_text
        
        # رابعًا: اعتماد السجل
        approval_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        approval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(approval_frame, text="رابعًا: اعتماد السجل",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # معد التقرير
        preparer_frame = tk.Frame(approval_frame, bg="#3C1361")
        preparer_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(preparer_frame, text="المُعد:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        preparer_sub_frame = tk.Frame(preparer_frame, bg="#3C1361")
        preparer_sub_frame.pack(anchor="e", pady=2)
        
        # Name and signature for preparer
        name_frame = tk.Frame(preparer_sub_frame, bg="#3C1361")
        name_frame.pack(side="right", padx=10)
        tk.Label(name_frame, text="الاسم:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack()
        name_entry = tk.Entry(name_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
        name_entry.pack()
        entries["المعد_الاسم"] = name_entry
        
        sig_frame = tk.Frame(preparer_sub_frame, bg="#3C1361")
        sig_frame.pack(side="right", padx=10)
        tk.Label(sig_frame, text="التوقيع:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack()
        sig_entry = tk.Entry(sig_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
        sig_entry.pack()
        entries["المعد_التوقيع"] = sig_entry
        
        # مراجع التقرير
        reviewer_frame = tk.Frame(approval_frame, bg="#3C1361")
        reviewer_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(reviewer_frame, text="المراجع:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        reviewer_sub_frame = tk.Frame(reviewer_frame, bg="#3C1361")
        reviewer_sub_frame.pack(anchor="e", pady=2)
        
        # Name and signature for reviewer
        rev_name_frame = tk.Frame(reviewer_sub_frame, bg="#3C1361")
        rev_name_frame.pack(side="right", padx=10)
        tk.Label(rev_name_frame, text="الاسم:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack()
        rev_name_entry = tk.Entry(rev_name_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
        rev_name_entry.pack()
        entries["المراجع_الاسم"] = rev_name_entry
        
        rev_sig_frame = tk.Frame(reviewer_sub_frame, bg="#3C1361")
        rev_sig_frame.pack(side="right", padx=10)
        tk.Label(rev_sig_frame, text="التوقيع:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack()
        rev_sig_entry = tk.Entry(rev_sig_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
        rev_sig_entry.pack()
        entries["المراجع_التوقيع"] = rev_sig_entry
        
        # تاريخ الاعتماد
        date_frame = tk.Frame(approval_frame, bg="#3C1361")
        date_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(date_frame, text="• تاريخ الاعتماد:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        date_entry = tk.Entry(date_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
        date_entry.pack(anchor="e", padx=5)
        entries["تاريخ الاعتماد"] = date_entry
        
        # Assessment Information
        info_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        info_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(info_frame, text="معلومات التقييم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        info_fields = [
            "اسم المركز", "رقم طلب الاعتماد", "تاريخ التقييم", "فريق التقييم",
            "مدة التقييم", "نوع التقييم", "نطاق التقييم"
        ]
        
        for field in info_fields:
            field_frame = tk.Frame(info_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["فريق التقييم", "نطاق التقييم"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=2, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Assessment Criteria and Scoring
        criteria_sections = [
            ("الإدارة والتنظيم", [
                "هيكل الإدارة", "السياسات والإجراءات", "التخطيط الاستراتيجي", "إدارة الموارد"
            ]),
            ("الموارد البشرية", [
                "كفاءة المقيمين", "برامج التدريب", "نظام التقييم الوظيفي", "إدارة الأداء"
            ]),
            ("البنية التحتية", [
                "المرافق والتجهيزات", "أنظمة المعلومات", "الأمان والسلامة", "الصيانة والتطوير"
            ]),
            ("نظام الجودة", [
                "دليل الجودة", "المراجعة الداخلية", "إدارة الوثائق", "التحسين المستمر"
            ]),
            ("خدمات التقييم", [
                "عمليات التقييم", "أدوات التقييم", "إصدار الشهادات", "خدمة العملاء"
            ])
        ]
        
        for section_name, criteria in criteria_sections:
            section_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
            section_frame.pack(fill="x", padx=10, pady=5)
            
            tk.Label(section_frame, text=f"تقييم {section_name}",
                    font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
            
            for criterion in criteria:
                criterion_frame = tk.Frame(section_frame, bg="#3C1361")
                criterion_frame.pack(fill="x", padx=10, pady=2)
                
                tk.Label(criterion_frame, text=f"• {criterion}:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                
                # Rating and score frame
                rating_frame = tk.Frame(criterion_frame, bg="#3C1361")
                rating_frame.pack(anchor="e", padx=5, fill="x")
                
                # Score entry
                score_frame = tk.Frame(rating_frame, bg="#3C1361")
                score_frame.pack(side="left", padx=5)
                tk.Label(score_frame, text="النتيجة:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(side="left")
                score_entry = tk.Entry(score_frame, font=self.arabic_font, width=10, relief="solid", bd=1)
                score_entry.pack(side="left", padx=2)
                
                # Rating selection
                rating_var = tk.StringVar()
                ratings = ["ممتاز", "جيد جداً", "جيد", "مقبول", "ضعيف"]
                for rating in ratings:
                    rb = tk.Radiobutton(rating_frame, text=rating, variable=rating_var, value=rating,
                                      font=self.arabic_font, fg="white", bg="#3C1361")
                    rb.pack(side="right", padx=2)
                
                entries[f"{section_name}_{criterion}_درجة"] = score_entry
                entries[f"{section_name}_{criterion}_تقييم"] = rating_var
                
                # Comments for each criterion
                comment_frame = tk.Frame(section_frame, bg="#3C1361")
                comment_frame.pack(fill="x", padx=10, pady=1)
                
                tk.Label(comment_frame, text=f"ملاحظات {criterion}:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                comment_text = tk.Text(comment_frame, font=self.arabic_font, height=2, width=50, relief="solid", bd=1)
                comment_text.pack(anchor="e", padx=5, fill="x")
                entries[f"{section_name}_{criterion}_ملاحظات"] = comment_text
        
        # Overall Assessment
        overall_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        overall_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(overall_frame, text="التقييم الإجمالي",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        overall_fields = [
            "إجمالي النقاط", "النسبة المئوية", "التقييم العام", "التوصية"
        ]
        
        for field in overall_fields:
            field_frame = tk.Frame(overall_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "التقييم العام":
                rating_var = tk.StringVar()
                ratings = ["مُوصى بالاعتماد", "مُوصى بالاعتماد مع ملاحظات", "غير مُوصى بالاعتماد"]
                for rating in ratings:
                    rb = tk.Radiobutton(field_frame, text=rating, variable=rating_var, value=rating,
                                      font=self.arabic_font, fg="white", bg="#3C1361")
                    rb.pack(anchor="e", padx=5)
                entry = rating_var
            elif field == "التوصية":
                entry = tk.Text(field_frame, font=self.arabic_font, height=4, width=50, relief="solid", bd=1)
                entry.pack(anchor="e", padx=5, fill="x")
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
                entry.pack(anchor="e", padx=5)
            
            entries[field] = entry
        
        # Strengths and Weaknesses
        swot_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        swot_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(swot_frame, text="نقاط القوة والضعف",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        swot_fields = ["نقاط القوة", "نقاط الضعف", "الفرص المتاحة", "التحديات والمخاطر"]
        
        for field in swot_fields:
            field_frame = tk.Frame(swot_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Action Plan
        action_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        action_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(action_frame, text="خطة العمل والتحسين",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        action_fields = [
            "الإجراءات التصحيحية المطلوبة", "الجدول الزمني للتنفيذ", 
            "المسؤوليات", "مؤشرات المتابعة"
        ]
        
        for field in action_fields:
            field_frame = tk.Frame(action_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Assessment Team Signatures
        team_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        team_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(team_frame, text="فريق التقييم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        team_roles = ["رئيس فريق التقييم", "عضو فريق التقييم", "المراجع"]
        
        for role in team_roles:
            role_frame = tk.Frame(team_frame, bg="#3C1361")
            role_frame.pack(fill="x", padx=10, pady=5)
            
            # Name and signature in same row
            name_sig_frame = tk.Frame(role_frame, bg="#3C1361")
            name_sig_frame.pack(fill="x")
            
            # Signature
            sig_frame = tk.Frame(name_sig_frame, bg="#3C1361")
            sig_frame.pack(side="left", padx=10)
            tk.Label(sig_frame, text="التوقيع:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="left")
            sig_entry = tk.Entry(sig_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            sig_entry.pack(side="left", padx=5)
            
            # Name
            name_frame = tk.Frame(name_sig_frame, bg="#3C1361")
            name_frame.pack(side="right", padx=10)
            tk.Label(name_frame, text=f"• {role}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            name_entry = tk.Entry(name_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            name_entry.pack(side="right", padx=5)
            
            entries[f"{role}_اسم"] = name_entry
            entries[f"{role}_توقيع"] = sig_entry
        
        # Date
        date_frame = tk.Frame(team_frame, bg="#3C1361")
        date_frame.pack(fill="x", padx=10, pady=5)
        tk.Label(date_frame, text="• تاريخ التقرير:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        date_entry = tk.Entry(date_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
        date_entry.pack(anchor="e", padx=5)
        entries["تاريخ التقرير"] = date_entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_center_assessment,
                                update_func=self.update_center_assessment,
                                clear_func=self.clear_center_assessment)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    # QP-08.3 Form Creation Methods - تحديد الكفاءة
    
    def create_competency_determination_form(self, parent, form_name):
        """Create competency determination form for QF-08-03-01"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-08-03-01 نموذج تحديد الكفاءات المطلوبة",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # أولًا: البيانات العامة
        general_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        general_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(general_frame, text="أولًا: البيانات العامة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        general_fields = [
            "اسم الوظيفة / الدور / المهمة",
            "القسم / الوحدة",
            "تاريخ إعداد النموذج",
            "أعدّ النموذج بواسطة"
        ]
        
        for field in general_fields:
            field_frame = tk.Frame(general_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # ثانيًا: الكفاءات المطلوبة
        competencies_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        competencies_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(competencies_frame, text="ثانيًا: الكفاءات المطلوبة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Create table headers
        headers_frame = tk.Frame(competencies_frame, bg="#3C1361")
        headers_frame.pack(fill="x", padx=10, pady=2)
        
        headers = ["م", "نوع الكفاءة", "وصف الكفاءة", "المستوى المطلوب", "ضروري/اختياري"]
        header_widths = [5, 15, 30, 15, 15]
        
        for header, width in zip(headers, header_widths):
            tk.Label(headers_frame, text=header, font=self.arabic_font_bold, 
                    fg="#FFD700", bg="#3C1361", relief="solid", bd=1, width=width).pack(side="right", padx=1)
        
        # Competency rows
        competency_types = [
            "معرفية (Knowledge)",
            "مهارية (Skills)",
            "سلوكية (Behavior)",
            "تقنية (Technical)",
            "أخرى"
        ]
        
        competency_examples = [
            "مثال: المعرفة بمعايير الجودة",
            "مثال: استخدام أدوات التقييم",
            "مثال: العمل بروح الفريق",
            "مثال: التعامل مع أنظمة إدارة التعلم",
            ""
        ]
        
        competency_levels = ["متقدم", "متوسط", "أساسي", "متوسط", ""]
        competency_required = ["✓", "✓", "✓", "✗", ""]
        
        entries["الكفاءات المطلوبة"] = {}
        for i, (comp_type, example, level, required) in enumerate(zip(competency_types, competency_examples, competency_levels, competency_required), 1):
            row_frame = tk.Frame(competencies_frame, bg="#3C1361")
            row_frame.pack(fill="x", padx=10, pady=1)
            
            entries["الكفاءات المطلوبة"][i] = {}
            
            # م
            tk.Label(row_frame, text=str(i), font=self.arabic_font, 
                    fg="white", bg="#3C1361", relief="solid", bd=1, width=5).pack(side="right", padx=1)
            
            # نوع الكفاءة
            if i == 5:  # أخرى row
                type_entry = tk.Entry(row_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
                type_entry.pack(side="right", padx=1)
                entries["الكفاءات المطلوبة"][i]["النوع"] = type_entry
            else:
                tk.Label(row_frame, text=comp_type, font=self.arabic_font, 
                        fg="white", bg="#3C1361", relief="solid", bd=1, width=15).pack(side="right", padx=1)
                entries["الكفاءات المطلوبة"][i]["النوع"] = comp_type
            
            # وصف الكفاءة
            desc_entry = tk.Entry(row_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
            if example:
                desc_entry.insert(0, example)
            desc_entry.pack(side="right", padx=1)
            entries["الكفاءات المطلوبة"][i]["الوصف"] = desc_entry
            
            # المستوى المطلوب
            level_var = tk.StringVar()
            level_combo = tk.OptionMenu(row_frame, level_var, "أساسي", "متوسط", "متقدم")
            level_combo.config(font=self.arabic_font, bg="white", width=12)
            if level:
                level_var.set(level)
            level_combo.pack(side="right", padx=1)
            entries["الكفاءات المطلوبة"][i]["المستوى"] = level_var
            
            # ضروري/اختياري
            req_var = tk.StringVar()
            req_combo = tk.OptionMenu(row_frame, req_var, "✓", "✗")
            req_combo.config(font=self.arabic_font, bg="white", width=10)
            if required:
                req_var.set(required)
            req_combo.pack(side="right", padx=1)
            entries["الكفاءات المطلوبة"][i]["الضرورة"] = req_var
        
        # ثالثًا: المؤهلات والشهادات المطلوبة
        qualifications_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        qualifications_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(qualifications_frame, text="ثالثًا: المؤهلات والشهادات المطلوبة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # مؤهل علمي
        qualification_frame = tk.Frame(qualifications_frame, bg="#3C1361")
        qualification_frame.pack(fill="x", padx=10, pady=2)
        
        qual_var = tk.BooleanVar()
        qual_cb = tk.Checkbutton(qualification_frame, text="☐ مؤهل علمي:", variable=qual_var,
                               font=self.arabic_font, fg="white", bg="#3C1361")
        qual_cb.pack(anchor="e")
        qual_entry = tk.Entry(qualification_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
        qual_entry.pack(anchor="e", padx=20, fill="x")
        entries["مؤهل علمي"] = {"مختار": qual_var, "التفاصيل": qual_entry}
        
        # خبرة عملية
        experience_frame = tk.Frame(qualifications_frame, bg="#3C1361")
        experience_frame.pack(fill="x", padx=10, pady=2)
        
        exp_var = tk.BooleanVar()
        exp_cb = tk.Checkbutton(experience_frame, text="☐ خبرة عملية لا تقل عن:", variable=exp_var,
                              font=self.arabic_font, fg="white", bg="#3C1361")
        exp_cb.pack(anchor="e")
        exp_entry = tk.Entry(experience_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
        exp_entry.pack(anchor="e", padx=20)
        tk.Label(experience_frame, text="سنوات", font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e", padx=5)
        entries["خبرة عملية"] = {"مختار": exp_var, "المدة": exp_entry}
        
        # شهادات مهنية
        prof_cert_frame = tk.Frame(qualifications_frame, bg="#3C1361")
        prof_cert_frame.pack(fill="x", padx=10, pady=2)
        
        prof_var = tk.BooleanVar()
        prof_cb = tk.Checkbutton(prof_cert_frame, text="☐ شهادات مهنية مطلوبة:", variable=prof_var,
                               font=self.arabic_font, fg="white", bg="#3C1361")
        prof_cb.pack(anchor="e")
        prof_entry = tk.Entry(prof_cert_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
        prof_entry.pack(anchor="e", padx=20, fill="x")
        entries["شهادات مهنية"] = {"مختار": prof_var, "التفاصيل": prof_entry}
        
        # دورات تدريبية
        training_frame = tk.Frame(qualifications_frame, bg="#3C1361")
        training_frame.pack(fill="x", padx=10, pady=2)
        
        training_var = tk.BooleanVar()
        training_cb = tk.Checkbutton(training_frame, text="☐ دورات تدريبية محددة:", variable=training_var,
                                   font=self.arabic_font, fg="white", bg="#3C1361")
        training_cb.pack(anchor="e")
        training_entry = tk.Entry(training_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
        training_entry.pack(anchor="e", padx=20, fill="x")
        entries["دورات تدريبية"] = {"مختار": training_var, "التفاصيل": training_entry}
        
        # لغات
        languages_frame = tk.Frame(qualifications_frame, bg="#3C1361")
        languages_frame.pack(fill="x", padx=10, pady=2)
        
        lang_var = tk.BooleanVar()
        lang_cb = tk.Checkbutton(languages_frame, text="☐ لغات:", variable=lang_var,
                               font=self.arabic_font, fg="white", bg="#3C1361")
        lang_cb.pack(anchor="e")
        
        lang_options_frame = tk.Frame(languages_frame, bg="#3C1361")
        lang_options_frame.pack(anchor="e", padx=20)
        
        entries["لغات"] = {"مختار": lang_var}
        lang_types = ["عربية", "إنجليزية", "أخرى"]
        for lang_type in lang_types:
            lang_type_var = tk.BooleanVar()
            lang_type_cb = tk.Checkbutton(lang_options_frame, text=f"☐ {lang_type}", variable=lang_type_var,
                                        font=self.arabic_font, fg="white", bg="#3C1361")
            lang_type_cb.pack(side="right", padx=5)
            entries["لغات"][lang_type] = lang_type_var
        
        # أخرى entry for languages
        other_lang_entry = tk.Entry(lang_options_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
        other_lang_entry.pack(side="right", padx=5)
        entries["لغات"]["أخرى_تفاصيل"] = other_lang_entry
        
        # رابعًا: ملاحظات إضافية
        notes_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        notes_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(notes_frame, text="رابعًا: ملاحظات إضافية",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        notes_text = tk.Text(notes_frame, font=self.arabic_font, height=4, width=60, relief="solid", bd=1)
        notes_text.pack(anchor="e", padx=10, pady=5, fill="x")
        entries["ملاحظات إضافية"] = notes_text
        
        # خامسًا: اعتماد النموذج
        approval_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        approval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(approval_frame, text="خامسًا: اعتماد النموذج",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        approval_fields = ["الأسم", "التوقيع", "الوظيفة", "التاريخ"]
        
        approval_entries_frame = tk.Frame(approval_frame, bg="#3C1361")
        approval_entries_frame.pack(fill="x", padx=10, pady=5)
        
        for field in approval_fields:
            field_frame = tk.Frame(approval_entries_frame, bg="#3C1361")
            field_frame.pack(side="right", padx=10)
            
            tk.Label(field_frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack()
            entry = tk.Entry(field_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
            entry.pack()
            entries[f"اعتماد_{field}"] = entry
        
        # Competency Areas Assessment
        competency_areas = [
            ("المعرفة التخصصية", [
                "المعرفة النظرية الأساسية", "المعرفة المتقدمة في التخصص", 
                "معرفة المعايير والمواصفات", "الإلمام بالتطورات الحديثة"
            ]),
            ("المهارات العملية", [
                "المهارات التقنية", "القدرة على التطبيق العملي", 
                "مهارات حل المشكلات", "استخدام الأدوات والمعدات"
            ]),
            ("المهارات الشخصية", [
                "مهارات التواصل", "القيادة والعمل الجماعي", 
                "إدارة الوقت", "التكيف مع التغيير"
            ]),
            ("المهارات المهنية", [
                "الالتزام بأخلاقيات المهنة", "الحيادية والموضوعية", 
                "السرية والأمانة", "التطوير المهني المستمر"
            ])
        ]
        
        for area_name, competencies in competency_areas:
            area_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
            area_frame.pack(fill="x", padx=10, pady=5)
            
            tk.Label(area_frame, text=f"تقييم {area_name}",
                    font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
            
            for competency in competencies:
                comp_frame = tk.Frame(area_frame, bg="#3C1361")
                comp_frame.pack(fill="x", padx=10, pady=3)
                
                tk.Label(comp_frame, text=f"• {competency}:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                
                # Assessment methods frame
                methods_frame = tk.Frame(comp_frame, bg="#3C1361")
                methods_frame.pack(anchor="e", padx=5, fill="x")
                
                # Assessment level (1-5 scale)
                level_frame = tk.Frame(methods_frame, bg="#3C1361")
                level_frame.pack(side="left", padx=5)
                
                tk.Label(level_frame, text="المستوى:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(side="left")
                
                level_var = tk.IntVar()
                for i in range(1, 6):
                    rb = tk.Radiobutton(level_frame, text=str(i), variable=level_var, value=i,
                                      font=self.arabic_font, fg="white", bg="#3C1361")
                    rb.pack(side="left", padx=2)
                
                # Assessment method
                method_frame = tk.Frame(methods_frame, bg="#3C1361")
                method_frame.pack(side="right", padx=5)
                
                tk.Label(method_frame, text="طريقة التقييم:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
                
                method_var = tk.StringVar()
                methods = ["مقابلة", "اختبار عملي", "مراجعة وثائق", "ملاحظة"]
                method_combo = tk.OptionMenu(method_frame, method_var, *methods)
                method_combo.config(font=self.arabic_font, bg="white")
                method_combo.pack(side="right", padx=2)
                
                entries[f"{area_name}_{competency}_مستوى"] = level_var
                entries[f"{area_name}_{competency}_طريقة"] = method_var
                
                # Evidence and notes
                evidence_frame = tk.Frame(comp_frame, bg="#3C1361")
                evidence_frame.pack(fill="x", padx=5, pady=2)
                
                tk.Label(evidence_frame, text="الأدلة والملاحظات:", 
                        font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
                evidence_text = tk.Text(evidence_frame, font=self.arabic_font, height=2, width=50, relief="solid", bd=1)
                evidence_text.pack(anchor="e", padx=5, fill="x")
                entries[f"{area_name}_{competency}_أدلة"] = evidence_text
        
        # Overall Competency Assessment
        overall_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        overall_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(overall_frame, text="التقييم الشامل للكفاءة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        overall_sections = [
            ("المستوى الإجمالي للكفاءة", ["مبتدئ", "متوسط", "متقدم", "خبير", "استشاري"]),
            ("التوصية", ["مؤهل للممارسة", "مؤهل مع تدريب إضافي", "غير مؤهل", "يحتاج إعادة تقييم"])
        ]
        
        for section, options in overall_sections:
            section_frame = tk.Frame(overall_frame, bg="#3C1361")
            section_frame.pack(fill="x", padx=10, pady=3)
            
            tk.Label(section_frame, text=f"• {section}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            option_var = tk.StringVar()
            option_frame = tk.Frame(section_frame, bg="#3C1361")
            option_frame.pack(anchor="e", padx=5)
            
            for option in options:
                rb = tk.Radiobutton(option_frame, text=option, variable=option_var, value=option,
                                  font=self.arabic_font, fg="white", bg="#3C1361")
                rb.pack(anchor="e", padx=5)
            
            entries[section] = option_var
        
        # Development Plan
        development_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        development_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(development_frame, text="خطة التطوير المقترحة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        development_fields = [
            "المجالات التي تحتاج تطوير", "البرامج التدريبية المقترحة", 
            "الجدول الزمني للتطوير", "مؤشرات قياس التقدم"
        ]
        
        for field in development_fields:
            field_frame = tk.Frame(development_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Final Notes and Approval
        final_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        final_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(final_frame, text="الملاحظات النهائية والاعتماد",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Final notes
        notes_frame = tk.Frame(final_frame, bg="#3C1361")
        notes_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(notes_frame, text="• الملاحظات العامة:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        notes_text = tk.Text(notes_frame, font=self.arabic_font, height=4, width=50, relief="solid", bd=1)
        notes_text.pack(anchor="e", padx=5, fill="x")
        entries["الملاحظات العامة"] = notes_text
        
        # Evaluator information
        evaluator_fields = [
            ("اسم المقيم", "التوقيع", "التاريخ"),
            ("اسم المراجع", "التوقيع", "التاريخ")
        ]
        
        for name_field, sig_field, date_field in evaluator_fields:
            eval_frame = tk.Frame(final_frame, bg="#3C1361")
            eval_frame.pack(fill="x", padx=10, pady=3)
            
            # Date
            date_part = tk.Frame(eval_frame, bg="#3C1361")
            date_part.pack(side="left", padx=10)
            tk.Label(date_part, text=f"{date_field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="left")
            date_entry = tk.Entry(date_part, font=self.arabic_font, width=15, relief="solid", bd=1)
            date_entry.pack(side="left", padx=5)
            
            # Signature
            sig_part = tk.Frame(eval_frame, bg="#3C1361")
            sig_part.pack(side="left", padx=10)
            tk.Label(sig_part, text=f"{sig_field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="left")
            sig_entry = tk.Entry(sig_part, font=self.arabic_font, width=20, relief="solid", bd=1)
            sig_entry.pack(side="left", padx=5)
            
            # Name
            name_part = tk.Frame(eval_frame, bg="#3C1361")
            name_part.pack(side="right", padx=10)
            tk.Label(name_part, text=f"• {name_field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            name_entry = tk.Entry(name_part, font=self.arabic_font, width=25, relief="solid", bd=1)
            name_entry.pack(side="right", padx=5)
            
            entries[f"{name_field}"] = name_entry
            entries[f"{name_field}_{sig_field}"] = sig_entry
            entries[f"{name_field}_{date_field}"] = date_entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_competency_determination,
                                update_func=self.update_competency_determination,
                                clear_func=self.clear_competency_determination)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    # QP-08.4 Form Creation Methods - متطلبات إضافية
    
    def create_additional_requirements_form(self, parent, form_name):
        """Create additional requirements integration form - QF-08-04-01"""
        # Main container
        main_frame = ttk.Frame(parent)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Title
        title_label = tk.Label(main_frame, text="QF-08-04-01: نموذج دمج المتطلبات الإضافية في برنامج الاعتماد", 
                              font=("Arial", 16, "bold"), bg="lightblue")
        title_label.pack(fill=tk.X, pady=(0, 20))
        
        # Create scrollable frame
        canvas = tk.Canvas(main_frame)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Dictionary to store all entry widgets
        entries = {}
        
        # أولاً: بيانات البرنامج
        section1_frame = ttk.LabelFrame(scrollable_frame, text="أولاً: بيانات البرنامج", padding="10")
        section1_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # اسم البرنامج / الشهادة المهنية
        tk.Label(section1_frame, text="اسم البرنامج / الشهادة المهنية:", font=("Arial", 10, "bold")).grid(row=0, column=2, sticky="e", padx=5, pady=2)
        entries['اسم البرنامج / الشهادة المهنية'] = tk.Entry(section1_frame, width=50, font=("Arial", 10))
        entries['اسم البرنامج / الشهادة المهنية'].grid(row=0, column=0, columnspan=2, sticky="w", padx=5, pady=2)
        
        # رقم / كود البرنامج
        tk.Label(section1_frame, text="رقم / كود البرنامج:", font=("Arial", 10, "bold")).grid(row=1, column=2, sticky="e", padx=5, pady=2)
        entries['رقم / كود البرنامج'] = tk.Entry(section1_frame, width=30, font=("Arial", 10))
        entries['رقم / كود البرنامج'].grid(row=1, column=1, sticky="w", padx=5, pady=2)
        
        # الجهة المقدمة
        tk.Label(section1_frame, text="الجهة المقدمة:", font=("Arial", 10, "bold")).grid(row=2, column=2, sticky="e", padx=5, pady=2)
        entries['الجهة المقدمة'] = tk.Entry(section1_frame, width=50, font=("Arial", 10))
        entries['الجهة المقدمة'].grid(row=2, column=0, columnspan=2, sticky="w", padx=5, pady=2)
        
        # تاريخ إعداد النموذج
        tk.Label(section1_frame, text="تاريخ إعداد النموذج:", font=("Arial", 10, "bold")).grid(row=3, column=2, sticky="e", padx=5, pady=2)
        entries['تاريخ إعداد النموذج'] = tk.Entry(section1_frame, width=20, font=("Arial", 10))
        entries['تاريخ إعداد النموذج'].grid(row=3, column=1, sticky="w", padx=5, pady=2)
        
        # المسؤول عن الدمج
        tk.Label(section1_frame, text="المسؤول عن الدمج:", font=("Arial", 10, "bold")).grid(row=4, column=2, sticky="e", padx=5, pady=2)
        entries['المسؤول عن الدمج'] = tk.Entry(section1_frame, width=50, font=("Arial", 10))
        entries['المسؤول عن الدمج'].grid(row=4, column=0, columnspan=2, sticky="w", padx=5, pady=2)
        
        # ثانياً: نوع المتطلبات الإضافية
        section2_frame = ttk.LabelFrame(scrollable_frame, text="ثانياً: نوع المتطلبات الإضافية", padding="10")
        section2_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Checkbox options
        req_types = [
            "متطلبات قانونية / تنظيمية",
            "متطلبات قطاعية / مهنية", 
            "متطلبات وطنية",
            "متطلبات الجهة المستفيدة"
        ]
        
        entries['نوع المتطلبات'] = {}
        for i, req_type in enumerate(req_types):
            var = tk.BooleanVar()
            entries['نوع المتطلبات'][req_type] = var
            tk.Checkbutton(section2_frame, text=req_type, variable=var, font=("Arial", 10)).grid(row=i, column=0, sticky="w", padx=5, pady=2)
        
        # أخرى
        tk.Label(section2_frame, text="أخرى:", font=("Arial", 10, "bold")).grid(row=len(req_types), column=0, sticky="w", padx=5, pady=2)
        entries['أخرى'] = tk.Entry(section2_frame, width=50, font=("Arial", 10))
        entries['أخرى'].grid(row=len(req_types), column=1, columnspan=2, sticky="w", padx=5, pady=2)
        
        # ثالثاً: تفاصيل المتطلبات الإضافية
        section3_frame = ttk.LabelFrame(scrollable_frame, text="ثالثاً: تفاصيل المتطلبات الإضافية", padding="10")
        section3_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Table headers
        headers = ["م", "وصف المتطلب الإضافي", "مصدر المتطلب", "هل هو إلزامي؟", "ملاحظات"]
        for i, header in enumerate(headers):
            tk.Label(section3_frame, text=header, font=("Arial", 10, "bold"), relief="ridge", borderwidth=1).grid(row=0, column=i, sticky="ew", padx=1, pady=1)
        
        # Table rows
        entries['متطلبات_جدول'] = {}
        for row in range(1, 4):  # 3 rows
            tk.Label(section3_frame, text=str(row), font=("Arial", 10), relief="ridge", borderwidth=1).grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            entries['متطلبات_جدول'][f'وصف_{row}'] = tk.Entry(section3_frame, width=25, font=("Arial", 9))
            entries['متطلبات_جدول'][f'وصف_{row}'].grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            
            entries['متطلبات_جدول'][f'مصدر_{row}'] = tk.Entry(section3_frame, width=20, font=("Arial", 9))
            entries['متطلبات_جدول'][f'مصدر_{row}'].grid(row=row, column=2, sticky="ew", padx=1, pady=1)
            
            entries['متطلبات_جدول'][f'إلزامي_{row}'] = tk.Entry(section3_frame, width=10, font=("Arial", 9))
            entries['متطلبات_جدول'][f'إلزامي_{row}'].grid(row=row, column=3, sticky="ew", padx=1, pady=1)
            
            entries['متطلبات_جدول'][f'ملاحظات_{row}'] = tk.Entry(section3_frame, width=20, font=("Arial", 9))
            entries['متطلبات_جدول'][f'ملاحظات_{row}'].grid(row=row, column=4, sticky="ew", padx=1, pady=1)
        
        # رابعاً: كيفية دمج المتطلبات في البرنامج
        section4_frame = ttk.LabelFrame(scrollable_frame, text="رابعاً: كيفية دمج المتطلبات في البرنامج", padding="10")
        section4_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # في المحتوى العلمي / التدريبي
        tk.Label(section4_frame, text="في المحتوى العلمي / التدريبي:", font=("Arial", 10, "bold")).grid(row=0, column=0, sticky="nw", padx=5, pady=2)
        entries['المحتوى العلمي / التدريبي'] = tk.Text(section4_frame, width=70, height=3, font=("Arial", 9))
        entries['المحتوى العلمي / التدريبي'].grid(row=0, column=1, sticky="w", padx=5, pady=2)
        
        # في آليات التقييم والاختبارات
        tk.Label(section4_frame, text="في آليات التقييم والاختبارات:", font=("Arial", 10, "bold")).grid(row=1, column=0, sticky="nw", padx=5, pady=2)
        entries['آليات التقييم والاختبارات'] = tk.Text(section4_frame, width=70, height=3, font=("Arial", 9))
        entries['آليات التقييم والاختبارات'].grid(row=1, column=1, sticky="w", padx=5, pady=2)
        
        # في مخرجات التعلم والكفاءات المستهدفة
        tk.Label(section4_frame, text="في مخرجات التعلم والكفاءات المستهدفة:", font=("Arial", 10, "bold")).grid(row=2, column=0, sticky="nw", padx=5, pady=2)
        entries['مخرجات التعلم والكفاءات المستهدفة'] = tk.Text(section4_frame, width=70, height=3, font=("Arial", 9))
        entries['مخرجات التعلم والكفاءات المستهدفة'].grid(row=2, column=1, sticky="w", padx=5, pady=2)
        
        # في إجراءات الاعتماد والمتابعة
        tk.Label(section4_frame, text="في إجراءات الاعتماد والمتابعة:", font=("Arial", 10, "bold")).grid(row=3, column=0, sticky="nw", padx=5, pady=2)
        entries['إجراءات الاعتماد والمتابعة'] = tk.Text(section4_frame, width=70, height=3, font=("Arial", 9))
        entries['إجراءات الاعتماد والمتابعة'].grid(row=3, column=1, sticky="w", padx=5, pady=2)
        
        # خامساً: التحقق من التكامل
        section5_frame = ttk.LabelFrame(scrollable_frame, text="خامساً: التحقق من التكامل", padding="10")
        section5_frame.pack(fill=tk.X, padx=10, pady=5)
        
        verification_items = [
            "تمت مراجعة البرنامج بعد الدمج",
            "تمت موافقة لجنة فنية / اعتماد",
            "تم تحديث وثائق البرنامج الرسمية",
            "تم إشعار الجهات المعنية بالمتطلبات الجديدة"
        ]
        
        entries['التحقق من التكامل'] = {}
        for i, item in enumerate(verification_items):
            var = tk.BooleanVar()
            entries['التحقق من التكامل'][item] = var
            tk.Checkbutton(section5_frame, text=item, variable=var, font=("Arial", 10)).grid(row=i, column=0, sticky="w", padx=5, pady=2)
        
        # سادساً: التوقيع والاعتماد
        section6_frame = ttk.LabelFrame(scrollable_frame, text="سادساً: التوقيع والاعتماد", padding="10")
        section6_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Table headers for approval
        approval_headers = ["الاسم", "الصفة", "التوقيع", "التاريخ"]
        for i, header in enumerate(approval_headers):
            tk.Label(section6_frame, text=header, font=("Arial", 10, "bold"), relief="ridge", borderwidth=1).grid(row=0, column=i, sticky="ew", padx=1, pady=1)
        
        # Two approval rows
        entries['الاعتماد'] = {}
        for row in range(1, 3):
            entries['الاعتماد'][f'اسم_{row}'] = tk.Entry(section6_frame, width=20, font=("Arial", 9))
            entries['الاعتماد'][f'اسم_{row}'].grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            entries['الاعتماد'][f'صفة_{row}'] = tk.Entry(section6_frame, width=20, font=("Arial", 9))
            entries['الاعتماد'][f'صفة_{row}'].grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            
            entries['الاعتماد'][f'توقيع_{row}'] = tk.Entry(section6_frame, width=20, font=("Arial", 9))
            entries['الاعتماد'][f'توقيع_{row}'].grid(row=row, column=2, sticky="ew", padx=1, pady=1)
            
            entries['الاعتماد'][f'تاريخ_{row}'] = tk.Entry(section6_frame, width=15, font=("Arial", 9))
            entries['الاعتماد'][f'تاريخ_{row}'].grid(row=row, column=3, sticky="ew", padx=1, pady=1)
        
        # Buttons
        button_frame = ttk.Frame(scrollable_frame)
        button_frame.pack(fill=tk.X, padx=10, pady=20)
        
        ttk.Button(button_frame, text="حفظ", 
                  command=lambda: self.save_additional_requirements(form_name, entries)).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="تحديث", 
                  command=lambda: self.update_additional_requirements(form_name, entries)).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="مسح", 
                  command=lambda: self.clear_additional_requirements(entries)).pack(side=tk.RIGHT, padx=5)
        
        # Pack canvas and scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_evaluator_renewal_suspension_withdrawal_form(self, parent, form_name):
        """Create evaluator renewal/suspension/withdrawal record form for QF-08-01-03"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-08-01-03 سجل تجديد تعليق سحب اعتماد المقيم",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # Evaluator Information
        eval_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        eval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(eval_frame, text="بيانات المقيم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        eval_fields = [
            "رقم اعتماد المقيم", "اسم المقيم", "التخصص", "نطاق الاعتماد الحالي",
            "تاريخ الاعتماد الأصلي", "تاريخ انتهاء الاعتماد الحالي", "الحالة الحالية"
        ]
        
        for field in eval_fields:
            field_frame = tk.Frame(eval_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Action Type
        action_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        action_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(action_frame, text="نوع الإجراء المطلوب",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        action_var = tk.StringVar()
        actions = ["تجديد الاعتماد", "تعليق الاعتماد", "سحب الاعتماد", "تعديل النطاق", "رفع التعليق"]
        
        for action in actions:
            rb = tk.Radiobutton(action_frame, text=action, variable=action_var, value=action,
                              font=self.arabic_font, fg="white", bg="#3C1361")
            rb.pack(anchor="e", padx=10, pady=2)
        
        entries["نوع الإجراء"] = action_var
        
        # Justification and Details
        details_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        details_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(details_frame, text="تفاصيل ومبررات الإجراء",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        detail_fields = [
            "تاريخ طلب الإجراء", "مبررات الإجراء", "الوثائق الداعمة", "تقييم الأداء المحدث"
        ]
        
        for field in detail_fields:
            field_frame = tk.Frame(details_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["مبررات الإجراء", "الوثائق الداعمة", "تقييم الأداء المحدث"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Decision and Implementation
        decision_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        decision_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(decision_frame, text="القرار والتنفيذ",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        decision_fields = [
            "القرار المتخذ", "تاريخ سريان القرار", "تاريخ انتهاء الإجراء (إن وجد)",
            "الشروط والمتطلبات الجديدة", "إجراءات المتابعة المطلوبة"
        ]
        
        for field in decision_fields:
            field_frame = tk.Frame(decision_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["الشروط والمتطلبات الجديدة", "إجراءات المتابعة المطلوبة"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Approval and Documentation
        approval_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        approval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(approval_frame, text="الاعتماد والتوثيق",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        approval_roles = ["مدير الاعتماد", "المدير التنفيذي", "مجلس الإدارة"]
        
        for role in approval_roles:
            role_frame = tk.Frame(approval_frame, bg="#3C1361")
            role_frame.pack(fill="x", padx=10, pady=3)
            
            details_frame_role = tk.Frame(role_frame, bg="#3C1361")
            details_frame_role.pack(fill="x")
            
            # Date
            date_part = tk.Frame(details_frame_role, bg="#3C1361")
            date_part.pack(side="left", padx=10)
            tk.Label(date_part, text="التاريخ:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="left")
            date_entry = tk.Entry(date_part, font=self.arabic_font, width=15, relief="solid", bd=1)
            date_entry.pack(side="left", padx=5)
            
            # Signature
            sig_part = tk.Frame(details_frame_role, bg="#3C1361")
            sig_part.pack(side="left", padx=10)
            tk.Label(sig_part, text="التوقيع:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="left")
            sig_entry = tk.Entry(sig_part, font=self.arabic_font, width=20, relief="solid", bd=1)
            sig_entry.pack(side="left", padx=5)
            
            # Name
            name_part = tk.Frame(details_frame_role, bg="#3C1361")
            name_part.pack(side="right", padx=10)
            tk.Label(name_part, text=f"• {role}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            name_entry = tk.Entry(name_part, font=self.arabic_font, width=25, relief="solid", bd=1)
            name_entry.pack(side="right", padx=5)
            
            entries[f"{role}_اسم"] = name_entry
            entries[f"{role}_توقيع"] = sig_entry
            entries[f"{role}_تاريخ"] = date_entry
        
        # Additional Notes
        notes_frame = tk.Frame(approval_frame, bg="#3C1361")
        notes_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(notes_frame, text="• ملاحظات إضافية:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        notes_text = tk.Text(notes_frame, font=self.arabic_font, height=4, width=50, relief="solid", bd=1)
        notes_text.pack(anchor="e", padx=5, fill="x")
        entries["ملاحظات إضافية"] = notes_text
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_evaluator_renewal,
                                update_func=self.update_evaluator_renewal,
                                clear_func=self.clear_evaluator_renewal)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_center_renewal_withdrawal_form(self, parent, form_name):
        """Create center renewal/withdrawal record form for QF-08-02-03"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-08-02-03 سجل تجديد أو سحب الاعتماد",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # أولًا: البيانات الأساسية
        basic_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        basic_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(basic_frame, text="أولًا: البيانات الأساسية",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        basic_fields = [
            "اسم الجهة / الفرد المعتمد",
            "رقم الاعتماد",
            "تاريخ منح الاعتماد الأولي"
        ]
        
        for field in basic_fields:
            field_frame = tk.Frame(basic_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # نوع الاعتماد
        accreditation_type_frame = tk.Frame(basic_frame, bg="#3C1361")
        accreditation_type_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(accreditation_type_frame, text="• نوع الاعتماد:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        acc_types = [
            "جهة تدريبية",
            "مدرب", 
            "مركز امتحانات",
            "جهة تقييم",
            "أخرى"
        ]
        
        entries["نوع الاعتماد"] = {}
        for acc_type in acc_types:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(accreditation_type_frame, text=f"☐ {acc_type}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361")
            cb.pack(anchor="e", padx=10, pady=1)
            entries["نوع الاعتماد"][acc_type] = var
        
        # أخرى field for accreditation type
        other_acc_frame = tk.Frame(accreditation_type_frame, bg="#3C1361")
        other_acc_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(other_acc_frame, text="أخرى (حدد):", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        other_acc_entry = tk.Entry(other_acc_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
        other_acc_entry.pack(anchor="e", padx=5)
        entries["نوع_الاعتماد_أخرى"] = other_acc_entry
        
        # ثانيًا: نوع الإجراء
        procedure_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        procedure_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(procedure_frame, text="ثانيًا: نوع الإجراء",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Create procedure table
        table_frame = tk.Frame(procedure_frame, bg="#3C1361")
        table_frame.pack(fill="x", padx=10, pady=5)
        
        # Table headers
        headers = ["نوع الإجراء", "☑", "التاريخ", "سبب الإجراء", "ملاحظات"]
        header_widths = [20, 5, 15, 25, 25]
        
        headers_frame = tk.Frame(table_frame, bg="#3C1361")
        headers_frame.pack(fill="x", pady=2)
        
        for header, width in zip(headers, header_widths):
            tk.Label(headers_frame, text=header, font=self.arabic_font_bold, 
                    fg="#FFD700", bg="#3C1361", relief="solid", bd=1, width=width).pack(side="right", padx=1)
        
        # Procedure rows
        procedures = ["تجديد اعتماد", "سحب اعتماد"]
        entries["نوع الإجراء"] = {}
        
        for procedure in procedures:
            row_frame = tk.Frame(table_frame, bg="#3C1361")
            row_frame.pack(fill="x", pady=1)
            
            entries["نوع الإجراء"][procedure] = {}
            
            # نوع الإجراء
            tk.Label(row_frame, text=procedure, font=self.arabic_font, 
                    fg="white", bg="#3C1361", relief="solid", bd=1, width=20).pack(side="right", padx=1)
            
            # ☑
            var = tk.BooleanVar()
            cb = tk.Checkbutton(row_frame, variable=var, bg="#3C1361", width=5)
            cb.pack(side="right", padx=1)
            entries["نوع الإجراء"][procedure]["مختار"] = var
            
            # التاريخ
            date_entry = tk.Entry(row_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
            date_entry.pack(side="right", padx=1)
            entries["نوع الإجراء"][procedure]["التاريخ"] = date_entry
            
            # سبب الإجراء
            reason_entry = tk.Entry(row_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            reason_entry.pack(side="right", padx=1)
            entries["نوع الإجراء"][procedure]["السبب"] = reason_entry
            
            # ملاحظات
            notes_entry = tk.Entry(row_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            notes_entry.pack(side="right", padx=1)
            entries["نوع الإجراء"][procedure]["ملاحظات"] = notes_entry
        
        # ثالثًا: مبررات القرار
        justification_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        justification_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(justification_frame, text="ثالثًا: مبررات القرار",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # أسباب تجديد / سحب الاعتماد
        reasons_frame = tk.Frame(justification_frame, bg="#3C1361")
        reasons_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(reasons_frame, text="• أسباب تجديد / سحب الاعتماد:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        reasons_text = tk.Text(reasons_frame, font=self.arabic_font, height=4, width=60, relief="solid", bd=1)
        reasons_text.pack(anchor="e", padx=5, fill="x")
        entries["أسباب القرار"] = reasons_text
        
        # نتائج التقييم أو المراجعة
        results_frame = tk.Frame(justification_frame, bg="#3C1361")
        results_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(results_frame, text="• نتائج التقييم أو المراجعة:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        results_text = tk.Text(results_frame, font=self.arabic_font, height=4, width=60, relief="solid", bd=1)
        results_text.pack(anchor="e", padx=5, fill="x")
        entries["نتائج التقييم"] = results_text
        
        # رابعًا: الإجراءات الإدارية المتخذة
        admin_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        admin_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(admin_frame, text="رابعًا: الإجراءات الإدارية المتخذة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        admin_actions = [
            "إشعار الجهة كتابيًا",
            "تحديث سجل المعتمدين",
            "حذف من قاعدة البيانات العامة",
            "توجيه إنذار / مهلة تصحيح",
            "أخرى"
        ]
        
        entries["الإجراءات الإدارية"] = {}
        for action in admin_actions:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(admin_frame, text=f"☐ {action}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["الإجراءات الإدارية"][action] = var
        
        # أخرى field for admin actions
        other_admin_frame = tk.Frame(admin_frame, bg="#3C1361")
        other_admin_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(other_admin_frame, text="• أخرى (حدد):", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        other_admin_entry = tk.Entry(other_admin_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
        other_admin_entry.pack(anchor="e", padx=5)
        entries["إجراءات_أخرى_تحديد"] = other_admin_entry
        
        # خامسًا: التوصية النهائية
        recommendation_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        recommendation_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(recommendation_frame, text="خامسًا: التوصية النهائية",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        recommendations = [
            "الاستمرار في الاعتماد لمدة",
            "تعليق الاعتماد مؤقتًا حتى",
            "السحب الكامل للاعتماد",
            "إعادة التقييم بعد"
        ]
        
        entries["التوصية النهائية"] = {}
        for rec in recommendations:
            rec_frame = tk.Frame(recommendation_frame, bg="#3C1361")
            rec_frame.pack(fill="x", padx=10, pady=2)
            
            var = tk.BooleanVar()
            cb = tk.Checkbutton(rec_frame, text=f"☐ {rec}:", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361")
            cb.pack(anchor="e")
            entries["التوصية النهائية"][rec] = var
            
            # Duration/date field for applicable recommendations
            if rec in ["الاستمرار في الاعتماد لمدة", "تعليق الاعتماد مؤقتًا حتى", "إعادة التقييم بعد"]:
                duration_entry = tk.Entry(rec_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
                duration_entry.pack(anchor="e", padx=20)
                entries["التوصية النهائية"][f"{rec}_تفاصيل"] = duration_entry
        
        # سادسًا: اعتماد القرار
        approval_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        approval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(approval_frame, text="سادسًا: اعتماد القرار",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        approval_fields = ["الاسم", "التوقيع", "الوظيفة"]
        
        for field in approval_fields:
            field_frame = tk.Frame(approval_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5)
            entries[f"اعتماد_{field}"] = entry
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Action Request
        action_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        action_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(action_frame, text="طلب الإجراء",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        action_var = tk.StringVar()
        actions = ["تجديد الاعتماد", "توسيع نطاق الاعتماد", "تقليص نطاق الاعتماد", "سحب الاعتماد", "تعليق الاعتماد"]
        
        for action in actions:
            rb = tk.Radiobutton(action_frame, text=action, variable=action_var, value=action,
                              font=self.arabic_font, fg="white", bg="#3C1361")
            rb.pack(anchor="e", padx=10, pady=2)
        
        entries["نوع الإجراء المطلوب"] = action_var
        
        # Request Details
        request_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        request_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(request_frame, text="تفاصيل الطلب",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        request_fields = [
            "تاريخ تقديم الطلب", "مبررات الطلب", "التغييرات المطلوبة في النطاق",
            "الوثائق المحدثة المرفقة", "تقييم الأداء خلال فترة الاعتماد"
        ]
        
        for field in request_fields:
            field_frame = tk.Frame(request_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["مبررات الطلب", "التغييرات المطلوبة في النطاق", "الوثائق المحدثة المرفقة", "تقييم الأداء خلال فترة الاعتماد"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Assessment and Review
        assessment_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        assessment_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(assessment_frame, text="التقييم والمراجعة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        assessment_fields = [
            "تاريخ بدء التقييم", "فريق التقييم", "نتائج التقييم", "التوصيات",
            "المتطلبات الإضافية", "الإجراءات التصحيحية المطلوبة"
        ]
        
        for field in assessment_fields:
            field_frame = tk.Frame(assessment_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["فريق التقييم", "نتائج التقييم", "التوصيات", "المتطلبات الإضافية", "الإجراءات التصحيحية المطلوبة"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Final Decision
        decision_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        decision_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(decision_frame, text="القرار النهائي",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        decision_var = tk.StringVar()
        decisions = ["الموافقة على التجديد", "الموافقة مع شروط", "الرفض", "التأجيل لمراجعة إضافية"]
        
        for decision in decisions:
            rb = tk.Radiobutton(decision_frame, text=decision, variable=decision_var, value=decision,
                              font=self.arabic_font, fg="white", bg="#3C1361")
            rb.pack(anchor="e", padx=10, pady=2)
        
        entries["القرار النهائي"] = decision_var
        
        # Implementation Details
        impl_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        impl_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(impl_frame, text="تفاصيل التنفيذ",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        impl_fields = [
            "تاريخ سريان القرار", "مدة الاعتماد الجديدة", "النطاق الجديد للاعتماد",
            "الشروط والقيود", "متطلبات المتابعة"
        ]
        
        for field in impl_fields:
            field_frame = tk.Frame(impl_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["النطاق الجديد للاعتماد", "الشروط والقيود", "متطلبات المتابعة"]:
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50, relief="solid", bd=1)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Approval Signatures
        signature_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        signature_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(signature_frame, text="توقيعات الاعتماد",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        signature_roles = ["مدير الاعتماد", "المدير التنفيذي", "رئيس مجلس الإدارة"]
        
        for role in signature_roles:
            role_frame = tk.Frame(signature_frame, bg="#3C1361")
            role_frame.pack(fill="x", padx=10, pady=3)
            
            details_frame_role = tk.Frame(role_frame, bg="#3C1361")
            details_frame_role.pack(fill="x")
            
            # Date
            date_part = tk.Frame(details_frame_role, bg="#3C1361")
            date_part.pack(side="left", padx=10)
            tk.Label(date_part, text="التاريخ:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="left")
            date_entry = tk.Entry(date_part, font=self.arabic_font, width=15, relief="solid", bd=1)
            date_entry.pack(side="left", padx=5)
            
            # Signature
            sig_part = tk.Frame(details_frame_role, bg="#3C1361")
            sig_part.pack(side="left", padx=10)
            tk.Label(sig_part, text="التوقيع:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="left")
            sig_entry = tk.Entry(sig_part, font=self.arabic_font, width=20, relief="solid", bd=1)
            sig_entry.pack(side="left", padx=5)
            
            # Name
            name_part = tk.Frame(details_frame_role, bg="#3C1361")
            name_part.pack(side="right", padx=10)
            tk.Label(name_part, text=f"• {role}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            name_entry = tk.Entry(name_part, font=self.arabic_font, width=25, relief="solid", bd=1)
            name_entry.pack(side="right", padx=5)
            
            entries[f"{role}_اسم"] = name_entry
            entries[f"{role}_توقيع"] = sig_entry
            entries[f"{role}_تاريخ"] = date_entry
        
        # Final Notes
        notes_frame = tk.Frame(signature_frame, bg="#3C1361")
        notes_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(notes_frame, text="• ملاحظات نهائية:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        notes_text = tk.Text(notes_frame, font=self.arabic_font, height=4, width=50, relief="solid", bd=1)
        notes_text.pack(anchor="e", padx=5, fill="x")
        entries["ملاحظات نهائية"] = notes_text
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_center_renewal,
                                update_func=self.update_center_renewal,
                                clear_func=self.clear_center_renewal)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_competency_assessment_record_form(self, parent, form_name):
        """Create competency assessment record form for QF-08-03-02"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-08-03-02 سجل تقييم الكفاءات",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # أولًا: بيانات الشخص المُقيَّم
        person_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        person_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(person_frame, text="أولًا: بيانات الشخص المُقيَّم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        person_fields = [
            "اسم الشخص",
            "الوظيفة / الدور",
            "القسم / الوحدة",
            "تاريخ التقييم",
            "القائم بالتقييم"
        ]
        
        for field in person_fields:
            field_frame = tk.Frame(person_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # ثانيًا: نتائج تقييم الكفاءات
        assessment_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        assessment_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(assessment_frame, text="ثانيًا: نتائج تقييم الكفاءات",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Create table headers
        headers_frame = tk.Frame(assessment_frame, bg="#3C1361")
        headers_frame.pack(fill="x", padx=10, pady=2)
        
        headers = ["م", "الكفاءة", "مستوى المطلوب", "مستوى المُقيَّم", "ملائم (نعم/لا)", "ملاحظات"]
        header_widths = [5, 20, 12, 12, 12, 20]
        
        for header, width in zip(headers, header_widths):
            tk.Label(headers_frame, text=header, font=self.arabic_font_bold, 
                    fg="#FFD700", bg="#3C1361", relief="solid", bd=1, width=width).pack(side="right", padx=1)
        
        # Assessment rows for 8 competencies
        entries["نتائج التقييم"] = {}
        competencies = [
            "كفاءة 1", "كفاءة 2", "كفاءة 3", "كفاءة 4",
            "كفاءة 5", "كفاءة 6", "كفاءة 7", "كفاءة 8"
        ]
        
        for i, competency in enumerate(competencies, 1):
            row_frame = tk.Frame(assessment_frame, bg="#3C1361")
            row_frame.pack(fill="x", padx=10, pady=1)
            
            entries["نتائج التقييم"][i] = {}
            
            # م
            tk.Label(row_frame, text=str(i), font=self.arabic_font, 
                    fg="white", bg="#3C1361", relief="solid", bd=1, width=5).pack(side="right", padx=1)
            
            # الكفاءة
            comp_entry = tk.Entry(row_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            comp_entry.insert(0, competency)
            comp_entry.pack(side="right", padx=1)
            entries["نتائج التقييم"][i]["الكفاءة"] = comp_entry
            
            # مستوى المطلوب
            req_level_var = tk.StringVar()
            req_level_combo = tk.OptionMenu(row_frame, req_level_var, "أساسي", "متوسط", "متقدم")
            req_level_combo.config(font=self.arabic_font, bg="white", width=10)
            req_level_combo.pack(side="right", padx=1)
            entries["نتائج التقييم"][i]["المستوى المطلوب"] = req_level_var
            
            # مستوى المُقيَّم
            eval_level_var = tk.StringVar()
            eval_level_combo = tk.OptionMenu(row_frame, eval_level_var, "أساسي", "متوسط", "متقدم")
            eval_level_combo.config(font=self.arabic_font, bg="white", width=10)
            eval_level_combo.pack(side="right", padx=1)
            entries["نتائج التقييم"][i]["المستوى المُقيَّم"] = eval_level_var
            
            # ملائم (نعم/لا)
            suitable_var = tk.StringVar()
            suitable_combo = tk.OptionMenu(row_frame, suitable_var, "نعم", "لا")
            suitable_combo.config(font=self.arabic_font, bg="white", width=10)
            suitable_combo.pack(side="right", padx=1)
            entries["نتائج التقييم"][i]["ملائم"] = suitable_var
            
            # ملاحظات
            notes_entry = tk.Entry(row_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            notes_entry.pack(side="right", padx=1)
            entries["نتائج التقييم"][i]["ملاحظات"] = notes_entry
        
        # ثالثًا: التوصية
        recommendation_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        recommendation_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(recommendation_frame, text="ثالثًا: التوصية",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Radio buttons for recommendation
        recommendation_var = tk.StringVar()
        recommendations = [
            "مؤهل ومستوفي لجميع الكفاءات المطلوبة",
            "مؤهل مع الحاجة لتطوير بعض الكفاءات",
            "غير مؤهل ويحتاج لتطوير شامل للكفاءات"
        ]
        
        for rec in recommendations:
            rec_frame = tk.Frame(recommendation_frame, bg="#3C1361")
            rec_frame.pack(anchor="e", padx=10, pady=2)
            
            rb = tk.Radiobutton(rec_frame, text=f"☐ {rec}", variable=recommendation_var, value=rec,
                              font=self.arabic_font, fg="white", bg="#3C1361")
            rb.pack(anchor="e")
        
        entries["التوصية"] = recommendation_var
        
        # خطة التطوير المقترحة (إن وجدت)
        development_frame = tk.Frame(recommendation_frame, bg="#3C1361")
        development_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(development_frame, text="خطة التطوير المقترحة (إن وجدت):", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        development_text = tk.Text(development_frame, font=self.arabic_font, height=4, width=60, relief="solid", bd=1)
        development_text.pack(anchor="e", padx=5, fill="x")
        entries["خطة التطوير"] = development_text
        
        # رابعًا: توقيع الأطراف
        signatures_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        signatures_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(signatures_frame, text="رابعًا: توقيع الأطراف",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Signature table
        sig_headers_frame = tk.Frame(signatures_frame, bg="#3C1361")
        sig_headers_frame.pack(fill="x", padx=10, pady=2)
        
        sig_headers = ["الجهة", "الاسم", "التوقيع", "التاريخ"]
        sig_widths = [20, 25, 20, 15]
        
        for header, width in zip(sig_headers, sig_widths):
            tk.Label(sig_headers_frame, text=header, font=self.arabic_font_bold, 
                    fg="#FFD700", bg="#3C1361", relief="solid", bd=1, width=width).pack(side="right", padx=1)
        
        # Signature rows
        signature_roles = [
            "الشخص المُقيَّم",
            "القائم بالتقييم",
            "مدير القسم / الوحدة"
        ]
        
        entries["توقيعات"] = {}
        for role in signature_roles:
            sig_row_frame = tk.Frame(signatures_frame, bg="#3C1361")
            sig_row_frame.pack(fill="x", padx=10, pady=1)
            
            entries["توقيعات"][role] = {}
            
            # الجهة
            tk.Label(sig_row_frame, text=role, font=self.arabic_font, 
                    fg="white", bg="#3C1361", relief="solid", bd=1, width=20).pack(side="right", padx=1)
            
            # الاسم
            name_entry = tk.Entry(sig_row_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            name_entry.pack(side="right", padx=1)
            entries["توقيعات"][role]["الاسم"] = name_entry
            
            # التوقيع
            sig_entry = tk.Entry(sig_row_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            sig_entry.pack(side="right", padx=1)
            entries["توقيعات"][role]["التوقيع"] = sig_entry
            
            # التاريخ
            date_entry = tk.Entry(sig_row_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
            date_entry.pack(side="right", padx=1)
            entries["توقيعات"][role]["التاريخ"] = date_entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_competency_assessment_record,
                                update_func=self.update_competency_assessment_record,
                                clear_func=self.clear_competency_assessment_record)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_additional_requirements_review_form(self, parent, form_name):
        """Create additional requirements review form - QF-08-04-02"""
        # Main container
        main_frame = ttk.Frame(parent)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Title
        title_label = tk.Label(main_frame, text="QF-08-04-02: سجل المراجعة والتحديث للمتطلبات الإضافية", 
                              font=("Arial", 16, "bold"), bg="lightblue")
        title_label.pack(fill=tk.X, pady=(0, 20))
        
        # Create scrollable frame
        canvas = tk.Canvas(main_frame)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Dictionary to store all entry widgets
        entries = {}
        
        # أولاً: بيانات البرنامج
        section1_frame = ttk.LabelFrame(scrollable_frame, text="أولاً: بيانات البرنامج", padding="10")
        section1_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # اسم البرنامج / الشهادة المهنية
        tk.Label(section1_frame, text="اسم البرنامج / الشهادة المهنية:", font=("Arial", 10, "bold")).grid(row=0, column=2, sticky="e", padx=5, pady=2)
        entries['اسم البرنامج / الشهادة المهنية'] = tk.Entry(section1_frame, width=50, font=("Arial", 10))
        entries['اسم البرنامج / الشهادة المهنية'].grid(row=0, column=0, columnspan=2, sticky="w", padx=5, pady=2)
        
        # رقم / كود البرنامج
        tk.Label(section1_frame, text="رقم / كود البرنامج:", font=("Arial", 10, "bold")).grid(row=1, column=2, sticky="e", padx=5, pady=2)
        entries['رقم / كود البرنامج'] = tk.Entry(section1_frame, width=30, font=("Arial", 10))
        entries['رقم / كود البرنامج'].grid(row=1, column=1, sticky="w", padx=5, pady=2)
        
        # القسم / الجهة المسؤولة
        tk.Label(section1_frame, text="القسم / الجهة المسؤولة:", font=("Arial", 10, "bold")).grid(row=2, column=2, sticky="e", padx=5, pady=2)
        entries['القسم / الجهة المسؤولة'] = tk.Entry(section1_frame, width=50, font=("Arial", 10))
        entries['القسم / الجهة المسؤولة'].grid(row=2, column=0, columnspan=2, sticky="w", padx=5, pady=2)
        
        # تاريخ إصدار المتطلبات الأصلية
        tk.Label(section1_frame, text="تاريخ إصدار المتطلبات الأصلية:", font=("Arial", 10, "bold")).grid(row=3, column=2, sticky="e", padx=5, pady=2)
        entries['تاريخ إصدار المتطلبات الأصلية'] = tk.Entry(section1_frame, width=20, font=("Arial", 10))
        entries['تاريخ إصدار المتطلبات الأصلية'].grid(row=3, column=1, sticky="w", padx=5, pady=2)
        
        # ثانياً: تفاصيل المراجعة / التحديث
        section2_frame = ttk.LabelFrame(scrollable_frame, text="ثانياً: تفاصيل المراجعة / التحديث", padding="10")
        section2_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Table headers
        headers = ["م", "التاريخ", "نوع الإجراء", "وصف التعديل أو المراجعة", "سبب التغيير", "تم الاعتماد؟", "الملاحظات"]
        for i, header in enumerate(headers):
            tk.Label(section2_frame, text=header, font=("Arial", 9, "bold"), relief="ridge", borderwidth=1).grid(row=0, column=i, sticky="ew", padx=1, pady=1)
        
        # Table rows
        entries['مراجعة_جدول'] = {}
        action_types = ["مراجعة", "تعديل", "حذف", "إضافة"]
        
        for row in range(1, 3):  # 2 rows
            tk.Label(section2_frame, text=str(row), font=("Arial", 9), relief="ridge", borderwidth=1).grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            entries['مراجعة_جدول'][f'تاريخ_{row}'] = tk.Entry(section2_frame, width=12, font=("Arial", 8))
            entries['مراجعة_جدول'][f'تاريخ_{row}'].grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            
            # Action type combobox
            action_var = tk.StringVar()
            action_combo = ttk.Combobox(section2_frame, textvariable=action_var, values=action_types, width=10, font=("Arial", 8))
            action_combo.grid(row=row, column=2, sticky="ew", padx=1, pady=1)
            entries['مراجعة_جدول'][f'نوع_إجراء_{row}'] = action_var
            
            entries['مراجعة_جدول'][f'وصف_{row}'] = tk.Entry(section2_frame, width=25, font=("Arial", 8))
            entries['مراجعة_جدول'][f'وصف_{row}'].grid(row=row, column=3, sticky="ew", padx=1, pady=1)
            
            entries['مراجعة_جدول'][f'سبب_{row}'] = tk.Entry(section2_frame, width=20, font=("Arial", 8))
            entries['مراجعة_جدول'][f'سبب_{row}'].grid(row=row, column=4, sticky="ew", padx=1, pady=1)
            
            entries['مراجعة_جدول'][f'اعتماد_{row}'] = tk.Entry(section2_frame, width=8, font=("Arial", 8))
            entries['مراجعة_جدول'][f'اعتماد_{row}'].grid(row=row, column=5, sticky="ew", padx=1, pady=1)
            
            entries['مراجعة_جدول'][f'ملاحظات_{row}'] = tk.Entry(section2_frame, width=20, font=("Arial", 8))
            entries['مراجعة_جدول'][f'ملاحظات_{row}'].grid(row=row, column=6, sticky="ew", padx=1, pady=1)
        
        # ثالثاً: الجهات المشاركة في المراجعة
        section3_frame = ttk.LabelFrame(scrollable_frame, text="ثالثاً: الجهات المشاركة في المراجعة", padding="10")
        section3_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Table headers for participants
        participant_headers = ["الاسم", "الجهة / القسم", "الصفة", "التوقيع"]
        for i, header in enumerate(participant_headers):
            tk.Label(section3_frame, text=header, font=("Arial", 10, "bold"), relief="ridge", borderwidth=1).grid(row=0, column=i, sticky="ew", padx=1, pady=1)
        
        # Participant rows
        entries['المشاركين'] = {}
        for row in range(1, 4):  # 3 rows
            entries['المشاركين'][f'اسم_{row}'] = tk.Entry(section3_frame, width=20, font=("Arial", 9))
            entries['المشاركين'][f'اسم_{row}'].grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            entries['المشاركين'][f'جهة_{row}'] = tk.Entry(section3_frame, width=25, font=("Arial", 9))
            entries['المشاركين'][f'جهة_{row}'].grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            
            entries['المشاركين'][f'صفة_{row}'] = tk.Entry(section3_frame, width=20, font=("Arial", 9))
            entries['المشاركين'][f'صفة_{row}'].grid(row=row, column=2, sticky="ew", padx=1, pady=1)
            
            entries['المشاركين'][f'توقيع_{row}'] = tk.Entry(section3_frame, width=20, font=("Arial", 9))
            entries['المشاركين'][f'توقيع_{row}'].grid(row=row, column=3, sticky="ew", padx=1, pady=1)
        
        # رابعاً: التوصيات والقرارات النهائية
        section4_frame = ttk.LabelFrame(scrollable_frame, text="رابعاً: التوصيات والقرارات النهائية", padding="10")
        section4_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Checkboxes for recommendations
        recommendations = [
            "استمرار العمل بالمتطلبات بعد التعديل",
            "إدراج المتطلبات الجديدة ضمن وثائق البرنامج",
            "إشعار جميع الأطراف ذات العلاقة بالتعديلات",
            "تحديث سجل الكفاءات / المخرجات / آلية التقييم"
        ]
        
        entries['التوصيات'] = {}
        for i, recommendation in enumerate(recommendations):
            var = tk.BooleanVar()
            entries['التوصيات'][recommendation] = var
            tk.Checkbutton(section4_frame, text=recommendation, variable=var, font=("Arial", 10)).grid(row=i, column=0, sticky="w", padx=5, pady=2)
        
        # خامساً: اعتماد السجل
        section5_frame = ttk.LabelFrame(scrollable_frame, text="خامساً: اعتماد السجل", padding="10")
        section5_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # اسم المسؤول عن التحديث
        tk.Label(section5_frame, text="اسم المسؤول عن التحديث:", font=("Arial", 10, "bold")).grid(row=0, column=2, sticky="e", padx=5, pady=2)
        entries['اسم المسؤول عن التحديث'] = tk.Entry(section5_frame, width=40, font=("Arial", 10))
        entries['اسم المسؤول عن التحديث'].grid(row=0, column=0, columnspan=2, sticky="w", padx=5, pady=2)
        
        # الوظيفة / القسم
        tk.Label(section5_frame, text="الوظيفة / القسم:", font=("Arial", 10, "bold")).grid(row=1, column=2, sticky="e", padx=5, pady=2)
        entries['الوظيفة / القسم'] = tk.Entry(section5_frame, width=40, font=("Arial", 10))
        entries['الوظيفة / القسم'].grid(row=1, column=0, columnspan=2, sticky="w", padx=5, pady=2)
        
        # التوقيع
        tk.Label(section5_frame, text="التوقيع:", font=("Arial", 10, "bold")).grid(row=2, column=2, sticky="e", padx=5, pady=2)
        entries['التوقيع'] = tk.Entry(section5_frame, width=30, font=("Arial", 10))
        entries['التوقيع'].grid(row=2, column=1, sticky="w", padx=5, pady=2)
        
        # التاريخ
        tk.Label(section5_frame, text="التاريخ:", font=("Arial", 10, "bold")).grid(row=3, column=2, sticky="e", padx=5, pady=2)
        entries['التاريخ'] = tk.Entry(section5_frame, width=20, font=("Arial", 10))
        entries['التاريخ'].grid(row=3, column=1, sticky="w", padx=5, pady=2)
        
        # Buttons
        button_frame = ttk.Frame(scrollable_frame)
        button_frame.pack(fill=tk.X, padx=10, pady=20)
        
        ttk.Button(button_frame, text="حفظ", 
                  command=lambda: self.save_additional_requirements_review(form_name, entries)).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="تحديث", 
                  command=lambda: self.update_additional_requirements_review(form_name, entries)).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="مسح", 
                  command=lambda: self.clear_additional_requirements_review(entries)).pack(side=tk.RIGHT, padx=5)
        
        # Pack canvas and scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    # Save, Update, and Clear Methods for Section 8 Forms
    
    # QP-08.1 Methods - اعتماد المقيمين
    def save_evaluator_application(self, form_name, entries):
        """Save evaluator accreditation application form"""
        try:
            # Initialize database if needed
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Create table if not exists
            cursor.execute('''CREATE TABLE IF NOT EXISTS evaluator_applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_name TEXT,
                full_name TEXT,
                national_id TEXT,
                birth_date TEXT,
                nationality TEXT,
                phone TEXT,
                email TEXT,
                address TEXT,
                qualification TEXT,
                specialization TEXT,
                experience_years TEXT,
                current_job TEXT,
                employer TEXT,
                previous_evaluation_experience TEXT,
                professional_qualifications TEXT,
                evaluation_type TEXT,
                required_specializations TEXT,
                accreditation_level TEXT,
                justification TEXT,
                attached_documents TEXT,
                declarations TEXT,
                applicant_signature TEXT,
                signature_date TEXT,
                created_date TEXT
            )''')
            
            # Prepare data
            data = {
                'form_name': form_name,
                'full_name': self.get_entry_value(entries.get('الاسم الكامل')),
                'national_id': self.get_entry_value(entries.get('الرقم القومي / رقم الهوية')),
                'birth_date': self.get_entry_value(entries.get('تاريخ الميلاد')),
                'nationality': self.get_entry_value(entries.get('الجنسية')),
                'phone': self.get_entry_value(entries.get('رقم الهاتف')),
                'email': self.get_entry_value(entries.get('البريد الإلكتروني')),
                'address': self.get_entry_value(entries.get('العنوان الكامل')),
                'qualification': self.get_entry_value(entries.get('المؤهل العلمي')),
                'specialization': self.get_entry_value(entries.get('التخصص')),
                'experience_years': self.get_entry_value(entries.get('سنوات الخبرة في مجال التخصص')),
                'current_job': self.get_entry_value(entries.get('الوظيفة الحالية')),
                'employer': self.get_entry_value(entries.get('جهة العمل')),
                'previous_evaluation_experience': self.get_entry_value(entries.get('الخبرات السابقة في التقييم')),
                'professional_qualifications': self.get_entry_value(entries.get('المؤهلات والشهادات المهنية')),
                'evaluation_type': self.get_entry_value(entries.get('نوع التقييم المطلوب')),
                'required_specializations': self.get_entry_value(entries.get('التخصصات المطلوبة')),
                'accreditation_level': self.get_entry_value(entries.get('المستوى المطلوب للاعتماد')),
                'justification': self.get_entry_value(entries.get('مبررات الطلب')),
                'attached_documents': str(entries.get('المستندات المرفقة', {})),
                'declarations': str(entries.get('الإقرار', {})),
                'applicant_signature': self.get_entry_value(entries.get('توقيع المتقدم')),
                'signature_date': self.get_entry_value(entries.get('تاريخ التوقيع')),
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            # Insert data
            cursor.execute('''INSERT INTO evaluator_applications 
                (form_name, full_name, national_id, birth_date, nationality, phone, email, 
                address, qualification, specialization, experience_years, current_job, 
                employer, previous_evaluation_experience, professional_qualifications, 
                evaluation_type, required_specializations, accreditation_level, justification, 
                attached_documents, declarations, applicant_signature, signature_date, created_date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                tuple(data.values()))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("نجح الحفظ", "تم حفظ نموذج طلب اعتماد المقيم بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ النموذج: {str(e)}")
    
    def update_evaluator_application(self, form_name, entries):
        """Update evaluator accreditation application form"""
        messagebox.showinfo("تحديث", "سيتم تطوير وظيفة التحديث قريباً")
    
    def clear_evaluator_application(self, entries):
        """Clear evaluator accreditation application form"""
        for key, entry in entries.items():
            if hasattr(entry, 'delete'):
                if hasattr(entry, 'get') and hasattr(entry, 'insert'):
                    entry.delete(0, tk.END)
                else:
                    entry.delete('1.0', tk.END)
    
    def save_evaluator_assessment(self, form_name, entries):
        """Save evaluator assessment record form"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS evaluator_assessments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_name TEXT,
                evaluator_name TEXT,
                application_number TEXT,
                specialization TEXT,
                assessment_date TEXT,
                theoretical_score TEXT,
                practical_score TEXT,
                personality_score TEXT,
                total_score TEXT,
                recommendation TEXT,
                proposed_scope TEXT,
                notes TEXT,
                chief_evaluator_name TEXT,
                chief_evaluator_signature TEXT,
                reviewer_name TEXT,
                reviewer_signature TEXT,
                assessment_date_final TEXT,
                created_date TEXT
            )''')
            
            # Collect assessment data (simplified)
            data = {
                'form_name': form_name,
                'evaluator_name': self.get_entry_value(entries.get('اسم المقيم')),
                'application_number': self.get_entry_value(entries.get('رقم الطلب')),
                'specialization': self.get_entry_value(entries.get('التخصص المطلوب')),
                'assessment_date': self.get_entry_value(entries.get('تاريخ التقييم')),
                'total_score': self.get_entry_value(entries.get('النتيجة الإجمالية')),
                'recommendation': self.get_entry_value(entries.get('التوصية')),
                'proposed_scope': self.get_entry_value(entries.get('نطاق الاعتماد المقترح')),
                'notes': self.get_entry_value(entries.get('الملاحظات')),
                'chief_evaluator_name': self.get_entry_value(entries.get('اسم المقيم الرئيسي')),
                'chief_evaluator_signature': self.get_entry_value(entries.get('اسم المقيم الرئيسي_التوقيع')),
                'reviewer_name': self.get_entry_value(entries.get('اسم المراجع')),
                'reviewer_signature': self.get_entry_value(entries.get('اسم المراجع_التوقيع')),
                'assessment_date_final': self.get_entry_value(entries.get('تاريخ التقييم')),
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            cursor.execute('''INSERT INTO evaluator_assessments 
                (form_name, evaluator_name, application_number, specialization, assessment_date,
                total_score, recommendation, proposed_scope, notes, chief_evaluator_name,
                chief_evaluator_signature, reviewer_name, reviewer_signature, assessment_date_final, created_date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                tuple(data.values()))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("نجح الحفظ", "تم حفظ سجل تقييم اعتماد المقيم بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ النموذج: {str(e)}")
    
    def update_evaluator_assessment(self, form_name, entries):
        """Update evaluator assessment record form"""
        messagebox.showinfo("تحديث", "سيتم تطوير وظيفة التحديث قريباً")
    
    def clear_evaluator_assessment(self, entries):
        """Clear evaluator assessment record form"""
        for key, entry in entries.items():
            if hasattr(entry, 'delete'):
                if hasattr(entry, 'get') and hasattr(entry, 'insert'):
                    entry.delete(0, tk.END)
                else:
                    entry.delete('1.0', tk.END)
    
    def save_evaluator_status(self, form_name, entries):
        """Save evaluator accreditation status form"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS evaluator_status (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_name TEXT,
                accreditation_number TEXT,
                evaluator_name TEXT,
                specialization TEXT,
                accreditation_scope TEXT,
                initial_accreditation_date TEXT,
                expiry_date TEXT,
                current_status TEXT,
                assessments_completed TEXT,
                last_assessment TEXT,
                performance_rating TEXT,
                complaints TEXT,
                corrective_actions TEXT,
                last_training TEXT,
                training_date TEXT,
                required_training TEXT,
                development_plan TEXT,
                last_update_date TEXT,
                update_reason TEXT,
                new_status TEXT,
                update_notes TEXT,
                responsible_officer TEXT,
                officer_position TEXT,
                officer_signature TEXT,
                officer_date TEXT,
                created_date TEXT
            )''')
            
            data = {
                'form_name': form_name,
                'accreditation_number': self.get_entry_value(entries.get('رقم اعتماد المقيم')),
                'evaluator_name': self.get_entry_value(entries.get('اسم المقيم الكامل')),
                'specialization': self.get_entry_value(entries.get('التخصص')),
                'accreditation_scope': self.get_entry_value(entries.get('نطاق الاعتماد')),
                'initial_accreditation_date': self.get_entry_value(entries.get('تاريخ الاعتماد الأولي')),
                'expiry_date': self.get_entry_value(entries.get('تاريخ انتهاء الاعتماد')),
                'current_status': self.get_entry_value(entries.get('حالة الاعتماد الحالية')),
                'assessments_completed': self.get_entry_value(entries.get('عدد التقييمات المنجزة')),
                'last_assessment': self.get_entry_value(entries.get('آخر تقييم تم إجراؤه')),
                'performance_rating': self.get_entry_value(entries.get('تقييم الأداء العام')),
                'complaints': self.get_entry_value(entries.get('الشكاوى المسجلة')),
                'corrective_actions': self.get_entry_value(entries.get('الإجراءات التصحيحية المطلوبة')),
                'last_training': self.get_entry_value(entries.get('آخر برنامج تدريبي حضره')),
                'training_date': self.get_entry_value(entries.get('تاريخ التدريب')),
                'required_training': self.get_entry_value(entries.get('البرامج التدريبية المطلوبة')),
                'development_plan': self.get_entry_value(entries.get('خطة التطوير المستقبلية')),
                'last_update_date': self.get_entry_value(entries.get('تاريخ آخر تحديث')),
                'update_reason': self.get_entry_value(entries.get('سبب التحديث')),
                'new_status': self.get_entry_value(entries.get('الحالة الجديدة')),
                'update_notes': self.get_entry_value(entries.get('ملاحظات التحديث')),
                'responsible_officer': self.get_entry_value(entries.get('اسم المسؤول')),
                'officer_position': self.get_entry_value(entries.get('المنصب')),
                'officer_signature': self.get_entry_value(entries.get('التوقيع')),
                'officer_date': self.get_entry_value(entries.get('التاريخ')),
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            cursor.execute('''INSERT INTO evaluator_status 
                (form_name, accreditation_number, evaluator_name, specialization, accreditation_scope,
                initial_accreditation_date, expiry_date, current_status, assessments_completed,
                last_assessment, performance_rating, complaints, corrective_actions, last_training,
                training_date, required_training, development_plan, last_update_date, update_reason,
                new_status, update_notes, responsible_officer, officer_position, officer_signature,
                officer_date, created_date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                tuple(data.values()))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("نجح الحفظ", "تم حفظ حالة اعتماد المقيم بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ النموذج: {str(e)}")
    
    def update_evaluator_status(self, form_name, entries):
        """Update evaluator accreditation status form"""
        messagebox.showinfo("تحديث", "سيتم تطوير وظيفة التحديث قريباً")
    
    def clear_evaluator_status(self, entries):
        """Clear evaluator accreditation status form"""
        for key, entry in entries.items():
            if hasattr(entry, 'delete'):
                if hasattr(entry, 'get') and hasattr(entry, 'insert'):
                    entry.delete(0, tk.END)
                else:
                    entry.delete('1.0', tk.END)
    
    # QP-08.2 Methods - اعتماد المراكز
    def save_center_application(self, form_name, entries):
        """Save center accreditation application form"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS center_applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_name TEXT,
                center_name TEXT,
                institution_type TEXT,
                commercial_register TEXT,
                tax_number TEXT,
                full_address TEXT,
                phone_number TEXT,
                email TEXT,
                website TEXT,
                manager_name TEXT,
                manager_position TEXT,
                establishment_year TEXT,
                services_offered TEXT,
                required_specializations TEXT,
                assessment_levels TEXT,
                target_groups TEXT,
                capacity TEXT,
                total_area TEXT,
                halls_count TEXT,
                halls_specifications TEXT,
                technical_equipment TEXT,
                library_resources TEXT,
                assessment_tools TEXT,
                safety_equipment TEXT,
                admin_staff_count TEXT,
                certified_evaluators_count TEXT,
                trainee_evaluators_count TEXT,
                evaluators_qualifications TEXT,
                training_programs TEXT,
                hr_management_system TEXT,
                quality_certificate TEXT,
                quality_manual TEXT,
                assessment_procedures TEXT,
                documentation_system TEXT,
                internal_audit_program TEXT,
                complaints_procedures TEXT,
                continuous_improvement_system TEXT,
                supporting_documents TEXT,
                declarations TEXT,
                manager_signature TEXT,
                signature_date TEXT,
                created_date TEXT
            )''')
            
            data = {
                'form_name': form_name,
                'center_name': self.get_entry_value(entries.get('اسم المركز')),
                'institution_type': self.get_entry_value(entries.get('نوع المؤسسة')),
                'commercial_register': self.get_entry_value(entries.get('السجل التجاري')),
                'tax_number': self.get_entry_value(entries.get('الرقم الضريبي')),
                'full_address': self.get_entry_value(entries.get('العنوان الكامل')),
                'phone_number': self.get_entry_value(entries.get('رقم الهاتف')),
                'email': self.get_entry_value(entries.get('البريد الإلكتروني')),
                'website': self.get_entry_value(entries.get('الموقع الإلكتروني')),
                'manager_name': self.get_entry_value(entries.get('اسم المدير المسؤول')),
                'manager_position': self.get_entry_value(entries.get('منصب المدير')),
                'establishment_year': self.get_entry_value(entries.get('سنة التأسيس')),
                'services_offered': self.get_entry_value(entries.get('نوع الخدمات المقدمة')),
                'required_specializations': self.get_entry_value(entries.get('التخصصات المطلوبة')),
                'assessment_levels': self.get_entry_value(entries.get('مستويات التقييم')),
                'target_groups': self.get_entry_value(entries.get('الفئات المستهدفة')),
                'capacity': self.get_entry_value(entries.get('السعة الاستيعابية')),
                'supporting_documents': str(entries.get('المستندات الداعمة', {})),
                'declarations': str(entries.get('الإقرار والالتزام', {})),
                'manager_signature': self.get_entry_value(entries.get('توقيع المدير')),
                'signature_date': self.get_entry_value(entries.get('تاريخ التوقيع')),
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            # Add remaining fields with default values
            remaining_fields = [
                'total_area', 'halls_count', 'halls_specifications', 'technical_equipment',
                'library_resources', 'assessment_tools', 'safety_equipment', 'admin_staff_count',
                'certified_evaluators_count', 'trainee_evaluators_count', 'evaluators_qualifications',
                'training_programs', 'hr_management_system', 'quality_certificate', 'quality_manual',
                'assessment_procedures', 'documentation_system', 'internal_audit_program',
                'complaints_procedures', 'continuous_improvement_system'
            ]
            
            for field in remaining_fields:
                arabic_field = {
                    'total_area': 'المساحة الإجمالية',
                    'halls_count': 'عدد القاعات',
                    'halls_specifications': 'مواصفات القاعات',
                    'technical_equipment': 'التجهيزات التقنية',
                    'library_resources': 'المكتبة والمراجع',
                    'assessment_tools': 'أدوات التقييم المتاحة',
                    'safety_equipment': 'معدات السلامة',
                    'admin_staff_count': 'عدد الموظفين الإداريين',
                    'certified_evaluators_count': 'عدد المقيمين المعتمدين',
                    'trainee_evaluators_count': 'عدد المقيمين تحت التدريب',
                    'evaluators_qualifications': 'مؤهلات المقيمين',
                    'training_programs': 'برامج التدريب المتاحة',
                    'hr_management_system': 'نظام إدارة الموارد البشرية',
                    'quality_certificate': 'شهادة نظام الجودة',
                    'quality_manual': 'دليل الجودة',
                    'assessment_procedures': 'إجراءات التقييم',
                    'documentation_system': 'نظام التوثيق',
                    'internal_audit_program': 'برنامج المراجعة الداخلية',
                    'complaints_procedures': 'إجراءات الشكاوى',
                    'continuous_improvement_system': 'نظام التحسين المستمر'
                }.get(field, field)
                
                data[field] = self.get_entry_value(entries.get(arabic_field, ''))
            
            # Create the complete INSERT statement
            columns = list(data.keys())
            placeholders = ', '.join(['?' for _ in columns])
            columns_str = ', '.join(columns)
            
            cursor.execute(f'''INSERT INTO center_applications ({columns_str}) VALUES ({placeholders})''',
                         tuple(data.values()))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("نجح الحفظ", "تم حفظ نموذج طلب اعتماد المركز بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ النموذج: {str(e)}")
    
    def update_center_application(self, form_name, entries):
        """Update center accreditation application form"""
        messagebox.showinfo("تحديث", "سيتم تطوير وظيفة التحديث قريباً")
    
    def clear_center_application(self, entries):
        """Clear center accreditation application form"""
        for key, entry in entries.items():
            if hasattr(entry, 'delete'):
                if hasattr(entry, 'get') and hasattr(entry, 'insert'):
                    entry.delete(0, tk.END)
                else:
                    entry.delete('1.0', tk.END)
    
    def save_center_assessment(self, form_name, entries):
        """Save center assessment report form"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS center_assessments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_name TEXT,
                center_name TEXT,
                application_number TEXT,
                assessment_date TEXT,
                assessment_team TEXT,
                assessment_duration TEXT,
                assessment_type TEXT,
                assessment_scope TEXT,
                total_points TEXT,
                percentage TEXT,
                overall_rating TEXT,
                recommendation TEXT,
                strengths TEXT,
                weaknesses TEXT,
                opportunities TEXT,
                challenges TEXT,
                corrective_actions TEXT,
                implementation_timeline TEXT,
                responsibilities TEXT,
                follow_up_indicators TEXT,
                team_leader_name TEXT,
                team_leader_signature TEXT,
                team_member_name TEXT,
                team_member_signature TEXT,
                reviewer_name TEXT,
                reviewer_signature TEXT,
                report_date TEXT,
                created_date TEXT
            )''')
            
            data = {
                'form_name': form_name,
                'center_name': self.get_entry_value(entries.get('اسم المركز')),
                'application_number': self.get_entry_value(entries.get('رقم طلب الاعتماد')),
                'assessment_date': self.get_entry_value(entries.get('تاريخ التقييم')),
                'assessment_team': self.get_entry_value(entries.get('فريق التقييم')),
                'assessment_duration': self.get_entry_value(entries.get('مدة التقييم')),
                'assessment_type': self.get_entry_value(entries.get('نوع التقييم')),
                'assessment_scope': self.get_entry_value(entries.get('نطاق التقييم')),
                'total_points': self.get_entry_value(entries.get('إجمالي النقاط')),
                'percentage': self.get_entry_value(entries.get('النسبة المئوية')),
                'overall_rating': self.get_entry_value(entries.get('التقييم العام')),
                'recommendation': self.get_entry_value(entries.get('التوصية')),
                'strengths': self.get_entry_value(entries.get('نقاط القوة')),
                'weaknesses': self.get_entry_value(entries.get('نقاط الضعف')),
                'opportunities': self.get_entry_value(entries.get('الفرص المتاحة')),
                'challenges': self.get_entry_value(entries.get('التحديات والمخاطر')),
                'corrective_actions': self.get_entry_value(entries.get('الإجراءات التصحيحية المطلوبة')),
                'implementation_timeline': self.get_entry_value(entries.get('الجدول الزمني للتنفيذ')),
                'responsibilities': self.get_entry_value(entries.get('المسؤوليات')),
                'follow_up_indicators': self.get_entry_value(entries.get('مؤشرات المتابعة')),
                'team_leader_name': self.get_entry_value(entries.get('رئيس فريق التقييم_اسم')),
                'team_leader_signature': self.get_entry_value(entries.get('رئيس فريق التقييم_توقيع')),
                'team_member_name': self.get_entry_value(entries.get('عضو فريق التقييم_اسم')),
                'team_member_signature': self.get_entry_value(entries.get('عضو فريق التقييم_توقيع')),
                'reviewer_name': self.get_entry_value(entries.get('المراجع_اسم')),
                'reviewer_signature': self.get_entry_value(entries.get('المراجع_توقيع')),
                'report_date': self.get_entry_value(entries.get('تاريخ التقرير')),
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            columns = list(data.keys())
            placeholders = ', '.join(['?' for _ in columns])
            columns_str = ', '.join(columns)
            
            cursor.execute(f'''INSERT INTO center_assessments ({columns_str}) VALUES ({placeholders})''',
                         tuple(data.values()))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("نجح الحفظ", "تم حفظ تقرير تقييم المركز بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ النموذج: {str(e)}")
    
    def update_center_assessment(self, form_name, entries):
        """Update center assessment report form"""
        messagebox.showinfo("تحديث", "سيتم تطوير وظيفة التحديث قريباً")
    
    def clear_center_assessment(self, entries):
        """Clear center assessment report form"""
        for key, entry in entries.items():
            if hasattr(entry, 'delete'):
                if hasattr(entry, 'get') and hasattr(entry, 'insert'):
                    entry.delete(0, tk.END)
                else:
                    entry.delete('1.0', tk.END)
    
    # QP-08.3 Methods - تحديد الكفاءة
    def save_competency_determination(self, form_name, entries):
        """Save competency determination form"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS competency_determinations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_name TEXT,
                full_name TEXT,
                national_id TEXT,
                position TEXT,
                employer TEXT,
                specialization TEXT,
                experience_years TEXT,
                qualification TEXT,
                assessment_date TEXT,
                overall_competency_level TEXT,
                recommendation TEXT,
                development_areas TEXT,
                proposed_training TEXT,
                development_timeline TEXT,
                progress_indicators TEXT,
                general_notes TEXT,
                evaluator_name TEXT,
                evaluator_signature TEXT,
                evaluator_date TEXT,
                reviewer_name TEXT,
                reviewer_signature TEXT,
                reviewer_date TEXT,
                created_date TEXT
            )''')
            
            data = {
                'form_name': form_name,
                'full_name': self.get_entry_value(entries.get('الاسم الكامل')),
                'national_id': self.get_entry_value(entries.get('الرقم القومي')),
                'position': self.get_entry_value(entries.get('المنصب/الوظيفة')),
                'employer': self.get_entry_value(entries.get('جهة العمل')),
                'specialization': self.get_entry_value(entries.get('التخصص')),
                'experience_years': self.get_entry_value(entries.get('سنوات الخبرة')),
                'qualification': self.get_entry_value(entries.get('المؤهل العلمي')),
                'assessment_date': self.get_entry_value(entries.get('تاريخ التقييم')),
                'overall_competency_level': self.get_entry_value(entries.get('المستوى الإجمالي للكفاءة')),
                'recommendation': self.get_entry_value(entries.get('التوصية')),
                'development_areas': self.get_entry_value(entries.get('المجالات التي تحتاج تطوير')),
                'proposed_training': self.get_entry_value(entries.get('البرامج التدريبية المقترحة')),
                'development_timeline': self.get_entry_value(entries.get('الجدول الزمني للتطوير')),
                'progress_indicators': self.get_entry_value(entries.get('مؤشرات قياس التقدم')),
                'general_notes': self.get_entry_value(entries.get('الملاحظات العامة')),
                'evaluator_name': self.get_entry_value(entries.get('اسم المقيم')),
                'evaluator_signature': self.get_entry_value(entries.get('اسم المقيم_التوقيع')),
                'evaluator_date': self.get_entry_value(entries.get('اسم المقيم_التاريخ')),
                'reviewer_name': self.get_entry_value(entries.get('اسم المراجع')),
                'reviewer_signature': self.get_entry_value(entries.get('اسم المراجع_التوقيع')),
                'reviewer_date': self.get_entry_value(entries.get('اسم المراجع_التاريخ')),
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            columns = list(data.keys())
            placeholders = ', '.join(['?' for _ in columns])
            columns_str = ', '.join(columns)
            
            cursor.execute(f'''INSERT INTO competency_determinations ({columns_str}) VALUES ({placeholders})''',
                         tuple(data.values()))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("نجح الحفظ", "تم حفظ نموذج تحديد الكفاءة بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ النموذج: {str(e)}")
    
    def update_competency_determination(self, form_name, entries):
        """Update competency determination form"""
        messagebox.showinfo("تحديث", "سيتم تطوير وظيفة التحديث قريباً")
    
    def clear_competency_determination(self, entries):
        """Clear competency determination form"""
        for key, entry in entries.items():
            if hasattr(entry, 'delete'):
                if hasattr(entry, 'get') and hasattr(entry, 'insert'):
                    entry.delete(0, tk.END)
                else:
                    entry.delete('1.0', tk.END)
    
    # QP-08.4 Methods - متطلبات إضافية
    def save_additional_requirements(self, form_name, entries):
        """Save additional requirements integration form"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS additional_requirements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_name TEXT,
                program_name TEXT,
                program_code TEXT,
                issuing_entity TEXT,
                form_date TEXT,
                responsible_person TEXT,
                req_type_legal BOOLEAN,
                req_type_sector BOOLEAN,
                req_type_national BOOLEAN,
                req_type_beneficiary BOOLEAN,
                req_type_other TEXT,
                req1_description TEXT,
                req1_source TEXT,
                req1_mandatory TEXT,
                req1_notes TEXT,
                req2_description TEXT,
                req2_source TEXT,
                req2_mandatory TEXT,
                req2_notes TEXT,
                req3_description TEXT,
                req3_source TEXT,
                req3_mandatory TEXT,
                req3_notes TEXT,
                integration_scientific_content TEXT,
                integration_evaluation_methods TEXT,
                integration_learning_outcomes TEXT,
                integration_accreditation_procedures TEXT,
                verification_program_reviewed BOOLEAN,
                verification_committee_approval BOOLEAN,
                verification_documents_updated BOOLEAN,
                verification_parties_notified BOOLEAN,
                approval1_name TEXT,
                approval1_position TEXT,
                approval1_signature TEXT,
                approval1_date TEXT,
                approval2_name TEXT,
                approval2_position TEXT,
                approval2_signature TEXT,
                approval2_date TEXT,
                created_date TEXT
            )''')
            
            data = {
                'form_name': form_name,
                'program_name': self.get_entry_value(entries.get('اسم البرنامج / الشهادة المهنية')),
                'program_code': self.get_entry_value(entries.get('رقم / كود البرنامج')),
                'issuing_entity': self.get_entry_value(entries.get('الجهة المقدمة')),
                'form_date': self.get_entry_value(entries.get('تاريخ إعداد النموذج')),
                'responsible_person': self.get_entry_value(entries.get('المسؤول عن الدمج')),
                'req_type_legal': entries.get('نوع المتطلبات', {}).get('متطلبات قانونية / تنظيمية', tk.BooleanVar()).get(),
                'req_type_sector': entries.get('نوع المتطلبات', {}).get('متطلبات قطاعية / مهنية', tk.BooleanVar()).get(),
                'req_type_national': entries.get('نوع المتطلبات', {}).get('متطلبات وطنية', tk.BooleanVar()).get(),
                'req_type_beneficiary': entries.get('نوع المتطلبات', {}).get('متطلبات الجهة المستفيدة', tk.BooleanVar()).get(),
                'req_type_other': self.get_entry_value(entries.get('أخرى')),
                'req1_description': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('وصف_1')),
                'req1_source': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('مصدر_1')),
                'req1_mandatory': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('إلزامي_1')),
                'req1_notes': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('ملاحظات_1')),
                'req2_description': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('وصف_2')),
                'req2_source': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('مصدر_2')),
                'req2_mandatory': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('إلزامي_2')),
                'req2_notes': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('ملاحظات_2')),
                'req3_description': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('وصف_3')),
                'req3_source': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('مصدر_3')),
                'req3_mandatory': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('إلزامي_3')),
                'req3_notes': self.get_entry_value(entries.get('متطلبات_جدول', {}).get('ملاحظات_3')),
                'integration_scientific_content': self.get_entry_value(entries.get('المحتوى العلمي / التدريبي')),
                'integration_evaluation_methods': self.get_entry_value(entries.get('آليات التقييم والاختبارات')),
                'integration_learning_outcomes': self.get_entry_value(entries.get('مخرجات التعلم والكفاءات المستهدفة')),
                'integration_accreditation_procedures': self.get_entry_value(entries.get('إجراءات الاعتماد والمتابعة')),
                'verification_program_reviewed': entries.get('التحقق من التكامل', {}).get('تمت مراجعة البرنامج بعد الدمج', tk.BooleanVar()).get(),
                'verification_committee_approval': entries.get('التحقق من التكامل', {}).get('تمت موافقة لجنة فنية / اعتماد', tk.BooleanVar()).get(),
                'verification_documents_updated': entries.get('التحقق من التكامل', {}).get('تم تحديث وثائق البرنامج الرسمية', tk.BooleanVar()).get(),
                'verification_parties_notified': entries.get('التحقق من التكامل', {}).get('تم إشعار الجهات المعنية بالمتطلبات الجديدة', tk.BooleanVar()).get(),
                'approval1_name': self.get_entry_value(entries.get('الاعتماد', {}).get('اسم_1')),
                'approval1_position': self.get_entry_value(entries.get('الاعتماد', {}).get('صفة_1')),
                'approval1_signature': self.get_entry_value(entries.get('الاعتماد', {}).get('توقيع_1')),
                'approval1_date': self.get_entry_value(entries.get('الاعتماد', {}).get('تاريخ_1')),
                'approval2_name': self.get_entry_value(entries.get('الاعتماد', {}).get('اسم_2')),
                'approval2_position': self.get_entry_value(entries.get('الاعتماد', {}).get('صفة_2')),
                'approval2_signature': self.get_entry_value(entries.get('الاعتماد', {}).get('توقيع_2')),
                'approval2_date': self.get_entry_value(entries.get('الاعتماد', {}).get('تاريخ_2')),
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            columns = list(data.keys())
            placeholders = ', '.join(['?' for _ in columns])
            columns_str = ', '.join(columns)
            
            cursor.execute(f'''INSERT INTO additional_requirements ({columns_str}) VALUES ({placeholders})''',
                         tuple(data.values()))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("نجح الحفظ", "تم حفظ نموذج دمج المتطلبات الإضافية بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ النموذج: {str(e)}")
    
    def update_additional_requirements(self, form_name, entries):
        """Update additional requirements form"""
        messagebox.showinfo("تحديث", "سيتم تطوير وظيفة التحديث قريباً")
    
    def clear_additional_requirements(self, entries):
        """Clear additional requirements form"""
        for key, entry in entries.items():
            if hasattr(entry, 'delete'):
                if hasattr(entry, 'get') and hasattr(entry, 'insert'):
                    entry.delete(0, tk.END)
                else:
                    entry.delete('1.0', tk.END)
    
    # Missing QF-08 save/update/clear methods
    
    def save_evaluator_renewal(self, form_name, entries):
        """Save evaluator renewal/suspension/withdrawal form"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS evaluator_renewals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_name TEXT,
                accreditation_number TEXT,
                evaluator_name TEXT,
                specialization TEXT,
                current_scope TEXT,
                original_accreditation_date TEXT,
                current_expiry_date TEXT,
                current_status TEXT,
                action_type TEXT,
                request_date TEXT,
                justification TEXT,
                supporting_documents TEXT,
                updated_performance_assessment TEXT,
                decision_made TEXT,
                effective_date TEXT,
                action_expiry_date TEXT,
                new_conditions TEXT,
                follow_up_procedures TEXT,
                accreditation_manager_name TEXT,
                accreditation_manager_signature TEXT,
                accreditation_manager_date TEXT,
                executive_manager_name TEXT,
                executive_manager_signature TEXT,
                executive_manager_date TEXT,
                board_name TEXT,
                board_signature TEXT,
                board_date TEXT,
                additional_notes TEXT,
                created_date TEXT
            )''')
            
            data = {
                'form_name': form_name,
                'accreditation_number': self.get_entry_value(entries.get('رقم اعتماد المقيم')),
                'evaluator_name': self.get_entry_value(entries.get('اسم المقيم')),
                'specialization': self.get_entry_value(entries.get('التخصص')),
                'current_scope': self.get_entry_value(entries.get('نطاق الاعتماد الحالي')),
                'original_accreditation_date': self.get_entry_value(entries.get('تاريخ الاعتماد الأصلي')),
                'current_expiry_date': self.get_entry_value(entries.get('تاريخ انتهاء الاعتماد الحالي')),
                'current_status': self.get_entry_value(entries.get('الحالة الحالية')),
                'action_type': self.get_entry_value(entries.get('نوع الإجراء')),
                'request_date': self.get_entry_value(entries.get('تاريخ طلب الإجراء')),
                'justification': self.get_entry_value(entries.get('مبررات الإجراء')),
                'supporting_documents': self.get_entry_value(entries.get('الوثائق الداعمة')),
                'updated_performance_assessment': self.get_entry_value(entries.get('تقييم الأداء المحدث')),
                'decision_made': self.get_entry_value(entries.get('القرار المتخذ')),
                'effective_date': self.get_entry_value(entries.get('تاريخ سريان القرار')),
                'action_expiry_date': self.get_entry_value(entries.get('تاريخ انتهاء الإجراء (إن وجد)')),
                'new_conditions': self.get_entry_value(entries.get('الشروط والمتطلبات الجديدة')),
                'follow_up_procedures': self.get_entry_value(entries.get('إجراءات المتابعة المطلوبة')),
                'additional_notes': self.get_entry_value(entries.get('ملاحظات إضافية')),
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            # Add approval data
            approval_fields = ['مدير الاعتماد', 'المدير التنفيذي', 'مجلس الإدارة']
            for field in approval_fields:
                field_key = field.replace(' ', '_').lower() + '_'
                data[field_key + 'name'] = self.get_entry_value(entries.get(f'{field}_اسم'))
                data[field_key + 'signature'] = self.get_entry_value(entries.get(f'{field}_توقيع'))
                data[field_key + 'date'] = self.get_entry_value(entries.get(f'{field}_تاريخ'))
            
            columns = list(data.keys())
            placeholders = ', '.join(['?' for _ in columns])
            columns_str = ', '.join(columns)
            
            cursor.execute(f'''INSERT INTO evaluator_renewals ({columns_str}) VALUES ({placeholders})''',
                         tuple(data.values()))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("نجح الحفظ", "تم حفظ سجل تجديد/تعليق/سحب اعتماد المقيم بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ النموذج: {str(e)}")
    
    def update_evaluator_renewal(self, form_name, entries):
        """Update evaluator renewal form"""
        messagebox.showinfo("تحديث", "سيتم تطوير وظيفة التحديث قريباً")
    
    def clear_evaluator_renewal(self, entries):
        """Clear evaluator renewal form"""
        for key, entry in entries.items():
            if hasattr(entry, 'delete'):
                if hasattr(entry, 'get') and hasattr(entry, 'insert'):
                    entry.delete(0, tk.END)
                else:
                    entry.delete('1.0', tk.END)
    
    def save_center_renewal(self, form_name, entries):
        """Save center renewal/withdrawal form"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS center_renewals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_name TEXT,
                accreditation_number TEXT,
                center_name TEXT,
                institution_type TEXT,
                current_scope TEXT,
                original_accreditation_date TEXT,
                expiry_date TEXT,
                current_status TEXT,
                requested_action TEXT,
                request_date TEXT,
                request_justification TEXT,
                scope_changes TEXT,
                updated_documents TEXT,
                performance_assessment TEXT,
                assessment_start_date TEXT,
                assessment_team TEXT,
                assessment_results TEXT,
                recommendations TEXT,
                additional_requirements TEXT,
                corrective_actions TEXT,
                final_decision TEXT,
                decision_effective_date TEXT,
                new_accreditation_period TEXT,
                new_scope TEXT,
                conditions_limitations TEXT,
                follow_up_requirements TEXT,
                additional_notes TEXT,
                created_date TEXT
            )''')
            
            data = {
                'form_name': form_name,
                'accreditation_number': self.get_entry_value(entries.get('رقم اعتماد المركز')),
                'center_name': self.get_entry_value(entries.get('اسم المركز')),
                'institution_type': self.get_entry_value(entries.get('نوع المؤسسة')),
                'current_scope': self.get_entry_value(entries.get('نطاق الاعتماد الحالي')),
                'original_accreditation_date': self.get_entry_value(entries.get('تاريخ الاعتماد الأصلي')),
                'expiry_date': self.get_entry_value(entries.get('تاريخ انتهاء الاعتماد')),
                'current_status': self.get_entry_value(entries.get('الحالة الحالية للاعتماد')),
                'requested_action': self.get_entry_value(entries.get('نوع الإجراء المطلوب')),
                'request_date': self.get_entry_value(entries.get('تاريخ تقديم الطلب')),
                'request_justification': self.get_entry_value(entries.get('مبررات الطلب')),
                'scope_changes': self.get_entry_value(entries.get('التغييرات المطلوبة في النطاق')),
                'updated_documents': self.get_entry_value(entries.get('الوثائق المحدثة المرفقة')),
                'performance_assessment': self.get_entry_value(entries.get('تقييم الأداء خلال فترة الاعتماد')),
                'assessment_start_date': self.get_entry_value(entries.get('تاريخ بدء التقييم')),
                'assessment_team': self.get_entry_value(entries.get('فريق التقييم')),
                'assessment_results': self.get_entry_value(entries.get('نتائج التقييم')),
                'recommendations': self.get_entry_value(entries.get('التوصيات')),
                'additional_requirements': self.get_entry_value(entries.get('المتطلبات الإضافية')),
                'corrective_actions': self.get_entry_value(entries.get('الإجراءات التصحيحية المطلوبة')),
                'final_decision': self.get_entry_value(entries.get('القرار النهائي')),
                'decision_effective_date': self.get_entry_value(entries.get('تاريخ سريان القرار')),
                'new_accreditation_period': self.get_entry_value(entries.get('مدة الاعتماد الجديدة')),
                'new_scope': self.get_entry_value(entries.get('النطاق الجديد للاعتماد')),
                'conditions_limitations': self.get_entry_value(entries.get('الشروط والقيود')),
                'follow_up_requirements': self.get_entry_value(entries.get('متطلبات المتابعة')),
                'additional_notes': self.get_entry_value(entries.get('ملاحظات نهائية')),
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            columns = list(data.keys())
            placeholders = ', '.join(['?' for _ in columns])
            columns_str = ', '.join(columns)
            
            cursor.execute(f'''INSERT INTO center_renewals ({columns_str}) VALUES ({placeholders})''',
                         tuple(data.values()))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("نجح الحفظ", "تم حفظ سجل تجديد/سحب اعتماد المركز بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ النموذج: {str(e)}")
    
    def update_center_renewal(self, form_name, entries):
        """Update center renewal form"""
        messagebox.showinfo("تحديث", "سيتم تطوير وظيفة التحديث قريباً")
    
    def clear_center_renewal(self, entries):
        """Clear center renewal form"""
        for key, entry in entries.items():
            if hasattr(entry, 'delete'):
                if hasattr(entry, 'get') and hasattr(entry, 'insert'):
                    entry.delete(0, tk.END)
                else:
                    entry.delete('1.0', tk.END)
    
    def save_competency_assessment_record(self, form_name, entries):
        """Save competency assessment record form"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS competency_assessment_records (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_name TEXT,
                record_number TEXT,
                assessment_date TEXT,
                assessed_person_name TEXT,
                position TEXT,
                employer TEXT,
                assessment_purpose TEXT,
                responsible_assessor TEXT,
                total_points TEXT,
                percentage TEXT,
                overall_competency_level TEXT,
                strengths TEXT,
                weaknesses TEXT,
                required_development_areas TEXT,
                proposed_training_programs TEXT,
                development_timeline TEXT,
                progress_indicators TEXT,
                required_resources TEXT,
                follow_up_responsible TEXT,
                chief_assessor_name TEXT,
                chief_assessor_signature TEXT,
                chief_assessor_date TEXT,
                assessment_reviewer_name TEXT,
                assessment_reviewer_signature TEXT,
                assessment_reviewer_date TEXT,
                hr_manager_name TEXT,
                hr_manager_signature TEXT,
                hr_manager_date TEXT,
                created_date TEXT
            )''')
            
            data = {
                'form_name': form_name,
                'record_number': self.get_entry_value(entries.get('رقم سجل التقييم')),
                'assessment_date': self.get_entry_value(entries.get('تاريخ التقييم')),
                'assessed_person_name': self.get_entry_value(entries.get('اسم المُقيَّم')),
                'position': self.get_entry_value(entries.get('المنصب/الوظيفة')),
                'employer': self.get_entry_value(entries.get('جهة العمل')),
                'assessment_purpose': self.get_entry_value(entries.get('هدف التقييم')),
                'responsible_assessor': self.get_entry_value(entries.get('المقيم المسؤول')),
                'total_points': self.get_entry_value(entries.get('إجمالي النقاط')),
                'percentage': self.get_entry_value(entries.get('النسبة المئوية')),
                'overall_competency_level': self.get_entry_value(entries.get('مستوى الكفاءة الإجمالي')),
                'strengths': self.get_entry_value(entries.get('نقاط القوة')),
                'weaknesses': self.get_entry_value(entries.get('نقاط الضعف')),
                'required_development_areas': self.get_entry_value(entries.get('مجالات التطوير المطلوبة')),
                'proposed_training_programs': self.get_entry_value(entries.get('البرامج التدريبية المقترحة')),
                'development_timeline': self.get_entry_value(entries.get('الجدول الزمني للتطوير')),
                'progress_indicators': self.get_entry_value(entries.get('مؤشرات قياس التقدم')),
                'required_resources': self.get_entry_value(entries.get('الموارد المطلوبة')),
                'follow_up_responsible': self.get_entry_value(entries.get('المسؤول عن المتابعة')),
                'chief_assessor_name': self.get_entry_value(entries.get('المقيم الرئيسي_اسم')),
                'chief_assessor_signature': self.get_entry_value(entries.get('المقيم الرئيسي_توقيع')),
                'chief_assessor_date': self.get_entry_value(entries.get('المقيم الرئيسي_تاريخ')),
                'assessment_reviewer_name': self.get_entry_value(entries.get('مراجع التقييم_اسم')),
                'assessment_reviewer_signature': self.get_entry_value(entries.get('مراجع التقييم_توقيع')),
                'assessment_reviewer_date': self.get_entry_value(entries.get('مراجع التقييم_تاريخ')),
                'hr_manager_name': self.get_entry_value(entries.get('مدير الموارد البشرية_اسم')),
                'hr_manager_signature': self.get_entry_value(entries.get('مدير الموارد البشرية_توقيع')),
                'hr_manager_date': self.get_entry_value(entries.get('مدير الموارد البشرية_تاريخ')),
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            columns = list(data.keys())
            placeholders = ', '.join(['?' for _ in columns])
            columns_str = ', '.join(columns)
            
            cursor.execute(f'''INSERT INTO competency_assessment_records ({columns_str}) VALUES ({placeholders})''',
                         tuple(data.values()))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("نجح الحفظ", "تم حفظ سجل تقييم الكفاءات بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ النموذج: {str(e)}")
    
    def update_competency_assessment_record(self, form_name, entries):
        """Update competency assessment record form"""
        messagebox.showinfo("تحديث", "سيتم تطوير وظيفة التحديث قريباً")
    
    def clear_competency_assessment_record(self, entries):
        """Clear competency assessment record form"""
        for key, entry in entries.items():
            if hasattr(entry, 'delete'):
                if hasattr(entry, 'get') and hasattr(entry, 'insert'):
                    entry.delete(0, tk.END)
                else:
                    entry.delete('1.0', tk.END)
    
    def save_additional_requirements_review(self, form_name, entries):
        """Save additional requirements review form"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS additional_requirements_reviews (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                form_name TEXT,
                review_record_number TEXT,
                review_date TEXT,
                review_type TEXT,
                responsible_reviewer TEXT,
                review_scope TEXT,
                review_reason TEXT,
                reference_standards TEXT,
                proposed_new_requirements TEXT,
                deleted_requirements TEXT,
                modified_requirements TEXT,
                change_justifications TEXT,
                system_impact TEXT,
                implementation_priorities TEXT,
                timeline TEXT,
                required_resources TEXT,
                responsibilities TEXT,
                expected_risks TEXT,
                success_indicators TEXT,
                next_review_date TEXT,
                review_frequency TEXT,
                follow_up_mechanisms TEXT,
                required_progress_reports TEXT,
                management_system_manager_name TEXT,
                management_system_manager_signature TEXT,
                management_system_manager_date TEXT,
                internal_auditor_name TEXT,
                internal_auditor_signature TEXT,
                internal_auditor_date TEXT,
                executive_manager_name TEXT,
                executive_manager_signature TEXT,
                executive_manager_date TEXT,
                final_notes TEXT,
                created_date TEXT
            )''')
            
            data = {
                'form_name': form_name,
                'review_record_number': self.get_entry_value(entries.get('رقم سجل المراجعة')),
                'review_date': self.get_entry_value(entries.get('تاريخ المراجعة')),
                'review_type': self.get_entry_value(entries.get('نوع المراجعة')),
                'responsible_reviewer': self.get_entry_value(entries.get('المراجع المسؤول')),
                'review_scope': self.get_entry_value(entries.get('النطاق المراجع')),
                'review_reason': self.get_entry_value(entries.get('سبب المراجعة')),
                'reference_standards': self.get_entry_value(entries.get('المعايير المرجعية')),
                'proposed_new_requirements': self.get_entry_value(entries.get('المتطلبات الجديدة المقترحة')),
                'deleted_requirements': self.get_entry_value(entries.get('المتطلبات المحذوفة')),
                'modified_requirements': self.get_entry_value(entries.get('المتطلبات المعدلة')),
                'change_justifications': self.get_entry_value(entries.get('مبررات التغييرات')),
                'system_impact': self.get_entry_value(entries.get('تأثير التغييرات على النظام')),
                'implementation_priorities': self.get_entry_value(entries.get('أولويات التنفيذ')),
                'timeline': self.get_entry_value(entries.get('الجدول الزمني')),
                'required_resources': self.get_entry_value(entries.get('الموارد المطلوبة')),
                'responsibilities': self.get_entry_value(entries.get('المسؤوليات')),
                'expected_risks': self.get_entry_value(entries.get('المخاطر المتوقعة')),
                'success_indicators': self.get_entry_value(entries.get('مؤشرات النجاح')),
                'next_review_date': self.get_entry_value(entries.get('تاريخ المراجعة القادمة')),
                'review_frequency': self.get_entry_value(entries.get('دورية المراجعة')),
                'follow_up_mechanisms': self.get_entry_value(entries.get('آليات المتابعة')),
                'required_progress_reports': self.get_entry_value(entries.get('تقارير التقدم المطلوبة')),
                'management_system_manager_name': self.get_entry_value(entries.get('مدير نظام الإدارة_اسم')),
                'management_system_manager_signature': self.get_entry_value(entries.get('مدير نظام الإدارة_توقيع')),
                'management_system_manager_date': self.get_entry_value(entries.get('مدير نظام الإدارة_تاريخ')),
                'internal_auditor_name': self.get_entry_value(entries.get('المراجع الداخلي_اسم')),
                'internal_auditor_signature': self.get_entry_value(entries.get('المراجع الداخلي_توقيع')),
                'internal_auditor_date': self.get_entry_value(entries.get('المراجع الداخلي_تاريخ')),
                'executive_manager_name': self.get_entry_value(entries.get('المدير التنفيذي_اسم')),
                'executive_manager_signature': self.get_entry_value(entries.get('المدير التنفيذي_توقيع')),
                'executive_manager_date': self.get_entry_value(entries.get('المدير التنفيذي_تاريخ')),
                'final_notes': self.get_entry_value(entries.get('ملاحظات نهائية')),
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            columns = list(data.keys())
            placeholders = ', '.join(['?' for _ in columns])
            columns_str = ', '.join(columns)
            
            cursor.execute(f'''INSERT INTO additional_requirements_reviews ({columns_str}) VALUES ({placeholders})''',
                         tuple(data.values()))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("نجح الحفظ", "تم حفظ سجل المراجعة والتحديث للمتطلبات الإضافية بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ النموذج: {str(e)}")
    
    def update_additional_requirements_review(self, form_name, entries):
        """Update additional requirements review form"""
        messagebox.showinfo("تحديث", "سيتم تطوير وظيفة التحديث قريباً")
    
    def clear_additional_requirements_review(self, entries):
        """Clear additional requirements review form"""
        for key, entry in entries.items():
            if hasattr(entry, 'delete'):
                if hasattr(entry, 'get') and hasattr(entry, 'insert'):
                    entry.delete(0, tk.END)
                else:
                    entry.delete('1.0', tk.END)
    
    # QP-07.1 Form Creation Methods - إدارة طلبات الامتحان ونتائج التقييم
    
    def create_exam_application_form(self, parent, form_name):
        """Create exam application form for QF-07-01-01 based on user specifications"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-07-01-01 نموذج طلب التقديم للامتحان",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # Section 1: Personal Data (أولاً: البيانات الشخصية)
        personal_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        personal_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(personal_frame, text="أولاً: البيانات الشخصية",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        personal_fields = [
            "الاسم الكامل",
            "الرقم القومي / رقم الهوية",
            "تاريخ الميلاد",
            "الجنسية",
            "رقم الهاتف",
            "البريد الإلكتروني",
            "العنوان الكامل"
        ]
        
        for field in personal_fields:
            field_frame = tk.Frame(personal_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Section 2: Exam Details (ثانياً: تفاصيل الامتحان)
        exam_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        exam_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(exam_frame, text="ثانياً: تفاصيل الامتحان",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        exam_fields = [
            "اسم الشهادة / البرنامج الامتحاني",
            "الجهة المنظمة",
            "الفرع / المركز",
            "تاريخ التقديم المطلوب"
        ]
        
        for field in exam_fields:
            field_frame = tk.Frame(exam_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Language selection
        lang_frame = tk.Frame(exam_frame, bg="#3C1361")
        lang_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(lang_frame, text="• لغة الامتحان:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        lang_selection_frame = tk.Frame(lang_frame, bg="#3C1361")
        lang_selection_frame.pack(anchor="e", padx=5)
        
        entries["لغة الامتحان"] = {}
        lang_options = ["العربية", "الإنجليزية"]
        
        for option in lang_options:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(lang_selection_frame, text=f"☐ {option}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(side="right", padx=10)
            entries["لغة الامتحان"][option] = var
        
        # Other language option
        other_lang_frame = tk.Frame(lang_selection_frame, bg="#3C1361")
        other_lang_frame.pack(side="right", padx=10)
        
        other_var = tk.BooleanVar()
        other_cb = tk.Checkbutton(other_lang_frame, text="☐ أخرى:", variable=other_var,
                                font=self.arabic_font, fg="white", bg="#3C1361",
                                selectcolor="#2D0A4D", anchor="e")
        other_cb.pack(side="right")
        
        other_entry = tk.Entry(other_lang_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
        other_entry.pack(side="right", padx=5)
        
        entries["لغة الامتحان"]["أخرى"] = other_var
        entries["لغة أخرى تفاصيل"] = other_entry
        
        # Previous application question
        prev_frame = tk.Frame(exam_frame, bg="#3C1361")
        prev_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(prev_frame, text="• هل تقدمت سابقاً لهذا الامتحان؟", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        prev_selection_frame = tk.Frame(prev_frame, bg="#3C1361")
        prev_selection_frame.pack(anchor="e", padx=5)
        
        entries["تقديم سابق"] = {}
        prev_options = ["نعم", "لا"]
        
        for option in prev_options:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(prev_selection_frame, text=f"☐ {option}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(side="right", padx=10)
            entries["تقديم سابق"][option] = var
        
        # Previous date if yes
        prev_date_frame = tk.Frame(exam_frame, bg="#3C1361")
        prev_date_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(prev_date_frame, text="   إذا كانت الإجابة نعم، اذكر التاريخ:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        prev_date_entry = tk.Entry(prev_date_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
        prev_date_entry.pack(anchor="e", padx=5, fill="x")
        entries["تاريخ التقديم السابق"] = prev_date_entry
        
        # Section 3: Attached Documents (ثالثاً: الوثائق المرفقة)
        docs_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        docs_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(docs_frame, text="ثالثاً: الوثائق المرفقة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        tk.Label(docs_frame, text="يرجى التأشير على الوثائق المرفقة مع الطلب:",
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e", padx=10, pady=2)
        
        doc_options = [
            "صورة بطاقة الهوية / جواز السفر",
            "صورة شخصية حديثة",
            "إثبات سداد رسوم الامتحان",
            "شهادة المؤهل الدراسي"
        ]
        
        entries["الوثائق المرفقة"] = {}
        for option in doc_options:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(docs_frame, text=f"☐ {option}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["الوثائق المرفقة"][option] = var
        
        # Other documents
        other_docs_frame = tk.Frame(docs_frame, bg="#3C1361")
        other_docs_frame.pack(fill="x", padx=10, pady=2)
        
        other_docs_var = tk.BooleanVar()
        other_docs_cb = tk.Checkbutton(other_docs_frame, text="☐ مستندات أخرى:", variable=other_docs_var,
                                     font=self.arabic_font, fg="white", bg="#3C1361",
                                     selectcolor="#2D0A4D", anchor="e")
        other_docs_cb.pack(side="right", padx=10)
        
        other_docs_entry = tk.Entry(other_docs_frame, font=self.arabic_font, width=40, relief="solid", bd=1)
        other_docs_entry.pack(side="right", padx=5)
        
        entries["الوثائق المرفقة"]["مستندات أخرى"] = other_docs_var
        entries["مستندات أخرى تفاصيل"] = other_docs_entry
        
        # Section 4: Applicant Declaration (رابعاً: إقرار المتقدم)
        decl_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        decl_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(decl_frame, text="رابعاً: إقرار المتقدم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        decl_text = "أقر أنا الموقع أدناه بأن جميع البيانات والمعلومات الواردة أعلاه صحيحة، وأتحمل المسؤولية القانونية في حال ثبوت خلاف ذلك. كما أتعهد بالالتزام بجميع لوائح وتعليمات الجهة المنظمة للامتحان."
        
        tk.Label(decl_frame, text=decl_text, font=self.arabic_font, fg="white", bg="#3C1361",
                wraplength=800, justify="right").pack(anchor="e", padx=10, pady=5)
        
        decl_fields = ["اسم المتقدم", "التوقيع", "التاريخ"]
        
        for field in decl_fields:
            field_frame = tk.Frame(decl_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[f"إقرار_{field}"] = entry
        
        # Section 5: Administrative Use Only (خامساً: للاستخدام الإداري فقط)
        admin_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        admin_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(admin_frame, text="خامساً: للاستخدام الإداري فقط",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        admin_fields = [
            "تم استلام الطلب بواسطة",
            "التاريخ",
            "توقيع الموظف",
            "ملاحظات"
        ]
        
        for field in admin_fields:
            field_frame = tk.Frame(admin_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "ملاحظات":
                entry = tk.Text(field_frame, font=self.arabic_font, height=3, width=50)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[f"إداري_{field}"] = entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_exam_application,
                                update_func=self.update_exam_application,
                                clear_func=self.clear_exam_application)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_exam_results_record_form(self, parent, form_name):
        """Create exam results record form for QF-07-01-02 based on user specifications"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-07-01-02 سجل نتائج التقييمات والامتحانات",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # General Data (البيانات العامة)
        general_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        general_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(general_frame, text="البيانات العامة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        general_fields = [
            "اسم البرنامج / الشهادة",
            "تاريخ الامتحان / التقييم",
            "اسم المركز / الفرع",
            "اسم المقيم / المراقب"
        ]
        
        for field in general_fields:
            field_frame = tk.Frame(general_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Results Table (جدول نتائج التقييم)
        results_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        results_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(results_frame, text="جدول نتائج التقييم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Results table
        results_table_frame = tk.Frame(results_frame, bg="#3C1361")
        results_table_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        columns = ("م", "إسم المتقدم", "رقم الهوية / الكود", "الدرجة", "التقدير ( ناجح / راسب )", "ملاحظات")
        results_tree = ttk.Treeview(results_table_frame, columns=columns, show="headings", height=12)
        
        # Configure columns
        results_tree.column("م", width=50, anchor="center")
        results_tree.column("إسم المتقدم", width=150, anchor="center")
        results_tree.column("رقم الهوية / الكود", width=120, anchor="center")
        results_tree.column("الدرجة", width=80, anchor="center")
        results_tree.column("التقدير ( ناجح / راسب )", width=120, anchor="center")
        results_tree.column("ملاحظات", width=150, anchor="center")
        
        for col in columns:
            results_tree.heading(col, text=col)
        
        # Add default rows (1-10)
        for i in range(1, 11):
            results_tree.insert("", tk.END, values=(i, "", "", "", "", ""))
        
        # Results management buttons
        results_btn_frame = tk.Frame(results_frame, bg="#3C1361")
        results_btn_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Button(results_btn_frame, text="إضافة صف", 
                 command=lambda: self.add_result_row(results_tree),
                 font=self.arabic_font, fg="white", bg="#4CAF50").pack(side="right", padx=5)
        
        tk.Button(results_btn_frame, text="تعديل", 
                 command=lambda: self.edit_result_row(results_tree),
                 font=self.arabic_font, fg="white", bg="#FF9800").pack(side="right", padx=5)
        
        tk.Button(results_btn_frame, text="حذف", 
                 command=lambda: self.delete_result_row(results_tree),
                 font=self.arabic_font, fg="white", bg="#F44336").pack(side="right", padx=5)
        
        results_tree.pack(fill="both", expand=True)
        entries["results_tree"] = results_tree
        
        # General Notes (الملاحظات العامة)
        notes_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        notes_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(notes_frame, text="الملاحظات العامة:",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        notes_text = tk.Text(notes_frame, font=self.arabic_font, height=4, width=60, relief="solid", bd=1)
        notes_text.pack(anchor="e", padx=10, pady=5, fill="x")
        entries["الملاحظات العامة"] = notes_text
        
        # Record Approval (اعتماد السجل)
        approval_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        approval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(approval_frame, text="اعتماد السجل",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Approval fields arranged in rows
        approval_fields = [
            ("اسم المُعد", "التوقيع"),
            ("اسم المراجع", "التوقيع")
        ]
        
        for name_label, signature_label in approval_fields:
            approval_row_frame = tk.Frame(approval_frame, bg="#3C1361")
            approval_row_frame.pack(fill="x", padx=10, pady=5)
            
            # Name field
            name_frame = tk.Frame(approval_row_frame, bg="#3C1361")
            name_frame.pack(side="right", padx=10)
            
            tk.Label(name_frame, text=f"• {name_label}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            name_entry = tk.Entry(name_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            name_entry.pack(side="right", padx=5)
            entries[name_label] = name_entry
            
            # Signature field
            sig_frame = tk.Frame(approval_row_frame, bg="#3C1361")
            sig_frame.pack(side="right", padx=10)
            
            tk.Label(sig_frame, text=f"{signature_label}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            sig_entry = tk.Entry(sig_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            sig_entry.pack(side="right", padx=5)
            entries[f"{name_label}_{signature_label}"] = sig_entry
        
        # Approval date
        date_frame = tk.Frame(approval_frame, bg="#3C1361")
        date_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(date_frame, text="• تاريخ الاعتماد:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        date_entry = tk.Entry(date_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
        date_entry.pack(anchor="e", padx=5, fill="x")
        entries["تاريخ الاعتماد"] = date_entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_exam_results_record,
                                update_func=self.update_exam_results_record,
                                clear_func=self.clear_exam_results_record)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_certification_decisions_record_form(self, parent, form_name):
        """Create certification decisions record form for QF-07-01-03 based on user specifications"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-07-01-03 سجل قرارات الاعتماد",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # General Data (البيانات العامة)
        general_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        general_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(general_frame, text="البيانات العامة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        general_fields = [
            "اسم الشهادة / البرنامج",
            "تاريخ إصدار القرار",
            "الجهة المعتمدة / اللجنة",
            "رئيس اللجنة"
        ]
        
        for field in general_fields:
            field_frame = tk.Frame(general_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Certification Decisions Table (جدول قرارات الاعتماد)
        decisions_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        decisions_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(decisions_frame, text="جدول قرارات الاعتماد",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Decisions table
        decisions_table_frame = tk.Frame(decisions_frame, bg="#3C1361")
        decisions_table_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        columns = ("م", "اسم المتقدم", "رقم الهوية / الكود", "نتيجة التقييم", "القرار (معتمد / غير معتمد)", "سبب القرار / ملاحظات")
        decisions_tree = ttk.Treeview(decisions_table_frame, columns=columns, show="headings", height=12)
        
        # Configure columns
        decisions_tree.column("م", width=50, anchor="center")
        decisions_tree.column("اسم المتقدم", width=150, anchor="center")
        decisions_tree.column("رقم الهوية / الكود", width=120, anchor="center")
        decisions_tree.column("نتيجة التقييم", width=100, anchor="center")
        decisions_tree.column("القرار (معتمد / غير معتمد)", width=130, anchor="center")
        decisions_tree.column("سبب القرار / ملاحظات", width=200, anchor="center")
        
        for col in columns:
            decisions_tree.heading(col, text=col)
        
        # Add default rows (1-10)
        for i in range(1, 11):
            decisions_tree.insert("", tk.END, values=(i, "", "", "", "", ""))
        
        # Decisions management buttons
        decisions_btn_frame = tk.Frame(decisions_frame, bg="#3C1361")
        decisions_btn_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Button(decisions_btn_frame, text="إضافة صف", 
                 command=lambda: self.add_decision_row(decisions_tree),
                 font=self.arabic_font, fg="white", bg="#4CAF50").pack(side="right", padx=5)
        
        tk.Button(decisions_btn_frame, text="تعديل", 
                 command=lambda: self.edit_decision_row(decisions_tree),
                 font=self.arabic_font, fg="white", bg="#FF9800").pack(side="right", padx=5)
        
        tk.Button(decisions_btn_frame, text="حذف", 
                 command=lambda: self.delete_decision_row(decisions_tree),
                 font=self.arabic_font, fg="white", bg="#F44336").pack(side="right", padx=5)
        
        decisions_tree.pack(fill="both", expand=True)
        entries["decisions_tree"] = decisions_tree
        
        # Committee Members Signatures (توقيع أعضاء اللجنة)
        signatures_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        signatures_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(signatures_frame, text="توقيع أعضاء اللجنة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Signatures table
        sig_table_frame = tk.Frame(signatures_frame, bg="#3C1361")
        sig_table_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        sig_columns = ("الاسم", "الصفة", "التوقيع")
        sig_tree = ttk.Treeview(sig_table_frame, columns=sig_columns, show="headings", height=6)
        
        # Configure signature columns
        sig_tree.column("الاسم", width=200, anchor="center")
        sig_tree.column("الصفة", width=150, anchor="center")
        sig_tree.column("التوقيع", width=200, anchor="center")
        
        for col in sig_columns:
            sig_tree.heading(col, text=col)
        
        # Add default signature rows
        for i in range(1, 5):
            sig_tree.insert("", tk.END, values=("", "", ""))
        
        # Signature management buttons
        sig_btn_frame = tk.Frame(signatures_frame, bg="#3C1361")
        sig_btn_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Button(sig_btn_frame, text="إضافة صف", 
                 command=lambda: self.add_signature_row(sig_tree),
                 font=self.arabic_font, fg="white", bg="#4CAF50").pack(side="right", padx=5)
        
        tk.Button(sig_btn_frame, text="تعديل", 
                 command=lambda: self.edit_signature_row(sig_tree),
                 font=self.arabic_font, fg="white", bg="#FF9800").pack(side="right", padx=5)
        
        tk.Button(sig_btn_frame, text="حذف", 
                 command=lambda: self.delete_signature_row(sig_tree),
                 font=self.arabic_font, fg="white", bg="#F44336").pack(side="right", padx=5)
        
        sig_tree.pack(fill="both", expand=True)
        entries["signatures_tree"] = sig_tree
        
        # Record Approval (اعتماد السجل)
        approval_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        approval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(approval_frame, text="اعتماد السجل",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        approval_fields = [
            "اسم مسؤول الاعتماد",
            "التوقيع",
            "تاريخ الاعتماد"
        ]
        
        for field in approval_fields:
            field_frame = tk.Frame(approval_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[f"اعتماد_{field}"] = entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_certification_decisions_record,
                                update_func=self.update_certification_decisions_record,
                                clear_func=self.clear_certification_decisions_record)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_complaints_report_form(self, parent, form_name):
        """Create complaints report form for QF-07-01-04 based on user specifications"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-07-01-04 تقرير شكاوى وتظلمات",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # Section 1: Complainant Data (أولاً: بيانات مقدم الشكوى / التظلم)
        complainant_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        complainant_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(complainant_frame, text="أولاً: بيانات مقدم الشكوى / التظلم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        complainant_fields = [
            "الاسم الكامل",
            "رقم الهوية / الكود",
            "رقم الهاتف",
            "البريد الإلكتروني",
            "تاريخ التقديم"
        ]
        
        for field in complainant_fields:
            field_frame = tk.Frame(complainant_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Section 2: Request Type (ثانياً: نوع الطلب)
        request_type_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        request_type_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(request_type_frame, text="ثانياً: نوع الطلب",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        request_options = ["شكوى", "تظلم من نتيجة"]
        
        entries["نوع الطلب"] = {}
        
        request_selection_frame = tk.Frame(request_type_frame, bg="#3C1361")
        request_selection_frame.pack(anchor="e", padx=10, pady=5)
        
        for option in request_options:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(request_selection_frame, text=f"☐ {option}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(side="right", padx=10)
            entries["نوع الطلب"][option] = var
        
        # Other option
        other_frame = tk.Frame(request_type_frame, bg="#3C1361")
        other_frame.pack(fill="x", padx=10, pady=2)
        
        other_var = tk.BooleanVar()
        other_cb = tk.Checkbutton(other_frame, text="☐ أخرى:", variable=other_var,
                                font=self.arabic_font, fg="white", bg="#3C1361",
                                selectcolor="#2D0A4D", anchor="e")
        other_cb.pack(side="right", padx=10)
        
        other_entry = tk.Entry(other_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
        other_entry.pack(side="right", padx=5)
        
        entries["نوع الطلب"]["أخرى"] = other_var
        entries["أخرى تفاصيل"] = other_entry
        
        # Section 3: Complaint Details (ثالثاً: تفاصيل الشكوى / التظلم)
        details_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        details_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(details_frame, text="ثالثاً: تفاصيل الشكوى / التظلم",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Subject
        subject_frame = tk.Frame(details_frame, bg="#3C1361")
        subject_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(subject_frame, text="• الموضوع:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        subject_entry = tk.Entry(subject_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
        subject_entry.pack(anchor="e", padx=5, fill="x")
        entries["الموضوع"] = subject_entry
        
        # Details
        details_text_frame = tk.Frame(details_frame, bg="#3C1361")
        details_text_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(details_text_frame, text="• التفاصيل:",
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        details_text = tk.Text(details_text_frame, font=self.arabic_font, height=4, width=60, relief="solid", bd=1)
        details_text.pack(anchor="e", padx=5, pady=5, fill="x")
        entries["التفاصيل"] = details_text
        
        # Section 4: Actions Taken (رابعاً: الإجراءات المتخذة)
        actions_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        actions_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(actions_frame, text="رابعاً: الإجراءات المتخذة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        action_fields = [
            "تاريخ استلام الشكوى / التظلم",
            "الجهة المسؤولة عن التحقيق"
        ]
        
        for field in action_fields:
            field_frame = tk.Frame(actions_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Actions taken text
        actions_text_frame = tk.Frame(actions_frame, bg="#3C1361")
        actions_text_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(actions_text_frame, text="• الإجراءات المتخذة:",
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        actions_text = tk.Text(actions_text_frame, font=self.arabic_font, height=3, width=60, relief="solid", bd=1)
        actions_text.pack(anchor="e", padx=5, pady=5, fill="x")
        entries["الإجراءات المتخذة"] = actions_text
        
        # Section 5: Final Decision (خامساً: القرار النهائي)
        decision_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        decision_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(decision_frame, text="خامساً: القرار النهائي",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        decision_options = [
            "قبول الشكوى / التظلم",
            "رفض الشكوى / التظلم",
            "تم اتخاذ إجراء تصحيحي"
        ]
        
        entries["القرار النهائي"] = {}
        
        for option in decision_options:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(decision_frame, text=f"• ☐ {option}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["القرار النهائي"][option] = var
        
        # Response date
        response_frame = tk.Frame(decision_frame, bg="#3C1361")
        response_frame.pack(fill="x", padx=10, pady=2)
        
        response_var = tk.BooleanVar()
        response_cb = tk.Checkbutton(response_frame, text="• ☐ تم الرد على مقدم الطلب بتاريخ:", variable=response_var,
                                   font=self.arabic_font, fg="white", bg="#3C1361",
                                   selectcolor="#2D0A4D", anchor="e")
        response_cb.pack(side="right", padx=10)
        
        response_entry = tk.Entry(response_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
        response_entry.pack(side="right", padx=5)
        
        entries["القرار النهائي"]["تم الرد على مقدم الطلب بتاريخ"] = response_var
        entries["تاريخ الرد"] = response_entry
        
        # Decision summary
        summary_frame = tk.Frame(decision_frame, bg="#3C1361")
        summary_frame.pack(fill="x", padx=10, pady=2)
        
        tk.Label(summary_frame, text="ملخص القرار:",
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        
        summary_text = tk.Text(summary_frame, font=self.arabic_font, height=3, width=60, relief="solid", bd=1)
        summary_text.pack(anchor="e", padx=5, pady=5, fill="x")
        entries["ملخص القرار"] = summary_text
        
        # Section 6: Report Approval (سادساً: اعتماد التقرير)
        approval_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        approval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(approval_frame, text="سادساً: اعتماد التقرير",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        approval_fields = [
            ("اسم المسؤول", "التوقيع"),
            ("الوظيفة", "التاريخ")
        ]
        
        for field1, field2 in approval_fields:
            approval_row_frame = tk.Frame(approval_frame, bg="#3C1361")
            approval_row_frame.pack(fill="x", padx=10, pady=5)
            
            # First field
            field1_frame = tk.Frame(approval_row_frame, bg="#3C1361")
            field1_frame.pack(side="right", padx=10)
            
            tk.Label(field1_frame, text=f"• {field1}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            field1_entry = tk.Entry(field1_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            field1_entry.pack(side="right", padx=5)
            entries[f"اعتماد_{field1}"] = field1_entry
            
            # Second field
            field2_frame = tk.Frame(approval_row_frame, bg="#3C1361")
            field2_frame.pack(side="right", padx=10)
            
            tk.Label(field2_frame, text=f"{field2}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            field2_entry = tk.Entry(field2_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            field2_entry.pack(side="right", padx=5)
            entries[f"اعتماد_{field2}"] = field2_entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_complaints_report,
                                update_func=self.update_complaints_report,
                                clear_func=self.clear_complaints_report)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    def create_records_destruction_report_form(self, parent, form_name):
        """Create records destruction report form for QF-07-01-05 based on user specifications"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-07-01-05 تقرير إتلاف السجلات",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # Section 1: General Data (أولاً: البيانات العامة)
        general_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        general_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(general_frame, text="أولاً: البيانات العامة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        general_fields = [
            "رقم التقرير",
            "تاريخ التقرير",
            "الجهة المسؤولة عن الإتلاف",
            "نوع السجلات المتلفة",
            "تاريخ الموافقة على الإتلاف"
        ]
        
        for field in general_fields:
            field_frame = tk.Frame(general_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Section 2: Destruction Details Table (ثانياً: تفاصيل عملية الإتلاف)
        destruction_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        destruction_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(destruction_frame, text="ثانياً: تفاصيل عملية الإتلاف",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Destruction details table
        destruction_table_frame = tk.Frame(destruction_frame, bg="#3C1361")
        destruction_table_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        columns = ("م", "نوع السجل", "فترة السجلات", "عدد الملفات", "طريقة الإتلاف", "تاريخ الإتلاف", "ملاحظات")
        destruction_tree = ttk.Treeview(destruction_table_frame, columns=columns, show="headings", height=8)
        
        for col in columns:
            destruction_tree.heading(col, text=col)
            if col == "ملاحظات":
                destruction_tree.column(col, width=200, anchor="center")
            else:
                destruction_tree.column(col, width=120, anchor="center")
        
        destruction_tree.pack(fill="both", expand=True)
        entries["destruction_table"] = destruction_tree
        
        # Table management buttons
        destruction_btn_frame = tk.Frame(destruction_frame, bg="#3C1361")
        destruction_btn_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Button(destruction_btn_frame, text="إضافة سجل", 
                 font=self.arabic_font_bold, fg="white", bg="#4CAF50",
                 command=lambda: self.add_destruction_record(destruction_tree)).pack(side="right", padx=5)
        
        tk.Button(destruction_btn_frame, text="تعديل", 
                 font=self.arabic_font_bold, fg="white", bg="#2196F3",
                 command=lambda: self.edit_destruction_record(destruction_tree)).pack(side="right", padx=5)
        
        tk.Button(destruction_btn_frame, text="حذف", 
                 font=self.arabic_font_bold, fg="white", bg="#f44336",
                 command=lambda: self.delete_destruction_record(destruction_tree)).pack(side="right", padx=5)
        
        # Section 3: Authorization (ثالثاً: التفويض)
        authorization_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        authorization_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(authorization_frame, text="ثالثاً: التفويض",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        auth_fields = [
            "مدير الجودة",
            "مدير الأرشيف",
            "المدير العام"
        ]
        
        for i, field in enumerate(auth_fields, 1):
            auth_row_frame = tk.Frame(authorization_frame, bg="#3C1361")
            auth_row_frame.pack(fill="x", padx=10, pady=5)
            
            # Name field
            name_frame = tk.Frame(auth_row_frame, bg="#3C1361")
            name_frame.pack(side="right", padx=10)
            
            tk.Label(name_frame, text=f"{i}. اسم {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            name_entry = tk.Entry(name_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            name_entry.pack(side="right", padx=5)
            entries[f"تفويض_اسم_{field}"] = name_entry
            
            # Signature field
            sig_frame = tk.Frame(auth_row_frame, bg="#3C1361")
            sig_frame.pack(side="right", padx=10)
            
            tk.Label(sig_frame, text="التوقيع:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            sig_entry = tk.Entry(sig_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            sig_entry.pack(side="right", padx=5)
            entries[f"تفويض_توقيع_{field}"] = sig_entry
            
            # Date field
            date_frame = tk.Frame(auth_row_frame, bg="#3C1361")
            date_frame.pack(side="right", padx=10)
            
            tk.Label(date_frame, text="التاريخ:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            date_entry = tk.Entry(date_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
            date_entry.pack(side="right", padx=5)
            entries[f"تفويض_تاريخ_{field}"] = date_entry
        
        # Section 4: Execution (رابعاً: التنفيذ)
        execution_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        execution_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(execution_frame, text="رابعاً: التنفيذ",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        execution_fields = [
            ("منفذ عملية الإتلاف", "التوقيع", "التاريخ"),
            ("الشاهد الأول", "التوقيع", "التاريخ"),
            ("الشاهد الثاني", "التوقيع", "التاريخ")
        ]
        
        for field_name, sig_label, date_label in execution_fields:
            exec_row_frame = tk.Frame(execution_frame, bg="#3C1361")
            exec_row_frame.pack(fill="x", padx=10, pady=5)
            
            # Name field
            name_frame = tk.Frame(exec_row_frame, bg="#3C1361")
            name_frame.pack(side="right", padx=10)
            
            tk.Label(name_frame, text=f"• {field_name}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            name_entry = tk.Entry(name_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            name_entry.pack(side="right", padx=5)
            entries[f"تنفيذ_اسم_{field_name}"] = name_entry
            
            # Signature field
            sig_frame = tk.Frame(exec_row_frame, bg="#3C1361")
            sig_frame.pack(side="right", padx=10)
            
            tk.Label(sig_frame, text=f"{sig_label}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            sig_entry = tk.Entry(sig_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            sig_entry.pack(side="right", padx=5)
            entries[f"تنفيذ_توقيع_{field_name}"] = sig_entry
            
            # Date field
            date_frame = tk.Frame(exec_row_frame, bg="#3C1361")
            date_frame.pack(side="right", padx=10)
            
            tk.Label(date_frame, text=f"{date_label}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            date_entry = tk.Entry(date_frame, font=self.arabic_font, width=15, relief="solid", bd=1)
            date_entry.pack(side="right", padx=5)
            entries[f"تنفيذ_تاريخ_{field_name}"] = date_entry
        
        # Section 5: Report Approval (خامساً: اعتماد التقرير)
        report_approval_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        report_approval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(report_approval_frame, text="خامساً: اعتماد التقرير",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        approval_fields = [
            ("معد التقرير", "التوقيع"),
            ("الوظيفة", "التاريخ")
        ]
        
        for field1, field2 in approval_fields:
            approval_row_frame = tk.Frame(report_approval_frame, bg="#3C1361")
            approval_row_frame.pack(fill="x", padx=10, pady=5)
            
            # First field
            field1_frame = tk.Frame(approval_row_frame, bg="#3C1361")
            field1_frame.pack(side="right", padx=10)
            
            tk.Label(field1_frame, text=f"• {field1}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            field1_entry = tk.Entry(field1_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            field1_entry.pack(side="right", padx=5)
            entries[f"اعتماد_{field1}"] = field1_entry
            
            # Second field
            field2_frame = tk.Frame(approval_row_frame, bg="#3C1361")
            field2_frame.pack(side="right", padx=10)
            
            tk.Label(field2_frame, text=f"{field2}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            field2_entry = tk.Entry(field2_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            field2_entry.pack(side="right", padx=5)
            entries[f"اعتماد_{field2}"] = field2_entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_records_destruction_report,
                                update_func=self.update_records_destruction_report,
                                clear_func=self.clear_records_destruction_report)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_program_information_form(self, parent, form_name):
        """Create program information form for QF-07-02-01 based on user specifications"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-07-02-01 استمارة معلومات البرنامج",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # Section 1: Basic Information
        basic_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        basic_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(basic_frame, text="1. المعلومات الأساسية للبرنامج",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Basic information fields
        basic_fields = [
            "اسم البرنامج (باللغة العربية)",
            "اسم البرنامج (باللغة الإنجليزية)",
            "هدف البرنامج",
            "مدة البرنامج (بالساعات)",
            "نوع البرنامج"
        ]
        
        for field in basic_fields:
            field_frame = tk.Frame(basic_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "نوع البرنامج":
                entry = ttk.Combobox(field_frame, 
                                   values=["تدريبي", "تأهيلي", "تطويري", "تخصصي"],
                                   font=self.arabic_font, width=50)
            else:
                entry = tk.Entry(field_frame, font=self.arabic_font, width=50)
            
            entry.pack(anchor="e", padx=5)
            entries[field] = entry
        
        # Section 2: Requirements
        req_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        req_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(req_frame, text="2. متطلبات الالتحاق بالبرنامج",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Requirements checkboxes
        req_options = [
            "شهادة ثانوية عامة أو ما يعادلها",
            "خبرة سابقة في المجال",
            "دورات تدريبية سابقة",
            "مقابلة شخصية",
            "اختبار قبول"
        ]
        
        entries["requirements"] = {}
        for option in req_options:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(req_frame, text=option, variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["requirements"][option] = var
        
        # Section 3: Program Content
        content_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        content_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(content_frame, text="3. محتوى البرنامج التدريبي",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Program content table
        content_table_frame = tk.Frame(content_frame, bg="#3C1361")
        content_table_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        columns = ("م", "الوحدة / الموضوع", "عدد الساعات", "طريقة التقييم", "ملاحظات")
        content_tree = ttk.Treeview(content_table_frame, columns=columns, show="headings", height=8)
        
        for col in columns:
            content_tree.heading(col, text=col)
            content_tree.column(col, width=150, anchor="center")
        
        # Content management buttons
        content_btn_frame = tk.Frame(content_frame, bg="#3C1361")
        content_btn_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Button(content_btn_frame, text="إضافة وحدة", 
                 command=lambda: self.add_program_content(content_tree),
                 font=self.arabic_font, fg="white", bg="#4CAF50").pack(side="right", padx=5)
        
        tk.Button(content_btn_frame, text="تعديل", 
                 command=lambda: self.edit_program_content(content_tree),
                 font=self.arabic_font, fg="white", bg="#FF9800").pack(side="right", padx=5)
        
        tk.Button(content_btn_frame, text="حذف", 
                 command=lambda: self.delete_program_content(content_tree),
                 font=self.arabic_font, fg="white", bg="#F44336").pack(side="right", padx=5)
        
        content_tree.pack(fill="both", expand=True)
        entries["content_tree"] = content_tree
        
        # Section 4: Evaluation Methods
        eval_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        eval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(eval_frame, text="4. طرق التقييم المستخدمة في البرنامج",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        eval_options = [
            "اختبارات كتابية",
            "اختبارات عملية",
            "مشاريع تطبيقية",
            "عروض تقديمية",
            "تقارير",
            "ملاحظة الأداء"
        ]
        
        entries["evaluation_methods"] = {}
        for option in eval_options:
            var = tk.BooleanVar()
            cb = tk.Checkbutton(eval_frame, text=option, variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["evaluation_methods"][option] = var
        
        # Section 5: Resources
        resources_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        resources_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(resources_frame, text="5. الموارد المطلوبة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        resource_fields = [
            "المدربون المطلوبون",
            "التجهيزات والمعدات",
            "المواد التدريبية",
            "قاعات التدريب"
        ]
        
        for field in resource_fields:
            field_frame = tk.Frame(resources_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            text_widget = tk.Text(field_frame, height=3, width=50, font=self.arabic_font)
            text_widget.pack(anchor="e", padx=5)
            entries[field] = text_widget
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_program_information,
                                update_func=self.update_program_information,
                                clear_func=self.clear_program_information)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_information_update_report_form(self, parent, form_name):
        """Create information update report form for QF-07-02-02 based on user specifications"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg="#5A2A9C", relief="ridge", bd=2)
        header_frame.pack(fill="x", padx=10, pady=5)
        
        header_label = tk.Label(header_frame, 
                               text="QF-07-02-02 تقرير تحديث المعلومات العامة",
                               font=self.arabic_font_large, 
                               fg="white", bg="#5A2A9C")
        header_label.pack(pady=10)
        
        # Section 1: General Data (أولًا: البيانات العامة)
        general_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        general_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(general_frame, text="أولًا: البيانات العامة",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # General data fields
        general_fields = [
            "اسم البرنامج / الشهادة",
            "القسم / الوحدة المسؤولة",
            "تاريخ التحديث",
            "اسم الشخص المسؤول عن التحديث"
        ]
        
        for field in general_fields:
            field_frame = tk.Frame(general_frame, bg="#3C1361")
            field_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(field_frame, text=f"• {field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            entry = tk.Entry(field_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
            entry.pack(anchor="e", padx=5, fill="x")
            entries[field] = entry
        
        # Section 2: Update Details (ثانيًا: تفاصيل التحديثات)
        updates_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        updates_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(updates_frame, text="ثانيًا: تفاصيل التحديثات",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Updates table
        updates_table_frame = tk.Frame(updates_frame, bg="#3C1361")
        updates_table_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        columns = ("م", "البند / القسم الذي تم تحديثه", "المعلومات السابقة", "المعلومات بعد التحديث", "سبب التحديث", "ملاحظات")
        updates_tree = ttk.Treeview(updates_table_frame, columns=columns, show="headings", height=8)
        
        # Configure columns
        updates_tree.column("م", width=50, anchor="center")
        updates_tree.column("البند / القسم الذي تم تحديثه", width=150, anchor="center")
        updates_tree.column("المعلومات السابقة", width=150, anchor="center")
        updates_tree.column("المعلومات بعد التحديث", width=150, anchor="center")
        updates_tree.column("سبب التحديث", width=120, anchor="center")
        updates_tree.column("ملاحظات", width=120, anchor="center")
        
        for col in columns:
            updates_tree.heading(col, text=col)
        
        # Add default rows (1-5)
        for i in range(1, 6):
            updates_tree.insert("", tk.END, values=(i, "", "", "", "", ""))
        
        # Update management buttons
        updates_btn_frame = tk.Frame(updates_frame, bg="#3C1361")
        updates_btn_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Button(updates_btn_frame, text="إضافة صف", 
                 command=lambda: self.add_update_row(updates_tree),
                 font=self.arabic_font, fg="white", bg="#4CAF50").pack(side="right", padx=5)
        
        tk.Button(updates_btn_frame, text="تعديل", 
                 command=lambda: self.edit_update_row(updates_tree),
                 font=self.arabic_font, fg="white", bg="#FF9800").pack(side="right", padx=5)
        
        tk.Button(updates_btn_frame, text="حذف", 
                 command=lambda: self.delete_update_row(updates_tree),
                 font=self.arabic_font, fg="white", bg="#F44336").pack(side="right", padx=5)
        
        updates_tree.pack(fill="both", expand=True)
        entries["updates_tree"] = updates_tree
        
        # Section 3: Notified Parties (ثالثًا: الجهات المُبلغة بالتحديث)
        notified_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        notified_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(notified_frame, text="ثالثًا: الجهات المُبلغة بالتحديث",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Notified parties checkboxes
        notified_options = [
            "فريق التدريب",
            "لجنة الاعتماد", 
            "الإدارة العليا",
            "قسم التقييم",
            "المراقبون"
        ]
        
        entries["notified_parties"] = {}
        
        # Create checkboxes in two columns
        checkbox_frame = tk.Frame(notified_frame, bg="#3C1361")
        checkbox_frame.pack(fill="x", padx=10, pady=5)
        
        left_frame = tk.Frame(checkbox_frame, bg="#3C1361")
        left_frame.pack(side="right", fill="both", expand=True)
        
        right_frame = tk.Frame(checkbox_frame, bg="#3C1361")
        right_frame.pack(side="right", fill="both", expand=True)
        
        for i, option in enumerate(notified_options):
            var = tk.BooleanVar()
            target_frame = left_frame if i < 3 else right_frame
            cb = tk.Checkbutton(target_frame, text=f"☐ {option}", variable=var,
                              font=self.arabic_font, fg="white", bg="#3C1361",
                              selectcolor="#2D0A4D", anchor="e")
            cb.pack(anchor="e", padx=10, pady=2)
            entries["notified_parties"][option] = var
        
        # Other option
        other_frame = tk.Frame(notified_frame, bg="#3C1361")
        other_frame.pack(fill="x", padx=10, pady=2)
        
        other_var = tk.BooleanVar()
        other_cb = tk.Checkbutton(other_frame, text="☐ أخرى:", variable=other_var,
                                font=self.arabic_font, fg="white", bg="#3C1361",
                                selectcolor="#2D0A4D", anchor="e")
        other_cb.pack(side="right", padx=10)
        
        other_entry = tk.Entry(other_frame, font=self.arabic_font, width=30, relief="solid", bd=1)
        other_entry.pack(side="right", padx=5)
        
        entries["notified_parties"]["أخرى"] = other_var
        entries["أخرى_تفاصيل"] = other_entry
        
        # Section 4: Signature and Approval (رابعًا: توقيع واعتماد التقرير)
        signature_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief="ridge", bd=2)
        signature_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(signature_frame, text="رابعًا: توقيع واعتماد التقرير",
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="e", padx=10, pady=5)
        
        # Signature fields
        signature_fields = [
            ("اسم المعد", "التوقيع"),
            ("اسم المراجع", "التوقيع")
        ]
        
        for name_label, signature_label in signature_fields:
            sig_frame = tk.Frame(signature_frame, bg="#3C1361")
            sig_frame.pack(fill="x", padx=10, pady=5)
            
            # Name field
            name_frame = tk.Frame(sig_frame, bg="#3C1361")
            name_frame.pack(side="right", padx=10)
            
            tk.Label(name_frame, text=f"• {name_label}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            name_entry = tk.Entry(name_frame, font=self.arabic_font, width=25, relief="solid", bd=1)
            name_entry.pack(side="right", padx=5)
            entries[name_label] = name_entry
            
            # Signature field
            sig_inner_frame = tk.Frame(sig_frame, bg="#3C1361")
            sig_inner_frame.pack(side="right", padx=10)
            
            tk.Label(sig_inner_frame, text=f"{signature_label}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(side="right")
            sig_entry = tk.Entry(sig_inner_frame, font=self.arabic_font, width=20, relief="solid", bd=1)
            sig_entry.pack(side="right", padx=5)
            entries[f"{name_label}_{signature_label}"] = sig_entry
        
        # Approval date
        approval_frame = tk.Frame(signature_frame, bg="#3C1361")
        approval_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(approval_frame, text="• تاريخ الاعتماد:", 
                font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
        approval_entry = tk.Entry(approval_frame, font=self.arabic_font, width=50, relief="solid", bd=1)
        approval_entry.pack(anchor="e", padx=5, fill="x")
        entries["تاريخ الاعتماد"] = approval_entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_information_update_report,
                                update_func=self.update_information_update_report,
                                clear_func=self.clear_information_update_report)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_confidentiality_agreement_form(self, parent, form_name):
        """Create confidentiality agreement form for QF-07-03-01"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame,
                             text="نموذج اتفاقية سرية للموظفين والمتعاقدين",
                             font=self.arabic_font_large,
                             fg="#FFD700",
                             bg="#3C1361")
        title_label.pack(pady=20)
        
        # بيانات الموظف/المتعاقد
        employee_frame = tk.LabelFrame(scrollable_frame, 
                                     text="بيانات الموظف/المتعاقد",
                                     font=self.arabic_font_bold,
                                     fg="#FFD700",
                                     bg="#3C1361")
        employee_frame.pack(fill=tk.X, padx=20, pady=10)
        
        employee_fields = ["الاسم الكامل", "رقم الهوية", "المنصب/طبيعة العمل", "القسم", "تاريخ بدء العمل"]
        
        for field in employee_fields:
            frame = tk.Frame(employee_frame, bg="#3C1361")
            frame.pack(fill=tk.X, padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(side=tk.RIGHT, padx=10)
            
            entry = tk.Entry(frame, font=self.arabic_font, width=40)
            entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
            entries[field] = entry
        
        # بنود الاتفاقية
        agreement_frame = tk.LabelFrame(scrollable_frame, 
                                      text="بنود الاتفاقية",
                                      font=self.arabic_font_bold,
                                      fg="#FFD700",
                                      bg="#3C1361")
        agreement_frame.pack(fill=tk.X, padx=20, pady=10)
        
        agreement_terms = [
            "الالتزام بعدم إفشاء المعلومات السرية",
            "حماية البيانات الشخصية للعملاء",
            "عدم استخدام المعلومات لأغراض شخصية",
            "الإبلاغ عن أي انتهاكات للبيانات",
            "إرجاع جميع المواد السرية عند انتهاء العمل"
        ]
        
        for term in agreement_terms:
            frame = tk.Frame(agreement_frame, bg="#3C1361")
            frame.pack(fill=tk.X, padx=10, pady=5)
            
            var = tk.BooleanVar()
            checkbox = tk.Checkbutton(frame, text=term, variable=var,
                                    font=self.arabic_font, fg="white", bg="#3C1361",
                                    selectcolor="#5A2A9C")
            checkbox.pack(anchor="e", padx=10)
            entries[f"موافقة_{term}"] = var
        
        # التوقيعات
        signatures_frame = tk.LabelFrame(scrollable_frame, 
                                       text="التوقيعات",
                                       font=self.arabic_font_bold,
                                       fg="#FFD700",
                                       bg="#3C1361")
        signatures_frame.pack(fill=tk.X, padx=20, pady=10)
        
        signature_fields = ["الموظف/المتعاقد", "مدير الموارد البشرية", "مسؤول حماية البيانات"]
        
        for field in signature_fields:
            frame = tk.Frame(signatures_frame, bg="#3C1361")
            frame.pack(fill=tk.X, padx=10, pady=5)
            
            tk.Label(frame, text=f"توقيع {field}:", 
                    font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(side=tk.RIGHT, padx=10)
            
            entry = tk.Entry(frame, font=self.arabic_font, width=40)
            entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
            entries[f"توقيع_{field}"] = entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_confidentiality_agreement,
                                update_func=self.update_confidentiality_agreement,
                                clear_func=self.clear_confidentiality_agreement)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_personal_data_review_report_form(self, parent, form_name):
        """Create personal data review report form for QF-07-03-02"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame,
                             text="تقرير مراجعة البيانات الشخصية",
                             font=self.arabic_font_large,
                             fg="#FFD700",
                             bg="#3C1361")
        title_label.pack(pady=20)
        
        # بيانات المراجعة
        review_frame = tk.LabelFrame(scrollable_frame, 
                                   text="بيانات المراجعة",
                                   font=self.arabic_font_bold,
                                   fg="#FFD700",
                                   bg="#3C1361")
        review_frame.pack(fill=tk.X, padx=20, pady=10)
        
        review_fields = ["تاريخ المراجعة", "القائم بالمراجعة", "نطاق المراجعة", "مدة المراجعة (ساعات)"]
        
        for field in review_fields:
            frame = tk.Frame(review_frame, bg="#3C1361")
            frame.pack(fill=tk.X, padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(side=tk.RIGHT, padx=10)
            
            entry = tk.Entry(frame, font=self.arabic_font, width=40)
            entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
            entries[field] = entry
        
        # البيانات المراجعة
        data_frame = tk.LabelFrame(scrollable_frame, 
                                 text="البيانات المراجعة",
                                 font=self.arabic_font_bold,
                                 fg="#FFD700",
                                 bg="#3C1361")
        data_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # جدول البيانات المراجعة
        columns = ("نوع البيانات", "موقع التخزين", "مستوى الحساسية", "طريقة الحماية", "آخر تحديث", "حالة الامتثال", "ملاحظات")
        data_tree = ttk.Treeview(data_frame, columns=columns, show="headings", height=6)
        
        for col in columns:
            data_tree.heading(col, text=col)
            data_tree.column(col, width=120, anchor="center")
        
        data_tree.pack(fill=tk.X, padx=10, pady=10)
        entries["data_table"] = data_tree
        
        # نتائج المراجعة
        results_frame = tk.LabelFrame(scrollable_frame, 
                                    text="نتائج المراجعة",
                                    font=self.arabic_font_bold,
                                    fg="#FFD700",
                                    bg="#3C1361")
        results_frame.pack(fill=tk.X, padx=20, pady=10)
        
        result_fields = ["التوصيات", "الإجراءات المطلوبة", "المسؤولية", "التوقيت المحدد"]
        
        for field in result_fields:
            frame = tk.Frame(results_frame, bg="#3C1361")
            frame.pack(fill=tk.X, padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(anchor="ne", padx=10)
            
            text_widget = tk.Text(frame, font=self.arabic_font, height=3, width=50)
            text_widget.pack(fill=tk.X, padx=10, pady=5)
            entries[field] = text_widget
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_personal_data_review_report,
                                update_func=self.update_personal_data_review_report,
                                clear_func=self.clear_personal_data_review_report)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_security_incident_report_form(self, parent, form_name):
        """Create security incident report form for QF-07-04-01"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame,
                             text="تقرير حادث أمن المعلومات",
                             font=self.arabic_font_large,
                             fg="#FFD700",
                             bg="#3C1361")
        title_label.pack(pady=20)
        
        # معلومات الحادث الأساسية
        incident_frame = tk.LabelFrame(scrollable_frame, 
                                     text="معلومات الحادث الأساسية",
                                     font=self.arabic_font_bold,
                                     fg="#FFD700",
                                     bg="#3C1361")
        incident_frame.pack(fill=tk.X, padx=20, pady=10)
        
        incident_fields = ["رقم الحادث", "تاريخ الحادث", "وقت الحادث", "مكان الحادث", "الشخص المبلغ"]
        
        for field in incident_fields:
            frame = tk.Frame(incident_frame, bg="#3C1361")
            frame.pack(fill=tk.X, padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(side=tk.RIGHT, padx=10)
            
            entry = tk.Entry(frame, font=self.arabic_font, width=40)
            entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
            entries[field] = entry
        
        # تصنيف الحادث
        classification_frame = tk.LabelFrame(scrollable_frame, 
                                           text="تصنيف الحادث",
                                           font=self.arabic_font_bold,
                                           fg="#FFD700",
                                           bg="#3C1361")
        classification_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # نوع الحادث
        type_frame = tk.Frame(classification_frame, bg="#3C1361")
        type_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(type_frame, text="نوع الحادث:", 
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(side=tk.RIGHT, padx=10)
        
        type_combo = ttk.Combobox(type_frame, font=self.arabic_font, 
                                values=["اختراق أمني", "فقدان بيانات", "تسريب معلومات", "هجوم إلكتروني", "عطل تقني", "خطأ بشري", "أخرى"])
        type_combo.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
        entries["نوع الحادث"] = type_combo
        
        # مستوى الخطورة
        severity_frame = tk.Frame(classification_frame, bg="#3C1361")
        severity_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(severity_frame, text="مستوى الخطورة:", 
                font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(side=tk.RIGHT, padx=10)
        
        severity_combo = ttk.Combobox(severity_frame, font=self.arabic_font, 
                                    values=["منخفض", "متوسط", "عالي", "حرج"])
        severity_combo.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
        entries["مستوى الخطورة"] = severity_combo
        
        # وصف الحادث
        description_frame = tk.LabelFrame(scrollable_frame, 
                                        text="وصف تفصيلي للحادث",
                                        font=self.arabic_font_bold,
                                        fg="#FFD700",
                                        bg="#3C1361")
        description_frame.pack(fill=tk.X, padx=20, pady=10)
        
        description_text = tk.Text(description_frame, font=self.arabic_font, height=4, width=60)
        description_text.pack(fill=tk.X, padx=10, pady=10)
        entries["وصف الحادث"] = description_text
        
        # الإجراءات المتخذة
        actions_frame = tk.LabelFrame(scrollable_frame, 
                                    text="الإجراءات المتخذة",
                                    font=self.arabic_font_bold,
                                    fg="#FFD700",
                                    bg="#3C1361")
        actions_frame.pack(fill=tk.X, padx=20, pady=10)
        
        actions_text = tk.Text(actions_frame, font=self.arabic_font, height=4, width=60)
        actions_text.pack(fill=tk.X, padx=10, pady=10)
        entries["الإجراءات المتخذة"] = actions_text
        
        # المتابعة والإغلاق
        followup_frame = tk.LabelFrame(scrollable_frame, 
                                     text="المتابعة والإغلاق",
                                     font=self.arabic_font_bold,
                                     fg="#FFD700",
                                     bg="#3C1361")
        followup_frame.pack(fill=tk.X, padx=20, pady=10)
        
        followup_fields = ["حالة الحادث", "تاريخ الإغلاق", "المسؤول عن المتابعة"]
        
        for field in followup_fields:
            frame = tk.Frame(followup_frame, bg="#3C1361")
            frame.pack(fill=tk.X, padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(side=tk.RIGHT, padx=10)
            
            if field == "حالة الحادث":
                entry = ttk.Combobox(frame, font=self.arabic_font, 
                                   values=["مفتوح", "قيد التحقيق", "تم الحل", "مغلق"])
            else:
                entry = tk.Entry(frame, font=self.arabic_font, width=40)
            entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
            entries[field] = entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_security_incident_report,
                                update_func=self.update_security_incident_report,
                                clear_func=self.clear_security_incident_report)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    def create_information_security_log_form(self, parent, form_name):
        """Create information security log form for QF-07-04-02"""
        # إطار التمرير للنموذج
        canvas = tk.Canvas(parent, bg="#3C1361", highlightthickness=0)
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        entries = {}
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame,
                             text="سجل أمن المعلومات",
                             font=self.arabic_font_large,
                             fg="#FFD700",
                             bg="#3C1361")
        title_label.pack(pady=20)
        
        # معلومات السجل
        log_frame = tk.LabelFrame(scrollable_frame, 
                                text="معلومات السجل",
                                font=self.arabic_font_bold,
                                fg="#FFD700",
                                bg="#3C1361")
        log_frame.pack(fill=tk.X, padx=20, pady=10)
        
        log_fields = ["تاريخ السجل", "المسؤول عن السجل", "فترة التقرير (من)", "فترة التقرير (إلى)"]
        
        for field in log_fields:
            frame = tk.Frame(log_frame, bg="#3C1361")
            frame.pack(fill=tk.X, padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(side=tk.RIGHT, padx=10)
            
            entry = tk.Entry(frame, font=self.arabic_font, width=40)
            entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
            entries[field] = entry
        
        # جدول الأحداث الأمنية
        events_frame = tk.LabelFrame(scrollable_frame, 
                                   text="سجل الأحداث الأمنية",
                                   font=self.arabic_font_bold,
                                   fg="#FFD700",
                                   bg="#3C1361")
        events_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Create treeview for security events
        columns = ("التاريخ", "الوقت", "نوع الحدث", "المستخدم", "النظام المتأثر", "مستوى الخطورة", "الإجراء المتخذ", "الحالة")
        events_tree = ttk.Treeview(events_frame, columns=columns, show="headings", height=8)
        
        for col in columns:
            events_tree.heading(col, text=col)
            events_tree.column(col, width=100, anchor="center")
        
        events_tree.pack(fill=tk.X, padx=10, pady=10)
        entries["events_table"] = events_tree
        
        # أزرار إدارة الجدول
        table_btn_frame = tk.Frame(events_frame, bg="#3C1361")
        table_btn_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(table_btn_frame, text="إضافة حدث", 
                 font=self.arabic_font_bold, fg="white", bg="#4CAF50",
                 command=lambda: self.add_security_event(events_tree)).pack(side=tk.RIGHT, padx=5)
        
        tk.Button(table_btn_frame, text="تحرير حدث", 
                 font=self.arabic_font_bold, fg="white", bg="#FF9800",
                 command=lambda: self.edit_security_event(events_tree)).pack(side=tk.RIGHT, padx=5)
        
        tk.Button(table_btn_frame, text="حذف حدث", 
                 font=self.arabic_font_bold, fg="white", bg="#F44336",
                 command=lambda: self.delete_security_event(events_tree)).pack(side=tk.RIGHT, padx=5)
        
        # إحصائيات الأمان
        stats_frame = tk.LabelFrame(scrollable_frame, 
                                  text="إحصائيات أمن المعلومات",
                                  font=self.arabic_font_bold,
                                  fg="#FFD700",
                                  bg="#3C1361")
        stats_frame.pack(fill=tk.X, padx=20, pady=10)
        
        stats_fields = ["إجمالي الأحداث", "الأحداث عالية الخطورة", "الأحداث المحلولة", "معدل الاستجابة (ساعات)"]
        
        for field in stats_fields:
            frame = tk.Frame(stats_frame, bg="#3C1361")
            frame.pack(fill=tk.X, padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font_bold, fg="#FFD700", bg="#3C1361").pack(side=tk.RIGHT, padx=10)
            
            entry = tk.Entry(frame, font=self.arabic_font, width=40)
            entry.pack(side=tk.RIGHT, padx=10, fill=tk.X, expand=True)
            entries[field] = entry
        
        # أزرار التحكم
        self.create_form_buttons(scrollable_frame, form_name, entries, 
                                save_func=self.save_information_security_log,
                                update_func=self.update_information_security_log,
                                clear_func=self.clear_information_security_log)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    # Form handler methods for Section 7
    def save_exam_application(self, form_name, entries):
        """Save exam application form data"""
        try:
            data = {}
            for key, widget in entries.items():
                if hasattr(widget, 'get'):
                    data[key] = widget.get()
            
            success = self.db_manager.save_form_data(
                form_name=form_name,
                data=[data],
                user_id=self.current_user['id']
            )
            
            if success:
                messagebox.showinfo("تم الحفظ", "تم حفظ طلب التقديم للامتحان بنجاح")
                self.status_var.set(f"تم حفظ {form_name} بنجاح")
            else:
                messagebox.showerror("خطأ", "فشل في حفظ البيانات")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات: {str(e)}")
    
    def update_exam_application(self, form_name, entries):
        """Update exam application form data"""
        try:
            self.refresh_forms_data()
            messagebox.showinfo("تم التحديث", "تم تحديث طلب التقديم للامتحان بنجاح")
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تحديث البيانات: {str(e)}")
    
    def clear_exam_application(self, entries):
        """Clear exam application form data"""
        if messagebox.askyesno("تأكيد المسح", "هل تريد مسح جميع بيانات الطلب؟"):
            for widget in entries.values():
                if hasattr(widget, 'delete'):
                    widget.delete(0, tk.END)
                elif hasattr(widget, 'set'):
                    widget.set('')
            messagebox.showinfo("تم المسح", "تم مسح بيانات الطلب")
    
    def add_program_content(self, tree):
        """Add program content unit to the tree"""
        dialog = tk.Toplevel()
        dialog.title("إضافة وحدة / موضوع")
        dialog.geometry("500x300")
        dialog.configure(bg="#2D0A4D")
        
        entries = {}
        fields = ["الوحدة / الموضوع", "عدد الساعات", "طريقة التقييم", "ملاحظات"]
        
        for field in fields:
            frame = tk.Frame(dialog, bg="#3C1361")
            frame.pack(fill="x", padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "طريقة التقييم":
                entries[field] = ttk.Combobox(frame, 
                                            values=["اختبار كتابي", "اختبار عملي", "مشروع", "تقرير", "عرض تقديمي"],
                                            font=self.arabic_font)
            else:
                entries[field] = tk.Entry(frame, font=self.arabic_font)
            entries[field].pack(fill="x", pady=2)
        
        def save_content():
            values = []
            values.append(len(tree.get_children()) + 1)  # Sequential number
            
            for field in fields:
                values.append(entries[field].get())
            
            tree.insert("", tk.END, values=values)
            dialog.destroy()
        
        save_btn = tk.Button(dialog, text="حفظ", command=save_content,
                           font=self.arabic_font_bold, fg="white", bg="#4CAF50")
        save_btn.pack(pady=10)
    
    def edit_program_content(self, tree):
        """Edit selected program content"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى اختيار وحدة للتعديل")
            return
        
        item = selected[0]
        current_values = tree.item(item)["values"]
        
        dialog = tk.Toplevel()
        dialog.title("تعديل وحدة / موضوع")
        dialog.geometry("500x300")
        dialog.configure(bg="#2D0A4D")
        
        entries = {}
        fields = ["الوحدة / الموضوع", "عدد الساعات", "طريقة التقييم", "ملاحظات"]
        
        for i, field in enumerate(fields):
            frame = tk.Frame(dialog, bg="#3C1361")
            frame.pack(fill="x", padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field == "طريقة التقييم":
                entries[field] = ttk.Combobox(frame, 
                                            values=["اختبار كتابي", "اختبار عملي", "مشروع", "تقرير", "عرض تقديمي"],
                                            font=self.arabic_font)
                if i + 1 < len(current_values):
                    entries[field].set(current_values[i + 1])
            else:
                entries[field] = tk.Entry(frame, font=self.arabic_font)
                if i + 1 < len(current_values):
                    entries[field].insert(0, current_values[i + 1])
            
            entries[field].pack(fill="x", pady=2)
        
        def save_changes():
            values = [current_values[0]]  # Keep the sequential number
            
            for field in fields:
                values.append(entries[field].get())
            
            tree.item(item, values=values)
            dialog.destroy()
        
        save_btn = tk.Button(dialog, text="حفظ التغييرات", command=save_changes,
                           font=self.arabic_font_bold, fg="white", bg="#4CAF50")
        save_btn.pack(pady=10)
    
    def delete_program_content(self, tree):
        """Delete selected program content"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى اختيار وحدة للحذف")
            return
        
        if messagebox.askyesno("تأكيد الحذف", "هل أنت متأكد من حذف هذه الوحدة؟"):
            tree.delete(selected[0])
    
    def save_program_information(self, entries):
        """Save program information form data"""
        try:
            # Collect data from all form fields
            data = {}
            
            # Basic fields
            basic_fields = [
                "اسم البرنامج (باللغة العربية)",
                "اسم البرنامج (باللغة الإنجليزية)",
                "هدف البرنامج",
                "مدة البرنامج (بالساعات)",
                "نوع البرنامج"
            ]
            
            for field in basic_fields:
                if field in entries:
                    data[field] = entries[field].get()
            
            # Requirements checkboxes
            if "requirements" in entries:
                data["requirements"] = {}
                for req, var in entries["requirements"].items():
                    data["requirements"][req] = var.get()
            
            # Evaluation methods checkboxes
            if "evaluation_methods" in entries:
                data["evaluation_methods"] = {}
                for method, var in entries["evaluation_methods"].items():
                    data["evaluation_methods"][method] = var.get()
            
            # Program content from tree
            if "content_tree" in entries:
                content_tree = entries["content_tree"]
                data["program_content"] = []
                for item in content_tree.get_children():
                    values = content_tree.item(item)["values"]
                    data["program_content"].append(values)
            
            # Resource text areas
            resource_fields = [
                "المدربون المطلوبون",
                "التجهيزات والمعدات",
                "المواد التدريبية",
                "قاعات التدريب"
            ]
            
            for field in resource_fields:
                if field in entries:
                    data[field] = entries[field].get("1.0", "end-1c")
            
            # Save to database or file
            messagebox.showinfo("تم الحفظ", "تم حفظ بيانات معلومات البرنامج بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات: {str(e)}")
    
    def update_program_information(self, entries):
        """Update program information form data"""
        self.save_program_information(entries)
    
    def clear_program_information(self, entries):
        """Clear program information form data"""
        try:
            # Clear basic fields
            basic_fields = [
                "اسم البرنامج (باللغة العربية)",
                "اسم البرنامج (باللغة الإنجليزية)",
                "هدف البرنامج",
                "مدة البرنامج (بالساعات)",
                "نوع البرنامج"
            ]
            
            for field in basic_fields:
                if field in entries:
                    if hasattr(entries[field], 'set'):
                        entries[field].set("")
                    else:
                        entries[field].delete(0, "end")
            
            # Clear requirements checkboxes
            if "requirements" in entries:
                for var in entries["requirements"].values():
                    var.set(False)
            
            # Clear evaluation methods checkboxes
            if "evaluation_methods" in entries:
                for var in entries["evaluation_methods"].values():
                    var.set(False)
            
            # Clear program content tree
            if "content_tree" in entries:
                for item in entries["content_tree"].get_children():
                    entries["content_tree"].delete(item)
            
            # Clear resource text areas
            resource_fields = [
                "المدربون المطلوبون",
                "التجهيزات والمعدات",
                "المواد التدريبية",
                "قاعات التدريب"
            ]
            
            for field in resource_fields:
                if field in entries:
                    entries[field].delete("1.0", "end")
            
            messagebox.showinfo("تم المسح", "تم مسح جميع البيانات")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء مسح البيانات: {str(e)}")
    
    def add_update_row(self, tree):
        """Add a new update row to the tree"""
        dialog = tk.Toplevel()
        dialog.title("إضافة تحديث جديد")
        dialog.geometry("600x400")
        dialog.configure(bg="#2D0A4D")
        
        entries = {}
        fields = ["البند / القسم الذي تم تحديثه", "المعلومات السابقة", "المعلومات بعد التحديث", "سبب التحديث", "ملاحظات"]
        
        for field in fields:
            frame = tk.Frame(dialog, bg="#3C1361")
            frame.pack(fill="x", padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["المعلومات السابقة", "المعلومات بعد التحديث", "ملاحظات"]:
                entries[field] = tk.Text(frame, font=self.arabic_font, height=3, width=50)
            else:
                entries[field] = tk.Entry(frame, font=self.arabic_font, width=50)
            entries[field].pack(fill="x", pady=2)
        
        def save_update():
            values = []
            values.append(len(tree.get_children()) + 1)  # Sequential number
            
            for field in fields:
                if hasattr(entries[field], 'get'):
                    if field in ["المعلومات السابقة", "المعلومات بعد التحديث", "ملاحظات"]:
                        values.append(entries[field].get("1.0", "end-1c"))
                    else:
                        values.append(entries[field].get())
                else:
                    values.append(entries[field].get("1.0", "end-1c"))
            
            tree.insert("", tk.END, values=values)
            dialog.destroy()
        
        save_btn = tk.Button(dialog, text="حفظ", command=save_update,
                           font=self.arabic_font_bold, fg="white", bg="#4CAF50")
        save_btn.pack(pady=10)
    
    def edit_update_row(self, tree):
        """Edit selected update row"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى اختيار صف للتعديل")
            return
        
        item = selected[0]
        current_values = tree.item(item)["values"]
        
        dialog = tk.Toplevel()
        dialog.title("تعديل التحديث")
        dialog.geometry("600x400")
        dialog.configure(bg="#2D0A4D")
        
        entries = {}
        fields = ["البند / القسم الذي تم تحديثه", "المعلومات السابقة", "المعلومات بعد التحديث", "سبب التحديث", "ملاحظات"]
        
        for i, field in enumerate(fields):
            frame = tk.Frame(dialog, bg="#3C1361")
            frame.pack(fill="x", padx=10, pady=5)
            
            tk.Label(frame, text=f"{field}:", 
                    font=self.arabic_font, fg="white", bg="#3C1361").pack(anchor="e")
            
            if field in ["المعلومات السابقة", "المعلومات بعد التحديث", "ملاحظات"]:
                entries[field] = tk.Text(frame, font=self.arabic_font, height=3, width=50)
                if i + 1 < len(current_values):
                    entries[field].insert("1.0", current_values[i + 1])
            else:
                entries[field] = tk.Entry(frame, font=self.arabic_font, width=50)
                if i + 1 < len(current_values):
                    entries[field].insert(0, current_values[i + 1])
            
            entries[field].pack(fill="x", pady=2)
        
        def save_changes():
            values = [current_values[0]]  # Keep the sequential number
            
            for field in fields:
                if hasattr(entries[field], 'get'):
                    if field in ["المعلومات السابقة", "المعلومات بعد التحديث", "ملاحظات"]:
                        values.append(entries[field].get("1.0", "end-1c"))
                    else:
                        values.append(entries[field].get())
                else:
                    values.append(entries[field].get("1.0", "end-1c"))
            
            tree.item(item, values=values)
            dialog.destroy()
        
        save_btn = tk.Button(dialog, text="حفظ التغييرات", command=save_changes,
                           font=self.arabic_font_bold, fg="white", bg="#4CAF50")
        save_btn.pack(pady=10)
    
    def delete_update_row(self, tree):
        """Delete selected update row"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى اختيار صف للحذف")
            return
        
        if messagebox.askyesno("تأكيد الحذف", "هل أنت متأكد من حذف هذا التحديث؟"):
            tree.delete(selected[0])
    
    def save_information_update_report(self, entries):
        """Save information update report form data"""
        try:
            # Collect data from form
            data = {}
            
            # General data fields
            general_fields = [
                "اسم البرنامج / الشهادة",
                "القسم / الوحدة المسؤولة", 
                "تاريخ التحديث",
                "اسم الشخص المسؤول عن التحديث"
            ]
            
            for field in general_fields:
                if field in entries:
                    data[field] = entries[field].get()
            
            # Updates table data
            if "updates_tree" in entries:
                updates_tree = entries["updates_tree"]
                data["updates"] = []
                for item in updates_tree.get_children():
                    values = updates_tree.item(item)["values"]
                    if any(str(val).strip() for val in values[1:]):  # Check if row has data
                        data["updates"].append(values)
            
            # Notified parties checkboxes
            if "notified_parties" in entries:
                data["notified_parties"] = {}
                for party, var in entries["notified_parties"].items():
                    data["notified_parties"][party] = var.get()
            
            # Other details
            if "أخرى_تفاصيل" in entries:
                data["أخرى_تفاصيل"] = entries["أخرى_تفاصيل"].get()
            
            # Signature fields
            signature_fields = ["اسم المعد", "اسم المراجع", "تاريخ الاعتماد"]
            for field in signature_fields:
                if field in entries:
                    data[field] = entries[field].get()
                # Also check for signature fields
                sig_field = f"{field}_التوقيع"
                if sig_field in entries:
                    data[sig_field] = entries[sig_field].get()
            
            messagebox.showinfo("تم الحفظ", "تم حفظ تقرير تحديث المعلومات بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ البيانات: {str(e)}")
    
    def update_information_update_report(self, entries):
        """Update information update report form data"""
        self.save_information_update_report(entries)
    
    def clear_information_update_report(self, entries):
        """Clear information update report form data"""
        try:
            # Clear general fields
            general_fields = [
                "اسم البرنامج / الشهادة",
                "القسم / الوحدة المسؤولة",
                "تاريخ التحديث", 
                "اسم الشخص المسؤول عن التحديث"
            ]
            
            for field in general_fields:
                if field in entries:
                    entries[field].delete(0, "end")
            
            # Clear updates tree (keep default rows 1-5)
            if "updates_tree" in entries:
                updates_tree = entries["updates_tree"]
                for item in updates_tree.get_children():
                    updates_tree.delete(item)
                # Re-add default rows
                for i in range(1, 6):
                    updates_tree.insert("", tk.END, values=(i, "", "", "", "", ""))
            
            # Clear notified parties checkboxes
            if "notified_parties" in entries:
                for var in entries["notified_parties"].values():
                    var.set(False)
            
            # Clear other details
            if "أخرى_تفاصيل" in entries:
                entries["أخرى_تفاصيل"].delete(0, "end")
            
            # Clear signature fields
            signature_fields = ["اسم المعد", "اسم المراجع", "تاريخ الاعتماد"]
            for field in signature_fields:
                if field in entries:
                    entries[field].delete(0, "end")
                sig_field = f"{field}_التوقيع"
                if sig_field in entries:
                    entries[sig_field].delete(0, "end")
            
            messagebox.showinfo("تم المسح", "تم مسح جميع البيانات")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء مسح البيانات: {str(e)}")
    
    def create_form_buttons(self, parent, form_name, entries, save_func, update_func, clear_func):
        """Create standard form control buttons"""
        button_frame = tk.Frame(parent, bg="#3C1361")
        button_frame.pack(fill=tk.X, padx=20, pady=20)
        
        save_btn = tk.Button(button_frame,
                           text="حفظ البيانات",
                           font=self.arabic_font_bold,
                           fg="white",
                           bg="#4CAF50",
                           width=15,
                           command=lambda: save_func(form_name, entries))
        save_btn.pack(side=tk.LEFT, padx=5)
        
        update_btn = tk.Button(button_frame,
                             text="تحديث البيانات",
                             font=self.arabic_font_bold,
                             fg="white",
                             bg="#2196F3",
                             width=15,
                             command=lambda: update_func(form_name, entries))
        update_btn.pack(side=tk.LEFT, padx=5)
        
        clear_btn = tk.Button(button_frame,
                            text="مسح البيانات",
                            font=self.arabic_font_bold,
                            fg="white",
                            bg="#f44336",
                            width=15,
                            command=lambda: clear_func(entries))
        clear_btn.pack(side=tk.LEFT, padx=5)
    
    def logout(self):
        """تسجيل الخروج"""
        if messagebox.askquestion("تأكيد تسجيل الخروج", 
                                "هل تريد تسجيل الخروج من النظام؟") == 'yes':
            # إخفاء النافذة الرئيسية
            self.root.withdraw()
            
            # تسجيل الخروج عبر نظام تسجيل الدخول
            self.login_system.logout()

# تشغيل التطبيق
    # Handler methods for new Section 7 forms
    def save_information_update_report(self, entries):
        """Save information update report data"""
        data = {}
        for key, entry in entries.items():
            if key == "updates_table":
                # Handle treeview data
                items = []
                for item in entry.get_children():
                    items.append(entry.item(item)['values'])
                data[key] = items
            else:
                data[key] = entry.get()
        
        # Save to database or file
        print(f"Saving information update report: {data}")
        messagebox.showinfo("حفظ", "تم حفظ تقرير تحديث المعلومات بنجاح")
    
    def update_information_update_report(self, entries):
        """Update information update report data"""
        self.save_information_update_report(entries)
        messagebox.showinfo("تحديث", "تم تحديث تقرير تحديث المعلومات بنجاح")
    
    def clear_information_update_report(self, entries):
        """Clear information update report form"""
        for key, entry in entries.items():
            if key == "updates_table":
                entry.delete(*entry.get_children())
            elif hasattr(entry, 'delete'):
                entry.delete(0, tk.END)
            elif hasattr(entry, 'set'):
                entry.set("")
    
    def add_information_update(self, tree):
        """Add new information update to table"""
        # Create dialog to add new update
        dialog = tk.Toplevel()
        dialog.title("إضافة تحديث جديد")
        dialog.geometry("500x400")
        dialog.configure(bg="#3C1361")
        
        fields = ["اسم البرنامج", "نوع التغيير", "وصف التغيير", "سبب التغيير", "تاريخ التنفيذ", "موافقة الإدارة"]
        entries = {}
        
        for i, field in enumerate(fields):
            tk.Label(dialog, text=field + ":", font=self.arabic_font_bold, 
                    fg="#FFD700", bg="#3C1361").grid(row=i, column=1, padx=10, pady=5, sticky="e")
            
            if field == "نوع التغيير":
                entry = ttk.Combobox(dialog, values=["تحديث المحتوى", "تحديث الرسوم", "تحديث المتطلبات"])
            elif field == "موافقة الإدارة":
                entry = ttk.Combobox(dialog, values=["موافق", "غير موافق", "قيد المراجعة"])
            else:
                entry = tk.Entry(dialog, font=self.arabic_font, width=30)
            
            entry.grid(row=i, column=0, padx=10, pady=5, sticky="w")
            entries[field] = entry
        
        def add_to_tree():
            values = [len(tree.get_children()) + 1]  # رقم تسلسلي
            for field in fields:
                values.append(entries[field].get())
            tree.insert("", "end", values=values)
            dialog.destroy()
        
        tk.Button(dialog, text="إضافة", command=add_to_tree, 
                 font=self.arabic_font_bold, fg="white", bg="#4CAF50").grid(row=len(fields), column=0, columnspan=2, pady=20)
    
    def save_confidentiality_agreement(self, entries):
        """Save confidentiality agreement data"""
        data = {}
        for key, entry in entries.items():
            if hasattr(entry, 'get'):
                if isinstance(entry, tk.BooleanVar):
                    data[key] = entry.get()
                else:
                    data[key] = entry.get()
        
        print(f"Saving confidentiality agreement: {data}")
        messagebox.showinfo("حفظ", "تم حفظ اتفاقية السرية بنجاح")
    
    def update_confidentiality_agreement(self, entries):
        """Update confidentiality agreement data"""
        self.save_confidentiality_agreement(entries)
        messagebox.showinfo("تحديث", "تم تحديث اتفاقية السرية بنجاح")
    
    def clear_confidentiality_agreement(self, entries):
        """Clear confidentiality agreement form"""
        for key, entry in entries.items():
            if isinstance(entry, tk.BooleanVar):
                entry.set(False)
            elif hasattr(entry, 'delete'):
                entry.delete(0, tk.END)
            elif hasattr(entry, 'set'):
                entry.set("")
    
    def save_personal_data_review_report(self, entries):
        """Save personal data review report data"""
        data = {}
        for key, entry in entries.items():
            if key == "data_table":
                items = []
                for item in entry.get_children():
                    items.append(entry.item(item)['values'])
                data[key] = items
            elif hasattr(entry, 'get'):
                if isinstance(entry, tk.Text):
                    data[key] = entry.get("1.0", tk.END).strip()
                else:
                    data[key] = entry.get()
        
        print(f"Saving personal data review report: {data}")
        messagebox.showinfo("حفظ", "تم حفظ تقرير مراجعة البيانات الشخصية بنجاح")
    
    def update_personal_data_review_report(self, entries):
        """Update personal data review report data"""
        self.save_personal_data_review_report(entries)
        messagebox.showinfo("تحديث", "تم تحديث تقرير مراجعة البيانات الشخصية بنجاح")
    
    def clear_personal_data_review_report(self, entries):
        """Clear personal data review report form"""
        for key, entry in entries.items():
            if key == "data_table":
                entry.delete(*entry.get_children())
            elif isinstance(entry, tk.Text):
                entry.delete("1.0", tk.END)
            elif hasattr(entry, 'delete'):
                entry.delete(0, tk.END)
            elif hasattr(entry, 'set'):
                entry.set("")
    
    def save_security_incident_report(self, entries):
        """Save security incident report data"""
        data = {}
        for key, entry in entries.items():
            if isinstance(entry, tk.Text):
                data[key] = entry.get("1.0", tk.END).strip()
            elif hasattr(entry, 'get'):
                data[key] = entry.get()
        
        print(f"Saving security incident report: {data}")
        messagebox.showinfo("حفظ", "تم حفظ تقرير حادث أمن المعلومات بنجاح")
    
    def update_security_incident_report(self, entries):
        """Update security incident report data"""
        self.save_security_incident_report(entries)
        messagebox.showinfo("تحديث", "تم تحديث تقرير حادث أمن المعلومات بنجاح")
    
    def clear_security_incident_report(self, entries):
        """Clear security incident report form"""
        for key, entry in entries.items():
            if isinstance(entry, tk.Text):
                entry.delete("1.0", tk.END)
            elif hasattr(entry, 'delete'):
                entry.delete(0, tk.END)
            elif hasattr(entry, 'set'):
                entry.set("")
    
    def save_information_security_log(self, entries):
        """Save information security log data"""
        data = {}
        for key, entry in entries.items():
            if key == "events_table":
                items = []
                for item in entry.get_children():
                    items.append(entry.item(item)['values'])
                data[key] = items
            elif hasattr(entry, 'get'):
                data[key] = entry.get()
        
        print(f"Saving information security log: {data}")
        messagebox.showinfo("حفظ", "تم حفظ سجل أمن المعلومات بنجاح")
    
    def update_information_security_log(self, entries):
        """Update information security log data"""
        self.save_information_security_log(entries)
        messagebox.showinfo("تحديث", "تم تحديث سجل أمن المعلومات بنجاح")
    
    def clear_information_security_log(self, entries):
        """Clear information security log form"""
        for key, entry in entries.items():
            if key == "events_table":
                entry.delete(*entry.get_children())
            elif hasattr(entry, 'delete'):
                entry.delete(0, tk.END)
            elif hasattr(entry, 'set'):
                entry.set("")
    
    def add_security_event(self, tree):
        """Add new security event to log"""
        dialog = tk.Toplevel()
        dialog.title("إضافة حدث أمني جديد")
        dialog.geometry("600x500")
        dialog.configure(bg="#3C1361")
        
        fields = ["التاريخ", "الوقت", "نوع الحدث", "المستخدم", "النظام المتأثر", "مستوى الخطورة", "الإجراء المتخذ", "الحالة"]
        entries = {}
        
        for i, field in enumerate(fields):
            tk.Label(dialog, text=field + ":", font=self.arabic_font_bold, 
                    fg="#FFD700", bg="#3C1361").grid(row=i, column=1, padx=10, pady=5, sticky="e")
            
            if field == "نوع الحدث":
                entry = ttk.Combobox(dialog, values=["محاولة دخول غير مصرح", "تسريب بيانات", "هجوم إلكتروني", "خطأ تقني"])
            elif field == "مستوى الخطورة":
                entry = ttk.Combobox(dialog, values=["منخفض", "متوسط", "عالي", "حرج"])
            elif field == "الحالة":
                entry = ttk.Combobox(dialog, values=["جديد", "قيد المعالجة", "تم الحل", "مغلق"])
            else:
                entry = tk.Entry(dialog, font=self.arabic_font, width=30)
            
            entry.grid(row=i, column=0, padx=10, pady=5, sticky="w")
            entries[field] = entry
        
        def add_to_tree():
            values = []
            for field in fields:
                values.append(entries[field].get())
            tree.insert("", "end", values=values)
            dialog.destroy()
        
        tk.Button(dialog, text="إضافة", command=add_to_tree, 
                 font=self.arabic_font_bold, fg="white", bg="#4CAF50").grid(row=len(fields), column=0, columnspan=2, pady=20)
    
    def edit_security_event(self, tree):
        """Edit selected security event"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد حدث للتعديل")
            return
        
        item = tree.item(selected[0])
        values = item['values']
        
        # Create edit dialog with pre-filled values
        dialog = tk.Toplevel()
        dialog.title("تعديل الحدث الأمني")
        dialog.geometry("600x500")
        dialog.configure(bg="#3C1361")
        
        fields = ["التاريخ", "الوقت", "نوع الحدث", "المستخدم", "النظام المتأثر", "مستوى الخطورة", "الإجراء المتخذ", "الحالة"]
        entries = {}
        
        for i, (field, value) in enumerate(zip(fields, values)):
            tk.Label(dialog, text=field + ":", font=self.arabic_font_bold, 
                    fg="#FFD700", bg="#3C1361").grid(row=i, column=1, padx=10, pady=5, sticky="e")
            
            if field == "نوع الحدث":
                entry = ttk.Combobox(dialog, values=["محاولة دخول غير مصرح", "تسريب بيانات", "هجوم إلكتروني", "خطأ تقني"])
            elif field == "مستوى الخطورة":
                entry = ttk.Combobox(dialog, values=["منخفض", "متوسط", "عالي", "حرج"])
            elif field == "الحالة":
                entry = ttk.Combobox(dialog, values=["جديد", "قيد المعالجة", "تم الحل", "مغلق"])
            else:
                entry = tk.Entry(dialog, font=self.arabic_font, width=30)
            
            entry.grid(row=i, column=0, padx=10, pady=5, sticky="w")
            
            # Set current value
            if hasattr(entry, 'set'):
                entry.set(value)
            else:
                entry.insert(0, str(value))
            
            entries[field] = entry
        
        def update_tree():
            new_values = []
            for field in fields:
                new_values.append(entries[field].get())
            tree.item(selected[0], values=new_values)
            dialog.destroy()
        
        tk.Button(dialog, text="تحديث", command=update_tree, 
                 font=self.arabic_font_bold, fg="white", bg="#FF9800").grid(row=len(fields), column=0, columnspan=2, pady=20)
    
    def delete_security_event(self, tree):
        """Delete selected security event"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد حدث للحذف")
            return
        
        if messagebox.askyesno("تأكيد", "هل أنت متأكد من حذف هذا الحدث؟"):
            tree.delete(selected[0])
    
    # QF-07-01 Form Management Methods
    def save_exam_application(self, entries):
        """Save exam application form data"""
        try:
            messagebox.showinfo("نجح", "تم حفظ طلب التقديم للامتحان بنجاح")
            return True
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في حفظ طلب التقديم: {str(e)}")
            return False
    
    def update_exam_application(self, entries):
        """Update exam application form data"""
        try:
            messagebox.showinfo("نجح", "تم تحديث طلب التقديم للامتحان بنجاح")
            return True
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في تحديث طلب التقديم: {str(e)}")
            return False
    
    def clear_exam_application(self, entries):
        """Clear exam application form data"""
        try:
            for key, entry in entries.items():
                if hasattr(entry, 'delete'):
                    entry.delete(0, tk.END)
                elif hasattr(entry, 'set'):
                    entry.set(False)
            messagebox.showinfo("نجح", "تم مسح بيانات النموذج")
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في مسح البيانات: {str(e)}")
    
    def save_exam_results_record(self, entries):
        """Save exam results record form data"""
        try:
            messagebox.showinfo("نجح", "تم حفظ سجل نتائج التقييمات والامتحانات بنجاح")
            return True
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في حفظ سجل النتائج: {str(e)}")
            return False
    
    def update_exam_results_record(self, entries):
        """Update exam results record form data"""
        try:
            messagebox.showinfo("نجح", "تم تحديث سجل نتائج التقييمات والامتحانات بنجاح")
            return True
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في تحديث سجل النتائج: {str(e)}")
            return False
    
    def clear_exam_results_record(self, entries):
        """Clear exam results record form data"""
        try:
            for key, entry in entries.items():
                if hasattr(entry, 'delete'):
                    entry.delete(0, tk.END)
                elif hasattr(entry, 'set'):
                    entry.set(False)
            messagebox.showinfo("نجح", "تم مسح بيانات النموذج")
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في مسح البيانات: {str(e)}")
    
    def save_certification_decisions_record(self, entries):
        """Save certification decisions record form data"""
        try:
            messagebox.showinfo("نجح", "تم حفظ سجل قرارات الاعتماد بنجاح")
            return True
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في حفظ سجل القرارات: {str(e)}")
            return False
    
    def update_certification_decisions_record(self, entries):
        """Update certification decisions record form data"""
        try:
            messagebox.showinfo("نجح", "تم تحديث سجل قرارات الاعتماد بنجاح")
            return True
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في تحديث سجل القرارات: {str(e)}")
            return False
    
    def clear_certification_decisions_record(self, entries):
        """Clear certification decisions record form data"""
        try:
            for key, entry in entries.items():
                if hasattr(entry, 'delete'):
                    entry.delete(0, tk.END)
                elif hasattr(entry, 'set'):
                    entry.set(False)
            messagebox.showinfo("نجح", "تم مسح بيانات النموذج")
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في مسح البيانات: {str(e)}")
    
    def save_complaints_report(self, entries):
        """Save complaints report form data"""
        try:
            messagebox.showinfo("نجح", "تم حفظ تقرير الشكاوى والتظلمات بنجاح")
            return True
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في حفظ تقرير الشكاوى: {str(e)}")
            return False
    
    def update_complaints_report(self, entries):
        """Update complaints report form data"""
        try:
            messagebox.showinfo("نجح", "تم تحديث تقرير الشكاوى والتظلمات بنجاح")
            return True
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في تحديث تقرير الشكاوى: {str(e)}")
            return False
    
    def clear_complaints_report(self, entries):
        """Clear complaints report form data"""
        try:
            for key, entry in entries.items():
                if hasattr(entry, 'delete'):
                    entry.delete(0, tk.END)
                elif hasattr(entry, 'set'):
                    entry.set(False)
            messagebox.showinfo("نجح", "تم مسح بيانات النموذج")
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في مسح البيانات: {str(e)}")
    
    def save_records_destruction_report(self, entries):
        """Save records destruction report form data"""
        try:
            messagebox.showinfo("نجح", "تم حفظ تقرير إتلاف السجلات بنجاح")
            return True
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في حفظ تقرير الإتلاف: {str(e)}")
            return False
    
    def update_records_destruction_report(self, entries):
        """Update records destruction report form data"""
        try:
            messagebox.showinfo("نجح", "تم تحديث تقرير إتلاف السجلات بنجاح")
            return True
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في تحديث تقرير الإتلاف: {str(e)}")
            return False
    
    def clear_records_destruction_report(self, entries):
        """Clear records destruction report form data"""
        try:
            for key, entry in entries.items():
                if hasattr(entry, 'delete'):
                    entry.delete(0, tk.END)
                elif hasattr(entry, 'set'):
                    entry.set(False)
            messagebox.showinfo("نجح", "تم مسح بيانات النموذج")
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في مسح البيانات: {str(e)}")
    
    # Helper methods for table management
    def add_result_row(self, tree):
        """Add new row to results table"""
        row_count = len(tree.get_children()) + 1
        tree.insert("", tk.END, values=(row_count, "", "", "", "", ""))
    
    def edit_result_row(self, tree):
        """Edit selected row in results table"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد صف للتعديل")
            return
        messagebox.showinfo("تعديل", "يمكنك النقر مرتين على الخلية للتعديل")
    
    def delete_result_row(self, tree):
        """Delete selected row from results table"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد صف للحذف")
            return
        if messagebox.askyesno("تأكيد", "هل أنت متأكد من حذف هذا الصف؟"):
            tree.delete(selected[0])
    
    def add_decision_row(self, tree):
        """Add new row to decisions table"""
        row_count = len(tree.get_children()) + 1
        tree.insert("", tk.END, values=(row_count, "", "", "", "", ""))
    
    def edit_decision_row(self, tree):
        """Edit selected row in decisions table"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد صف للتعديل")
            return
        messagebox.showinfo("تعديل", "يمكنك النقر مرتين على الخلية للتعديل")
    
    def delete_decision_row(self, tree):
        """Delete selected row from decisions table"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد صف للحذف")
            return
        if messagebox.askyesno("تأكيد", "هل أنت متأكد من حذف هذا الصف؟"):
            tree.delete(selected[0])
    
    def add_signature_row(self, tree):
        """Add new row to signatures table"""
        tree.insert("", tk.END, values=("", "", ""))
    
    def edit_signature_row(self, tree):
        """Edit selected row in signatures table"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد صف للتعديل")
            return
        messagebox.showinfo("تعديل", "يمكنك النقر مرتين على الخلية للتعديل")
    
    def delete_signature_row(self, tree):
        """Delete selected row from signatures table"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد صف للحذف")
            return
        if messagebox.askyesno("تأكيد", "هل أنت متأكد من حذف هذا الصف؟"):
            tree.delete(selected[0])
    
    def add_destruction_record(self, tree):
        """Add new destruction record"""
        tree.insert("", tk.END, values=("", "", "", "", "", "", ""))
    
    def edit_destruction_record(self, tree):
        """Edit selected destruction record"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد سجل للتعديل")
            return
        messagebox.showinfo("تعديل", "يمكنك النقر مرتين على الخلية للتعديل")
    
    def delete_destruction_record(self, tree):
        """Delete selected destruction record"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد سجل للحذف")
            return
        if messagebox.askyesno("تأكيد", "هل أنت متأكد من حذف هذا السجل؟"):
            tree.delete(selected[0])

    # QF-09-01 Forms Implementation
    def create_program_application_form(self, parent, form_name):
        """Create QF-09-01-01: نموذج طلب التقديم للبرنامج"""
        # إطار التمرير
        canvas = tk.Canvas(parent, bg="#3C1361")
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame, 
                              text="نموذج طلب التقديم للبرنامج",
                              font=self.arabic_font_large,
                              fg="white", bg="#3C1361")
        title_label.pack(pady=10)
        
        # إطار النموذج الرئيسي
        main_frame = tk.Frame(scrollable_frame, bg="#4A1E6B", relief=tk.RAISED, bd=2)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # البيانات الشخصية
        personal_frame = tk.LabelFrame(main_frame, text="أولاً: البيانات الشخصية لمقدم الطلب",
                                     font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        personal_frame.pack(fill=tk.X, padx=10, pady=5)
        
        personal_fields = [
            "الاسم الكامل", "تاريخ الميلاد", "رقم الهوية/جواز السفر", 
            "الجنسية", "البريد الإلكتروني", "رقم الهاتف", "العنوان"
        ]
        
        personal_entries = {}
        for i, field in enumerate(personal_fields):
            row = i // 2
            col = i % 2
            
            tk.Label(personal_frame, text=field + ":", font=self.arabic_font,
                    fg="white", bg="#4A1E6B").grid(row=row, column=col*2, sticky="e", padx=5, pady=2)
            
            if field == "تاريخ الميلاد":
                entry_frame = tk.Frame(personal_frame, bg="#4A1E6B")
                entry_frame.grid(row=row, column=col*2+1, sticky="w", padx=5, pady=2)
                
                day_entry = tk.Entry(entry_frame, width=5, font=self.arabic_font)
                day_entry.pack(side=tk.RIGHT, padx=2)
                tk.Label(entry_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                
                month_entry = tk.Entry(entry_frame, width=5, font=self.arabic_font)
                month_entry.pack(side=tk.RIGHT, padx=2)
                tk.Label(entry_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                
                year_entry = tk.Entry(entry_frame, width=8, font=self.arabic_font)
                year_entry.pack(side=tk.RIGHT, padx=2)
                
                personal_entries[field] = {"day": day_entry, "month": month_entry, "year": year_entry}
            else:
                entry = tk.Entry(personal_frame, width=30, font=self.arabic_font)
                entry.grid(row=row, column=col*2+1, sticky="w", padx=5, pady=2)
                personal_entries[field] = entry
        
        # إضافة خيار الجنس
        gender_frame = tk.Frame(personal_frame, bg="#4A1E6B")
        gender_frame.grid(row=len(personal_fields)//2, column=0, columnspan=4, sticky="w", padx=5, pady=5)
        
        tk.Label(gender_frame, text="الجنس:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        gender_var = tk.StringVar()
        tk.Radiobutton(gender_frame, text="ذكر", variable=gender_var, value="ذكر",
                      font=self.arabic_font, fg="white", bg="#4A1E6B",
                      selectcolor="#3C1361").pack(side=tk.RIGHT, padx=10)
        tk.Radiobutton(gender_frame, text="أنثى", variable=gender_var, value="أنثى",
                      font=self.arabic_font, fg="white", bg="#4A1E6B",
                      selectcolor="#3C1361").pack(side=tk.RIGHT, padx=10)
        
        # بيانات البرنامج
        program_frame = tk.LabelFrame(main_frame, text="ثانياً: بيانات البرنامج",
                                    font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        program_frame.pack(fill=tk.X, padx=10, pady=5)
        
        program_fields = ["اسم البرنامج المتقدم له", "كود البرنامج", "دورة/دفعة رقم", "تاريخ البدء المتوقع"]
        program_entries = {}
        
        for i, field in enumerate(program_fields):
            tk.Label(program_frame, text=field + ":", font=self.arabic_font,
                    fg="white", bg="#4A1E6B").grid(row=i, column=0, sticky="e", padx=5, pady=2)
            
            if field == "تاريخ البدء المتوقع":
                entry_frame = tk.Frame(program_frame, bg="#4A1E6B")
                entry_frame.grid(row=i, column=1, sticky="w", padx=5, pady=2)
                
                day_entry = tk.Entry(entry_frame, width=5, font=self.arabic_font)
                day_entry.pack(side=tk.RIGHT, padx=2)
                tk.Label(entry_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                
                month_entry = tk.Entry(entry_frame, width=5, font=self.arabic_font)
                month_entry.pack(side=tk.RIGHT, padx=2)
                tk.Label(entry_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                
                year_entry = tk.Entry(entry_frame, width=8, font=self.arabic_font)
                year_entry.pack(side=tk.RIGHT, padx=2)
                
                program_entries[field] = {"day": day_entry, "month": month_entry, "year": year_entry}
            else:
                entry = tk.Entry(program_frame, width=40, font=self.arabic_font)
                entry.grid(row=i, column=1, sticky="w", padx=5, pady=2)
                program_entries[field] = entry
        
        # طريقة الدراسة
        study_frame = tk.Frame(program_frame, bg="#4A1E6B")
        study_frame.grid(row=len(program_fields), column=0, columnspan=2, sticky="w", padx=5, pady=5)
        
        tk.Label(study_frame, text="طريقة الدراسة:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        study_var = tk.StringVar()
        for method in ["حضور مباشر", "أونلاين", "مدمج"]:
            tk.Radiobutton(study_frame, text=method, variable=study_var, value=method,
                          font=self.arabic_font, fg="white", bg="#4A1E6B",
                          selectcolor="#3C1361").pack(side=tk.RIGHT, padx=10)
        
        # أزرار التحكم المحسنة
        # Combine all entries into one dictionary for enhanced buttons
        all_entries = {}
        all_entries.update(personal_entries)
        all_entries.update(program_entries)
        all_entries['gender'] = gender_var
        all_entries['study_method'] = study_var
        
        # إضافة الأزرار المحسنة
        self.create_universal_enhanced_form_buttons(main_frame, "QF-09-01-01", "نموذج طلب التقديم للبرنامج", all_entries)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
    def create_applicant_commitment_agreement_form(self, parent, form_name):
        """Create QF-09-01-02: اتفاقية التزام المتقدم بالبرنامج"""
        # إطار التمرير
        canvas = tk.Canvas(parent, bg="#3C1361")
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame, 
                              text="اتفاقية التزام المتقدم بالبرنامج",
                              font=self.arabic_font_large,
                              fg="white", bg="#3C1361")
        title_label.pack(pady=10)
        
        # إطار النموذج الرئيسي
        main_frame = tk.Frame(scrollable_frame, bg="#4A1E6B", relief=tk.RAISED, bd=2)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # أولاً: بيانات المتقدم
        applicant_frame = tk.LabelFrame(main_frame, text="أولاً: بيانات المتقدم",
                                      font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        applicant_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # إطار للحقول
        applicant_fields_frame = tk.Frame(applicant_frame, bg="#4A1E6B")
        applicant_fields_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # الاسم الكامل
        name_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        name_frame.pack(fill=tk.X, pady=2)
        tk.Label(name_frame, text="الاسم الكامل:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        name_entry = tk.Entry(name_frame, width=50, font=self.arabic_font)
        name_entry.pack(side=tk.RIGHT, padx=5)
        
        # رقم الهوية / جواز السفر
        id_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        id_frame.pack(fill=tk.X, pady=2)
        tk.Label(id_frame, text="رقم الهوية / جواز السفر:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        id_entry = tk.Entry(id_frame, width=50, font=self.arabic_font)
        id_entry.pack(side=tk.RIGHT, padx=5)
        
        # البرنامج المتقدم له
        program_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        program_frame.pack(fill=tk.X, pady=2)
        tk.Label(program_frame, text="البرنامج المتقدم له:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        program_entry = tk.Entry(program_frame, width=50, font=self.arabic_font)
        program_entry.pack(side=tk.RIGHT, padx=5)
        
        # الدورة / الدفعة
        batch_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        batch_frame.pack(fill=tk.X, pady=2)
        tk.Label(batch_frame, text="الدورة / الدفعة:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        batch_entry = tk.Entry(batch_frame, width=20, font=self.arabic_font)
        batch_entry.pack(side=tk.RIGHT, padx=5)
        
        # تاريخ التقديم
        app_date_main_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        app_date_main_frame.pack(fill=tk.X, pady=2)
        tk.Label(app_date_main_frame, text="تاريخ التقديم:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        date_frame = tk.Frame(app_date_main_frame, bg="#4A1E6B")
        date_frame.pack(side=tk.RIGHT, padx=5)
        
        day_entry = tk.Entry(date_frame, width=5, font=self.arabic_font)
        day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(date_frame, text="/", fg="white", bg="#4A1E6B", font=self.arabic_font).pack(side=tk.RIGHT)
        
        month_entry = tk.Entry(date_frame, width=5, font=self.arabic_font)
        month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(date_frame, text="/", fg="white", bg="#4A1E6B", font=self.arabic_font).pack(side=tk.RIGHT)
        
        year_entry = tk.Entry(date_frame, width=8, font=self.arabic_font)
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        # ثانياً: نص الاتفاقية
        agreement_frame = tk.LabelFrame(main_frame, text="ثانياً: نص الاتفاقية",
                                      font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        agreement_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        agreement_text = """أنا الموقع أدناه أقر وألتزم بما يلي:

1. أن جميع المعلومات والوثائق التي قدمتها صحيحة ودقيقة.

2. الالتزام الكامل بحضور جميع المحاضرات والجلسات التدريبية الخاصة بالبرنامج، سواء كانت حضورية أو إلكترونية، وفق الجدول المعتمد.

3. احترام مواعيد البرنامج وعدم الانقطاع دون عذر رسمي مقبول.

4. الامتناع عن أي سلوك يخلّ بآداب التعلم أو يسيء إلى زملاء البرنامج أو المدربين أو الجهة المنظمة.

5. المحافظة على سرية أي معلومات أو مواد تدريبية يتم تسليمها خلال البرنامج، وعدم استخدامها إلا لأغراض التعلم.

6. عدم تصوير أو تسجيل أي جلسة تدريبية دون إذن مسبق من الجهة المنظمة.

7. الالتزام بأي متطلبات تقييم أو اختبارات ضمن البرنامج.

8. تفويض الجهة المنظمة باستخدام بياناتي لأغراض التوثيق والتواصل الأكاديمي والتقارير المطلوبة.

9. العلم بأن الإخلال بأي بند من هذه الاتفاقية قد يؤدي إلى إنذاري أو إلغاء مشاركتي في البرنامج دون استرداد أي رسوم (إن وُجدت)."""
        
        text_widget = tk.Text(agreement_frame, height=18, font=self.arabic_font,
                            wrap=tk.WORD, bg="white", fg="black")
        text_widget.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        text_widget.insert(tk.END, agreement_text)
        text_widget.config(state=tk.DISABLED)  # للقراءة فقط
        
        # ثالثاً: توقيع الالتزام
        signature_frame = tk.LabelFrame(main_frame, text="ثالثاً: توقيع الالتزام",
                                      font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        signature_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # خانة الموافقة
        agree_var = tk.BooleanVar()
        agree_check = tk.Checkbutton(signature_frame, 
                                   text="أوافق على جميع بنود هذه الاتفاقية وألتزم بتنفيذها",
                                   variable=agree_var, font=self.arabic_font,
                                   fg="white", bg="#4A1E6B", selectcolor="#3C1361")
        agree_check.pack(pady=10)
        
        # إطار للحقول
        signature_fields_frame = tk.Frame(signature_frame, bg="#4A1E6B")
        signature_fields_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # اسم المتقدم
        applicant_name_frame = tk.Frame(signature_fields_frame, bg="#4A1E6B")
        applicant_name_frame.pack(fill=tk.X, pady=2)
        tk.Label(applicant_name_frame, text="اسم المتقدم:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        applicant_name_entry = tk.Entry(applicant_name_frame, width=40, font=self.arabic_font)
        applicant_name_entry.pack(side=tk.RIGHT, padx=5)
        
        # التوقيع
        signature_field_frame = tk.Frame(signature_fields_frame, bg="#4A1E6B")
        signature_field_frame.pack(fill=tk.X, pady=2)
        tk.Label(signature_field_frame, text="التوقيع:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        signature_entry = tk.Entry(signature_field_frame, width=40, font=self.arabic_font)
        signature_entry.pack(side=tk.RIGHT, padx=5)
        
        # التاريخ
        sign_date_main_frame = tk.Frame(signature_fields_frame, bg="#4A1E6B")
        sign_date_main_frame.pack(fill=tk.X, pady=2)
        tk.Label(sign_date_main_frame, text="التاريخ:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        sign_date_frame = tk.Frame(sign_date_main_frame, bg="#4A1E6B")
        sign_date_frame.pack(side=tk.RIGHT, padx=5)
        
        sign_day_entry = tk.Entry(sign_date_frame, width=5, font=self.arabic_font)
        sign_day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(sign_date_frame, text="/", fg="white", bg="#4A1E6B", font=self.arabic_font).pack(side=tk.RIGHT)
        
        sign_month_entry = tk.Entry(sign_date_frame, width=5, font=self.arabic_font)
        sign_month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(sign_date_frame, text="/", fg="white", bg="#4A1E6B", font=self.arabic_font).pack(side=tk.RIGHT)
        
        sign_year_entry = tk.Entry(sign_date_frame, width=8, font=self.arabic_font)
        sign_year_entry.pack(side=tk.RIGHT, padx=2)
        
        # رابعاً: اعتماد الجهة المنظمة
        organization_frame = tk.LabelFrame(main_frame, text="رابعاً: اعتماد الجهة المنظمة",
                                         font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        organization_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # إطار للحقول
        org_fields_frame = tk.Frame(organization_frame, bg="#4A1E6B")
        org_fields_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # اسم ممثل الجهة
        org_rep_frame = tk.Frame(org_fields_frame, bg="#4A1E6B")
        org_rep_frame.pack(fill=tk.X, pady=2)
        tk.Label(org_rep_frame, text="اسم ممثل الجهة:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        org_rep_entry = tk.Entry(org_rep_frame, width=40, font=self.arabic_font)
        org_rep_entry.pack(side=tk.RIGHT, padx=5)
        
        # الصفة / الوظيفة
        position_frame = tk.Frame(org_fields_frame, bg="#4A1E6B")
        position_frame.pack(fill=tk.X, pady=2)
        tk.Label(position_frame, text="الصفة / الوظيفة:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        position_entry = tk.Entry(position_frame, width=40, font=self.arabic_font)
        position_entry.pack(side=tk.RIGHT, padx=5)
        
        # التوقيع
        org_signature_frame = tk.Frame(org_fields_frame, bg="#4A1E6B")
        org_signature_frame.pack(fill=tk.X, pady=2)
        tk.Label(org_signature_frame, text="التوقيع:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        org_signature_entry = tk.Entry(org_signature_frame, width=40, font=self.arabic_font)
        org_signature_entry.pack(side=tk.RIGHT, padx=5)
        
        # التاريخ
        org_date_main_frame = tk.Frame(org_fields_frame, bg="#4A1E6B")
        org_date_main_frame.pack(fill=tk.X, pady=2)
        tk.Label(org_date_main_frame, text="التاريخ:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        org_date_frame = tk.Frame(org_date_main_frame, bg="#4A1E6B")
        org_date_frame.pack(side=tk.RIGHT, padx=5)
        
        org_day_entry = tk.Entry(org_date_frame, width=5, font=self.arabic_font)
        org_day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(org_date_frame, text="/", fg="white", bg="#4A1E6B", font=self.arabic_font).pack(side=tk.RIGHT)
        
        org_month_entry = tk.Entry(org_date_frame, width=5, font=self.arabic_font)
        org_month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(org_date_frame, text="/", fg="white", bg="#4A1E6B", font=self.arabic_font).pack(side=tk.RIGHT)
        
        org_year_entry = tk.Entry(org_date_frame, width=8, font=self.arabic_font)
        org_year_entry.pack(side=tk.RIGHT, padx=2)
        
        # أزرار التحكم
        buttons_frame = tk.Frame(main_frame, bg="#4A1E6B")
        buttons_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # جمع المتغيرات في dictionary للتمرير للدالة
        form_entries = {
            'name': name_entry,
            'id': id_entry,
            'program': program_entry,
            'batch': batch_entry,
            'app_date': {'day': day_entry, 'month': month_entry, 'year': year_entry},
            'agree_var': agree_var,
            'applicant_name': applicant_name_entry,
            'signature': signature_entry,
            'sign_date': {'day': sign_day_entry, 'month': sign_month_entry, 'year': sign_year_entry},
            'org_rep': org_rep_entry,
            'position': position_entry,
            'org_signature': org_signature_entry,
            'org_date': {'day': org_day_entry, 'month': org_month_entry, 'year': org_year_entry}
        }
        
        # أزرار التحكم المحسنة
        # إضافة الأزرار المحسنة
        self.create_universal_enhanced_form_buttons(main_frame, "QF-09-01-02", "اتفاقية التزام المتقدم بالبرنامج", form_entries)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)

    def save_commitment_agreement_complete(self, form_name, form_entries):
        """Save complete commitment agreement form data"""
        try:
            # جمع البيانات
            data = {
                'name': form_entries['name'].get(),
                'id': form_entries['id'].get(),
                'program': form_entries['program'].get(),
                'batch': form_entries['batch'].get(),
                'app_date': f"{form_entries['app_date']['day'].get()}/{form_entries['app_date']['month'].get()}/{form_entries['app_date']['year'].get()}",
                'agreed': form_entries['agree_var'].get(),
                'applicant_name': form_entries['applicant_name'].get(),
                'signature': form_entries['signature'].get(),
                'sign_date': f"{form_entries['sign_date']['day'].get()}/{form_entries['sign_date']['month'].get()}/{form_entries['sign_date']['year'].get()}",
                'org_rep': form_entries['org_rep'].get(),
                'position': form_entries['position'].get(),
                'org_signature': form_entries['org_signature'].get(),
                'org_date': f"{form_entries['org_date']['day'].get()}/{form_entries['org_date']['month'].get()}/{form_entries['org_date']['year'].get()}"
            }
            
            # التحقق من الموافقة
            if not data['agreed']:
                messagebox.showwarning("تحذير", "يجب الموافقة على بنود الاتفاقية أولاً")
                return
            
            # حفظ البيانات في قاعدة البيانات
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''INSERT INTO form_data 
                                 (form_name, data, created_date) 
                                 VALUES (?, ?, ?)''',
                              (form_name, str(data), datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
                conn.commit()
            
            messagebox.showinfo("نجح", "تم حفظ اتفاقية الالتزام بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء الحفظ: {str(e)}")

    def clear_commitment_agreement_form(self, form_entries):
        """Clear all form fields"""
        try:
            # مسح جميع الحقول النصية
            form_entries['name'].delete(0, tk.END)
            form_entries['id'].delete(0, tk.END)
            form_entries['program'].delete(0, tk.END)
            form_entries['batch'].delete(0, tk.END)
            
            # مسح حقول التاريخ
            form_entries['app_date']['day'].delete(0, tk.END)
            form_entries['app_date']['month'].delete(0, tk.END)
            form_entries['app_date']['year'].delete(0, tk.END)
            
            # إلغاء تحديد الموافقة
            form_entries['agree_var'].set(False)
            
            # مسح حقول التوقيع
            form_entries['applicant_name'].delete(0, tk.END)
            form_entries['signature'].delete(0, tk.END)
            form_entries['sign_date']['day'].delete(0, tk.END)
            form_entries['sign_date']['month'].delete(0, tk.END)
            form_entries['sign_date']['year'].delete(0, tk.END)
            
            # مسح حقول الجهة المنظمة
            form_entries['org_rep'].delete(0, tk.END)
            form_entries['position'].delete(0, tk.END)
            form_entries['org_signature'].delete(0, tk.END)
            form_entries['org_date']['day'].delete(0, tk.END)
            form_entries['org_date']['month'].delete(0, tk.END)
            form_entries['org_date']['year'].delete(0, tk.END)
            
            messagebox.showinfo("تم", "تم مسح جميع البيانات")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء المسح: {str(e)}")
        
    def create_qualifications_assessment_form(self, parent, form_name):
        """Create QF-09-02-01: نموذج تقييم المؤهلات السابقة"""
        # إطار التمرير
        canvas = tk.Canvas(parent, bg="#3C1361")
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame, 
                              text="نموذج تقييم المؤهلات السابقة",
                              font=self.arabic_font_large,
                              fg="white", bg="#3C1361")
        title_label.pack(pady=10)
        
        # إطار النموذج الرئيسي
        main_frame = tk.Frame(scrollable_frame, bg="#4A1E6B", relief=tk.RAISED, bd=2)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # أولاً: بيانات المتقدم
        applicant_frame = tk.LabelFrame(main_frame, text="أولاً: بيانات المتقدم",
                                      font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        applicant_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # إطار للحقول
        applicant_fields_frame = tk.Frame(applicant_frame, bg="#4A1E6B")
        applicant_fields_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # الاسم الكامل
        name_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        name_frame.pack(fill=tk.X, pady=2)
        tk.Label(name_frame, text="الاسم الكامل:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        name_entry = tk.Entry(name_frame, width=50, font=self.arabic_font)
        name_entry.pack(side=tk.RIGHT, padx=5)
        
        # رقم الهوية / جواز السفر
        id_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        id_frame.pack(fill=tk.X, pady=2)
        tk.Label(id_frame, text="رقم الهوية / جواز السفر:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        id_entry = tk.Entry(id_frame, width=50, font=self.arabic_font)
        id_entry.pack(side=tk.RIGHT, padx=5)
        
        # البرنامج المتقدم له
        program_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        program_frame.pack(fill=tk.X, pady=2)
        tk.Label(program_frame, text="البرنامج المتقدم له:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        program_entry = tk.Entry(program_frame, width=50, font=self.arabic_font)
        program_entry.pack(side=tk.RIGHT, padx=5)
        
        # تاريخ التقديم
        app_date_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        app_date_frame.pack(fill=tk.X, pady=2)
        tk.Label(app_date_frame, text="تاريخ التقديم:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        app_date_entries_frame = tk.Frame(app_date_frame, bg="#4A1E6B")
        app_date_entries_frame.pack(side=tk.RIGHT, padx=5)
        
        app_day_entry = tk.Entry(app_date_entries_frame, width=5, font=self.arabic_font)
        app_day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(app_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        app_month_entry = tk.Entry(app_date_entries_frame, width=5, font=self.arabic_font)
        app_month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(app_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        app_year_entry = tk.Entry(app_date_entries_frame, width=8, font=self.arabic_font)
        app_year_entry.pack(side=tk.RIGHT, padx=2)
        
        # تاريخ التقييم
        eval_date_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        eval_date_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_date_frame, text="تاريخ التقييم:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        eval_date_entries_frame = tk.Frame(eval_date_frame, bg="#4A1E6B")
        eval_date_entries_frame.pack(side=tk.RIGHT, padx=5)
        
        eval_day_entry = tk.Entry(eval_date_entries_frame, width=5, font=self.arabic_font)
        eval_day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_month_entry = tk.Entry(eval_date_entries_frame, width=5, font=self.arabic_font)
        eval_month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_year_entry = tk.Entry(eval_date_entries_frame, width=8, font=self.arabic_font)
        eval_year_entry.pack(side=tk.RIGHT, padx=2)

        # ثانياً: المؤهلات المقدمة
        qualifications_frame = tk.LabelFrame(main_frame, text="ثانياً: المؤهلات المقدمة",
                                           font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        qualifications_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # جدول المؤهلات
        qual_table_frame = tk.Frame(qualifications_frame, bg="#4A1E6B")
        qual_table_frame.pack(fill=tk.X, padx=5, pady=5)
        
        qual_entries = []
        headers = ["م", "اسم المؤهل", "التخصص", "الجهة المانحة", "سنة التخرج", "المرفقات متوفرة؟"]
        
        # عناوين الجدول
        header_frame = tk.Frame(qual_table_frame, bg="#4A1E6B")
        header_frame.pack(fill=tk.X, pady=2)
        
        for header in reversed(headers):  # عكس الترتيب للعربية
            tk.Label(header_frame, text=header, font=self.arabic_font_bold,
                    fg="white", bg="#5A2A9C", relief=tk.RAISED).pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # صفوف البيانات
        for i in range(3):
            row_frame = tk.Frame(qual_table_frame, bg="#4A1E6B")
            row_frame.pack(fill=tk.X, pady=1)
            
            row_entries = {}
            
            # خانة اختيار المرفقات
            available_var = tk.BooleanVar()
            tk.Checkbutton(row_frame, variable=available_var, bg="#4A1E6B", 
                         selectcolor="#3C1361").pack(side=tk.RIGHT, padx=1)
            row_entries["متوفرة"] = available_var
            
            # باقي الحقول
            for field in ["سنة التخرج", "الجهة المانحة", "التخصص", "اسم المؤهل"]:
                entry = tk.Entry(row_frame, width=15, font=self.arabic_font)
                entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
                row_entries[field] = entry
            
            # رقم متسلسل
            tk.Label(row_frame, text=str(i+1), font=self.arabic_font,
                    fg="white", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)
            
            qual_entries.append(row_entries)

        # ثالثاً: معايير التقييم
        criteria_frame = tk.LabelFrame(main_frame, text="ثالثاً: معايير التقييم",
                                     font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        criteria_frame.pack(fill=tk.X, padx=10, pady=5)
        
        criteria_list = [
            "المؤهل معتمد من جهة رسمية",
            "التخصص مرتبط بالبرنامج", 
            "المستوى الأكاديمي مناسب",
            "توافر الوثائق الداعمة",
            "المؤهل حديث / ضمن الفترة المطلوبة"
        ]
        
        criteria_vars = {}
        
        for criterion in criteria_list:
            crit_frame = tk.Frame(criteria_frame, bg="#4A1E6B")
            crit_frame.pack(fill=tk.X, pady=2, padx=5)
            
            # ملاحظات
            notes_entry = tk.Entry(crit_frame, width=30, font=self.arabic_font)
            notes_entry.pack(side=tk.RIGHT, padx=5)
            
            # لا ينطبق
            not_applicable_var = tk.BooleanVar()
            tk.Checkbutton(crit_frame, text="لا ينطبق", variable=not_applicable_var,
                         font=self.arabic_font, fg="white", bg="#4A1E6B",
                         selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)
            
            # ينطبق
            applicable_var = tk.BooleanVar()
            tk.Checkbutton(crit_frame, text="ينطبق", variable=applicable_var,
                         font=self.arabic_font, fg="white", bg="#4A1E6B",
                         selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)
            
            # النص
            tk.Label(crit_frame, text=criterion + ":", font=self.arabic_font,
                    fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
            
            criteria_vars[criterion] = {
                "applicable": applicable_var,
                "not_applicable": not_applicable_var,
                "notes": notes_entry
            }

        # رابعاً: التوصية النهائية
        recommendation_frame = tk.LabelFrame(main_frame, text="رابعاً: التوصية النهائية",
                                           font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        recommendation_frame.pack(fill=tk.X, padx=10, pady=5)
        
        recommendation_var = tk.StringVar()
        
        recommendations = [
            ("قبول المؤهل واعتباره مستوفيًا للشروط", "قبول"),
            ("قبول مشروط", "مشروط"),
            ("عدم قبول المؤهل", "رفض")
        ]
        
        for text, value in recommendations:
            tk.Radiobutton(recommendation_frame, text=text, variable=recommendation_var,
                         value=value, font=self.arabic_font, fg="white", bg="#4A1E6B",
                         selectcolor="#3C1361").pack(anchor=tk.E, padx=5, pady=2)
        
        # حقول إضافية للقبول المشروط والرفض
        conditional_frame = tk.Frame(recommendation_frame, bg="#4A1E6B")
        conditional_frame.pack(fill=tk.X, padx=5, pady=2)
        tk.Label(conditional_frame, text="في حالة القبول المشروط - مطلوب استكمال:",
                font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        conditional_entry = tk.Entry(conditional_frame, width=40, font=self.arabic_font)
        conditional_entry.pack(side=tk.RIGHT, padx=5)
        
        rejection_frame = tk.Frame(recommendation_frame, bg="#4A1E6B")
        rejection_frame.pack(fill=tk.X, padx=5, pady=2)
        tk.Label(rejection_frame, text="في حالة عدم القبول - الأسباب:",
                font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        rejection_entry = tk.Entry(rejection_frame, width=40, font=self.arabic_font)
        rejection_entry.pack(side=tk.RIGHT, padx=5)

        # خامساً: توقيع المقيم
        evaluator_frame = tk.LabelFrame(main_frame, text="خامساً: توقيع المقيم",
                                      font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        evaluator_frame.pack(fill=tk.X, padx=10, pady=5)
        
        evaluator_fields_frame = tk.Frame(evaluator_frame, bg="#4A1E6B")
        evaluator_fields_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # الاسم
        eval_name_frame = tk.Frame(evaluator_fields_frame, bg="#4A1E6B")
        eval_name_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_name_frame, text="الاسم:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        eval_name_entry = tk.Entry(eval_name_frame, width=40, font=self.arabic_font)
        eval_name_entry.pack(side=tk.RIGHT, padx=5)
        
        # الوظيفة / القسم
        eval_position_frame = tk.Frame(evaluator_fields_frame, bg="#4A1E6B")
        eval_position_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_position_frame, text="الوظيفة / القسم:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        eval_position_entry = tk.Entry(eval_position_frame, width=40, font=self.arabic_font)
        eval_position_entry.pack(side=tk.RIGHT, padx=5)
        
        # التوقيع
        eval_signature_frame = tk.Frame(evaluator_fields_frame, bg="#4A1E6B")
        eval_signature_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_signature_frame, text="التوقيع:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        eval_signature_entry = tk.Entry(eval_signature_frame, width=40, font=self.arabic_font)
        eval_signature_entry.pack(side=tk.RIGHT, padx=5)
        
        # التاريخ
        eval_sign_date_frame = tk.Frame(evaluator_fields_frame, bg="#4A1E6B")
        eval_sign_date_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_sign_date_frame, text="التاريخ:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        eval_sign_date_entries_frame = tk.Frame(eval_sign_date_frame, bg="#4A1E6B")
        eval_sign_date_entries_frame.pack(side=tk.RIGHT, padx=5)
        
        eval_sign_day_entry = tk.Entry(eval_sign_date_entries_frame, width=5, font=self.arabic_font)
        eval_sign_day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_sign_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_sign_month_entry = tk.Entry(eval_sign_date_entries_frame, width=5, font=self.arabic_font)
        eval_sign_month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_sign_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_sign_year_entry = tk.Entry(eval_sign_date_entries_frame, width=8, font=self.arabic_font)
        eval_sign_year_entry.pack(side=tk.RIGHT, padx=2)

        # جمع جميع المتغيرات في dictionary للأزرار المحسنة
        all_entries = {
            'name': name_entry, 
            'id': id_entry, 
            'program': program_entry,
            'conditional': conditional_entry,
            'rejection': rejection_entry,
            'eval_name': eval_name_entry,
            'eval_position': eval_position_entry,
            'eval_signature': eval_signature_entry,
            'eval_sign_day': eval_sign_day_entry,
            'eval_sign_month': eval_sign_month_entry,
            'eval_sign_year': eval_sign_year_entry,
            'app_day': app_day_entry,
            'app_month': app_month_entry,
            'app_year': app_year_entry,
            'recommendation': recommendation_var
        }
        
        # Add qualification entries
        all_entries.update(qual_entries)
        
        # Add criteria vars (these would need special handling for save/load)
        for criterion, vars_dict in criteria_vars.items():
            all_entries[f"{criterion}_notes"] = vars_dict["notes"]
        
        # إضافة الأزرار المحسنة
        self.create_universal_enhanced_form_buttons(main_frame, "QF-09-02-01", "نموذج تقييم المؤهلات السابقة", all_entries)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)

    def save_qualifications_assessment(self, form_name, form_data):
        """Save qualifications assessment form data"""
        try:
            # جمع البيانات
            data = {
                'name': form_data['name'].get(),
                'id': form_data['id'].get(),
                'program': form_data['program'].get(),
                'recommendation': form_data['recommendation'].get(),
                'conditional_notes': form_data['conditional'].get(),
                'rejection_reasons': form_data['rejection'].get(),
                'evaluator_name': form_data['evaluator']['name'].get(),
                'evaluator_position': form_data['evaluator']['position'].get(),
                'evaluator_signature': form_data['evaluator']['signature'].get()
            }
            
            # جمع بيانات المؤهلات
            qualifications = []
            for i, qual in enumerate(form_data['qualifications']):
                qualifications.append({
                    'name': qual['اسم المؤهل'].get(),
                    'specialization': qual['التخصص'].get(),
                    'institution': qual['الجهة المانحة'].get(),
                    'year': qual['سنة التخرج'].get(),
                    'documents_available': qual['متوفرة'].get()
                })
            data['qualifications'] = qualifications
            
            # جمع معايير التقييم
            criteria_results = {}
            for criterion, vars_dict in form_data['criteria'].items():
                criteria_results[criterion] = {
                    'applicable': vars_dict['applicable'].get(),
                    'not_applicable': vars_dict['not_applicable'].get(),
                    'notes': vars_dict['notes'].get()
                }
            data['criteria'] = criteria_results
            
            # حفظ في قاعدة البيانات
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''INSERT INTO form_data 
                                 (form_name, data, created_date) 
                                 VALUES (?, ?, ?)''',
                              (form_name, str(data), datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
                conn.commit()
            
            messagebox.showinfo("نجح", "تم حفظ تقييم المؤهلات بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء الحفظ: {str(e)}")

    def clear_qualifications_assessment_form(self, form_data):
        """Clear qualifications assessment form"""
        try:
            # مسح الحقول الأساسية
            form_data['name'].delete(0, tk.END)
            form_data['id'].delete(0, tk.END)
            form_data['program'].delete(0, tk.END)
            form_data['conditional'].delete(0, tk.END)
            form_data['rejection'].delete(0, tk.END)
            
            # مسح بيانات المؤهلات
            for qual in form_data['qualifications']:
                for field, widget in qual.items():
                    if field != 'متوفرة':
                        widget.delete(0, tk.END)
                    else:
                        widget.set(False)
            
            # مسح معايير التقييم
            for criterion, vars_dict in form_data['criteria'].items():
                vars_dict['applicable'].set(False)
                vars_dict['not_applicable'].set(False)
                vars_dict['notes'].delete(0, tk.END)
            
            # مسح التوصية
            form_data['recommendation'].set("")
            
            # مسح بيانات المقيم
            form_data['evaluator']['name'].delete(0, tk.END)
            form_data['evaluator']['position'].delete(0, tk.END)
            form_data['evaluator']['signature'].delete(0, tk.END)
            
            messagebox.showinfo("تم", "تم مسح جميع البيانات")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء المسح: {str(e)}")

    def create_experience_assessment_form(self, parent, form_name):
        """Create QF-09-02-02: نموذج تقييم الخبرة العملية"""
        # إطار التمرير
        canvas = tk.Canvas(parent, bg="#3C1361")
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame, 
                              text="نموذج تقييم الخبرة العملية",
                              font=self.arabic_font_large,
                              fg="white", bg="#3C1361")
        title_label.pack(pady=10)
        
        # إطار النموذج الرئيسي
        main_frame = tk.Frame(scrollable_frame, bg="#4A1E6B", relief=tk.RAISED, bd=2)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # أولاً: بيانات المتقدم
        applicant_frame = tk.LabelFrame(main_frame, text="أولاً: بيانات المتقدم",
                                      font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        applicant_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # إطار للحقول
        applicant_fields_frame = tk.Frame(applicant_frame, bg="#4A1E6B")
        applicant_fields_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # الاسم الكامل
        name_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        name_frame.pack(fill=tk.X, pady=2)
        tk.Label(name_frame, text="الاسم الكامل:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        name_entry = tk.Entry(name_frame, width=50, font=self.arabic_font)
        name_entry.pack(side=tk.RIGHT, padx=5)
        
        # رقم الهوية / جواز السفر
        id_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        id_frame.pack(fill=tk.X, pady=2)
        tk.Label(id_frame, text="رقم الهوية / جواز السفر:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        id_entry = tk.Entry(id_frame, width=50, font=self.arabic_font)
        id_entry.pack(side=tk.RIGHT, padx=5)
        
        # البرنامج / المسار المتقدم له
        program_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        program_frame.pack(fill=tk.X, pady=2)
        tk.Label(program_frame, text="البرنامج / المسار المتقدم له:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        program_entry = tk.Entry(program_frame, width=50, font=self.arabic_font)
        program_entry.pack(side=tk.RIGHT, padx=5)
        
        # تاريخ تقديم الطلب
        app_date_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        app_date_frame.pack(fill=tk.X, pady=2)
        tk.Label(app_date_frame, text="تاريخ تقديم الطلب:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        app_date_entries_frame = tk.Frame(app_date_frame, bg="#4A1E6B")
        app_date_entries_frame.pack(side=tk.RIGHT, padx=5)
        
        app_day_entry = tk.Entry(app_date_entries_frame, width=5, font=self.arabic_font)
        app_day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(app_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        app_month_entry = tk.Entry(app_date_entries_frame, width=5, font=self.arabic_font)
        app_month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(app_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        app_year_entry = tk.Entry(app_date_entries_frame, width=8, font=self.arabic_font)
        app_year_entry.pack(side=tk.RIGHT, padx=2)
        
        # تاريخ تقييم الخبرة
        eval_date_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        eval_date_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_date_frame, text="تاريخ تقييم الخبرة:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        eval_date_entries_frame = tk.Frame(eval_date_frame, bg="#4A1E6B")
        eval_date_entries_frame.pack(side=tk.RIGHT, padx=5)
        
        eval_day_entry = tk.Entry(eval_date_entries_frame, width=5, font=self.arabic_font)
        eval_day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_month_entry = tk.Entry(eval_date_entries_frame, width=5, font=self.arabic_font)
        eval_month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_year_entry = tk.Entry(eval_date_entries_frame, width=8, font=self.arabic_font)
        eval_year_entry.pack(side=tk.RIGHT, padx=2)

        # ثانياً: تفاصيل الخبرة العملية المقدمة
        experience_frame = tk.LabelFrame(main_frame, text="ثانياً: تفاصيل الخبرة العملية المقدمة",
                                       font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        experience_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # جدول الخبرة
        exp_table_frame = tk.Frame(experience_frame, bg="#4A1E6B")
        exp_table_frame.pack(fill=tk.X, padx=5, pady=5)
        
        exp_entries = []
        exp_headers = ["م", "جهة العمل", "الوظيفة / المسمى الوظيفي", "مدة العمل", "طبيعة المهام", "يوجد إثبات خبرة؟"]
        
        # عناوين الجدول
        exp_header_frame = tk.Frame(exp_table_frame, bg="#4A1E6B")
        exp_header_frame.pack(fill=tk.X, pady=2)
        
        for header in reversed(exp_headers):  # عكس الترتيب للعربية
            tk.Label(exp_header_frame, text=header, font=self.arabic_font_bold,
                    fg="white", bg="#5A2A9C", relief=tk.RAISED).pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # صفوف البيانات
        for i in range(3):
            row_frame = tk.Frame(exp_table_frame, bg="#4A1E6B")
            row_frame.pack(fill=tk.X, pady=1)
            
            row_entries = {}
            
            # خانة اختيار إثبات الخبرة
            proof_var = tk.BooleanVar()
            tk.Checkbutton(row_frame, variable=proof_var, bg="#4A1E6B", 
                         selectcolor="#3C1361").pack(side=tk.RIGHT, padx=1)
            row_entries["إثبات"] = proof_var
            
            # باقي الحقول
            for field in ["طبيعة المهام", "مدة العمل", "الوظيفة / المسمى الوظيفي", "جهة العمل"]:
                entry = tk.Entry(row_frame, width=15, font=self.arabic_font)
                entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
                row_entries[field] = entry
            
            # رقم متسلسل
            tk.Label(row_frame, text=str(i+1), font=self.arabic_font,
                    fg="white", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)
            
            exp_entries.append(row_entries)

        # ثالثاً: معايير التقييم
        criteria_frame = tk.LabelFrame(main_frame, text="ثالثاً: معايير التقييم",
                                     font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        criteria_frame.pack(fill=tk.X, padx=10, pady=5)
        
        criteria_list = [
            "الخبرة مرتبطة بتخصص البرنامج",
            "المدة المطلوبة مستوفاة", 
            "وجود وثائق / شهادات خبرة رسمية",
            "المهام والوظيفة مناسبة للمستوى المطلوب",
            "اتساق المعلومات المقدمة مع السيرة الذاتية"
        ]
        
        criteria_vars = {}
        
        for criterion in criteria_list:
            crit_frame = tk.Frame(criteria_frame, bg="#4A1E6B")
            crit_frame.pack(fill=tk.X, pady=2, padx=5)
            
            # الملاحظات
            notes_entry = tk.Entry(crit_frame, width=30, font=self.arabic_font)
            notes_entry.pack(side=tk.RIGHT, padx=5)
            
            # لا ينطبق
            not_applicable_var = tk.BooleanVar()
            tk.Checkbutton(crit_frame, text="لا ينطبق", variable=not_applicable_var,
                         font=self.arabic_font, fg="white", bg="#4A1E6B",
                         selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)
            
            # ينطبق
            applicable_var = tk.BooleanVar()
            tk.Checkbutton(crit_frame, text="ينطبق", variable=applicable_var,
                         font=self.arabic_font, fg="white", bg="#4A1E6B",
                         selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)
            
            # النص
            tk.Label(crit_frame, text=criterion + ":", font=self.arabic_font,
                    fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
            
            criteria_vars[criterion] = {
                "applicable": applicable_var,
                "not_applicable": not_applicable_var,
                "notes": notes_entry
            }

        # رابعاً: التوصية
        recommendation_frame = tk.LabelFrame(main_frame, text="رابعاً: التوصية",
                                           font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        recommendation_frame.pack(fill=tk.X, padx=10, pady=5)
        
        recommendation_var = tk.StringVar()
        
        recommendations = [
            ("الخبرة العملية مقبولة", "مقبولة"),
            ("الخبرة مقبولة جزئيًا", "مقبولة جزئياً"),
            ("الخبرة غير مقبولة", "غير مقبولة")
        ]
        
        for text, value in recommendations:
            tk.Radiobutton(recommendation_frame, text=text, variable=recommendation_var,
                         value=value, font=self.arabic_font, fg="white", bg="#4A1E6B",
                         selectcolor="#3C1361").pack(anchor=tk.E, padx=5, pady=2)
        
        # حقول إضافية للقبول الجزئي والرفض
        partial_frame = tk.Frame(recommendation_frame, bg="#4A1E6B")
        partial_frame.pack(fill=tk.X, padx=5, pady=2)
        tk.Label(partial_frame, text="في حالة القبول الجزئي - يُطلب توضيح أو استكمال في:",
                font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        partial_entry = tk.Entry(partial_frame, width=40, font=self.arabic_font)
        partial_entry.pack(side=tk.RIGHT, padx=5)
        
        rejection_frame = tk.Frame(recommendation_frame, bg="#4A1E6B")
        rejection_frame.pack(fill=tk.X, padx=5, pady=2)
        tk.Label(rejection_frame, text="في حالة عدم القبول - الأسباب:",
                font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        rejection_entry = tk.Entry(rejection_frame, width=40, font=self.arabic_font)
        rejection_entry.pack(side=tk.RIGHT, padx=5)

        # خامساً: توقيع المقيم
        evaluator_frame = tk.LabelFrame(main_frame, text="خامساً: توقيع المقيم",
                                      font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        evaluator_frame.pack(fill=tk.X, padx=10, pady=5)
        
        evaluator_fields_frame = tk.Frame(evaluator_frame, bg="#4A1E6B")
        evaluator_fields_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # الاسم
        eval_name_frame = tk.Frame(evaluator_fields_frame, bg="#4A1E6B")
        eval_name_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_name_frame, text="الاسم:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        eval_name_entry = tk.Entry(eval_name_frame, width=40, font=self.arabic_font)
        eval_name_entry.pack(side=tk.RIGHT, padx=5)
        
        # القسم / الصفة
        eval_dept_frame = tk.Frame(evaluator_fields_frame, bg="#4A1E6B")
        eval_dept_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_dept_frame, text="القسم / الصفة:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        eval_dept_entry = tk.Entry(eval_dept_frame, width=40, font=self.arabic_font)
        eval_dept_entry.pack(side=tk.RIGHT, padx=5)
        
        # التوقيع
        eval_signature_frame = tk.Frame(evaluator_fields_frame, bg="#4A1E6B")
        eval_signature_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_signature_frame, text="التوقيع:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        eval_signature_entry = tk.Entry(eval_signature_frame, width=40, font=self.arabic_font)
        eval_signature_entry.pack(side=tk.RIGHT, padx=5)
        
        # التاريخ
        eval_sign_date_frame = tk.Frame(evaluator_fields_frame, bg="#4A1E6B")
        eval_sign_date_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_sign_date_frame, text="التاريخ:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        eval_sign_date_entries_frame = tk.Frame(eval_sign_date_frame, bg="#4A1E6B")
        eval_sign_date_entries_frame.pack(side=tk.RIGHT, padx=5)
        
        eval_sign_day_entry = tk.Entry(eval_sign_date_entries_frame, width=5, font=self.arabic_font)
        eval_sign_day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_sign_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_sign_month_entry = tk.Entry(eval_sign_date_entries_frame, width=5, font=self.arabic_font)
        eval_sign_month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_sign_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_sign_year_entry = tk.Entry(eval_sign_date_entries_frame, width=8, font=self.arabic_font)
        eval_sign_year_entry.pack(side=tk.RIGHT, padx=2)

        # أزرار التحكم
        buttons_frame = tk.Frame(main_frame, bg="#4A1E6B")
        buttons_frame.pack(fill=tk.X, padx=10, pady=10)
        
        save_btn = tk.Button(buttons_frame, text="حفظ التقييم",
                           command=lambda: self.save_experience_assessment(form_name, {
                               'name': name_entry, 'id': id_entry, 'program': program_entry,
                               'experience': exp_entries, 'criteria': criteria_vars,
                               'recommendation': recommendation_var, 'partial': partial_entry,
                               'rejection': rejection_entry, 'evaluator': {
                                   'name': eval_name_entry, 'dept': eval_dept_entry,
                                   'signature': eval_signature_entry
                               }
                           }),
                           font=self.arabic_font_bold, bg="#5A2A9C", fg="white",
                           relief=tk.RAISED, bd=2)
        save_btn.pack(side=tk.RIGHT, padx=5)
        
        clear_btn = tk.Button(buttons_frame, text="مسح النموذج",
                            command=lambda: self.clear_experience_assessment_form({
                                'name': name_entry, 'id': id_entry, 'program': program_entry,
                                'experience': exp_entries, 'criteria': criteria_vars,
                                'recommendation': recommendation_var, 'partial': partial_entry,
                                'rejection': rejection_entry, 'evaluator': {
                                    'name': eval_name_entry, 'dept': eval_dept_entry,
                                    'signature': eval_signature_entry
                                }
                            }),
                            font=self.arabic_font_bold, bg="#8B4B8C", fg="white",
                            relief=tk.RAISED, bd=2)
        clear_btn.pack(side=tk.RIGHT, padx=5)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)

    def save_experience_assessment(self, form_name, form_data):
        """Save experience assessment form data"""
        try:
            # جمع البيانات
            data = {
                'name': form_data['name'].get(),
                'id': form_data['id'].get(),
                'program': form_data['program'].get(),
                'recommendation': form_data['recommendation'].get(),
                'partial_notes': form_data['partial'].get(),
                'rejection_reasons': form_data['rejection'].get(),
                'evaluator_name': form_data['evaluator']['name'].get(),
                'evaluator_dept': form_data['evaluator']['dept'].get(),
                'evaluator_signature': form_data['evaluator']['signature'].get()
            }
            
            # جمع بيانات الخبرة
            experience = []
            for i, exp in enumerate(form_data['experience']):
                experience.append({
                    'employer': exp['جهة العمل'].get(),
                    'position': exp['الوظيفة / المسمى الوظيفي'].get(),
                    'duration': exp['مدة العمل'].get(),
                    'tasks': exp['طبيعة المهام'].get(),
                    'proof_available': exp['إثبات'].get()
                })
            data['experience'] = experience
            
            # جمع معايير التقييم
            criteria_results = {}
            for criterion, vars_dict in form_data['criteria'].items():
                criteria_results[criterion] = {
                    'applicable': vars_dict['applicable'].get(),
                    'not_applicable': vars_dict['not_applicable'].get(),
                    'notes': vars_dict['notes'].get()
                }
            data['criteria'] = criteria_results
            
            # حفظ في قاعدة البيانات
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''INSERT INTO form_data 
                                 (form_name, data, created_date) 
                                 VALUES (?, ?, ?)''',
                              (form_name, str(data), datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
                conn.commit()
            
            messagebox.showinfo("نجح", "تم حفظ تقييم الخبرة العملية بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء الحفظ: {str(e)}")

    def clear_experience_assessment_form(self, form_data):
        """Clear experience assessment form"""
        try:
            # مسح الحقول الأساسية
            form_data['name'].delete(0, tk.END)
            form_data['id'].delete(0, tk.END)
            form_data['program'].delete(0, tk.END)
            form_data['partial'].delete(0, tk.END)
            form_data['rejection'].delete(0, tk.END)
            
            # مسح بيانات الخبرة
            for exp in form_data['experience']:
                for field, widget in exp.items():
                    if field != 'إثبات':
                        widget.delete(0, tk.END)
                    else:
                        widget.set(False)
            
            # مسح معايير التقييم
            for criterion, vars_dict in form_data['criteria'].items():
                vars_dict['applicable'].set(False)
                vars_dict['not_applicable'].set(False)
                vars_dict['notes'].delete(0, tk.END)
            
            # مسح التوصية
            form_data['recommendation'].set("")
            
            # مسح بيانات المقيم
            form_data['evaluator']['name'].delete(0, tk.END)
            form_data['evaluator']['dept'].delete(0, tk.END)
            form_data['evaluator']['signature'].delete(0, tk.END)
            
            messagebox.showinfo("تم", "تم مسح جميع البيانات")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء المسح: {str(e)}")

    def create_practical_assessment_form(self, parent, form_name):
        """Create QF-09-02-03: نموذج تقييم الامتحانات والتمارين العملية"""
        # إطار التمرير
        canvas = tk.Canvas(parent, bg="#3C1361")
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame, 
                              text="نموذج تقييم الامتحانات والتمارين العملية",
                              font=self.arabic_font_large,
                              fg="white", bg="#3C1361")
        title_label.pack(pady=10)
        
        # إطار النموذج الرئيسي
        main_frame = tk.Frame(scrollable_frame, bg="#4A1E6B", relief=tk.RAISED, bd=2)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # أولاً: بيانات المتقدم
        applicant_frame = tk.LabelFrame(main_frame, text="أولاً: بيانات المتقدم",
                                      font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        applicant_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # إطار للحقول
        applicant_fields_frame = tk.Frame(applicant_frame, bg="#4A1E6B")
        applicant_fields_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # الاسم الكامل
        name_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        name_frame.pack(fill=tk.X, pady=2)
        tk.Label(name_frame, text="الاسم الكامل:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        name_entry = tk.Entry(name_frame, width=50, font=self.arabic_font)
        name_entry.pack(side=tk.RIGHT, padx=5)
        
        # رقم الهوية / الكود
        id_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        id_frame.pack(fill=tk.X, pady=2)
        tk.Label(id_frame, text="رقم الهوية / الكود:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        id_entry = tk.Entry(id_frame, width=50, font=self.arabic_font)
        id_entry.pack(side=tk.RIGHT, padx=5)
        
        # البرنامج / الدورة
        program_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        program_frame.pack(fill=tk.X, pady=2)
        tk.Label(program_frame, text="البرنامج / الدورة:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        program_entry = tk.Entry(program_frame, width=50, font=self.arabic_font)
        program_entry.pack(side=tk.RIGHT, padx=5)
        
        # تاريخ التقييم العملي
        eval_date_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        eval_date_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_date_frame, text="تاريخ التقييم العملي:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        eval_date_entries_frame = tk.Frame(eval_date_frame, bg="#4A1E6B")
        eval_date_entries_frame.pack(side=tk.RIGHT, padx=5)
        
        eval_day_entry = tk.Entry(eval_date_entries_frame, width=5, font=self.arabic_font)
        eval_day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_month_entry = tk.Entry(eval_date_entries_frame, width=5, font=self.arabic_font)
        eval_month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_year_entry = tk.Entry(eval_date_entries_frame, width=8, font=self.arabic_font)
        eval_year_entry.pack(side=tk.RIGHT, padx=2)
        
        # اسم المُقيِّم
        evaluator_name_frame = tk.Frame(applicant_fields_frame, bg="#4A1E6B")
        evaluator_name_frame.pack(fill=tk.X, pady=2)
        tk.Label(evaluator_name_frame, text="اسم المُقيِّم:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        evaluator_name_entry = tk.Entry(evaluator_name_frame, width=50, font=self.arabic_font)
        evaluator_name_entry.pack(side=tk.RIGHT, padx=5)

        # ثانياً: عناصر التقييم العملي
        assessment_frame = tk.LabelFrame(main_frame, text="ثانياً: عناصر التقييم العملي",
                                       font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        assessment_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # جدول التقييم
        assessment_table_frame = tk.Frame(assessment_frame, bg="#4A1E6B")
        assessment_table_frame.pack(fill=tk.X, padx=5, pady=5)
        
        assessment_entries = []
        assessment_headers = ["م", "بند التقييم", "الوزن النسبي", "درجة التقييم (من 100)", "ملاحظات"]
        
        # عناوين الجدول
        assessment_header_frame = tk.Frame(assessment_table_frame, bg="#4A1E6B")
        assessment_header_frame.pack(fill=tk.X, pady=2)
        
        for header in reversed(assessment_headers):  # عكس الترتيب للعربية
            tk.Label(assessment_header_frame, text=header, font=self.arabic_font_bold,
                    fg="white", bg="#5A2A9C", relief=tk.RAISED).pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # بنود التقييم المحددة مسبقاً
        assessment_items = [
            "التحضير والتنظيم",
            "فهم المتطلبات / التعليمات",
            "دقة التنفيذ",
            "إدارة الوقت",
            "الالتزام بمعايير السلامة / الجودة",
            "مهارات التواصل أثناء التنفيذ",
            "النتيجة النهائية للعمل"
        ]
        
        # صفوف البيانات
        for i, item in enumerate(assessment_items):
            row_frame = tk.Frame(assessment_table_frame, bg="#4A1E6B")
            row_frame.pack(fill=tk.X, pady=1)
            
            row_entries = {}
            
            # الملاحظات
            notes_entry = tk.Entry(row_frame, width=20, font=self.arabic_font)
            notes_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
            row_entries["ملاحظات"] = notes_entry
            
            # درجة التقييم
            score_entry = tk.Entry(row_frame, width=10, font=self.arabic_font)
            score_entry.pack(side=tk.RIGHT, padx=1)
            row_entries["درجة التقييم"] = score_entry
            
            # الوزن النسبي
            weight_entry = tk.Entry(row_frame, width=8, font=self.arabic_font)
            weight_entry.pack(side=tk.RIGHT, padx=1)
            row_entries["الوزن النسبي"] = weight_entry
            
            # بند التقييم
            tk.Label(row_frame, text=item, font=self.arabic_font,
                    fg="white", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
            row_entries["بند التقييم"] = item
            
            # رقم متسلسل
            tk.Label(row_frame, text=str(i+1), font=self.arabic_font,
                    fg="white", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)
            
            assessment_entries.append(row_entries)

        # النتيجة النهائية
        result_frame = tk.Frame(assessment_frame, bg="#4A1E6B")
        result_frame.pack(fill=tk.X, padx=5, pady=10)
        
        # الدرجة النهائية
        final_score_frame = tk.Frame(result_frame, bg="#4A1E6B")
        final_score_frame.pack(fill=tk.X, pady=2)
        tk.Label(final_score_frame, text="/ 100", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        final_score_entry = tk.Entry(final_score_frame, width=10, font=self.arabic_font)
        final_score_entry.pack(side=tk.RIGHT, padx=5)
        tk.Label(final_score_frame, text="الدرجة النهائية:", font=self.arabic_font_bold,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        # النتيجة
        result_choice_frame = tk.Frame(result_frame, bg="#4A1E6B")
        result_choice_frame.pack(fill=tk.X, pady=2)
        
        result_var = tk.StringVar()
        tk.Radiobutton(result_choice_frame, text="لم يجتز", variable=result_var,
                     value="لم يجتز", font=self.arabic_font, fg="white", bg="#4A1E6B",
                     selectcolor="#3C1361").pack(side=tk.RIGHT, padx=10)
        tk.Radiobutton(result_choice_frame, text="ناجح", variable=result_var,
                     value="ناجح", font=self.arabic_font, fg="white", bg="#4A1E6B",
                     selectcolor="#3C1361").pack(side=tk.RIGHT, padx=10)
        tk.Label(result_choice_frame, text="النتيجة:", font=self.arabic_font_bold,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)

        # ثالثاً: ملاحظات المُقيِّم
        notes_frame = tk.LabelFrame(main_frame, text="ثالثاً: ملاحظات المُقيِّم",
                                  font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        notes_frame.pack(fill=tk.X, padx=10, pady=5)
        
        evaluator_notes_text = tk.Text(notes_frame, height=6, font=self.arabic_font,
                                     wrap=tk.WORD, bg="white", fg="black")
        evaluator_notes_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # رابعاً: توقيع الأطراف
        signatures_frame = tk.LabelFrame(main_frame, text="رابعاً: توقيع الأطراف",
                                       font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        signatures_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # جدول التوقيعات
        signatures_table_frame = tk.Frame(signatures_frame, bg="#4A1E6B")
        signatures_table_frame.pack(fill=tk.X, padx=5, pady=5)
        
        sig_headers = ["الاسم", "الصفة", "التوقيع", "التاريخ"]
        
        # عناوين جدول التوقيعات
        sig_header_frame = tk.Frame(signatures_table_frame, bg="#4A1E6B")
        sig_header_frame.pack(fill=tk.X, pady=2)
        
        for header in reversed(sig_headers):  # عكس الترتيب للعربية
            tk.Label(sig_header_frame, text=header, font=self.arabic_font_bold,
                    fg="white", bg="#5A2A9C", relief=tk.RAISED).pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # صف المُقيِّم
        evaluator_sig_frame = tk.Frame(signatures_table_frame, bg="#4A1E6B")
        evaluator_sig_frame.pack(fill=tk.X, pady=1)
        
        # تاريخ المقيم
        eval_date_sig_frame = tk.Frame(evaluator_sig_frame, bg="#4A1E6B")
        eval_date_sig_frame.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        eval_sig_day_entry = tk.Entry(eval_date_sig_frame, width=5, font=self.arabic_font)
        eval_sig_day_entry.pack(side=tk.RIGHT, padx=1)
        tk.Label(eval_date_sig_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_sig_month_entry = tk.Entry(eval_date_sig_frame, width=5, font=self.arabic_font)
        eval_sig_month_entry.pack(side=tk.RIGHT, padx=1)
        tk.Label(eval_date_sig_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_sig_year_entry = tk.Entry(eval_date_sig_frame, width=8, font=self.arabic_font)
        eval_sig_year_entry.pack(side=tk.RIGHT, padx=1)
        
        # توقيع المقيم
        eval_signature_entry = tk.Entry(evaluator_sig_frame, width=15, font=self.arabic_font)
        eval_signature_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # صفة المقيم
        tk.Label(evaluator_sig_frame, text="المُقيِّم", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # اسم المقيم (مرتبط بالحقل العلوي)
        eval_name_sig_entry = tk.Entry(evaluator_sig_frame, width=15, font=self.arabic_font)
        eval_name_sig_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # صف المتقدم
        applicant_sig_frame = tk.Frame(signatures_table_frame, bg="#4A1E6B")
        applicant_sig_frame.pack(fill=tk.X, pady=1)
        
        # تاريخ المتقدم
        app_date_sig_frame = tk.Frame(applicant_sig_frame, bg="#4A1E6B")
        app_date_sig_frame.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        app_sig_day_entry = tk.Entry(app_date_sig_frame, width=5, font=self.arabic_font)
        app_sig_day_entry.pack(side=tk.RIGHT, padx=1)
        tk.Label(app_date_sig_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        app_sig_month_entry = tk.Entry(app_date_sig_frame, width=5, font=self.arabic_font)
        app_sig_month_entry.pack(side=tk.RIGHT, padx=1)
        tk.Label(app_date_sig_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        app_sig_year_entry = tk.Entry(app_date_sig_frame, width=8, font=self.arabic_font)
        app_sig_year_entry.pack(side=tk.RIGHT, padx=1)
        
        # توقيع المتقدم
        app_signature_entry = tk.Entry(applicant_sig_frame, width=15, font=self.arabic_font)
        app_signature_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # صفة المتقدم
        tk.Label(applicant_sig_frame, text="المتقدم", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # اسم المتقدم (مرتبط بالحقل العلوي)
        app_name_sig_entry = tk.Entry(applicant_sig_frame, width=15, font=self.arabic_font)
        app_name_sig_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)

        # أزرار التحكم
        buttons_frame = tk.Frame(main_frame, bg="#4A1E6B")
        buttons_frame.pack(fill=tk.X, padx=10, pady=10)
        
        save_btn = tk.Button(buttons_frame, text="حفظ التقييم",
                           command=lambda: self.save_practical_assessment(form_name, {
                               'name': name_entry, 'id': id_entry, 'program': program_entry,
                               'evaluator_name': evaluator_name_entry, 'assessment': assessment_entries,
                               'final_score': final_score_entry, 'result': result_var,
                               'notes': evaluator_notes_text, 'eval_signature': eval_signature_entry,
                               'eval_name_sig': eval_name_sig_entry, 'app_signature': app_signature_entry,
                               'app_name_sig': app_name_sig_entry
                           }),
                           font=self.arabic_font_bold, bg="#5A2A9C", fg="white",
                           relief=tk.RAISED, bd=2)
        save_btn.pack(side=tk.RIGHT, padx=5)
        
        clear_btn = tk.Button(buttons_frame, text="مسح النموذج",
                            command=lambda: self.clear_practical_assessment_form({
                                'name': name_entry, 'id': id_entry, 'program': program_entry,
                                'evaluator_name': evaluator_name_entry, 'assessment': assessment_entries,
                                'final_score': final_score_entry, 'result': result_var,
                                'notes': evaluator_notes_text, 'eval_signature': eval_signature_entry,
                                'eval_name_sig': eval_name_sig_entry, 'app_signature': app_signature_entry,
                                'app_name_sig': app_name_sig_entry
                            }),
                            font=self.arabic_font_bold, bg="#8B4B8C", fg="white",
                            relief=tk.RAISED, bd=2)
        clear_btn.pack(side=tk.RIGHT, padx=5)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)

    def save_practical_assessment(self, form_name, form_data):
        """Save practical assessment form data"""
        try:
            # جمع البيانات
            data = {
                'name': form_data['name'].get(),
                'id': form_data['id'].get(),
                'program': form_data['program'].get(),
                'evaluator_name': form_data['evaluator_name'].get(),
                'final_score': form_data['final_score'].get(),
                'result': form_data['result'].get(),
                'notes': form_data['notes'].get("1.0", tk.END).strip(),
                'eval_signature': form_data['eval_signature'].get(),
                'eval_name_sig': form_data['eval_name_sig'].get(),
                'app_signature': form_data['app_signature'].get(),
                'app_name_sig': form_data['app_name_sig'].get()
            }
            
            # جمع بيانات التقييم
            assessment_data = []
            for item in form_data['assessment']:
                assessment_data.append({
                    'item': item['بند التقييم'],
                    'weight': item['الوزن النسبي'].get(),
                    'score': item['درجة التقييم'].get(),
                    'notes': item['ملاحظات'].get()
                })
            data['assessment'] = assessment_data
            
            # حفظ في قاعدة البيانات
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''INSERT INTO form_data 
                                 (form_name, data, created_date) 
                                 VALUES (?, ?, ?)''',
                              (form_name, str(data), datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
                conn.commit()
            
            messagebox.showinfo("نجح", "تم حفظ التقييم العملي بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء الحفظ: {str(e)}")

    def clear_practical_assessment_form(self, form_data):
        """Clear practical assessment form"""
        try:
            # مسح الحقول الأساسية
            form_data['name'].delete(0, tk.END)
            form_data['id'].delete(0, tk.END)
            form_data['program'].delete(0, tk.END)
            form_data['evaluator_name'].delete(0, tk.END)
            form_data['final_score'].delete(0, tk.END)
            form_data['eval_signature'].delete(0, tk.END)
            form_data['eval_name_sig'].delete(0, tk.END)
            form_data['app_signature'].delete(0, tk.END)
            form_data['app_name_sig'].delete(0, tk.END)
            
            # مسح بيانات التقييم
            for item in form_data['assessment']:
                item['الوزن النسبي'].delete(0, tk.END)
                item['درجة التقييم'].delete(0, tk.END)
                item['ملاحظات'].delete(0, tk.END)
            
            # مسح النتيجة
            form_data['result'].set("")
            
            # مسح الملاحظات
            form_data['notes'].delete("1.0", tk.END)
            
            messagebox.showinfo("تم", "تم مسح جميع البيانات")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء المسح: {str(e)}")

    def create_assessment_results_record_form(self, parent, form_name):
        """Create QF-09-02-04: سجل نتائج التقييم"""
        # إطار التمرير
        canvas = tk.Canvas(parent, bg="#3C1361")
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame, 
                              text="سجل نتائج التقييم",
                              font=self.arabic_font_large,
                              fg="white", bg="#3C1361")
        title_label.pack(pady=10)
        
        # إطار النموذج الرئيسي
        main_frame = tk.Frame(scrollable_frame, bg="#4A1E6B", relief=tk.RAISED, bd=2)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # أولاً: بيانات البرنامج
        program_frame = tk.LabelFrame(main_frame, text="أولاً: بيانات البرنامج",
                                    font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        program_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # إطار للحقول
        program_fields_frame = tk.Frame(program_frame, bg="#4A1E6B")
        program_fields_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # اسم البرنامج / الشهادة
        program_name_frame = tk.Frame(program_fields_frame, bg="#4A1E6B")
        program_name_frame.pack(fill=tk.X, pady=2)
        tk.Label(program_name_frame, text="اسم البرنامج / الشهادة:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        program_name_entry = tk.Entry(program_name_frame, width=50, font=self.arabic_font)
        program_name_entry.pack(side=tk.RIGHT, padx=5)
        
        # رقم الدورة / المجموعة
        batch_frame = tk.Frame(program_fields_frame, bg="#4A1E6B")
        batch_frame.pack(fill=tk.X, pady=2)
        tk.Label(batch_frame, text="رقم الدورة / المجموعة:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        batch_entry = tk.Entry(batch_frame, width=20, font=self.arabic_font)
        batch_entry.pack(side=tk.RIGHT, padx=5)
        
        # تاريخ التقييم
        eval_date_frame = tk.Frame(program_fields_frame, bg="#4A1E6B")
        eval_date_frame.pack(fill=tk.X, pady=2)
        tk.Label(eval_date_frame, text="تاريخ التقييم:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        eval_date_entries_frame = tk.Frame(eval_date_frame, bg="#4A1E6B")
        eval_date_entries_frame.pack(side=tk.RIGHT, padx=5)
        
        eval_day_entry = tk.Entry(eval_date_entries_frame, width=5, font=self.arabic_font)
        eval_day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_month_entry = tk.Entry(eval_date_entries_frame, width=5, font=self.arabic_font)
        eval_month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(eval_date_entries_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        eval_year_entry = tk.Entry(eval_date_entries_frame, width=8, font=self.arabic_font)
        eval_year_entry.pack(side=tk.RIGHT, padx=2)
        
        # نوع التقييم
        assessment_type_frame = tk.Frame(program_fields_frame, bg="#4A1E6B")
        assessment_type_frame.pack(fill=tk.X, pady=2)
        tk.Label(assessment_type_frame, text="نوع التقييم:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        assessment_types_frame = tk.Frame(assessment_type_frame, bg="#4A1E6B")
        assessment_types_frame.pack(side=tk.RIGHT, padx=5)
        
        assessment_type_vars = {}
        types = ["كتابي", "عملي", "مقابلة", "مراجعة ملف", "أخرى"]
        
        for assessment_type in types:
            var = tk.BooleanVar()
            tk.Checkbutton(assessment_types_frame, text=assessment_type, variable=var,
                         font=self.arabic_font, fg="white", bg="#4A1E6B",
                         selectcolor="#3C1361").pack(side=tk.RIGHT, padx=2)
            assessment_type_vars[assessment_type] = var
        
        # حقل "أخرى"
        other_type_entry = tk.Entry(assessment_types_frame, width=15, font=self.arabic_font)
        other_type_entry.pack(side=tk.RIGHT, padx=2)
        
        # اسم المقيم / اللجنة
        evaluator_frame = tk.Frame(program_fields_frame, bg="#4A1E6B")
        evaluator_frame.pack(fill=tk.X, pady=2)
        tk.Label(evaluator_frame, text="اسم المقيم / اللجنة:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        evaluator_entry = tk.Entry(evaluator_frame, width=50, font=self.arabic_font)
        evaluator_entry.pack(side=tk.RIGHT, padx=5)

        # ثانياً: نتائج المتقدمين
        results_frame = tk.LabelFrame(main_frame, text="ثانياً: نتائج المتقدمين",
                                    font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        results_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # جدول النتائج
        results_table_frame = tk.Frame(results_frame, bg="#4A1E6B")
        results_table_frame.pack(fill=tk.X, padx=5, pady=5)
        
        results_entries = []
        results_headers = ["م", "اسم المتقدم", "الرقم التعريفي", "الدرجة النهائية", "التقدير (ناجح / لم يجتز)", "ملاحظات"]
        
        # عناوين الجدول
        results_header_frame = tk.Frame(results_table_frame, bg="#4A1E6B")
        results_header_frame.pack(fill=tk.X, pady=2)
        
        for header in reversed(results_headers):  # عكس الترتيب للعربية
            tk.Label(results_header_frame, text=header, font=self.arabic_font_bold,
                    fg="white", bg="#5A2A9C", relief=tk.RAISED).pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # صفوف البيانات (5 صفوف)
        for i in range(5):
            row_frame = tk.Frame(results_table_frame, bg="#4A1E6B")
            row_frame.pack(fill=tk.X, pady=1)
            
            row_entries = {}
            
            # الملاحظات
            notes_entry = tk.Entry(row_frame, width=15, font=self.arabic_font)
            notes_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
            row_entries["ملاحظات"] = notes_entry
            
            # التقدير
            grade_var = tk.StringVar()
            grade_frame = tk.Frame(row_frame, bg="#4A1E6B")
            grade_frame.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
            
            tk.Radiobutton(grade_frame, text="لم يجتز", variable=grade_var, value="لم يجتز",
                         font=self.arabic_font, fg="white", bg="#4A1E6B",
                         selectcolor="#3C1361").pack(side=tk.RIGHT, padx=1)
            tk.Radiobutton(grade_frame, text="ناجح", variable=grade_var, value="ناجح",
                         font=self.arabic_font, fg="white", bg="#4A1E6B",
                         selectcolor="#3C1361").pack(side=tk.RIGHT, padx=1)
            row_entries["التقدير"] = grade_var
            
            # الدرجة النهائية
            score_entry = tk.Entry(row_frame, width=10, font=self.arabic_font)
            score_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
            row_entries["الدرجة النهائية"] = score_entry
            
            # الرقم التعريفي
            id_entry = tk.Entry(row_frame, width=12, font=self.arabic_font)
            id_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
            row_entries["الرقم التعريفي"] = id_entry
            
            # اسم المتقدم
            name_entry = tk.Entry(row_frame, width=20, font=self.arabic_font)
            name_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
            row_entries["اسم المتقدم"] = name_entry
            
            # رقم متسلسل
            tk.Label(row_frame, text=str(i+1), font=self.arabic_font,
                    fg="white", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)
            
            results_entries.append(row_entries)

        # ثالثاً: التوصيات العامة
        recommendations_frame = tk.LabelFrame(main_frame, text="ثالثاً: التوصيات العامة",
                                            font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        recommendations_frame.pack(fill=tk.X, padx=10, pady=5)
        
        recommendation_vars = {}
        recommendations = [
            "إصدار الشهادات للناجحين",
            "إعادة التقييم لمن لم يجتز",
            "رفع النتائج إلى النظام الإلكتروني",
            "إخطار المتقدمين بالنتائج"
        ]
        
        for recommendation in recommendations:
            var = tk.BooleanVar()
            tk.Checkbutton(recommendations_frame, text=recommendation, variable=var,
                         font=self.arabic_font, fg="white", bg="#4A1E6B",
                         selectcolor="#3C1361").pack(anchor=tk.E, padx=5, pady=2)
            recommendation_vars[recommendation] = var

        # رابعاً: اعتماد السجل
        approval_frame = tk.LabelFrame(main_frame, text="رابعاً: اعتماد السجل",
                                     font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        approval_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # جدول الاعتماد
        approval_table_frame = tk.Frame(approval_frame, bg="#4A1E6B")
        approval_table_frame.pack(fill=tk.X, padx=5, pady=5)
        
        approval_headers = ["الاسم", "الصفة", "التوقيع", "التاريخ"]
        
        # عناوين جدول الاعتماد
        approval_header_frame = tk.Frame(approval_table_frame, bg="#4A1E6B")
        approval_header_frame.pack(fill=tk.X, pady=2)
        
        for header in reversed(approval_headers):  # عكس الترتيب للعربية
            tk.Label(approval_header_frame, text=header, font=self.arabic_font_bold,
                    fg="white", bg="#5A2A9C", relief=tk.RAISED).pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # صف الاعتماد
        approval_row_frame = tk.Frame(approval_table_frame, bg="#4A1E6B")
        approval_row_frame.pack(fill=tk.X, pady=1)
        
        # تاريخ الاعتماد
        approval_date_frame = tk.Frame(approval_row_frame, bg="#4A1E6B")
        approval_date_frame.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        approval_day_entry = tk.Entry(approval_date_frame, width=5, font=self.arabic_font)
        approval_day_entry.pack(side=tk.RIGHT, padx=1)
        tk.Label(approval_date_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        approval_month_entry = tk.Entry(approval_date_frame, width=5, font=self.arabic_font)
        approval_month_entry.pack(side=tk.RIGHT, padx=1)
        tk.Label(approval_date_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        approval_year_entry = tk.Entry(approval_date_frame, width=8, font=self.arabic_font)
        approval_year_entry.pack(side=tk.RIGHT, padx=1)
        
        # توقيع المعتمد
        approval_signature_entry = tk.Entry(approval_row_frame, width=15, font=self.arabic_font)
        approval_signature_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # صفة المعتمد
        approval_position_entry = tk.Entry(approval_row_frame, width=15, font=self.arabic_font)
        approval_position_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)
        
        # اسم المعتمد
        approval_name_entry = tk.Entry(approval_row_frame, width=15, font=self.arabic_font)
        approval_name_entry.pack(side=tk.RIGHT, padx=1, fill=tk.X, expand=True)

        # أزرار التحكم
        buttons_frame = tk.Frame(main_frame, bg="#4A1E6B")
        buttons_frame.pack(fill=tk.X, padx=10, pady=10)
        
        save_btn = tk.Button(buttons_frame, text="حفظ السجل",
                           command=lambda: self.save_assessment_results_record(form_name, {
                               'program_name': program_name_entry, 'batch': batch_entry,
                               'evaluator': evaluator_entry, 'assessment_types': assessment_type_vars,
                               'other_type': other_type_entry, 'results': results_entries,
                               'recommendations': recommendation_vars, 'approval': {
                                   'name': approval_name_entry, 'position': approval_position_entry,
                                   'signature': approval_signature_entry
                               }
                           }),
                           font=self.arabic_font_bold, bg="#5A2A9C", fg="white",
                           relief=tk.RAISED, bd=2)
        save_btn.pack(side=tk.RIGHT, padx=5)
        
        clear_btn = tk.Button(buttons_frame, text="مسح النموذج",
                            command=lambda: self.clear_assessment_results_record_form({
                                'program_name': program_name_entry, 'batch': batch_entry,
                                'evaluator': evaluator_entry, 'assessment_types': assessment_type_vars,
                                'other_type': other_type_entry, 'results': results_entries,
                                'recommendations': recommendation_vars, 'approval': {
                                    'name': approval_name_entry, 'position': approval_position_entry,
                                    'signature': approval_signature_entry
                                }
                            }),
                            font=self.arabic_font_bold, bg="#8B4B8C", fg="white",
                            relief=tk.RAISED, bd=2)
        clear_btn.pack(side=tk.RIGHT, padx=5)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)

    def save_assessment_results_record(self, form_name, form_data):
        """Save assessment results record form data"""
        try:
            # جمع البيانات
            data = {
                'program_name': form_data['program_name'].get(),
                'batch': form_data['batch'].get(),
                'evaluator': form_data['evaluator'].get(),
                'other_type': form_data['other_type'].get(),
                'approval_name': form_data['approval']['name'].get(),
                'approval_position': form_data['approval']['position'].get(),
                'approval_signature': form_data['approval']['signature'].get()
            }
            
            # جمع أنواع التقييم
            assessment_types = []
            for type_name, var in form_data['assessment_types'].items():
                if var.get():
                    assessment_types.append(type_name)
            data['assessment_types'] = assessment_types
            
            # جمع نتائج المتقدمين
            results = []
            for result in form_data['results']:
                if result['اسم المتقدم'].get().strip():  # فقط إذا كان هناك اسم
                    results.append({
                        'name': result['اسم المتقدم'].get(),
                        'id': result['الرقم التعريفي'].get(),
                        'score': result['الدرجة النهائية'].get(),
                        'grade': result['التقدير'].get(),
                        'notes': result['ملاحظات'].get()
                    })
            data['results'] = results
            
            # جمع التوصيات
            recommendations = []
            for rec_name, var in form_data['recommendations'].items():
                if var.get():
                    recommendations.append(rec_name)
            data['recommendations'] = recommendations
            
            # حفظ في قاعدة البيانات
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''INSERT INTO form_data 
                                 (form_name, data, created_date) 
                                 VALUES (?, ?, ?)''',
                              (form_name, str(data), datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
                conn.commit()
            
            messagebox.showinfo("نجح", "تم حفظ سجل نتائج التقييم بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء الحفظ: {str(e)}")

    def clear_assessment_results_record_form(self, form_data):
        """Clear assessment results record form"""
        try:
            # مسح الحقول الأساسية
            form_data['program_name'].delete(0, tk.END)
            form_data['batch'].delete(0, tk.END)
            form_data['evaluator'].delete(0, tk.END)
            form_data['other_type'].delete(0, tk.END)
            
            # مسح أنواع التقييم
            for var in form_data['assessment_types'].values():
                var.set(False)
            
            # مسح نتائج المتقدمين
            for result in form_data['results']:
                result['اسم المتقدم'].delete(0, tk.END)
                result['الرقم التعريفي'].delete(0, tk.END)
                result['الدرجة النهائية'].delete(0, tk.END)
                result['التقدير'].set("")
                result['ملاحظات'].delete(0, tk.END)
            
            # مسح التوصيات
            for var in form_data['recommendations'].values():
                var.set(False)
            
            # مسح بيانات الاعتماد
            form_data['approval']['name'].delete(0, tk.END)
            form_data['approval']['position'].delete(0, tk.END)
            form_data['approval']['signature'].delete(0, tk.END)
            
            messagebox.showinfo("تم", "تم مسح جميع البيانات")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء المسح: {str(e)}")
        
    def create_application_review_record_form(self, parent, form_name):
        """Create QF-09-01-03: سجل مراجعة طلبات التقديم"""
        # إطار التمرير
        canvas = tk.Canvas(parent, bg="#3C1361")
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#3C1361")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # عنوان النموذج
        title_label = tk.Label(scrollable_frame, 
                              text="سجل مراجعة طلبات التقديم",
                              font=self.arabic_font_large,
                              fg="white", bg="#3C1361")
        title_label.pack(pady=10)
        
        # إطار النموذج الرئيسي
        main_frame = tk.Frame(scrollable_frame, bg="#4A1E6B", relief=tk.RAISED, bd=2)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # بيانات البرنامج
        program_frame = tk.LabelFrame(main_frame, text="أولاً: بيانات البرنامج",
                                    font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        program_frame.pack(fill=tk.X, padx=10, pady=5)
        
        program_fields = ["اسم البرنامج", "الدفعة/الدورة رقم", "اسم الموظف المسؤول عن المراجعة"]
        program_entries = {}
        
        for i, field in enumerate(program_fields):
            tk.Label(program_frame, text=field + ":", font=self.arabic_font,
                    fg="white", bg="#4A1E6B").grid(row=i, column=0, sticky="e", padx=5, pady=2)
            entry = tk.Entry(program_frame, width=40, font=self.arabic_font)
            entry.grid(row=i, column=1, sticky="w", padx=5, pady=2)
            program_entries[field] = entry
        
        # تاريخ بدء البرنامج
        tk.Label(program_frame, text="تاريخ بدء البرنامج:", font=self.arabic_font,
                fg="white", bg="#4A1E6B").grid(row=len(program_fields), column=0, sticky="e", padx=5, pady=2)
        
        date_frame = tk.Frame(program_frame, bg="#4A1E6B")
        date_frame.grid(row=len(program_fields), column=1, sticky="w", padx=5, pady=2)
        
        day_entry = tk.Entry(date_frame, width=5, font=self.arabic_font)
        day_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(date_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        month_entry = tk.Entry(date_frame, width=5, font=self.arabic_font)
        month_entry.pack(side=tk.RIGHT, padx=2)
        tk.Label(date_frame, text="/", fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        
        year_entry = tk.Entry(date_frame, width=8, font=self.arabic_font)
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        date_entries = {"day": day_entry, "month": month_entry, "year": year_entry}
        
        # جدول مراجعة الطلبات
        review_frame = tk.LabelFrame(main_frame, text="ثانياً: تفاصيل مراجعة الطلبات",
                                   font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        review_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # إنشاء الجدول
        columns = ["م", "اسم المتقدم", "تاريخ التقديم", "المستندات مكتملة", "تنطبق الشروط", "الحالة النهائية", "ملاحظات"]
        
        tree_frame = tk.Frame(review_frame, bg="#4A1E6B")
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        tree = ttk.Treeview(tree_frame, columns=columns, show="headings", height=8)
        
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=120, anchor="center")
        
        # شريط التمرير للجدول
        tree_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=tree.yview)
        tree.configure(yscrollcommand=tree_scrollbar.set)
        
        tree.pack(side="left", fill="both", expand=True)
        tree_scrollbar.pack(side="right", fill="y")
        
        # أزرار إدارة الجدول
        table_buttons_frame = tk.Frame(review_frame, bg="#4A1E6B")
        table_buttons_frame.pack(fill=tk.X, padx=5, pady=5)
        
        add_btn = tk.Button(table_buttons_frame, text="إضافة طلب",
                          command=lambda: self.add_application_record(tree),
                          font=self.arabic_font, bg="#5A2A9C", fg="white")
        add_btn.pack(side=tk.RIGHT, padx=5)
        
        edit_btn = tk.Button(table_buttons_frame, text="تعديل",
                           command=lambda: self.edit_application_record(tree),
                           font=self.arabic_font, bg="#8B4B8C", fg="white")
        edit_btn.pack(side=tk.RIGHT, padx=5)
        
        delete_btn = tk.Button(table_buttons_frame, text="حذف",
                             command=lambda: self.delete_application_record(tree),
                             font=self.arabic_font, bg="#B85450", fg="white")
        delete_btn.pack(side=tk.RIGHT, padx=5)
        
        # إحصائيات القرارات
        stats_frame = tk.LabelFrame(main_frame, text="ثالثاً: توثيق قرارات المراجعة",
                                  font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        stats_frame.pack(fill=tk.X, padx=10, pady=5)
        
        stats_fields = ["عدد الطلبات المستلمة", "عدد الطلبات المقبولة", "عدد الطلبات المرفوضة", "عدد الطلبات التي تحتاج استيفاء"]
        stats_entries = {}
        
        for i, field in enumerate(stats_fields):
            row = i // 2
            col = i % 2
            tk.Label(stats_frame, text=field + ":", font=self.arabic_font,
                    fg="white", bg="#4A1E6B").grid(row=row, column=col*2, sticky="e", padx=5, pady=2)
            entry = tk.Entry(stats_frame, width=15, font=self.arabic_font)
            entry.grid(row=row, column=col*2+1, sticky="w", padx=5, pady=2)
            stats_entries[field] = entry
        
        # جمع جميع البيانات في dictionary واحد للأزرار المحسنة
        all_entries = {}
        all_entries.update(program_entries)
        all_entries.update(date_entries)
        all_entries.update(stats_entries)
        # Note: tree widget would need special handling for table data
        
        # إضافة الأزرار المحسنة
        self.create_universal_enhanced_form_buttons(main_frame, "QF-09-01-03", "سجل مراجعة طلبات التقديم", all_entries)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
    
    # Helper methods for QF-09-01 forms
    def save_program_application(self, form_name, personal_entries, program_entries, gender_var, study_var):
        """Save program application form data"""
        try:
            data = {
                "personal_data": {},
                "program_data": {},
                "gender": gender_var.get(),
                "study_method": study_var.get(),
                "submission_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            # جمع البيانات الشخصية
            for field, entry in personal_entries.items():
                if isinstance(entry, dict):  # تاريخ الميلاد
                    data["personal_data"][field] = f"{entry['day'].get()}/{entry['month'].get()}/{entry['year'].get()}"
                else:
                    data["personal_data"][field] = entry.get()
            
            # جمع بيانات البرنامج
            for field, entry in program_entries.items():
                if isinstance(entry, dict):  # تاريخ البدء
                    data["program_data"][field] = f"{entry['day'].get()}/{entry['month'].get()}/{entry['year'].get()}"
                else:
                    data["program_data"][field] = entry.get()
            
            # حفظ في قاعدة البيانات
            self.db_manager.save_form_data(form_name, data)
            messagebox.showinfo("نجح", "تم حفظ طلب التقديم بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء الحفظ: {str(e)}")
    
    def clear_program_application_form(self, personal_entries, program_entries, gender_var, study_var):
        """Clear all form fields"""
        for entry in personal_entries.values():
            if isinstance(entry, dict):
                for field_entry in entry.values():
                    field_entry.delete(0, tk.END)
            else:
                entry.delete(0, tk.END)
        
        for entry in program_entries.values():
            if isinstance(entry, dict):
                for field_entry in entry.values():
                    field_entry.delete(0, tk.END)
            else:
                entry.delete(0, tk.END)
        
        gender_var.set("")
        study_var.set("")
    
    def save_commitment_agreement(self, form_name, applicant_entries, date_entries, sign_entries, agree_var):
        """Save commitment agreement form data"""
        if not agree_var.get():
            messagebox.showwarning("تحذير", "يجب الموافقة على بنود الاتفاقية أولاً")
            return
        
        try:
            data = {
                "applicant_data": {},
                "application_date": f"{date_entries['day'].get()}/{date_entries['month'].get()}/{date_entries['year'].get()}",
                "signature_data": {},
                "agreement_accepted": agree_var.get(),
                "submission_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            for field, entry in applicant_entries.items():
                data["applicant_data"][field] = entry.get()
            
            for field, entry in sign_entries.items():
                data["signature_data"][field] = entry.get()
            
            self.db_manager.save_form_data(form_name, data)
            messagebox.showinfo("نجح", "تم حفظ الاتفاقية بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء الحفظ: {str(e)}")
    
    def add_application_record(self, tree):
        """Add new application record to the table"""
        # نافذة إدخال بيانات جديدة
        dialog = tk.Toplevel()
        dialog.title("إضافة طلب جديد")
        dialog.geometry("500x300")
        dialog.configure(bg="#3C1361")
        
        fields = ["اسم المتقدم", "تاريخ التقديم", "المستندات مكتملة", "تنطبق الشروط", "الحالة النهائية", "ملاحظات"]
        entries = {}
        
        for i, field in enumerate(fields):
            tk.Label(dialog, text=field + ":", font=self.arabic_font,
                    fg="white", bg="#3C1361").grid(row=i, column=0, sticky="e", padx=5, pady=5)
            
            if field in ["المستندات مكتملة", "تنطبق الشروط"]:
                var = tk.StringVar()
                combo = ttk.Combobox(dialog, textvariable=var, values=["✓", "✗"], width=10)
                combo.grid(row=i, column=1, sticky="w", padx=5, pady=5)
                entries[field] = var
            elif field == "الحالة النهائية":
                var = tk.StringVar()
                combo = ttk.Combobox(dialog, textvariable=var, 
                                   values=["مقبول", "مرفوض", "بحاجة لاستيفاء"], width=20)
                combo.grid(row=i, column=1, sticky="w", padx=5, pady=5)
                entries[field] = var
            else:
                entry = tk.Entry(dialog, width=30, font=self.arabic_font)
                entry.grid(row=i, column=1, sticky="w", padx=5, pady=5)
                entries[field] = entry
        
        def save_record():
            values = []
            values.append(len(tree.get_children()) + 1)  # رقم متسلسل
            for field in fields:
                if hasattr(entries[field], 'get'):
                    values.append(entries[field].get())
                else:
                    values.append(entries[field].get())
            
            tree.insert("", tk.END, values=values)
            dialog.destroy()
        
        tk.Button(dialog, text="حفظ", command=save_record,
                 font=self.arabic_font, bg="#5A2A9C", fg="white").grid(row=len(fields), column=1, pady=10)
    
    def edit_application_record(self, tree):
        """Edit selected application record"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد سجل للتعديل")
            return
        messagebox.showinfo("تعديل", "يمكنك النقر مرتين على الخلية للتعديل")
    
    def delete_application_record(self, tree):
        """Delete selected application record"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("تحذير", "يرجى تحديد سجل للحذف")
            return
        if messagebox.askyesno("تأكيد", "هل أنت متأكد من حذف هذا السجل؟"):
            tree.delete(selected[0])
    
    def save_application_review_record(self, form_name, program_entries, date_entries, tree, stats_entries):
        """Save application review record form data"""
        try:
            data = {
                "program_data": {},
                "start_date": f"{date_entries['day'].get()}/{date_entries['month'].get()}/{date_entries['year'].get()}",
                "applications": [],
                "statistics": {},
                "submission_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            for field, entry in program_entries.items():
                data["program_data"][field] = entry.get()
            
            # جمع بيانات الطلبات من الجدول
            for item in tree.get_children():
                values = tree.item(item, "values")
                data["applications"].append({
                    "serial": values[0],
                    "name": values[1],
                    "application_date": values[2],
                    "documents_complete": values[3],
                    "conditions_met": values[4],
                    "final_status": values[5],
                    "notes": values[6]
                })
            
            for field, entry in stats_entries.items():
                data["statistics"][field] = entry.get()
            
            self.db_manager.save_form_data(form_name, data)
            messagebox.showinfo("نجح", "تم حفظ سجل المراجعة بنجاح")
            
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء الحفظ: {str(e)}")


    def create_examination_form(self, parent, form_name):
        """QF-09-03-01: نموذج امتحان"""
        frame = self._make_scrollable_form(parent)
        entries = {}
        
        # بيانات الامتحان
        exam_info = tk.LabelFrame(frame, text="بيانات الامتحان", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        exam_info.pack(fill=tk.X, padx=10, pady=5)
        fields = [
            ("الجهة المقدمة للبرنامج", 40), ("اسم البرنامج", 40), ("كود البرنامج / الدورة", 30),
            ("نوع الامتحان: ☐ كتابي ☐ عملي ☐ إلكتروني", 30), ("تاريخ الامتحان", 20),
            ("المدة الزمنية", 20), ("الدرجة النهائية", 20)
        ]
        for label, width in fields:
            row = tk.Frame(exam_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            entry = tk.Entry(row, width=width, font=self.arabic_font)
            entry.pack(side=tk.RIGHT, padx=5)
            entries[label] = entry

        # بيانات المتقدم
        applicant = tk.LabelFrame(frame, text="بيانات المتقدم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        applicant.pack(fill=tk.X, padx=10, pady=5)
        for label in ["الاسم الكامل", "الرقم التعريفي", "التوقيع"]:
            row = tk.Frame(applicant, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            entry = tk.Entry(row, width=30, font=self.arabic_font)
            entry.pack(side=tk.RIGHT, padx=5)
            entries[label] = entry

        # تعليمات هامة
        instructions = tk.LabelFrame(frame, text="تعليمات هامة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        instructions.pack(fill=tk.X, padx=10, pady=5)
        for text in [
            "اقرأ جميع الأسئلة بعناية.",
            "الالتزام بالزمن المحدد.",
            "يمنع استخدام الهاتف المحمول أو المراجع إلا إذا سمح بذلك.",
            "سيتم استبعاد أي محاولة غش أو خرق لقواعد الامتحان."
        ]:
            tk.Label(instructions, text=text, font=self.arabic_font, fg="white", bg="#4A1E6B", anchor="e").pack(fill=tk.X, padx=5)

        # الجزء الأول: أسئلة الاختيار من متعدد
        mcq = tk.LabelFrame(frame, text="الجزء الأول: أسئلة الاختيار من متعدد", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        mcq.pack(fill=tk.X, padx=10, pady=5)
        for i in range(1, 6):  # Extended to 5 questions
            question_frame = tk.Frame(mcq, bg="#4A1E6B")
            question_frame.pack(fill=tk.X, pady=2)
            tk.Label(question_frame, text=f"السؤال {i}:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E)
            
            # Question text entry
            question_entry = tk.Entry(question_frame, width=60, font=self.arabic_font)
            question_entry.pack(fill=tk.X, padx=5, pady=2)
            entries[f"سؤال_اختيار_{i}"] = question_entry
            
            # Answer options
            options_frame = tk.Frame(question_frame, bg="#4A1E6B")
            options_frame.pack(anchor=tk.E, padx=20)
            for opt in ["أ", "ب", "ج", "د"]:
                var = tk.BooleanVar()
                tk.Checkbutton(options_frame, text=opt, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
                entries[f"سؤال_{i}_خيار_{opt}"] = var

        # الجزء الثاني: أسئلة المقال / الإجابة القصيرة
        essay = tk.LabelFrame(frame, text="الجزء الثاني: أسئلة المقال / الإجابة القصيرة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        essay.pack(fill=tk.X, padx=10, pady=5)
        for i in range(1, 4):  # 3 essay questions
            tk.Label(essay, text=f"السؤال {i}:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
            text_widget = tk.Text(essay, height=3, width=80, font=self.arabic_font)
            text_widget.pack(fill=tk.X, padx=5, pady=2)
            entries[f"سؤال_مقال_{i}"] = text_widget

        # الجزء الثالث: التمرين العملي (إن وُجد)
        practical = tk.LabelFrame(frame, text="الجزء الثالث: التمرين العملي (إن وُجد)", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        practical.pack(fill=tk.X, padx=10, pady=5)
        
        practical_fields = ["عنوان المهمة", "وصف التمرين", "المخرجات المطلوبة"]
        for label in practical_fields:
            tk.Label(practical, text=f"{label}:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
            text_widget = tk.Text(practical, height=2, width=80, font=self.arabic_font)
            text_widget.pack(fill=tk.X, padx=5, pady=2)
            entries[label] = text_widget

        # ملاحظات المقيم
        notes = tk.LabelFrame(frame, text="ملاحظات المقيم (تُستخدم عند التقييم اليدوي أو العملي)", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        notes.pack(fill=tk.X, padx=10, pady=5)
        notes_text = tk.Text(notes, height=3, width=80, font=self.arabic_font)
        notes_text.pack(fill=tk.X, padx=5, pady=2)
        entries["ملاحظات المقيم"] = notes_text
        
        # Add Save and Export buttons
        self.add_form_buttons(frame, form_name, entries)

    def create_examination_record_form(self, parent, form_name):
        """QF-09-03-02: سجل الامتحانات"""
        frame = self._make_scrollable_form(parent)
        entries = {}
        
        # بيانات البرنامج
        prog = tk.LabelFrame(frame, text="أولاً: بيانات البرنامج", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        prog.pack(fill=tk.X, padx=10, pady=5)
        fields = [
            ("اسم البرنامج / الشهادة المهنية", 40), ("رمز / كود البرنامج", 20), ("الدورة / الدفعة رقم", 15),
            ("نوع الامتحان: ☐ كتابي ☐ عملي ☐ إلكتروني ☐ شفوي", 30), ("تاريخ تنفيذ الامتحان", 20),
            ("مكان التنفيذ", 30), ("اسم الممتحن / اللجنة", 30)
        ]
        for label, width in fields:
            row = tk.Frame(prog, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            entry = tk.Entry(row, width=width, font=self.arabic_font)
            entry.pack(side=tk.RIGHT, padx=5)
            entries[label] = entry

        # بيانات المتقدمين ونتائجهم
        results = tk.LabelFrame(frame, text="ثانياً: بيانات المتقدمين ونتائجهم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        results.pack(fill=tk.X, padx=10, pady=5)
        
        # Table headers
        table_frame = tk.Frame(results, bg="#4A1E6B")
        table_frame.pack(fill=tk.X, padx=5, pady=2)
        headers = ["م", "اسم المتقدم", "الرقم التعريفي", "نوع الامتحان", "الدرجة", "النتيجة (ناجح / لم يجتز)", "التوقيع"]
        for h in headers:
            tk.Label(table_frame, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=14).pack(side=tk.RIGHT, padx=1)
        
        # Table rows for participants
        for i in range(1, 6):  # 5 participants
            row = tk.Frame(results, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            
            # Serial number
            tk.Label(row, text=str(i), font=self.arabic_font, fg="white", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)
            
            # Entry fields for each column
            fields = ["اسم_متقدم", "رقم_تعريفي", "نوع_امتحان", "درجة", "نتيجة", "توقيع"]
            for field in fields:
                entry = tk.Entry(row, width=14, font=self.arabic_font)
                entry.pack(side=tk.RIGHT, padx=1)
                entries[f"{field}_{i}"] = entry

        # ثالثاً: ملاحظات الممتحن
        examiner_notes = tk.LabelFrame(frame, text="ثالثاً: ملاحظات الممتحن", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        examiner_notes.pack(fill=tk.X, padx=10, pady=5)
        
        observations = [
            "هل تم التحقق من هوية المتقدمين؟",
            "هل تم توضيح تعليمات الامتحان للمتقدمين؟",
            "هل واجه المتقدمون أي صعوبات فنية أو إجرائية؟",
            "هل التزم المتقدمون بقواعد الامتحان؟"
        ]
        
        for obs in observations:
            obs_frame = tk.Frame(examiner_notes, bg="#4A1E6B")
            obs_frame.pack(fill=tk.X, pady=2)
            tk.Label(obs_frame, text=obs, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
            
            # Yes/No checkboxes
            options_frame = tk.Frame(obs_frame, bg="#4A1E6B")
            options_frame.pack(side=tk.RIGHT, padx=20)
            var_yes = tk.BooleanVar()
            var_no = tk.BooleanVar()
            tk.Checkbutton(options_frame, text="لا", variable=var_no, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)
            tk.Checkbutton(options_frame, text="نعم", variable=var_yes, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)
            entries[f"{obs}_نعم"] = var_yes
            entries[f"{obs}_لا"] = var_no

        # ملاحظات إضافية
        additional_notes = tk.LabelFrame(frame, text="ملاحظات إضافية", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        additional_notes.pack(fill=tk.X, padx=10, pady=5)
        notes_text = tk.Text(additional_notes, height=4, width=80, font=self.arabic_font)
        notes_text.pack(fill=tk.X, padx=5, pady=2)
        entries["ملاحظات إضافية"] = notes_text

        # رابعاً: بيانات الممتحن / اللجنة
        examiner_info = tk.LabelFrame(frame, text="رابعاً: بيانات الممتحن / اللجنة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        examiner_info.pack(fill=tk.X, padx=10, pady=5)
        
        examiner_fields = ["اسم الممتحن / رئيس اللجنة", "المؤهل / التخصص", "التوقيع", "التاريخ"]
        for field in examiner_fields:
            row = tk.Frame(examiner_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=f"{field}:", font=self.arabic_font, fg="white", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=5)
            entry = tk.Entry(row, width=40, font=self.arabic_font)
            entry.pack(side=tk.RIGHT, padx=5)
            entries[field] = entry
        
        # Add Save and Export buttons
        self.add_form_buttons(frame, form_name, entries)
        for i in range(3):
            row = tk.Frame(results, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            for w in [3, 18, 12, 10, 8, 14, 10]:
                tk.Entry(row, width=w, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

        tk.Label(results, text="ملاحظة: يمكن إضافة أعمدة مثل 'مدة الامتحان' أو 'رقم الجلسة' حسب نظام الجهة.", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)

        # توثيق الإشراف والاعتماد
        approval = tk.LabelFrame(frame, text="ثالثاً: توثيق الإشراف والاعتماد", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        approval.pack(fill=tk.X, padx=10, pady=5)
        headers = ["الاسم", "الصفة", "التوقيع", "التاريخ"]
        row = tk.Frame(approval, bg="#4A1E6B")
        row.pack(fill=tk.X, pady=2)
        for h in headers:
            tk.Label(row, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=14).pack(side=tk.RIGHT, padx=1)
        for i in range(3):
            row = tk.Frame(approval, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            for w in [18, 12, 10, 10]:
                tk.Entry(row, width=w, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

    def create_examination_monitoring_report_form(self, parent, form_name):
        """QF-09-03-03: تقرير مراقبة الامتحان"""
        frame = self._make_scrollable_form(parent)
        # بيانات الامتحان
        exam = tk.LabelFrame(frame, text="أولاً: بيانات الامتحان", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        exam.pack(fill=tk.X, padx=10, pady=5)
        fields = [
            ("اسم البرنامج / الشهادة", 40), ("كود / رقم الدورة", 20), ("نوع الامتحان: ☐ كتابي ☐ عملي ☐ إلكتروني ☐ شفوي", 30),
            ("تاريخ الامتحان", 20), ("مكان التنفيذ", 30), ("المدة الزمنية", 15), ("عدد المتقدمين", 10)
        ]
        for label, width in fields:
            row = tk.Frame(exam, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=width, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # بيانات المراقب
        monitor = tk.LabelFrame(frame, text="ثانياً: بيانات المراقب", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        monitor.pack(fill=tk.X, padx=10, pady=5)
        for label in ["اسم المراقب", "الوظيفة / الجهة", "رقم الاتصال (إن لزم)"]:
            row = tk.Frame(monitor, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # إجراءات ما قبل الامتحان
        pre_exam = tk.LabelFrame(frame, text="ثالثاً: إجراءات ما قبل الامتحان", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        pre_exam.pack(fill=tk.X, padx=10, pady=5)
        headers = ["الإجراء", "تم (✓)", "لم يتم (✗)", "ملاحظات"]
        row = tk.Frame(pre_exam, bg="#4A1E6B")
        row.pack(fill=tk.X, pady=2)
        for h in headers:
            tk.Label(row, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=14).pack(side=tk.RIGHT, padx=1)
        for action in ["التحقق من هوية المتقدمين", "التأكد من ترتيب القاعة", "توزيع أوراق / روابط الامتحان بشكل سليم", "توضيح التعليمات للمتقدمين"]:
            row = tk.Frame(pre_exam, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            tk.Label(row, text=action, font=self.arabic_font, fg="white", bg="#4A1E6B", width=14).pack(side=tk.RIGHT, padx=1)
            for _ in range(3):
                tk.Entry(row, width=10, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

        # ملاحظات أثناء سير الامتحان
        during_exam = tk.LabelFrame(frame, text="رابعاً: ملاحظات أثناء سير الامتحان", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        during_exam.pack(fill=tk.X, padx=10, pady=5)
        for text in [
            "هل تم الالتزام بالهدوء والنظام؟ ☐ نعم ☐ لا",
            "هل حدثت أي مخالفات (غش – سلوك غير لائق – أعطال تقنية)؟ ☐ نعم ☐ لا",
            "إذا كانت الإجابة نعم، فُصّل في الجدول التالي:"
        ]:
            tk.Label(during_exam, text=text, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        headers = ["رقم المتقدم", "نوع المخالفة", "الإجراء المتخذ", "توقيع المراقب"]
        row = tk.Frame(during_exam, bg="#4A1E6B")
        row.pack(fill=tk.X, pady=2)
        for h in headers:
            tk.Label(row, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=14).pack(side=tk.RIGHT, padx=1)
        for i in range(3):
            row = tk.Frame(during_exam, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            for w in [10, 18, 18, 10]:
                tk.Entry(row, width=w, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

        # ملاحظات عامة وتوصيات
        notes = tk.LabelFrame(frame, text="خامساً: ملاحظات عامة وتوصيات", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        notes.pack(fill=tk.X, padx=10, pady=5)
        tk.Text(notes, height=3, width=80, font=self.arabic_font).pack(fill=tk.X, padx=5, pady=2)

        # توقيع المراقب
        sign = tk.LabelFrame(frame, text="سادساً: توقيع المراقب", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        sign.pack(fill=tk.X, padx=10, pady=5)
        for label in ["الاسم", "التوقيع", "التاريخ"]:
            row = tk.Frame(sign, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

    def _make_scrollable_form(self, parent):
        """Helper method to create a scrollable frame for forms"""
        canvas = tk.Canvas(parent, bg="#2C1810")
        scrollbar = tk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#2C1810")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        return scrollable_frame

    def create_certificate_decision_form(self, parent, form_name):
        """QF-09-04-01: نموذج قرار الشهادة"""
        frame = self._make_scrollable_form(parent)
        
        # بيانات المتقدم
        applicant = tk.LabelFrame(frame, text="أولاً: بيانات المتقدم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        applicant.pack(fill=tk.X, padx=10, pady=5)
        fields = [
            ("الاسم الكامل", 40), ("الرقم التعريفي / رقم الهوية", 25), ("البرنامج / الشهادة المهنية", 30),
            ("رقم الدورة / المجموعة", 20), ("تاريخ التقديم", 15), ("تاريخ استكمال المتطلبات", 15)
        ]
        for label, width in fields:
            row = tk.Frame(applicant, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=width, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # نتائج التقييم
        results = tk.LabelFrame(frame, text="ثانياً: نتائج التقييم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        results.pack(fill=tk.X, padx=10, pady=5)
        
        # جدول النتائج
        table_frame = tk.Frame(results, bg="#4A1E6B")
        table_frame.pack(fill=tk.X, padx=5, pady=2)
        headers = ["نوع التقييم", "الدرجة", "النتيجة"]
        for h in headers:
            tk.Label(table_frame, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=15).pack(side=tk.RIGHT, padx=1)
        
        evaluations = ["امتحان نظري", "تمرين عملي", "مقابلة شخصية", "مراجعة ملف"]
        for eval_type in evaluations:
            row = tk.Frame(results, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            tk.Label(row, text=eval_type, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=10, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            result_frame = tk.Frame(row, bg="#4A1E6B")
            result_frame.pack(side=tk.RIGHT, padx=1)
            if eval_type == "مراجعة ملف":
                tk.Checkbutton(result_frame, text="مستوفٍ", font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
                tk.Checkbutton(result_frame, text="غير مستوفٍ", font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            else:
                tk.Checkbutton(result_frame, text="ناجح", font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
                tk.Checkbutton(result_frame, text="لم يجتز", font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)

        # قرار اللجنة
        decision = tk.LabelFrame(frame, text="ثالثاً: قرار اللجنة / الجهة المعنية", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        decision.pack(fill=tk.X, padx=10, pady=5)
        tk.Label(decision, text="بعد مراجعة نتائج التقييم واستيفاء المتقدم لكافة الشروط، تقرر اللجنة:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        for option in ["منح الشهادة المهنية / المؤهل للمتقدم", "رفض منح الشهادة – مع توضيح السبب", "تأجيل القرار لحين استكمال المتطلبات التالية"]:
            var = tk.BooleanVar()
            tk.Checkbutton(decision, text=option, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=5, pady=2)
            if "السبب" in option or "المتطلبات" in option:
                tk.Entry(decision, width=50, font=self.arabic_font).pack(anchor=tk.E, padx=20, pady=2)

        # تفاصيل الشهادة
        cert_details = tk.LabelFrame(frame, text="رابعاً: تفاصيل الشهادة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        cert_details.pack(fill=tk.X, padx=10, pady=5)
        for label in ["رقم الشهادة", "تاريخ الإصدار", "مدة الصلاحية (إن وجدت)"]:
            row = tk.Frame(cert_details, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # توقيع أعضاء اللجنة
        signatures = tk.LabelFrame(frame, text="خامساً: توقيع أعضاء اللجنة / الجهة المانحة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        signatures.pack(fill=tk.X, padx=10, pady=5)
        headers = ["الاسم", "الصفة", "التوقيع", "التاريخ"]
        row = tk.Frame(signatures, bg="#4A1E6B")
        row.pack(fill=tk.X, pady=2)
        for h in headers:
            tk.Label(row, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=12).pack(side=tk.RIGHT, padx=1)
        for i in range(3):
            row = tk.Frame(signatures, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            for w in [15, 15, 12, 10]:
                tk.Entry(row, width=w, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

    def create_certificate_decisions_record_form(self, parent, form_name):
        """QF-09-04-02: سجل قرارات الشهادات"""
        frame = self._make_scrollable_form(parent)
        
        # بيانات البرنامج
        program = tk.LabelFrame(frame, text="أولاً: بيانات البرنامج", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        program.pack(fill=tk.X, padx=10, pady=5)
        fields = [
            ("اسم البرنامج / الشهادة", 40), ("رقم الدورة / المجموعة", 15),
            ("الجهة المسؤولة عن الاعتماد / التقييم", 35), ("تاريخ إصدار السجل", 15)
        ]
        for label, width in fields:
            row = tk.Frame(program, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=width, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # جدول قرارات الشهادات
        decisions_table = tk.LabelFrame(frame, text="ثانياً: جدول قرارات الشهادات", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        decisions_table.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        table_frame = tk.Frame(decisions_table, bg="#4A1E6B")
        table_frame.pack(fill=tk.X, padx=5, pady=2)
        headers = ["م", "اسم المتقدم", "الرقم التعريفي", "النتيجة النهائية", "قرار اللجنة", "رقم الشهادة", "تاريخ القرار", "ملاحظات"]
        for h in headers:
            width = 3 if h == "م" else 12 if h in ["الرقم التعريفي", "رقم الشهادة", "تاريخ القرار"] else 15
            tk.Label(table_frame, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=width).pack(side=tk.RIGHT, padx=1)
        
        # صفوف الجدول
        for i in range(5):
            row = tk.Frame(decisions_table, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            widths = [3, 18, 12, 10, 12, 12, 10, 15]
            for w in widths:
                tk.Entry(row, width=w, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

        # التوصيات العامة
        recommendations = tk.LabelFrame(frame, text="ثالثاً: التوصيات العامة (اختياري)", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        recommendations.pack(fill=tk.X, padx=10, pady=5)
        
        for option in [
            "إرسال الشهادات للناجحين",
            "إخطار غير المجتازين بالنتائج وخطة إعادة التقييم",
            "أرشفة نسخة إلكترونية من السجل",
            "إرسال تقرير للإدارة العليا أو جهة الاعتماد (إن لزم)"
        ]:
            var = tk.BooleanVar()
            tk.Checkbutton(recommendations, text=option, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=5, pady=2)

        # اعتماد السجل
        approval = tk.LabelFrame(frame, text="رابعاً: اعتماد السجل", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        approval.pack(fill=tk.X, padx=10, pady=5)
        headers = ["الاسم", "الصفة", "التوقيع", "التاريخ"]
        row = tk.Frame(approval, bg="#4A1E6B")
        row.pack(fill=tk.X, pady=2)
        for h in headers:
            tk.Label(row, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=15).pack(side=tk.RIGHT, padx=1)
        for i in range(2):
            row = tk.Frame(approval, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            for w in [20, 15, 12, 10]:
                tk.Entry(row, width=w, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

    def create_accreditation_certificate_form(self, parent, form_name):
        """QF-09-04-03: شهادة الاعتماد"""
        frame = self._make_scrollable_form(parent)
        
        # إطار الشهادة
        cert_frame = tk.LabelFrame(frame, text="شهادة الاعتماد المهني", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        cert_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # عنوان المؤسسة
        title_frame = tk.Frame(cert_frame, bg="#4A1E6B")
        title_frame.pack(fill=tk.X, pady=10)
        tk.Label(title_frame, text="شـــهـــادة اعـــتـــمـــاد مـــهـــنـــي", font=("Arial", 18, "bold"), fg="gold", bg="#4A1E6B").pack()
        tk.Label(title_frame, text="QB Academy", font=("Arial", 16, "bold"), fg="white", bg="#4A1E6B").pack(pady=5)
        
        # خط فاصل
        separator = tk.Frame(cert_frame, height=2, bg="gold")
        separator.pack(fill=tk.X, padx=20, pady=10)
        
        # محتوى الشهادة
        content_frame = tk.Frame(cert_frame, bg="#4A1E6B")
        content_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(content_frame, text="هذا يشهد بأن:", font=self.arabic_font_bold, fg="white", bg="#4A1E6B").pack(anchor=tk.E, pady=5)
        
        # بيانات المتقدم
        applicant_frame = tk.Frame(content_frame, bg="#4A1E6B")
        applicant_frame.pack(fill=tk.X, pady=5)
        for label in ["السيد/ة:", "رقم الهوية:"]:
            row = tk.Frame(applicant_frame, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)
        
        tk.Label(content_frame, text="قد اجتاز بنجاح جميع متطلبات برنامج:", font=self.arabic_font_bold, fg="white", bg="#4A1E6B").pack(anchor=tk.E, pady=10)
        
        # بيانات البرنامج
        program_frame = tk.Frame(content_frame, bg="#4A1E6B")
        program_frame.pack(fill=tk.X, pady=5)
        for label in ["اسم البرنامج:", "مجال الاختصاص:", "مستوى الشهادة:"]:
            row = tk.Frame(program_frame, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=35, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)
        
        tk.Label(content_frame, text="وبناءً على ذلك تم منحه/ها هذه الشهادة وفقاً لمعايير ISO 17024:2012", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, pady=10)
        
        # تفاصيل الشهادة
        details_frame = tk.Frame(content_frame, bg="#4A1E6B")
        details_frame.pack(fill=tk.X, pady=10)
        for label in ["رقم الشهادة:", "تاريخ الإصدار:", "تاريخ الانتهاء:"]:
            row = tk.Frame(details_frame, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=25, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)
        
        # خط فاصل آخر
        separator2 = tk.Frame(cert_frame, height=2, bg="gold")
        separator2.pack(fill=tk.X, padx=20, pady=15)
        
        # التوقيع والختم
        signature_frame = tk.Frame(cert_frame, bg="#4A1E6B")
        signature_frame.pack(fill=tk.X, padx=20, pady=10)
        
        sig_row = tk.Frame(signature_frame, bg="#4A1E6B")
        sig_row.pack(fill=tk.X)
        
        # التوقيع
        left_sig = tk.Frame(sig_row, bg="#4A1E6B")
        left_sig.pack(side=tk.LEFT, fill=tk.X, expand=True)
        tk.Label(left_sig, text="توقيع المدير التنفيذي", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()
        for label in ["الاسم:", "التاريخ:"]:
            row = tk.Frame(left_sig, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=2)
        
        # الختم
        right_stamp = tk.Frame(sig_row, bg="#4A1E6B")
        right_stamp.pack(side=tk.RIGHT, fill=tk.X, expand=True)
        tk.Label(right_stamp, text="ختم المؤسسة", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()
        stamp_area = tk.Frame(right_stamp, width=100, height=100, bg="#3C1361", relief=tk.SUNKEN, bd=2)
        stamp_area.pack(pady=5)
        
        # ملاحظات
        notes_frame = tk.Frame(cert_frame, bg="#4A1E6B")
        notes_frame.pack(fill=tk.X, padx=20, pady=10)
        tk.Label(notes_frame, text="ملاحظة: هذه الشهادة صالحة لمدة ثلاث سنوات من تاريخ الإصدار", font=self.arabic_font, fg="yellow", bg="#4A1E6B").pack(anchor=tk.E)
        tk.Label(notes_frame, text="للتحقق من صحة الشهادة، يرجى زيارة موقعنا الإلكتروني", font=self.arabic_font, fg="yellow", bg="#4A1E6B").pack(anchor=tk.E)

    def create_suspension_withdrawal_decision_form(self, parent, form_name):
        """QF-09-05-01: نموذج قرار تعليق أو سحب أو تقليص النطاق"""
        frame = self._make_scrollable_form(parent)
        
        # عنوان النموذج
        title_frame = tk.Frame(frame, bg="#4A1E6B")
        title_frame.pack(fill=tk.X, pady=10)
        tk.Label(title_frame, text="نموذج قرار تعليق / سحب / تقليص النطاق", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack()
        tk.Label(title_frame, text="الرقم المرجعي: QF-09-05-01", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # بيانات الجهة / الشخص المعتمد
        entity_data = tk.LabelFrame(frame, text="أولاً: بيانات الجهة / الشخص المعتمد", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        entity_data.pack(fill=tk.X, padx=10, pady=5)
        fields = [
            ("الاسم الكامل / اسم الجهة", 40), ("رقم الاعتماد / الترخيص", 25),
            ("نوع الشهادة / البرنامج", 30), ("تاريخ الإصدار", 15), ("تاريخ انتهاء الصلاحية (إن وُجد)", 15)
        ]
        for label, width in fields:
            row = tk.Frame(entity_data, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=width, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # نوع القرار
        decision_type = tk.LabelFrame(frame, text="ثانياً: نوع القرار", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        decision_type.pack(fill=tk.X, padx=10, pady=5)
        tk.Label(decision_type, text="يرجى وضع علامة (✓) على القرار المتخذ:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        for option in ["تعليق مؤقت للاعتماد", "سحب الاعتماد بالكامل", "تقليص نطاق الاعتماد"]:
            var = tk.BooleanVar()
            tk.Checkbutton(decision_type, text=option, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=5, pady=2)

        # سبب القرار
        reason = tk.LabelFrame(frame, text="ثالثاً: سبب القرار", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        reason.pack(fill=tk.X, padx=10, pady=5)
        
        reasons = [
            "عدم الالتزام بمتطلبات البرنامج / اللوائح التنظيمية",
            "نتائج تقييم / مراجعة غير مرضية",
            "شكاوى مثبتة ضد الجهة / الفرد",
            "طلب مُقدَّم من الجهة نفسها",
            "أسباب أخرى"
        ]
        
        for reason_text in reasons:
            var = tk.BooleanVar()
            tk.Checkbutton(reason, text=reason_text, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=5, pady=2)
            if reason_text == "أسباب أخرى":
                tk.Entry(reason, width=50, font=self.arabic_font).pack(anchor=tk.E, padx=20, pady=2)

        # تاريخ سريان القرار
        effective_date = tk.LabelFrame(frame, text="رابعاً: تاريخ سريان القرار", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        effective_date.pack(fill=tk.X, padx=10, pady=5)
        for label in ["تاريخ بدء سريان القرار", "مدة التعليق (إن وُجد)", "تاريخ المراجعة التالية / الموعد المتوقع لإعادة النظر"]:
            row = tk.Frame(effective_date, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=25, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # تفاصيل تقليص النطاق
        scope_reduction = tk.LabelFrame(frame, text="خامساً: تفاصيل تقليص النطاق (إن وُجد)", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        scope_reduction.pack(fill=tk.X, padx=10, pady=5)
        
        # جدول التقليص
        table_frame = tk.Frame(scope_reduction, bg="#4A1E6B")
        table_frame.pack(fill=tk.X, padx=5, pady=2)
        headers = ["البند / النشاط", "النطاق السابق", "النطاق بعد التقليص", "ملاحظات"]
        for h in headers:
            tk.Label(table_frame, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=15).pack(side=tk.RIGHT, padx=1)
        
        for i in range(3):
            row = tk.Frame(scope_reduction, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            for w in [18, 15, 15, 15]:
                tk.Entry(row, width=w, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

        # توقيع اللجنة
        signatures = tk.LabelFrame(frame, text="سادساً: توقيع اللجنة / الجهة المانحة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        signatures.pack(fill=tk.X, padx=10, pady=5)
        headers = ["الاسم", "الصفة", "التوقيع", "التاريخ"]
        row = tk.Frame(signatures, bg="#4A1E6B")
        row.pack(fill=tk.X, pady=2)
        for h in headers:
            tk.Label(row, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=12).pack(side=tk.RIGHT, padx=1)
        for i in range(2):
            row = tk.Frame(signatures, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            for w in [18, 15, 12, 10]:
                tk.Entry(row, width=w, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

        # إشعار للجهة المعتمدة
        notification = tk.LabelFrame(frame, text="سابعاً: إشعار للجهة المعتمدة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        notification.pack(fill=tk.X, padx=10, pady=5)
        
        notif_frame = tk.Frame(notification, bg="#4A1E6B")
        notif_frame.pack(fill=tk.X, pady=5)
        tk.Label(notif_frame, text="تم إخطار الجهة / الشخص المعني رسمياً بهذا القرار في تاريخ:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E)
        tk.Entry(notif_frame, width=15, font=self.arabic_font).pack(anchor=tk.E, padx=5, pady=2)
        
        tk.Label(notification, text="عن طريق:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        methods = ["البريد الإلكتروني", "خطاب رسمي", "اجتماع مباشر", "وسيلة أخرى"]
        for method in methods:
            var = tk.BooleanVar()
            tk.Checkbutton(notification, text=method, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=5, pady=1)
            if method == "وسيلة أخرى":
                tk.Entry(notification, width=30, font=self.arabic_font).pack(anchor=tk.E, padx=20, pady=1)

    def create_suspension_withdrawal_record_form(self, parent, form_name):
        """QF-09-05-02: سجل قرارات تعليق أو سحب الشهادات"""
        frame = self._make_scrollable_form(parent)
        
        # عنوان النموذج
        title_frame = tk.Frame(frame, bg="#4A1E6B")
        title_frame.pack(fill=tk.X, pady=10)
        tk.Label(title_frame, text="سجل قرارات تعليق أو سحب الشهادات", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack()
        tk.Label(title_frame, text="الرقم المرجعي: QF-09-05-02", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # بيانات البرنامج / جهة الإصدار
        program_data = tk.LabelFrame(frame, text="أولاً: بيانات البرنامج / جهة الإصدار", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        program_data.pack(fill=tk.X, padx=10, pady=5)
        fields = [
            ("اسم البرنامج / الشهادة", 40), ("الجهة المانحة / الإدارة المختصة", 35),
            ("الفترة المشمولة بالسجل - من", 15), ("إلى", 15), ("تاريخ إصدار السجل", 15)
        ]
        for label, width in fields:
            row = tk.Frame(program_data, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=width, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # تفاصيل القرارات المتخذة
        decisions_table = tk.LabelFrame(frame, text="ثانياً: تفاصيل القرارات المتخذة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        decisions_table.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        table_frame = tk.Frame(decisions_table, bg="#4A1E6B")
        table_frame.pack(fill=tk.X, padx=5, pady=2)
        headers = ["م", "اسم المعتمد / الجهة", "رقم الشهادة", "نوع القرار", "تاريخ القرار", "سبب القرار", "حالة الإشعار", "ملاحظات"]
        for h in headers:
            width = 3 if h == "م" else 10 if h in ["رقم الشهادة", "تاريخ القرار"] else 12 if h == "حالة الإشعار" else 15
            tk.Label(table_frame, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=width).pack(side=tk.RIGHT, padx=1)
        
        # صفوف الجدول
        for i in range(5):
            row = tk.Frame(decisions_table, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            widths = [3, 18, 12, 15, 10, 15, 12, 15]
            for j, w in enumerate(widths):
                if j == 6:  # عمود حالة الإشعار
                    notification_frame = tk.Frame(row, bg="#4A1E6B")
                    notification_frame.pack(side=tk.RIGHT, padx=1)
                    tk.Checkbutton(notification_frame, text="تم", font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
                    tk.Checkbutton(notification_frame, text="لم يتم", font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
                else:
                    tk.Entry(row, width=w, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

        # متابعة تنفيذ القرار
        follow_up = tk.LabelFrame(frame, text="ثالثاً: متابعة تنفيذ القرار", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        follow_up.pack(fill=tk.X, padx=10, pady=5)
        
        questions = [
            "هل تم اتخاذ إجراءات توثيق القرار؟",
            "هل تم إعلام المعني رسمياً؟",
            "هل تم تحديث قاعدة بيانات الشهادات؟",
            "هل تم إدراج الحالة في التقارير الدورية؟"
        ]
        
        for question in questions:
            row = tk.Frame(follow_up, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=question, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            answer_frame = tk.Frame(row, bg="#4A1E6B")
            answer_frame.pack(side=tk.RIGHT, padx=5)
            tk.Checkbutton(answer_frame, text="نعم", font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            tk.Checkbutton(answer_frame, text="لا", font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)

        # اعتماد السجل
        approval = tk.LabelFrame(frame, text="رابعاً: اعتماد السجل", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        approval.pack(fill=tk.X, padx=10, pady=5)
        headers = ["الاسم", "الصفة", "التوقيع", "التاريخ"]
        row = tk.Frame(approval, bg="#4A1E6B")
        row.pack(fill=tk.X, pady=2)
        for h in headers:
            tk.Label(row, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=15).pack(side=tk.RIGHT, padx=1)
        for i in range(2):
            row = tk.Frame(approval, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            for w in [20, 15, 12, 10]:
                tk.Entry(row, width=w, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

    def create_complaint_form(self, parent, form_name):
        """QF-09-05-03: نموذج تظلم"""
        frame = self._make_scrollable_form(parent)
        
        # عنوان النموذج
        title_frame = tk.Frame(frame, bg="#4A1E6B")
        title_frame.pack(fill=tk.X, pady=10)
        tk.Label(title_frame, text="نموذج تظلم", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack()
        tk.Label(title_frame, text="الرقم المرجعي: QF-09-05-03", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # بيانات مقدم التظلم
        complainant_data = tk.LabelFrame(frame, text="أولاً: بيانات مقدم التظلم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        complainant_data.pack(fill=tk.X, padx=10, pady=5)
        
        fields = [("الاسم الكامل / اسم الجهة", 40), ("رقم الهوية / رقم الشهادة / الكود", 25), ("تاريخ تقديم التظلم", 15), ("بيانات التواصل (هاتف / بريد)", 30)]
        for label, width in fields:
            row = tk.Frame(complainant_data, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=width, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)
        
        # نوع التظلم
        complaint_type_frame = tk.Frame(complainant_data, bg="#4A1E6B")
        complaint_type_frame.pack(fill=tk.X, pady=5)
        tk.Label(complaint_type_frame, text="نوع التظلم:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        types = ["نتيجة تقييم", "قرار سحب / تعليق شهادة", "رفض اعتماد", "أخرى"]
        for comp_type in types:
            var = tk.BooleanVar()
            tk.Checkbutton(complaint_type_frame, text=comp_type, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=5, pady=1)
            if comp_type == "أخرى":
                tk.Entry(complaint_type_frame, width=30, font=self.arabic_font).pack(anchor=tk.E, padx=20, pady=1)

        # تفاصيل القرار محل التظلم
        decision_details = tk.LabelFrame(frame, text="ثانياً: تفاصيل القرار محل التظلم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        decision_details.pack(fill=tk.X, padx=10, pady=5)
        for label in ["رقم القرار / مرجعه", "تاريخ صدوره", "الجهة المُصدِرة للقرار"]:
            row = tk.Frame(decision_details, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # مضمون التظلم
        complaint_content = tk.LabelFrame(frame, text="ثالثاً: مضمون التظلم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        complaint_content.pack(fill=tk.X, padx=10, pady=5)
        tk.Label(complaint_content, text="يرجى توضيح سبب التظلم بشكل واضح ومفصل، مع إرفاق أي مستندات داعمة:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        tk.Text(complaint_content, height=5, width=80, font=self.arabic_font).pack(fill=tk.X, padx=5, pady=5)

        # المستندات المرفقة
        attachments = tk.LabelFrame(frame, text="رابعاً: المستندات المرفقة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        attachments.pack(fill=tk.X, padx=10, pady=5)
        
        docs = [
            "نسخة من القرار محل التظلم",
            "مستندات داعمة (تقارير – شهادات – مراسلات...)",
            "صورة الهوية / بيانات الشهادة",
            "أخرى"
        ]
        
        for doc in docs:
            var = tk.BooleanVar()
            tk.Checkbutton(attachments, text=doc, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=5, pady=2)
            if doc == "أخرى":
                tk.Entry(attachments, width=30, font=self.arabic_font).pack(anchor=tk.E, padx=20, pady=2)

        # توقيع مقدم التظلم
        complainant_signature = tk.LabelFrame(frame, text="خامساً: توقيع مقدم التظلم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        complainant_signature.pack(fill=tk.X, padx=10, pady=5)
        for label in ["الاسم", "الصفة (إن وُجد)", "التوقيع", "التاريخ"]:
            row = tk.Frame(complainant_signature, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(row, width=25, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # للاستخدام الداخلي (لجنة التظلمات)
        internal_use = tk.LabelFrame(frame, text="سادساً: للاستخدام الداخلي (لجنة التظلمات)", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        internal_use.pack(fill=tk.X, padx=10, pady=5)
        
        # جدول الإجراءات
        table_frame = tk.Frame(internal_use, bg="#4A1E6B")
        table_frame.pack(fill=tk.X, padx=5, pady=2)
        headers = ["الإجراء", "تم (✓)", "التاريخ", "ملاحظات"]
        for h in headers:
            tk.Label(table_frame, text=h, font=self.arabic_font_bold, fg="white", bg="#3C1361", width=15).pack(side=tk.RIGHT, padx=1)
        
        procedures = [
            "استلام التظلم",
            "مراجعة التظلم من قبل اللجنة", 
            "اتخاذ قرار نهائي",
            "إخطار مقدم التظلم بالنتيجة"
        ]
        
        for procedure in procedures:
            row = tk.Frame(internal_use, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            tk.Label(row, text=procedure, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)
            tk.Checkbutton(row, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361", width=10).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=12, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=18, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

    def create_recertification_application_form(self, parent, form_name):
        """إنشاء نموذج طلب إعادة الاعتماد QF-09-06-01"""
        frame = self._make_scrollable_form(parent)
        
        # Store all entries
        entries = {}
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="نموذج طلب إعادة الاعتماد", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-06-01", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: بيانات الجهة / الشخص مقدم الطلب
        applicant_info = tk.LabelFrame(frame, text="أولًا: بيانات الجهة / الشخص مقدم الطلب", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        applicant_info.pack(fill=tk.X, padx=10, pady=5)
        
        fields = [
            "الاسم الكامل / اسم الجهة:",
            "رقم الشهادة / الاعتماد السابق:",
            "تاريخ إصدار الاعتماد السابق:",
            "تاريخ انتهاء / سحب / تعليق الاعتماد:"
        ]
        
        for field in fields:
            row = tk.Frame(applicant_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            entry = tk.Entry(row, width=50, font=self.arabic_font)
            entry.pack(side=tk.RIGHT, padx=5)
            entries[field.replace(":", "")] = entry
            if "تاريخ" in field:
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=50, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # سبب طلب إعادة الاعتماد
        reason_frame = tk.Frame(applicant_info, bg="#4A1E6B")
        reason_frame.pack(fill=tk.X, pady=5)
        tk.Label(reason_frame, text="سبب طلب إعادة الاعتماد:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        reasons = [
            "انتهاء صلاحية الشهادة",
            "رفع تعليق سابق", 
            "بعد معالجة أسباب السحب",
            "تحديث النطاق أو المؤهلات",
            "أخرى"
        ]
        
        for reason in reasons:
            var = tk.BooleanVar()
            cb_frame = tk.Frame(reason_frame, bg="#4A1E6B")
            cb_frame.pack(anchor=tk.E, padx=20, pady=1)
            tk.Checkbutton(cb_frame, text=reason, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if reason == "أخرى":
                tk.Entry(cb_frame, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ثانيًا: بيانات البرنامج / النطاق المطلوب إعادة اعتماده
        program_info = tk.LabelFrame(frame, text="ثانيًا: بيانات البرنامج / النطاق المطلوب إعادة اعتماده", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        program_info.pack(fill=tk.X, padx=10, pady=5)
        
        program_fields = [
            "اسم البرنامج / المجال:",
            "الفئة المستهدفة:"
        ]
        
        for field in program_fields:
            row = tk.Frame(program_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            tk.Entry(row, width=50, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # التعديلات
        modifications_frame = tk.Frame(program_info, bg="#4A1E6B")
        modifications_frame.pack(fill=tk.X, pady=5)
        tk.Label(modifications_frame, text="التعديلات (إن وُجدت):", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        var_no = tk.BooleanVar()
        var_yes = tk.BooleanVar()
        tk.Checkbutton(modifications_frame, text="لا يوجد", variable=var_no, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=20)
        tk.Checkbutton(modifications_frame, text="يوجد – وضّح أدناه:", variable=var_yes, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=20)
        tk.Text(modifications_frame, height=3, width=60, font=self.arabic_font).pack(anchor=tk.E, padx=20, pady=5)

        # ثالثًا: المستندات المرفقة
        documents = tk.LabelFrame(frame, text="ثالثًا: المستندات المرفقة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        documents.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(documents, text="يرجى وضع علامة (✓) أمام ما تم إرفاقه:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5, pady=5)
        
        docs = [
            "نسخة من الشهادة السابقة",
            "تقرير مراجعة داخلية / تقرير تصحيحي",
            "إثبات معالجة أسباب التعليق / السحب",
            "مؤهلات وخبرات محدثة",
            "مستندات أخرى"
        ]
        
        for doc in docs:
            doc_frame = tk.Frame(documents, bg="#4A1E6B")
            doc_frame.pack(anchor=tk.E, padx=20, pady=2)
            var = tk.BooleanVar()
            tk.Checkbutton(doc_frame, text=doc, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if doc == "مستندات أخرى":
                tk.Entry(doc_frame, width=25, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # رابعًا: إقرار مقدم الطلب
        declaration = tk.LabelFrame(frame, text="رابعًا: إقرار مقدم الطلب", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        declaration.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(declaration, text="أقرّ أنا الموقع أدناه بأنني قد اطلعت على متطلبات إعادة الاعتماد، وأتحمل مسؤولية صحة البيانات والمستندات المقدمة.", 
                font=self.arabic_font, fg="white", bg="#4A1E6B", wraplength=800, justify='right').pack(anchor=tk.E, padx=5, pady=10)
        
        signature_fields = ["الاسم:", "الصفة:", "التوقيع:", "التاريخ:"]
        for field in signature_fields:
            row = tk.Frame(declaration, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=5)
            if field == "التاريخ:":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # خامسًا: للاستخدام الداخلي
        internal_use = tk.LabelFrame(frame, text="خامسًا: للاستخدام الداخلي", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        internal_use.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        headers = tk.Frame(internal_use, bg="#4A1E6B")
        headers.pack(fill=tk.X, pady=5)
        tk.Label(headers, text="ملاحظات", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="التاريخ", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=12).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="تم (✓)", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=10).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="الإجراء", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)
        
        procedures = [
            "استلام الطلب",
            "مراجعة مبدئية", 
            "تحويل إلى لجنة الاعتماد",
            "قرار اللجنة",
            "تاريخ الإشعار بالقرار"
        ]
        
        for procedure in procedures:
            row = tk.Frame(internal_use, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            if procedure == "قرار اللجنة":
                decision_frame = tk.Frame(row, bg="#4A1E6B")
                decision_frame.pack(side=tk.RIGHT, padx=1)
                for decision in ["قبول", "رفض", "طلب استكمال"]:
                    var = tk.BooleanVar()
                    tk.Checkbutton(decision_frame, text=decision, variable=var, font=("Arial", 8), fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=2)
            else:
                tk.Entry(row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=12, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Checkbutton(row, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361", width=10).pack(side=tk.RIGHT, padx=1)
            tk.Label(row, text=procedure, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)

    def create_professional_performance_monitoring_form(self, parent, form_name):
        """إنشاء سجل متابعة الأداء المهني QF-09-06-02"""
        frame = self._make_scrollable_form(parent)
        
        # Store all entries
        entries = {}
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="سجل متابعة الأداء المهني", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-06-02", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: بيانات المعتمد
        certified_info = tk.LabelFrame(frame, text="أولًا: بيانات المعتمد", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        certified_info.pack(fill=tk.X, padx=10, pady=5)
        
        fields = [
            "الاسم الكامل / اسم الجهة:",
            "رقم الشهادة / الاعتماد:",
            "تاريخ منح الشهادة:",
            "تاريخ انتهاء الصلاحية:",
            "البرنامج / المجال المهني:"
        ]
        
        for field in fields:
            row = tk.Frame(certified_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            if "تاريخ" in field:
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=50, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ثانيًا: محاور المتابعة
        monitoring_axes = tk.LabelFrame(frame, text="ثانيًا: محاور المتابعة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        monitoring_axes.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        headers = tk.Frame(monitoring_axes, bg="#4A1E6B")
        headers.pack(fill=tk.X, pady=5)
        tk.Label(headers, text="الإجراء التصحيحي (إن وجد)", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="الملاحظات", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="طريقة التحقق", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="مجال المتابعة", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="م", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)
        
        monitoring_areas = [
            "الالتزام بالمعايير المهنية",
            "الأداء الفني والمهني",
            "التطوير المهني المستمر",
            "السلوك الأخلاقي / المهني",
            "توثيق الأعمال والمخرجات"
        ]
        
        verification_methods = [
            "مراجعة ميدانية / تقارير / مقابلة",
            "تحليل نتائج / تقييم صاحب مصلحة",
            "شهادات / أنشطة تدريبية",
            "شكاوى / تقارير سلوك",
            "عينات أعمال / نماذج موثقة"
        ]
        
        for i, (area, method) in enumerate(zip(monitoring_areas, verification_methods)):
            row = tk.Frame(monitoring_axes, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            tk.Entry(row, width=25, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Label(row, text=str(i+1), font=self.arabic_font, fg="white", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)
            
            # Add default values
            row.children['!entry4'].insert(0, method)
            row.children['!entry3'].insert(0, area)

        # ثالثًا: تقييم الأداء العام
        overall_assessment = tk.LabelFrame(frame, text="ثالثًا: تقييم الأداء العام", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        overall_assessment.pack(fill=tk.X, padx=10, pady=5)
        
        assessments = [
            "مرضٍ جدًا",
            "مرضٍ",
            "يحتاج إلى تحسين",
            "غير مرضٍ – يتطلب إجراء تصحيحي / مراجعة الاعتماد"
        ]
        
        for assessment in assessments:
            var = tk.BooleanVar()
            tk.Radiobutton(overall_assessment, text=assessment, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=20, pady=2)

        # رابعًا: ملاحظات إضافية
        additional_notes = tk.LabelFrame(frame, text="رابعًا: ملاحظات إضافية", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        additional_notes.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Text(additional_notes, height=5, width=80, font=self.arabic_font).pack(padx=10, pady=10)

        # خامسًا: توقيع القائم بالمتابعة
        signature = tk.LabelFrame(frame, text="خامسًا: توقيع القائم بالمتابعة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        signature.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        sig_headers = tk.Frame(signature, bg="#4A1E6B")
        sig_headers.pack(fill=tk.X, pady=5)
        tk.Label(sig_headers, text="التاريخ", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)
        tk.Label(sig_headers, text="التوقيع", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)
        tk.Label(sig_headers, text="الصفة", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(sig_headers, text="الاسم", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        
        sig_row = tk.Frame(signature, bg="#4A1E6B")
        sig_row.pack(fill=tk.X, pady=2)
        tk.Entry(sig_row, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
        tk.Entry(sig_row, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
        tk.Entry(sig_row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
        tk.Entry(sig_row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

        # Add save buttons
        self.add_form_buttons(frame, entries, form_name)

    def create_reevaluation_report_form(self, parent, form_name):
        """إنشاء نموذج تقرير إعادة التقييم QF-09-06-03"""
        frame = self._make_scrollable_form(parent)
        
        # Store all entries
        entries = {}
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="نموذج تقرير إعادة التقييم", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-06-03", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: بيانات الجهة / الفرد محل إعادة التقييم
        entity_info = tk.LabelFrame(frame, text="أولًا: بيانات الجهة / الفرد محل إعادة التقييم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        entity_info.pack(fill=tk.X, padx=10, pady=5)
        
        fields = [
            "الاسم الكامل / اسم الجهة:",
            "رقم الشهادة / الاعتماد:",
            "نوع البرنامج / المجال المهني:",
            "تاريخ الاعتماد السابق:"
        ]
        
        for field in fields:
            row = tk.Frame(entity_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            if "تاريخ" in field:
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=50, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # سبب إعادة التقييم
        reason_frame = tk.Frame(entity_info, bg="#4A1E6B")
        reason_frame.pack(fill=tk.X, pady=5)
        tk.Label(reason_frame, text="سبب إعادة التقييم:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        reasons = [
            "انتهاء فترة الاعتماد",
            "بعد قرار تعليق / سحب",
            "بناءً على طلب رسمي",
            "توصية من لجنة المراجعة",
            "أخرى"
        ]
        
        for reason in reasons:
            var = tk.BooleanVar()
            cb_frame = tk.Frame(reason_frame, bg="#4A1E6B")
            cb_frame.pack(anchor=tk.E, padx=20, pady=1)
            tk.Checkbutton(cb_frame, text=reason, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if reason == "أخرى":
                tk.Entry(cb_frame, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ثانيًا: تفاصيل إعادة التقييم
        reevaluation_details = tk.LabelFrame(frame, text="ثانيًا: تفاصيل إعادة التقييم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        reevaluation_details.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        headers = tk.Frame(reevaluation_details, bg="#4A1E6B")
        headers.pack(fill=tk.X, pady=5)
        tk.Label(headers, text="الملاحظات", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="النتيجة", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="الوسيلة المستخدمة", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=18).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="بند التقييم", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="م", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)
        
        evaluation_items = [
            "المؤهلات والمعايير الفنية",
            "الالتزام باللوائح والمعايير",
            "التحديثات المهنية والتطوير المستمر",
            "السلوك المهني / الشكاوى",
            "نتائج الأداء العملي / التقييمات السابقة"
        ]
        
        for i, item in enumerate(evaluation_items):
            row = tk.Frame(reevaluation_details, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            tk.Entry(row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=18, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Label(row, text=str(i+1), font=self.arabic_font, fg="white", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)
            
            # Add default value for evaluation item
            row.children['!entry2'].insert(0, item)

        # ثالثًا: قرار لجنة إعادة التقييم
        committee_decision = tk.LabelFrame(frame, text="ثالثًا: قرار لجنة إعادة التقييم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        committee_decision.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(committee_decision, text="بناءً على نتائج التقييم أعلاه، توصي اللجنة بما يلي:", 
                font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5, pady=5)
        
        decisions = [
            "الاستمرار في الاعتماد / تجديد الشهادة",
            "تعليق الاعتماد مؤقتًا لحين استيفاء متطلبات محددة",
            "سحب الاعتماد لعدم استيفاء المتطلبات",
            "توسيع أو تقليص نطاق الاعتماد",
            "إعادة التقييم مرة أخرى في موعد لاحق"
        ]
        
        for decision in decisions:
            var = tk.BooleanVar()
            tk.Checkbutton(committee_decision, text=decision, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=20, pady=2)

        # تفاصيل إضافية
        tk.Label(committee_decision, text="تفاصيل إضافية:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5, pady=(10,5))
        tk.Text(committee_decision, height=4, width=80, font=self.arabic_font).pack(padx=10, pady=5)

        # رابعًا: توقيع اللجنة المختصة
        committee_signature = tk.LabelFrame(frame, text="رابعًا: توقيع اللجنة المختصة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        committee_signature.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        sig_headers = tk.Frame(committee_signature, bg="#4A1E6B")
        sig_headers.pack(fill=tk.X, pady=5)
        tk.Label(sig_headers, text="التاريخ", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)
        tk.Label(sig_headers, text="التوقيع", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)
        tk.Label(sig_headers, text="الصفة", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(sig_headers, text="الاسم", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        
        # Add 3 rows for signatures
        for i in range(3):
            sig_row = tk.Frame(committee_signature, bg="#4A1E6B")
            sig_row.pack(fill=tk.X, pady=2)
            tk.Entry(sig_row, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(sig_row, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(sig_row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(sig_row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

        # Add save buttons
        self.add_form_buttons(frame, entries, form_name)

    def create_certificate_logo_usage_agreement_form(self, parent, form_name):
        """إنشاء نموذج اتفاقية استخدام الشهادات والشعارات QF-09-07-01"""
        frame = self._make_scrollable_form(parent)
        
        # Store all entries
        entries = {}
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="نموذج اتفاقية استخدام الشهادات والشعارات", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-07-01", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: بيانات الطرف المستفيد
        beneficiary_info = tk.LabelFrame(frame, text="أولًا: بيانات الطرف المستفيد", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        beneficiary_info.pack(fill=tk.X, padx=10, pady=5)
        
        fields = [
            "الاسم الكامل / اسم الجهة:",
            "رقم الشهادة / الاعتماد:",
            "البرنامج / المجال المعتمد:",
            "تاريخ الاعتماد:",
            "مدة صلاحية الشهادة:"
        ]
        
        for field in fields:
            row = tk.Frame(beneficiary_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            if "تاريخ" in field:
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=50, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ثانيًا: شروط وأحكام استخدام الشهادة / الشعار
        terms_conditions = tk.LabelFrame(frame, text="ثانيًا: شروط وأحكام استخدام الشهادة / الشعار", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        terms_conditions.pack(fill=tk.X, padx=10, pady=5)
        
        intro_text = "بصفتي أحد الحاصلين على شهادة / اعتماد من قبل [اسم الجهة المانحة]، أقرّ بالتزامي التام بالشروط التالية:"
        tk.Label(terms_conditions, text=intro_text, font=self.arabic_font, fg="white", bg="#4A1E6B", wraplength=800, justify='right').pack(anchor=tk.E, padx=5, pady=5)
        
        # شروط الاستخدام
        conditions = [
            ("1. الاستخدام الصحيح للشهادة / الشعار:", [
                "• لا يجوز تحريف أو تعديل الشهادة أو شعار الجهة المانحة",
                "• يجب استخدام الشعار فقط في الأنشطة المرتبطة بالمجال المعتمد"
            ]),
            ("2. عدم الإيهام أو التضليل:", [
                "• يحظر استخدام الشعار أو الشهادة بطريقة توحي بأن الجهة المانحة تصادق على منتجات أو خدمات أخرى لم يتم اعتمادها"
            ]),
            ("3. وقف الاستخدام عند انتهاء الصلاحية أو السحب:", [
                "• أتعهد بالتوقف الفوري عن استخدام الشهادة أو الشعار في حال انتهاء صلاحية الاعتماد أو سحبه لأي سبب"
            ]),
            ("4. المراجعة والرقابة:", [
                "• أقرّ بحق الجهة المانحة في مراجعة استخدامي للشهادة / الشعار واتخاذ الإجراءات المناسبة في حال حدوث مخالفة"
            ]),
            ("5. العواقب القانونية:", [
                "• في حال مخالفة شروط هذه الاتفاقية، أتحمل كامل المسؤولية القانونية والإدارية"
            ])
        ]
        
        for title, items in conditions:
            condition_frame = tk.Frame(terms_conditions, bg="#4A1E6B")
            condition_frame.pack(fill=tk.X, pady=5)
            tk.Label(condition_frame, text=title, font=self.arabic_font_bold, fg="gold", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
            for item in items:
                tk.Label(condition_frame, text=item, font=self.arabic_font, fg="white", bg="#4A1E6B", wraplength=750, justify='right').pack(anchor=tk.E, padx=20, pady=1)

        # ثالثًا: توقيع الطرفين
        signatures = tk.LabelFrame(frame, text="ثالثًا: توقيع الطرفين", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        signatures.pack(fill=tk.X, padx=10, pady=5)
        
        # الطرف المستفيد
        beneficiary_sig = tk.LabelFrame(signatures, text="الطرف المستفيد", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        beneficiary_sig.pack(fill=tk.X, padx=5, pady=5)
        
        ben_fields = ["الاسم:", "التوقيع:", "التاريخ:"]
        for field in ben_fields:
            row = tk.Frame(beneficiary_sig, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=5)
            if field == "التاريخ:":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ممثل الجهة المانحة
        grantor_sig = tk.LabelFrame(signatures, text="ممثل الجهة المانحة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        grantor_sig.pack(fill=tk.X, padx=5, pady=5)
        
        grantor_fields = ["الاسم:", "الوظيفة:", "التوقيع:", "التاريخ:"]
        for field in grantor_fields:
            row = tk.Frame(grantor_sig, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=5)
            if field == "التاريخ:":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # Add save buttons
        self.add_form_buttons(frame, entries, form_name)

    def create_misuse_report_form(self, parent, form_name):
        """إنشاء تقرير حالة إساءة الاستخدام QF-09-07-02"""
        frame = self._make_scrollable_form(parent)
        
        # Store all entries
        entries = {}
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="تقرير حالة إساءة استخدام شهادة / شعار", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-07-02", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: معلومات عن الحالة
        case_info = tk.LabelFrame(frame, text="أولًا: معلومات عن الحالة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        case_info.pack(fill=tk.X, padx=10, pady=5)
        
        # تاريخ رصد الحالة
        date_row = tk.Frame(case_info, bg="#4A1E6B")
        date_row.pack(fill=tk.X, pady=2)
        tk.Label(date_row, text="تاريخ رصد الحالة / الإبلاغ:", font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
        date_frame = tk.Frame(date_row, bg="#4A1E6B")
        date_frame.pack(side=tk.RIGHT, padx=5)
        discovery_date_entries = []
        for i, label in enumerate(["يوم", "شهر", "سنة"]):
            if i > 0:
                tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            entry = tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center')
            entry.pack(side=tk.RIGHT)
            discovery_date_entries.append(entry)
        entries['تاريخ_رصد_الحالة'] = discovery_date_entries

        # طريقة الاكتشاف
        discovery_frame = tk.Frame(case_info, bg="#4A1E6B")
        discovery_frame.pack(fill=tk.X, pady=5)
        tk.Label(discovery_frame, text="طريقة الاكتشاف:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        discovery_methods = ["بلاغ", "مراجعة دورية", "متابعة على مواقع التواصل / الإنترنت", "أخرى"]
        for method in discovery_methods:
            method_frame = tk.Frame(discovery_frame, bg="#4A1E6B")
            method_frame.pack(anchor=tk.E, padx=20, pady=1)
            var = tk.BooleanVar()
            checkbox = tk.Checkbutton(method_frame, text=method, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361")
            checkbox.pack(side=tk.RIGHT)
            entries[f"طريقة_الاكتشاف_{method}"] = var
            if method == "أخرى":
                entry = tk.Entry(method_frame, width=20, font=self.arabic_font)
                entry.pack(side=tk.RIGHT, padx=5)
                entries["طريقة_الاكتشاف_أخرى_تفاصيل"] = entry

        # مصدر البلاغ
        source_row = tk.Frame(case_info, bg="#4A1E6B")
        source_row.pack(fill=tk.X, pady=2)
        tk.Label(source_row, text="مصدر البلاغ (إن وُجد):", font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
        source_entry = tk.Entry(source_row, width=50, font=self.arabic_font)
        source_entry.pack(side=tk.RIGHT, padx=5)
        entries['مصدر_البلاغ'] = source_entry

        # ثانيًا: بيانات الجهة أو الفرد محل البلاغ
        subject_info = tk.LabelFrame(frame, text="ثانيًا: بيانات الجهة أو الفرد محل البلاغ", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        subject_info.pack(fill=tk.X, padx=10, pady=5)
        
        subject_fields = [
            "الاسم الكامل / اسم الجهة:",
            "رقم الشهادة / الاعتماد (إن وُجد):",
            "عنوان / وسيلة التواصل:"
        ]
        
        for field in subject_fields:
            row = tk.Frame(subject_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            entry = tk.Entry(row, width=50, font=self.arabic_font)
            entry.pack(side=tk.RIGHT, padx=5)
            entries[field.replace(":", "")] = entry

        # علاقة الجهة بالاعتماد السابق
        relation_frame = tk.Frame(subject_info, bg="#4A1E6B")
        relation_frame.pack(fill=tk.X, pady=5)
        tk.Label(relation_frame, text="علاقة الجهة بالاعتماد السابق:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        relations = ["جهة معتمدة حاليًا", "جهة منتهية الاعتماد", "لم تحصل على اعتماد مسبق"]
        for relation in relations:
            var = tk.BooleanVar()
            checkbox = tk.Checkbutton(relation_frame, text=relation, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361")
            checkbox.pack(anchor=tk.E, padx=20, pady=1)
            entries[f"علاقة_الجهة_{relation}"] = var

        # ثالثًا: وصف الحالة
        case_description = tk.LabelFrame(frame, text="ثالثًا: وصف الحالة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        case_description.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(case_description, text="يرجى وصف حالة إساءة الاستخدام بشكل واضح:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5, pady=5)
        case_text = tk.Text(case_description, height=5, width=80, font=self.arabic_font)
        case_text.pack(padx=10, pady=5)
        entries['وصف_الحالة'] = case_text
        
        example_text = "مثال: استخدام شعار الجهة المانحة على موقع إلكتروني دون حصول على اعتماد، أو عرض شهادة منتهية الصلاحية في مواد دعائية."
        tk.Label(case_description, text=example_text, font=self.arabic_font, fg="lightgray", bg="#4A1E6B", wraplength=800, justify='right').pack(anchor=tk.E, padx=5, pady=2)

        # رابعًا: الأدلة المرفقة
        evidence = tk.LabelFrame(frame, text="رابعًا: الأدلة المرفقة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        evidence.pack(fill=tk.X, padx=10, pady=5)
        
        evidences = [
            "صورة / نسخة من الشهادة المستخدمة",
            "رابط إلكتروني",
            "مطبوعة دعائية أو إعلان",
            "لقطات شاشة",
            "أخرى"
        ]
        
        for ev in evidences:
            ev_frame = tk.Frame(evidence, bg="#4A1E6B")
            ev_frame.pack(anchor=tk.E, padx=20, pady=2)
            var = tk.BooleanVar()
            checkbox = tk.Checkbutton(ev_frame, text=ev, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361")
            checkbox.pack(side=tk.RIGHT)
            entries[f"دليل_{ev}"] = var
            if ev == "أخرى":
                entry = tk.Entry(ev_frame, width=25, font=self.arabic_font)
                entry.pack(side=tk.RIGHT, padx=5)
                entries["دليل_أخرى_تفاصيل"] = entry

        # خامسًا: الإجراء المتخذ من قبل الجهة المانحة
        actions_taken = tk.LabelFrame(frame, text="خامسًا: الإجراء المتخذ من قبل الجهة المانحة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        actions_taken.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        headers = tk.Frame(actions_taken, bg="#4A1E6B")
        headers.pack(fill=tk.X, pady=5)
        tk.Label(headers, text="ملاحظات", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="التاريخ", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=12).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="تم (✓)", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=10).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="الإجراء", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
        
        actions = [
            "التواصل مع الجهة المخالِفة",
            "إرسال إشعار رسمي بالإيقاف",
            "تحويل الحالة للشؤون القانونية",
            "تعليق / سحب الشهادة (إن وُجدت)",
            "توثيق الحالة في سجل المخالفات"
        ]
        
        action_entries = []
        for action in actions:
            row = tk.Frame(actions_taken, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            notes_entry = tk.Entry(row, width=20, font=self.arabic_font)
            notes_entry.pack(side=tk.RIGHT, padx=1)
            date_entry = tk.Entry(row, width=12, font=self.arabic_font)
            date_entry.pack(side=tk.RIGHT, padx=1)
            done_var = tk.BooleanVar()
            done_checkbox = tk.Checkbutton(row, variable=done_var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361", width=10)
            done_checkbox.pack(side=tk.RIGHT, padx=1)
            tk.Label(row, text=action, font=self.arabic_font, fg="white", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
            action_entries.append({
                'إجراء': action,
                'تم': done_var,
                'تاريخ': date_entry,
                'ملاحظات': notes_entry
            })
        entries['الإجراءات_المتخذة'] = action_entries

        # سادسًا: توقيع المسؤول
        responsible_signature = tk.LabelFrame(frame, text="سادسًا: توقيع المسؤول", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        responsible_signature.pack(fill=tk.X, padx=10, pady=5)
        
        signature_fields = ["الاسم:", "الصفة / الوظيفة:", "التوقيع:", "التاريخ:"]
        for field in signature_fields:
            row = tk.Frame(responsible_signature, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=5)
            if field == "التاريخ:":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                signature_date_entries = []
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    entry = tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center')
                    entry.pack(side=tk.RIGHT)
                    signature_date_entries.append(entry)
                entries['المسؤول_التاريخ'] = signature_date_entries
            else:
                entry = tk.Entry(row, width=30, font=self.arabic_font)
                entry.pack(side=tk.RIGHT, padx=5)
                entries[f'المسؤول_{field.replace(":", "")}'] = entry

        # Add save buttons
        self.add_form_buttons(frame, entries, form_name)

    def create_proper_usage_review_form(self, parent, form_name):
        """إنشاء سجل مراجعة الاستخدام السليم للشهادات والعلامات QF-09-07-03"""
        frame = self._make_scrollable_form(parent)
        
        # Store all entries
        entries = {}
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="سجل مراجعة الاستخدام السليم للشهادات والعلامات", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-07-03", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: بيانات الجهة محل المراجعة
        entity_info = tk.LabelFrame(frame, text="أولًا: بيانات الجهة محل المراجعة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        entity_info.pack(fill=tk.X, padx=10, pady=5)
        
        fields = [
            "الاسم الكامل / اسم الجهة:",
            "رقم الشهادة / الاعتماد:",
            "نوع الشهادة / المجال:",
            "تاريخ منح الشهادة:",
            "تاريخ انتهاء الصلاحية (إن وُجد):"
        ]
        
        for field in fields:
            row = tk.Frame(entity_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            if "تاريخ" in field:
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=50, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ثانيًا: وسائط الاستخدام التي تمت مراجعتها
        usage_media = tk.LabelFrame(frame, text="ثانيًا: وسائط الاستخدام التي تمت مراجعتها", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        usage_media.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        headers = tk.Frame(usage_media, bg="#4A1E6B")
        headers.pack(fill=tk.X, pady=5)
        tk.Label(headers, text="ملاحظات", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="تم التحقق", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="الرابط / العنوان", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="وسيلة الاستخدام", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        
        media_types = [
            "موقع إلكتروني",
            "وسائل تواصل اجتماعي",
            "مستندات رسمية",
            "مطبوعات دعائية",
            "أخرى (وضح):"
        ]
        
        for media in media_types:
            row = tk.Frame(usage_media, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            tk.Entry(row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            
            # عمود تم التحقق
            check_frame = tk.Frame(row, bg="#4A1E6B")
            check_frame.pack(side=tk.RIGHT, padx=1)
            var_yes = tk.BooleanVar()
            var_no = tk.BooleanVar()
            tk.Checkbutton(check_frame, text="لا", variable=var_no, font=("Arial", 8), fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=2)
            tk.Checkbutton(check_frame, text="نعم", variable=var_yes, font=("Arial", 8), fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=2)
            
            tk.Entry(row, width=25, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Label(row, text=media, font=self.arabic_font, fg="white", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)

        # ثالثًا: عناصر المراجعة
        review_elements = tk.LabelFrame(frame, text="ثالثًا: عناصر المراجعة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        review_elements.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        review_headers = tk.Frame(review_elements, bg="#4A1E6B")
        review_headers.pack(fill=tk.X, pady=5)
        tk.Label(review_headers, text="ملاحظات", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
        tk.Label(review_headers, text="النتيجة (✓/✗)", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=1)
        tk.Label(review_headers, text="بند المراجعة", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=1)
        tk.Label(review_headers, text="م", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)
        
        review_items = [
            "استخدام الشهادة ضمن المدة السارية",
            "عدم تعديل أو تحريف الشعار",
            "عدم استخدام الشهادة للإيهام بجهات أو خدمات غير معتمدة",
            "ذكر اسم الجهة المانحة بشكل صحيح",
            "توقّف الاستخدام عند انتهاء / سحب الاعتماد"
        ]
        
        for i, item in enumerate(review_items):
            row = tk.Frame(review_elements, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            tk.Entry(row, width=25, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Label(row, text=item, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=1)
            tk.Label(row, text=str(i+1), font=self.arabic_font, fg="white", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)

        # رابعًا: تقييم الاستخدام العام
        overall_assessment = tk.LabelFrame(frame, text="رابعًا: تقييم الاستخدام العام", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        overall_assessment.pack(fill=tk.X, padx=10, pady=5)
        
        assessments = [
            "استخدام سليم ومتوافق بالكامل",
            "مخالفات طفيفة – تم التوجيه بالتصحيح",
            "مخالفات جوهرية – تتطلب إشعار رسمي",
            "مخالفة جسيمة – تتطلب تحقيق / إجراء قانوني"
        ]
        
        for assessment in assessments:
            var = tk.BooleanVar()
            tk.Checkbutton(overall_assessment, text=assessment, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=20, pady=2)

        # خامسًا: الإجراء المتخذ (إن وُجد)
        action_taken = tk.LabelFrame(frame, text="خامسًا: الإجراء المتخذ (إن وُجد)", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        action_taken.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Text(action_taken, height=4, width=80, font=self.arabic_font).pack(padx=10, pady=10)

        # سادسًا: توقيع المراجع
        reviewer_signature = tk.LabelFrame(frame, text="سادسًا: توقيع المراجع", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        reviewer_signature.pack(fill=tk.X, padx=10, pady=5)
        
        signature_fields = ["الاسم:", "الصفة / الوظيفة:", "التوقيع:", "التاريخ:"]
        for field in signature_fields:
            row = tk.Frame(reviewer_signature, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=5)
            if field == "التاريخ:":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # Add save buttons
        self.add_form_buttons(frame, entries, form_name)

    def create_appeal_submission_form(self, parent, form_name):
        """إنشاء نموذج تقديم التظلم QF-09-08-01"""
        frame = self._make_scrollable_form(parent)
        
        # Store all entries
        entries = {}
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="نموذج تقديم التظلم", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-08-01", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: بيانات مقدم التظلم
        appellant_info = tk.LabelFrame(frame, text="أولًا: بيانات مقدم التظلم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        appellant_info.pack(fill=tk.X, padx=10, pady=5)
        
        # الحقول الأساسية
        basic_fields = [
            "الاسم الكامل / اسم الجهة:",
            "رقم الهوية / رقم الاعتماد / رقم الطلب:",
            "نوع البرنامج / الشهادة:"
        ]
        
        for field in basic_fields:
            row = tk.Frame(appellant_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            tk.Entry(row, width=50, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # بيانات التواصل
        contact_frame = tk.LabelFrame(appellant_info, text="بيانات التواصل", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        contact_frame.pack(fill=tk.X, padx=5, pady=5)
        
        contact_fields = ["الهاتف:", "البريد الإلكتروني:"]
        for field in contact_fields:
            row = tk.Frame(contact_frame, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=5)
            tk.Entry(row, width=40, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ثانيًا: نوع التظلم
        appeal_type = tk.LabelFrame(frame, text="ثانيًا: نوع التظلم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        appeal_type.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(appeal_type, text="يرجى تحديد نوع التظلم بوضع علامة (✓):", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5, pady=5)
        
        appeal_types = [
            "نتيجة تقييم أو امتحان",
            "قرار رفض اعتماد",
            "قرار تعليق / سحب / تقليص الشهادة",
            "تأخر في إصدار الشهادة / الخدمة",
            "أخرى"
        ]
        
        for appeal in appeal_types:
            appeal_frame = tk.Frame(appeal_type, bg="#4A1E6B")
            appeal_frame.pack(anchor=tk.E, padx=20, pady=2)
            var = tk.BooleanVar()
            tk.Checkbutton(appeal_frame, text=appeal, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if appeal == "أخرى":
                tk.Entry(appeal_frame, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ثالثًا: تفاصيل التظلم
        appeal_details = tk.LabelFrame(frame, text="ثالثًا: تفاصيل التظلم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        appeal_details.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(appeal_details, text="يرجى شرح التظلم بالتفصيل مع ذكر القرار أو الواقعة محل الاعتراض:", 
                font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5, pady=5)
        tk.Text(appeal_details, height=6, width=80, font=self.arabic_font).pack(padx=10, pady=10)

        # رابعًا: المستندات الداعمة المرفقة
        supporting_docs = tk.LabelFrame(frame, text="رابعًا: المستندات الداعمة المرفقة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        supporting_docs.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(supporting_docs, text="يرجى وضع علامة (✓) بجوار المستندات المرفقة:", 
                font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5, pady=5)
        
        documents = [
            "نسخة من القرار أو النتيجة المعترض عليها",
            "مستندات / إثباتات داعمة للتظلم",
            "نسخة من الشهادة (إن وُجدت)",
            "أخرى"
        ]
        
        for doc in documents:
            doc_frame = tk.Frame(supporting_docs, bg="#4A1E6B")
            doc_frame.pack(anchor=tk.E, padx=20, pady=2)
            var = tk.BooleanVar()
            tk.Checkbutton(doc_frame, text=doc, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if doc == "أخرى":
                tk.Entry(doc_frame, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # خامسًا: إقرار مقدم التظلم
        appellant_declaration = tk.LabelFrame(frame, text="خامسًا: إقرار مقدم التظلم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        appellant_declaration.pack(fill=tk.X, padx=10, pady=5)
        
        declaration_text = "أقرّ بأن جميع المعلومات الواردة في هذا النموذج صحيحة، وأتحمل كامل المسؤولية عنها، وأوافق على إجراءات التظلم وفقًا لسياسة الجهة المانحة."
        tk.Label(appellant_declaration, text=declaration_text, font=self.arabic_font, fg="white", bg="#4A1E6B", 
                wraplength=800, justify='right').pack(anchor=tk.E, padx=5, pady=10)
        
        signature_fields = ["الاسم:", "التوقيع:", "التاريخ:"]
        for field in signature_fields:
            row = tk.Frame(appellant_declaration, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=5)
            if field == "التاريخ:":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # سادسًا: للاستخدام الداخلي – لجنة التظلمات
        internal_use = tk.LabelFrame(frame, text="سادسًا: للاستخدام الداخلي – لجنة التظلمات", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        internal_use.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        headers = tk.Frame(internal_use, bg="#4A1E6B")
        headers.pack(fill=tk.X, pady=5)
        tk.Label(headers, text="ملاحظات", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="التاريخ", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=12).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="تم (✓)", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=10).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="الإجراء", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
        
        procedures = [
            "استلام الطلب",
            "مراجعة مبدئية",
            "إحالة إلى اللجنة المختصة",
            "قرار اللجنة",
            "إخطار مقدم التظلم بالقرار"
        ]
        
        for procedure in procedures:
            row = tk.Frame(internal_use, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            if procedure == "قرار اللجنة":
                decision_frame = tk.Frame(row, bg="#4A1E6B")
                decision_frame.pack(side=tk.RIGHT, padx=1)
                for decision in ["قبول", "رفض", "طلب توضيحات إضافية"]:
                    var = tk.BooleanVar()
                    tk.Checkbutton(decision_frame, text=decision, variable=var, font=("Arial", 8), fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=2)
            else:
                tk.Entry(row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=12, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Checkbutton(row, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361", width=10).pack(side=tk.RIGHT, padx=1)
            tk.Label(row, text=procedure, font=self.arabic_font, fg="white", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)

        # Add save buttons
        self.add_form_buttons(frame, entries, form_name)

    def create_appeals_records_form(self, parent, form_name):
        """إنشاء سجل التظلمات والقرارات المتخذة QF-09-08-02"""
        frame = self._make_scrollable_form(parent)
        
        # Store all entries
        entries = {}
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="سجل التظلمات والقرارات المتخذة", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-08-02", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: معلومات عامة
        general_info = tk.LabelFrame(frame, text="أولًا: معلومات عامة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        general_info.pack(fill=tk.X, padx=10, pady=5)
        
        # الفترة الزمنية
        period_row = tk.Frame(general_info, bg="#4A1E6B")
        period_row.pack(fill=tk.X, pady=2)
        tk.Label(period_row, text="الفترة الزمنية المغطاة بالسجل:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        # من
        from_frame = tk.Frame(period_row, bg="#4A1E6B")
        from_frame.pack(side=tk.RIGHT, padx=5)
        tk.Label(from_frame, text="من:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        for i, label in enumerate(["يوم", "شهر", "سنة"]):
            if i > 0:
                tk.Label(from_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(from_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
        
        # إلى
        to_frame = tk.Frame(period_row, bg="#4A1E6B")
        to_frame.pack(side=tk.RIGHT, padx=5)
        tk.Label(to_frame, text="إلى:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        for i, label in enumerate(["يوم", "شهر", "سنة"]):
            if i > 0:
                tk.Label(to_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(to_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)

        # باقي المعلومات العامة
        other_fields = [
            "اسم مسؤول السجل:",
            "الجهة المسؤولة عن البت في التظلمات:"
        ]
        
        for field in other_fields:
            row = tk.Frame(general_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            tk.Entry(row, width=50, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ثانيًا: تفاصيل التظلمات
        appeals_details = tk.LabelFrame(frame, text="ثانيًا: تفاصيل التظلمات", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        appeals_details.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        headers = tk.Frame(appeals_details, bg="#4A1E6B")
        headers.pack(fill=tk.X, pady=5)
        table_headers = ["ملاحظات", "حالة الإغلاق", "تاريخ القرار", "القرار المتخذ", "نوع التظلم", "تاريخ التقديم", "رقم الشهادة / الطلب", "اسم مقدم التظلم", "م"]
        widths = [15, 12, 12, 15, 15, 12, 18, 20, 3]
        
        for header, width in zip(table_headers, widths):
            tk.Label(headers, text=header, font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=width).pack(side=tk.RIGHT, padx=1)
        
        # إضافة 3 صفوف للبيانات
        for i in range(3):
            row = tk.Frame(appeals_details, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            
            # ملاحظات
            tk.Entry(row, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            
            # حالة الإغلاق
            status_frame = tk.Frame(row, bg="#4A1E6B")
            status_frame.pack(side=tk.RIGHT, padx=1)
            var_closed = tk.BooleanVar()
            var_open = tk.BooleanVar()
            tk.Checkbutton(status_frame, text="مفتوح", variable=var_open, font=("Arial", 8), fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=1)
            tk.Checkbutton(status_frame, text="مغلق", variable=var_closed, font=("Arial", 8), fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=1)
            
            # باقي الحقول
            for width in [12, 15, 15, 12, 18, 20]:
                tk.Entry(row, width=width, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            
            # رقم الصف
            tk.Label(row, text=str(i+1), font=self.arabic_font, fg="white", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)

        # ملاحظات أنواع التظلمات والقرارات
        notes_frame = tk.Frame(appeals_details, bg="#4A1E6B")
        notes_frame.pack(fill=tk.X, pady=5)
        tk.Label(notes_frame, text="أنواع التظلمات: نتيجة تقييم – سحب شهادة – تأخر خدمة – رفض اعتماد – أخرى", 
                font=self.arabic_font, fg="lightgray", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        tk.Label(notes_frame, text="القرار المتخذ: قبول التظلم – رفض التظلم – إعادة تقييم – تعويض – أخرى", 
                font=self.arabic_font, fg="lightgray", bg="#4A1E6B").pack(anchor=tk.E, padx=5)

        # ثالثًا: الإجراءات المتخذة
        actions_taken = tk.LabelFrame(frame, text="ثالثًا: الإجراءات المتخذة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        actions_taken.pack(fill=tk.X, padx=10, pady=5)
        
        action_questions = [
            "هل تم التحقيق الداخلي؟",
            "هل تم إشعار مقدم التظلم بالقرار؟",
            "هل تم تعديل الإجراءات الداخلية نتيجة التظلم؟"
        ]
        
        for question in action_questions:
            question_frame = tk.Frame(actions_taken, bg="#4A1E6B")
            question_frame.pack(fill=tk.X, pady=3)
            tk.Label(question_frame, text=question, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
            
            # إضافة خيارات الإجابة
            options_frame = tk.Frame(question_frame, bg="#4A1E6B")
            options_frame.pack(side=tk.RIGHT, padx=20)
            
            if "إشعار" in question:
                options = ["نعم", "لا", "جارٍ الإشعار"]
            elif "تعديل" in question:
                options = ["نعم", "لا", "تحت الدراسة"]
            else:
                options = ["نعم", "لا"]
            
            for option in options:
                var = tk.BooleanVar()
                tk.Checkbutton(options_frame, text=option, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)

        # رابعًا: توقيع مسؤول السجل
        signature = tk.LabelFrame(frame, text="رابعًا: توقيع مسؤول السجل", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        signature.pack(fill=tk.X, padx=10, pady=5)
        
        signature_fields = ["الاسم:", "الوظيفة:", "التوقيع:", "التاريخ:"]
        for field in signature_fields:
            row = tk.Frame(signature, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=5)
            if field == "التاريخ:":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # Add save buttons
        self.add_form_buttons(frame, entries, form_name)

    def create_appeals_committee_report_form(self, parent, form_name):
        """إنشاء تقرير لجنة التظلمات QF-09-08-03"""
        frame = self._make_scrollable_form(parent)
        
        # Store all entries
        entries = {}
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="تقرير لجنة التظلمات", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-08-03", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: بيانات التظلم
        appeal_data = tk.LabelFrame(frame, text="أولًا: بيانات التظلم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        appeal_data.pack(fill=tk.X, padx=10, pady=5)
        
        basic_fields = [
            "اسم مقدم التظلم / الجهة:",
            "رقم الشهادة / الطلب / الاعتماد:"
        ]
        
        for field in basic_fields:
            row = tk.Frame(appeal_data, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            tk.Entry(row, width=50, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # نوع التظلم
        appeal_type_frame = tk.Frame(appeal_data, bg="#4A1E6B")
        appeal_type_frame.pack(fill=tk.X, pady=5)
        tk.Label(appeal_type_frame, text="نوع التظلم:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        appeal_types = ["نتيجة تقييم", "قرار سحب / تعليق", "رفض اعتماد", "تأخير في الخدمة", "أخرى"]
        type_options_frame = tk.Frame(appeal_type_frame, bg="#4A1E6B")
        type_options_frame.pack(anchor=tk.E, padx=20)
        
        for appeal_type in appeal_types:
            var = tk.BooleanVar()
            option_frame = tk.Frame(type_options_frame, bg="#4A1E6B")
            option_frame.pack(side=tk.RIGHT, padx=5)
            tk.Checkbutton(option_frame, text=appeal_type, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if appeal_type == "أخرى":
                tk.Entry(option_frame, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # التواريخ
        date_fields = [
            "تاريخ تقديم التظلم:",
            "تاريخ استلام اللجنة للتظلم:"
        ]
        
        for field in date_fields:
            row = tk.Frame(appeal_data, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            date_frame = tk.Frame(row, bg="#4A1E6B")
            date_frame.pack(side=tk.RIGHT, padx=5)
            for i, label in enumerate(["يوم", "شهر", "سنة"]):
                if i > 0:
                    tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)

        # ثانيًا: أعضاء اللجنة
        committee_members = tk.LabelFrame(frame, text="ثانيًا: أعضاء اللجنة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        committee_members.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين جدول الأعضاء
        member_headers = tk.Frame(committee_members, bg="#4A1E6B")
        member_headers.pack(fill=tk.X, pady=5)
        tk.Label(member_headers, text="التوقيع", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(member_headers, text="الوظيفة", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
        tk.Label(member_headers, text="الاسم", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
        
        # إضافة 3 صفوف للأعضاء
        for i in range(3):
            member_row = tk.Frame(committee_members, bg="#4A1E6B")
            member_row.pack(fill=tk.X, pady=2)
            tk.Entry(member_row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(member_row, width=25, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(member_row, width=25, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)

        # ثالثًا: إجراءات دراسة التظلم
        study_procedures = tk.LabelFrame(frame, text="ثالثًا: إجراءات دراسة التظلم", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        study_procedures.pack(fill=tk.X, padx=10, pady=5)
        
        procedure_questions = [
            "تم الاطلاع على المستندات المقدمة:",
            "تم الاستماع إلى مقدم التظلم (عند الحاجة):",
            "تم الرجوع إلى السجلات والتقييمات السابقة:",
            "تم التواصل مع الأقسام المعنية:"
        ]
        
        for question in procedure_questions:
            question_frame = tk.Frame(study_procedures, bg="#4A1E6B")
            question_frame.pack(fill=tk.X, pady=2)
            tk.Label(question_frame, text=question, font=self.arabic_font, fg="white", bg="#4A1E6B", width=40).pack(side=tk.RIGHT, padx=5)
            
            options_frame = tk.Frame(question_frame, bg="#4A1E6B")
            options_frame.pack(side=tk.RIGHT, padx=10)
            var_yes = tk.BooleanVar()
            var_no = tk.BooleanVar()
            tk.Checkbutton(options_frame, text="لا", variable=var_no, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)
            tk.Checkbutton(options_frame, text="نعم", variable=var_yes, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)

        # مستندات داعمة مرفقة
        supporting_docs_frame = tk.Frame(study_procedures, bg="#4A1E6B")
        supporting_docs_frame.pack(fill=tk.X, pady=5)
        tk.Label(supporting_docs_frame, text="مستندات داعمة مرفقة:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        docs = ["نسخة من القرار", "نتائج التقييم", "تقارير", "أخرى"]
        docs_options_frame = tk.Frame(supporting_docs_frame, bg="#4A1E6B")
        docs_options_frame.pack(anchor=tk.E, padx=20)
        
        for doc in docs:
            doc_frame = tk.Frame(docs_options_frame, bg="#4A1E6B")
            doc_frame.pack(side=tk.RIGHT, padx=3)
            var = tk.BooleanVar()
            tk.Checkbutton(doc_frame, text=doc, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if doc == "أخرى":
                tk.Entry(doc_frame, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # رابعًا: نتائج الدراسة
        study_results = tk.LabelFrame(frame, text="رابعًا: نتائج الدراسة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        study_results.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Text(study_results, height=5, width=80, font=self.arabic_font).pack(padx=10, pady=10)

        # خامسًا: قرار اللجنة
        committee_decision = tk.LabelFrame(frame, text="خامسًا: قرار اللجنة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        committee_decision.pack(fill=tk.X, padx=10, pady=5)
        
        decisions = [
            "قبول التظلم واتخاذ الإجراء التالي:",
            "رفض التظلم مع توضيح الأسباب التالية:",
            "طلب معلومات / مستندات إضافية من مقدم التظلم",
            "أخرى:"
        ]
        
        for decision in decisions:
            decision_frame = tk.Frame(committee_decision, bg="#4A1E6B")
            decision_frame.pack(fill=tk.X, pady=2)
            var = tk.BooleanVar()
            tk.Checkbutton(decision_frame, text=decision, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(anchor=tk.E, padx=5)
            if ":" in decision:
                tk.Entry(decision_frame, width=50, font=self.arabic_font).pack(anchor=tk.E, padx=30, pady=2)

        # تاريخ القرار وإشعار المتظلم
        decision_details = tk.Frame(committee_decision, bg="#4A1E6B")
        decision_details.pack(fill=tk.X, pady=5)
        
        # تاريخ القرار
        date_row = tk.Frame(decision_details, bg="#4A1E6B")
        date_row.pack(fill=tk.X, pady=2)
        tk.Label(date_row, text="تاريخ القرار:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        date_frame = tk.Frame(date_row, bg="#4A1E6B")
        date_frame.pack(side=tk.RIGHT, padx=5)
        for i, label in enumerate(["يوم", "شهر", "سنة"]):
            if i > 0:
                tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)

        # إشعار المتظلم
        notification_row = tk.Frame(decision_details, bg="#4A1E6B")
        notification_row.pack(fill=tk.X, pady=2)
        tk.Label(notification_row, text="هل تم إخطار مقدم التظلم بالنتيجة؟", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        notification_options = tk.Frame(notification_row, bg="#4A1E6B")
        notification_options.pack(side=tk.RIGHT, padx=20)
        for option in ["نعم", "لا", "جارٍ الإشعار"]:
            var = tk.BooleanVar()
            tk.Checkbutton(notification_options, text=option, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)

        # سادسًا: توقيع رئيس اللجنة
        chairman_signature = tk.LabelFrame(frame, text="سادسًا: توقيع رئيس اللجنة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        chairman_signature.pack(fill=tk.X, padx=10, pady=5)
        
        signature_fields = ["الاسم:", "الوظيفة:", "التوقيع:", "التاريخ:"]
        for field in signature_fields:
            row = tk.Frame(chairman_signature, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=5)
            if field == "التاريخ:":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # Add save buttons
        self.add_form_buttons(frame, entries, form_name)

    def create_complaint_submission_form(self, parent, form_name):
        """إنشاء نموذج تقديم الشكوى QF-09-09-01"""
        frame = self._make_scrollable_form(parent)
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="نموذج تقديم شكوى", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-09-01", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: بيانات مقدم الشكوى
        complainant_info = tk.LabelFrame(frame, text="أولًا: بيانات مقدم الشكوى", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        complainant_info.pack(fill=tk.X, padx=10, pady=5)
        
        # الحقول الأساسية
        basic_fields = [
            "الاسم الكامل / اسم الجهة:",
            "رقم الهوية / الطلب / الشهادة (إن وُجد):"
        ]
        
        for field in basic_fields:
            row = tk.Frame(complainant_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            tk.Entry(row, width=50, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # نوع العلاقة بالجهة
        relation_frame = tk.Frame(complainant_info, bg="#4A1E6B")
        relation_frame.pack(fill=tk.X, pady=5)
        tk.Label(relation_frame, text="نوع العلاقة بالجهة:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        relation_types = ["متقدم للاعتماد", "جهة معتمدة", "مدرب", "ممتحن", "أخرى"]
        relations_options_frame = tk.Frame(relation_frame, bg="#4A1E6B")
        relations_options_frame.pack(anchor=tk.E, padx=20)
        
        for relation in relation_types:
            relation_option_frame = tk.Frame(relations_options_frame, bg="#4A1E6B")
            relation_option_frame.pack(side=tk.RIGHT, padx=5)
            var = tk.BooleanVar()
            tk.Checkbutton(relation_option_frame, text=relation, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if relation == "أخرى":
                tk.Entry(relation_option_frame, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # بيانات التواصل
        contact_frame = tk.LabelFrame(complainant_info, text="بيانات التواصل", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        contact_frame.pack(fill=tk.X, padx=5, pady=5)
        
        contact_fields = ["الهاتف:", "البريد الإلكتروني:"]
        for field in contact_fields:
            row = tk.Frame(contact_frame, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=5)
            tk.Entry(row, width=40, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ثانيًا: موضوع الشكوى
        complaint_subject = tk.LabelFrame(frame, text="ثانيًا: موضوع الشكوى", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        complaint_subject.pack(fill=tk.X, padx=10, pady=5)
        
        # تاريخ ومكان الواقعة
        incident_fields = [
            ("تاريخ الواقعة / المشكلة:", "date"),
            ("مكان الواقعة (إن وُجد):", "text")
        ]
        
        for field, field_type in incident_fields:
            row = tk.Frame(complaint_subject, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=5)
            if field_type == "date":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=40, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # نوع الشكوى
        complaint_type_frame = tk.Frame(complaint_subject, bg="#4A1E6B")
        complaint_type_frame.pack(fill=tk.X, pady=5)
        tk.Label(complaint_type_frame, text="نوع الشكوى:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        complaint_types = ["سلوك موظف", "تأخير في الخدمة", "قرار غير عادل", "مشكلة تقنية", "أخرى"]
        types_options_frame = tk.Frame(complaint_type_frame, bg="#4A1E6B")
        types_options_frame.pack(anchor=tk.E, padx=20)
        
        for complaint_type in complaint_types:
            type_option_frame = tk.Frame(types_options_frame, bg="#4A1E6B")
            type_option_frame.pack(side=tk.RIGHT, padx=5)
            var = tk.BooleanVar()
            tk.Checkbutton(type_option_frame, text=complaint_type, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if complaint_type == "أخرى":
                tk.Entry(type_option_frame, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ثالثًا: تفاصيل الشكوى
        complaint_details = tk.LabelFrame(frame, text="ثالثًا: تفاصيل الشكوى", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        complaint_details.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(complaint_details, text="يرجى شرح تفاصيل الشكوى بوضوح ودقة:", 
                font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5, pady=5)
        tk.Text(complaint_details, height=6, width=80, font=self.arabic_font).pack(padx=10, pady=10)

        # رابعًا: المستندات المرفقة
        supporting_docs = tk.LabelFrame(frame, text="رابعًا: المستندات المرفقة (إن وُجدت)", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        supporting_docs.pack(fill=tk.X, padx=10, pady=5)
        
        documents = [
            "مراسلات سابقة",
            "صور أو مستندات داعمة",
            "قرارات أو تقارير ذات صلة",
            "أخرى"
        ]
        
        for doc in documents:
            doc_frame = tk.Frame(supporting_docs, bg="#4A1E6B")
            doc_frame.pack(anchor=tk.E, padx=20, pady=2)
            var = tk.BooleanVar()
            tk.Checkbutton(doc_frame, text=doc, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if doc == "أخرى":
                tk.Entry(doc_frame, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # خامسًا: التوقعات من الجهة
        expectations = tk.LabelFrame(frame, text="خامسًا: التوقعات من الجهة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        expectations.pack(fill=tk.X, padx=10, pady=5)
        
        expectation_types = ["الاعتذار الرسمي", "إعادة النظر في القرار", "تصحيح الإجراء", "تحقيق داخلي", "أخرى"]
        
        for expectation in expectation_types:
            expectation_frame = tk.Frame(expectations, bg="#4A1E6B")
            expectation_frame.pack(anchor=tk.E, padx=20, pady=2)
            var = tk.BooleanVar()
            tk.Checkbutton(expectation_frame, text=expectation, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if expectation == "أخرى":
                tk.Entry(expectation_frame, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # سادسًا: توقيع مقدم الشكوى
        complainant_signature = tk.LabelFrame(frame, text="سادسًا: توقيع مقدم الشكوى", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        complainant_signature.pack(fill=tk.X, padx=10, pady=5)
        
        signature_fields = ["الاسم:", "التوقيع:", "التاريخ:"]
        for field in signature_fields:
            row = tk.Frame(complainant_signature, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=5)
            if field == "التاريخ:":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # سابعًا: للاستخدام الداخلي – قسم الشكاوى
        internal_use = tk.LabelFrame(frame, text="سابعًا: للاستخدام الداخلي – قسم الشكاوى", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        internal_use.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        headers = tk.Frame(internal_use, bg="#4A1E6B")
        headers.pack(fill=tk.X, pady=5)
        tk.Label(headers, text="ملاحظات", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="التاريخ", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=12).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="تم (✓)", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=10).pack(side=tk.RIGHT, padx=1)
        tk.Label(headers, text="الإجراء", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
        
        procedures = [
            "استلام الشكوى",
            "تحويل إلى الجهة المختصة",
            "دراسة الشكوى",
            "اتخاذ القرار / الإجراء",
            "إخطار مقدم الشكوى"
        ]
        
        for procedure in procedures:
            row = tk.Frame(internal_use, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            tk.Entry(row, width=20, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Entry(row, width=12, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            tk.Checkbutton(row, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361", width=10).pack(side=tk.RIGHT, padx=1)
            tk.Label(row, text=procedure, font=self.arabic_font, fg="white", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)

        # إغلاق الشكوى
        closure_frame = tk.Frame(internal_use, bg="#4A1E6B")
        closure_frame.pack(fill=tk.X, pady=5)
        tk.Label(closure_frame, text="إغلاق الشكوى:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        var_yes = tk.BooleanVar()
        var_no = tk.BooleanVar()
        tk.Checkbutton(closure_frame, text="لا", variable=var_no, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)
        tk.Checkbutton(closure_frame, text="نعم", variable=var_yes, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)

    def create_complaints_records_form(self, parent, form_name):
        """إنشاء سجل الشكاوى والقرارات المتخذة QF-09-09-02"""
        frame = self._make_scrollable_form(parent)
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="سجل الشكاوى والقرارات المتخذة", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-09-02", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: معلومات عامة
        general_info = tk.LabelFrame(frame, text="أولًا: معلومات عامة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        general_info.pack(fill=tk.X, padx=10, pady=5)
        
        # الفترة الزمنية
        period_row = tk.Frame(general_info, bg="#4A1E6B")
        period_row.pack(fill=tk.X, pady=2)
        tk.Label(period_row, text="الفترة الزمنية المغطاة بالسجل:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        # من
        from_frame = tk.Frame(period_row, bg="#4A1E6B")
        from_frame.pack(side=tk.RIGHT, padx=5)
        tk.Label(from_frame, text="من:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        for i, label in enumerate(["يوم", "شهر", "سنة"]):
            if i > 0:
                tk.Label(from_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(from_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
        
        # إلى
        to_frame = tk.Frame(period_row, bg="#4A1E6B")
        to_frame.pack(side=tk.RIGHT, padx=5)
        tk.Label(to_frame, text="إلى:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
        for i, label in enumerate(["يوم", "شهر", "سنة"]):
            if i > 0:
                tk.Label(to_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            tk.Entry(to_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)

        # باقي المعلومات العامة
        other_fields = [
            "اسم مسؤول السجل:",
            "الجهة المسؤولة عن معالجة الشكاوى:"
        ]
        
        for field in other_fields:
            row = tk.Frame(general_info, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            tk.Entry(row, width=50, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # ثانيًا: جدول الشكاوى
        complaints_table = tk.LabelFrame(frame, text="ثانيًا: جدول الشكاوى", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        complaints_table.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين الجدول
        headers = tk.Frame(complaints_table, bg="#4A1E6B")
        headers.pack(fill=tk.X, pady=5)
        table_headers = ["ملاحظات", "حالة الشكوى", "تاريخ الإجراء", "الإجراء المتخذ", "رقم الشهادة / الطلب", "نوع الشكوى", "تاريخ الشكوى", "اسم مقدم الشكوى", "م"]
        widths = [15, 15, 12, 15, 18, 15, 12, 20, 3]
        
        for header, width in zip(table_headers, widths):
            tk.Label(headers, text=header, font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=width).pack(side=tk.RIGHT, padx=1)
        
        # إضافة 3 صفوف للبيانات
        for i in range(3):
            row = tk.Frame(complaints_table, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=1)
            
            # ملاحظات
            tk.Entry(row, width=15, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            
            # حالة الشكوى
            status_frame = tk.Frame(row, bg="#4A1E6B")
            status_frame.pack(side=tk.RIGHT, padx=1)
            var_closed = tk.BooleanVar()
            var_open = tk.BooleanVar()
            tk.Checkbutton(status_frame, text="مغلقة", variable=var_closed, font=("Arial", 8), fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=1)
            tk.Checkbutton(status_frame, text="مفتوحة", variable=var_open, font=("Arial", 8), fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=1)
            
            # باقي الحقول
            for width in [12, 15, 18, 15, 12, 20]:
                tk.Entry(row, width=width, font=self.arabic_font).pack(side=tk.RIGHT, padx=1)
            
            # رقم الصف
            tk.Label(row, text=str(i+1), font=self.arabic_font, fg="white", bg="#4A1E6B", width=3).pack(side=tk.RIGHT, padx=1)

        # ثالثًا: تصنيف أنواع الشكاوى
        complaints_classification = tk.LabelFrame(frame, text="ثالثًا: تصنيف أنواع الشكاوى (للاستخدام الإحصائي والتحليلي)", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        complaints_classification.pack(fill=tk.X, padx=10, pady=5)
        
        complaint_categories = [
            "تأخير في الخدمة",
            "سلوك غير مهني",
            "أخطاء إدارية",
            "قرارات غير عادلة",
            "مشكلات تقنية",
            "أخرى"
        ]
        
        for category in complaint_categories:
            category_frame = tk.Frame(complaints_classification, bg="#4A1E6B")
            category_frame.pack(anchor=tk.E, padx=20, pady=2)
            var = tk.BooleanVar()
            tk.Checkbutton(category_frame, text=category, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT)
            if category == "أخرى":
                tk.Entry(category_frame, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

        # رابعًا: المتابعة والتقارير الدورية
        follow_up = tk.LabelFrame(frame, text="رابعًا: المتابعة والتقارير الدورية", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        follow_up.pack(fill=tk.X, padx=10, pady=5)
        
        follow_up_questions = [
            "هل تم الرد على جميع الشكاوى في المدة المحددة؟",
            "هل تم تعديل الإجراءات الداخلية استجابةً لأي شكوى؟",
            "هل تم تصعيد أي شكوى إلى الإدارة العليا؟"
        ]
        
        for question in follow_up_questions:
            question_frame = tk.Frame(follow_up, bg="#4A1E6B")
            question_frame.pack(fill=tk.X, pady=3)
            tk.Label(question_frame, text=question, font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
            
            options_frame = tk.Frame(question_frame, bg="#4A1E6B")
            options_frame.pack(side=tk.RIGHT, padx=20)
            var_yes = tk.BooleanVar()
            var_no = tk.BooleanVar()
            tk.Checkbutton(options_frame, text="لا", variable=var_no, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)
            tk.Checkbutton(options_frame, text="نعم", variable=var_yes, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361").pack(side=tk.RIGHT, padx=5)

        # ملاحظات حول الشكاوى المتكررة
        notes_frame = tk.Frame(follow_up, bg="#4A1E6B")
        notes_frame.pack(fill=tk.X, pady=5)
        tk.Label(notes_frame, text="ملاحظات حول الشكاوى المتكررة:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        tk.Text(notes_frame, height=3, width=80, font=self.arabic_font).pack(padx=10, pady=5)

        # خامسًا: توقيع مسؤول السجل
        signature = tk.LabelFrame(frame, text="خامسًا: توقيع مسؤول السجل", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        signature.pack(fill=tk.X, padx=10, pady=5)
        
        signature_fields = ["الاسم:", "الوظيفة:", "التوقيع:", "التاريخ:"]
        for field in signature_fields:
            row = tk.Frame(signature, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=5)
            if field == "التاريخ:":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center').pack(side=tk.RIGHT)
            else:
                tk.Entry(row, width=30, font=self.arabic_font).pack(side=tk.RIGHT, padx=5)

    def create_complaints_committee_report_form(self, parent, form_name):
        """إنشاء تقرير لجنة معالجة الشكوى QF-09-09-03"""
        frame = self._make_scrollable_form(parent)
        
        # Store all entries
        entries = {}
        
        # Header
        header = tk.Frame(frame, bg="#4A1E6B")
        header.pack(fill=tk.X, pady=10)
        tk.Label(header, text="تقرير لجنة معالجة الشكوى", font=("Arial", 16, "bold"), fg="gold", bg="#4A1E6B").pack(pady=5)
        tk.Label(header, text="الرقم المرجعي: QF-09-09-03", font=self.arabic_font, fg="white", bg="#4A1E6B").pack()

        # أولًا: بيانات الشكوى
        complaint_data = tk.LabelFrame(frame, text="أولًا: بيانات الشكوى", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        complaint_data.pack(fill=tk.X, padx=10, pady=5)
        
        basic_fields = [
            "اسم مقدم الشكوى:",
            "رقم الشهادة / الطلب (إن وُجد):"
        ]
        
        for field in basic_fields:
            row = tk.Frame(complaint_data, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            entry = tk.Entry(row, width=50, font=self.arabic_font)
            entry.pack(side=tk.RIGHT, padx=5)
            entries[field.replace(":", "")] = entry

        # نوع الشكوى
        complaint_type_frame = tk.Frame(complaint_data, bg="#4A1E6B")
        complaint_type_frame.pack(fill=tk.X, pady=5)
        tk.Label(complaint_type_frame, text="نوع الشكوى:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5)
        
        complaint_types = ["تأخير في الخدمة", "سلوك غير مهني", "قرار غير عادل", "مشكلة تقنية", "أخرى"]
        type_options_frame = tk.Frame(complaint_type_frame, bg="#4A1E6B")
        type_options_frame.pack(anchor=tk.E, padx=20)
        
        for complaint_type in complaint_types:
            type_frame = tk.Frame(type_options_frame, bg="#4A1E6B")
            type_frame.pack(side=tk.RIGHT, padx=5)
            var = tk.BooleanVar()
            checkbox = tk.Checkbutton(type_frame, text=complaint_type, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361")
            checkbox.pack(side=tk.RIGHT)
            entries[f"نوع الشكوى_{complaint_type}"] = var
            if complaint_type == "أخرى":
                entry = tk.Entry(type_frame, width=15, font=self.arabic_font)
                entry.pack(side=tk.RIGHT, padx=5)
                entries["نوع الشكوى_أخرى_تفاصيل"] = entry

        # التواريخ
        date_fields = [
            "تاريخ تقديم الشكوى:",
            "تاريخ استلام اللجنة للشكوى:"
        ]
        
        for field in date_fields:
            row = tk.Frame(complaint_data, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=35).pack(side=tk.RIGHT, padx=5)
            date_frame = tk.Frame(row, bg="#4A1E6B")
            date_frame.pack(side=tk.RIGHT, padx=5)
            date_entries = []
            for i, label in enumerate(["يوم", "شهر", "سنة"]):
                if i > 0:
                    tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                entry = tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center')
                entry.pack(side=tk.RIGHT)
                date_entries.append(entry)
            entries[field.replace(":", "")] = date_entries

        # ثانيًا: تشكيل اللجنة
        committee_formation = tk.LabelFrame(frame, text="ثانيًا: تشكيل اللجنة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        committee_formation.pack(fill=tk.X, padx=10, pady=5)
        
        # عناوين جدول الأعضاء
        member_headers = tk.Frame(committee_formation, bg="#4A1E6B")
        member_headers.pack(fill=tk.X, pady=5)
        tk.Label(member_headers, text="التوقيع", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=20).pack(side=tk.RIGHT, padx=1)
        tk.Label(member_headers, text="الصفة / الوظيفة", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
        tk.Label(member_headers, text="الاسم", font=self.arabic_font_bold, fg="gold", bg="#4A1E6B", width=25).pack(side=tk.RIGHT, padx=1)
        
        # إضافة 3 صفوف للأعضاء
        member_entries = []
        for i in range(3):
            member_row = tk.Frame(committee_formation, bg="#4A1E6B")
            member_row.pack(fill=tk.X, pady=2)
            signature_entry = tk.Entry(member_row, width=20, font=self.arabic_font)
            signature_entry.pack(side=tk.RIGHT, padx=1)
            position_entry = tk.Entry(member_row, width=25, font=self.arabic_font)
            position_entry.pack(side=tk.RIGHT, padx=1)
            name_entry = tk.Entry(member_row, width=25, font=self.arabic_font)
            name_entry.pack(side=tk.RIGHT, padx=1)
            member_entries.append({
                'اسم_العضو': name_entry,
                'الصفة_الوظيفة': position_entry,
                'التوقيع': signature_entry
            })
        entries['أعضاء_اللجنة'] = member_entries

        # ثالثًا: إجراءات دراسة الشكوى
        study_procedures = tk.LabelFrame(frame, text="ثالثًا: إجراءات دراسة الشكوى", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        study_procedures.pack(fill=tk.X, padx=10, pady=5)
        
        procedure_items = [
            "مراجعة الوثائق والسجلات",
            "التواصل مع مقدم الشكوى",
            "الاستماع للطرف ذي العلاقة",
            "فحص الإجراءات المتخذة",
            "تحليل أسباب الشكوى",
            "أخرى"
        ]
        
        for item in procedure_items:
            item_frame = tk.Frame(study_procedures, bg="#4A1E6B")
            item_frame.pack(anchor=tk.E, padx=20, pady=2)
            var = tk.BooleanVar()
            checkbox = tk.Checkbutton(item_frame, text=item, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361")
            checkbox.pack(side=tk.RIGHT)
            entries[f"إجراء_دراسة_{item}"] = var
            if item == "أخرى":
                entry = tk.Entry(item_frame, width=30, font=self.arabic_font)
                entry.pack(side=tk.RIGHT, padx=5)
                entries["إجراء_دراسة_أخرى_تفاصيل"] = entry

        # رابعًا: نتائج الدراسة
        study_results = tk.LabelFrame(frame, text="رابعًا: نتائج الدراسة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        study_results.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(study_results, text="يرجى كتابة ملخص واضح لنتائج دراسة الشكوى:", 
                font=self.arabic_font, fg="white", bg="#4A1E6B").pack(anchor=tk.E, padx=5, pady=5)
        results_text = tk.Text(study_results, height=5, width=80, font=self.arabic_font)
        results_text.pack(padx=10, pady=10)
        entries['نتائج_الدراسة'] = results_text

        # خامسًا: قرار اللجنة
        committee_decision = tk.LabelFrame(frame, text="خامسًا: قرار اللجنة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        committee_decision.pack(fill=tk.X, padx=10, pady=5)
        
        decisions = [
            "قبول الشكوى واتخاذ الإجراءات التالية:",
            "رفض الشكوى مع ذكر الأسباب:",
            "تحويل الموضوع إلى الإدارة العليا / قسم قانوني",
            "أخرى:"
        ]
        
        for decision in decisions:
            decision_frame = tk.Frame(committee_decision, bg="#4A1E6B")
            decision_frame.pack(fill=tk.X, pady=2)
            var = tk.BooleanVar()
            checkbox = tk.Checkbutton(decision_frame, text=decision, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361")
            checkbox.pack(anchor=tk.E, padx=5)
            entries[f"قرار_اللجنة_{decision}"] = var
            if ":" in decision:
                entry = tk.Entry(decision_frame, width=50, font=self.arabic_font)
                entry.pack(anchor=tk.E, padx=30, pady=2)
                entries[f"قرار_اللجنة_{decision}_تفاصيل"] = entry

        # تاريخ القرار وإشعار المشتكي
        decision_details = tk.Frame(committee_decision, bg="#4A1E6B")
        decision_details.pack(fill=tk.X, pady=5)
        
        # تاريخ القرار
        date_row = tk.Frame(decision_details, bg="#4A1E6B")
        date_row.pack(fill=tk.X, pady=2)
        tk.Label(date_row, text="تاريخ القرار:", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        date_frame = tk.Frame(date_row, bg="#4A1E6B")
        date_frame.pack(side=tk.RIGHT, padx=5)
        decision_date_entries = []
        for i, label in enumerate(["يوم", "شهر", "سنة"]):
            if i > 0:
                tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
            entry = tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center')
            entry.pack(side=tk.RIGHT)
            decision_date_entries.append(entry)
        entries['تاريخ_القرار'] = decision_date_entries

        # إشعار المشتكي
        notification_row = tk.Frame(decision_details, bg="#4A1E6B")
        notification_row.pack(fill=tk.X, pady=2)
        tk.Label(notification_row, text="تم إخطار مقدم الشكوى بالقرار؟", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT, padx=5)
        
        notification_options = tk.Frame(notification_row, bg="#4A1E6B")
        notification_options.pack(side=tk.RIGHT, padx=20)
        for option in ["جارٍ الإشعار", "لا", "نعم"]:
            var = tk.BooleanVar()
            checkbox = tk.Checkbutton(notification_options, text=option, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361")
            checkbox.pack(side=tk.RIGHT, padx=5)
            entries[f"إشعار_المشتكي_{option}"] = var

        # سادسًا: توصيات اللجنة
        committee_recommendations = tk.LabelFrame(frame, text="سادسًا: توصيات اللجنة (إن وُجدت)", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        committee_recommendations.pack(fill=tk.X, padx=10, pady=5)
        
        recommendations = [
            "تنفيذ إجراء تصحيحي",
            "مراجعة السياسات / الإجراءات",
            "تدريب الفريق المعني",
            "لا حاجة لاتخاذ إجراء إضافي",
            "أخرى"
        ]
        
        for recommendation in recommendations:
            recommendation_frame = tk.Frame(committee_recommendations, bg="#4A1E6B")
            recommendation_frame.pack(anchor=tk.E, padx=20, pady=2)
            var = tk.BooleanVar()
            checkbox = tk.Checkbutton(recommendation_frame, text=recommendation, variable=var, font=self.arabic_font, fg="white", bg="#4A1E6B", selectcolor="#3C1361")
            checkbox.pack(side=tk.RIGHT)
            entries[f"توصية_{recommendation}"] = var
            if recommendation == "أخرى":
                entry = tk.Entry(recommendation_frame, width=30, font=self.arabic_font)
                entry.pack(side=tk.RIGHT, padx=5)
                entries["توصية_أخرى_تفاصيل"] = entry

        # سابعًا: توقيع رئيس اللجنة
        chairman_signature = tk.LabelFrame(frame, text="سابعًا: توقيع رئيس اللجنة", font=self.arabic_font_bold, fg="white", bg="#4A1E6B")
        chairman_signature.pack(fill=tk.X, padx=10, pady=5)
        
        signature_fields = ["الاسم:", "الوظيفة:", "التوقيع:", "التاريخ:"]
        for field in signature_fields:
            row = tk.Frame(chairman_signature, bg="#4A1E6B")
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=field, font=self.arabic_font, fg="white", bg="#4A1E6B", width=15).pack(side=tk.RIGHT, padx=5)
            if field == "التاريخ:":
                date_frame = tk.Frame(row, bg="#4A1E6B")
                date_frame.pack(side=tk.RIGHT, padx=5)
                chairman_date_entries = []
                for i, label in enumerate(["يوم", "شهر", "سنة"]):
                    if i > 0:
                        tk.Label(date_frame, text="/", font=self.arabic_font, fg="white", bg="#4A1E6B").pack(side=tk.RIGHT)
                    entry = tk.Entry(date_frame, width=4, font=self.arabic_font, justify='center')
                    entry.pack(side=tk.RIGHT)
                    chairman_date_entries.append(entry)
                entries['رئيس_اللجنة_التاريخ'] = chairman_date_entries
            else:
                entry = tk.Entry(row, width=30, font=self.arabic_font)
                entry.pack(side=tk.RIGHT, padx=5)
                entries[f'رئيس_اللجنة_{field.replace(":", "")}'] = entry

        # Add save buttons
        self.add_form_buttons(frame, entries, form_name)


    def create_QF_10_01_01_form(self, parent_frame):
        """QF-10-01-01: سجل مكونات النظام الإداري - Form content for existing popup window"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary to store all entries
        self.qf_10_01_01_entries = {}
        
        # Title with premium styling
        title_text = "QF-10-01-01: سجل مكونات النظام الإداري"
        formatted_title = self.format_arabic_text(title_text)
        title_label = tk.Label(scrollable_frame, 
                             text=formatted_title, 
                             font=self.fonts['subtitle'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(fill=tk.X, pady=(0, 20))
        
        # ==================== أولًا: معلومات عامة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولًا: معلومات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # General Information Fields
        self.create_form_field(section1_frame, "اسم الجهة / المؤسسة:", "org_name", 0)
        self.create_form_field(section1_frame, "الإدارة / القسم المسؤول:", "dept_responsible", 1)
        self.create_form_field(section1_frame, "اسم مسؤول السجل:", "record_manager", 2)
        self.create_form_field(section1_frame, "تاريخ آخر تحديث للسجل:", "last_update_date", 3)
        
        # ==================== ثانيًا: تفاصيل المكونات ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: تفاصيل المكونات"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Components table with default entries
        self.create_components_table(section2_frame)
        
        # ==================== ثالثًا: ملاحظات عامة ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: ملاحظات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # General Notes text area
        notes_label = tk.Label(section3_frame, 
                             text=self.format_arabic_text("ملاحظات:"),
                             font=self.fonts['body'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        notes_label.pack(anchor="e", padx=10, pady=(0, 5))
        
        self.qf_10_01_01_entries['general_notes'] = tk.Text(section3_frame, 
                                                          font=self.fonts['body'],
                                                          height=6, width=80,
                                                          bg=self.premium_colors['background'],
                                                          fg=self.premium_colors['text_light'],
                                                          insertbackground=self.premium_colors['text_light'])
        self.qf_10_01_01_entries['general_notes'].pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # ==================== رابعًا: اعتماد السجل ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: اعتماد السجل"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Approval Fields
        self.create_form_field(section4_frame, "اسم الشخص المعتمد:", "approver_name", 0)
        self.create_form_field(section4_frame, "الوظيفة:", "approver_position", 1)
        self.create_form_field(section4_frame, "التوقيع:", "signature", 2)
        self.create_form_field(section4_frame, "التاريخ:", "approval_date", 3)
        
        # ==================== Action Buttons ====================
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-01-01", self.qf_10_01_01_entries)
    def open_QF_10_01_01_form(self):
        """QF-10-01-01: سجل مكونات النظام الإداري - Complete implementation"""
        # Create popup window instead of clearing main content
        form_window = tk.Toplevel(self.root)
        form_window.title("QF-10-01-01: سجل مكونات النظام الإداري")
        # Get screen dimensions for responsive sizing
        screen_width = form_window.winfo_screenwidth()
        screen_height = form_window.winfo_screenheight()
        
        # Calculate optimal window size (90% of screen, with improved minimum limits)
        min_width, min_height = 1200, 800
        width = max(min_width, int(screen_width * 0.9))
        height = max(min_height, int(screen_height * 0.9))
        
        # Center the window on screen
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        
        form_window.geometry(f"{width}x{height}+{x}+{y}")
        form_window.configure(bg=self.premium_colors['background'])
        form_window.resizable(True, True)
        form_window.minsize(min_width, min_height)
        
        # Create scrollable frame for the long form
        canvas = tk.Canvas(form_window, bg=self.premium_colors['background'], highlightthickness=0)
        scrollbar = tk.Scrollbar(form_window, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.premium_colors['background'])
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Add mouse wheel scrolling support
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # Form data dictionary to store all entries
        self.qf_10_01_01_entries = {}
        
        # Title with premium styling
        title_text = "QF-10-01-01: سجل مكونات النظام الإداري"
        formatted_title = self.format_arabic_text(title_text)
        title_label = tk.Label(scrollable_frame, 
                             text=formatted_title, 
                             font=self.fonts['subtitle'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(fill=tk.X, pady=(0, 20))
        
        # ==================== أولًا: معلومات عامة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولًا: معلومات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # General Information Fields
        self.create_form_field(section1_frame, "اسم الجهة / المؤسسة:", "org_name", 0)
        self.create_form_field(section1_frame, "الإدارة / القسم المسؤول:", "dept_responsible", 1)
        self.create_form_field(section1_frame, "اسم مسؤول السجل:", "record_manager", 2)
        self.create_form_field(section1_frame, "تاريخ آخر تحديث للسجل:", "last_update_date", 3)
        
        # ==================== ثانيًا: تفاصيل المكونات ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: تفاصيل المكونات"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Components table with default entries
        self.create_components_table(section2_frame)
        
        # ==================== ثالثًا: ملاحظات عامة ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: ملاحظات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # General Notes text area
        notes_label = tk.Label(section3_frame, 
                             text=self.format_arabic_text("ملاحظات:"),
                             font=self.fonts['body'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        notes_label.pack(anchor="e", padx=10, pady=(0, 5))
        
        self.qf_10_01_01_entries['general_notes'] = tk.Text(section3_frame, 
                                                          font=self.fonts['body'],
                                                          height=6, width=80,
                                                          bg=self.premium_colors['background'],
                                                          fg=self.premium_colors['text_light'],
                                                          insertbackground=self.premium_colors['text_light'])
        self.qf_10_01_01_entries['general_notes'].pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # ==================== رابعًا: اعتماد السجل ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: اعتماد السجل"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Approval Fields
        self.create_form_field(section4_frame, "اسم الشخص المعتمد:", "approver_name", 0)
        self.create_form_field(section4_frame, "الوظيفة:", "approver_position", 1)
        self.create_form_field(section4_frame, "التوقيع:", "signature", 2)
        self.create_form_field(section4_frame, "التاريخ:", "approval_date", 3)
        
        # ==================== Action Buttons ====================
        self.add_form_buttons(scrollable_frame, "QF-10-01-01", self.qf_10_01_01_entries)
        
        # Bind mouse wheel for scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    def open_QF_10_01_01_form(self):
        """QF-10-01-01: سجل مكونات النظام الإداري - Complete implementation"""
        # Create a new popup window instead of using main window
        form_window = tk.Toplevel(self.root)
        form_window.title("QF-10-01-01: سجل مكونات النظام الإداري")
        # Get screen dimensions for responsive sizing

        screen_width = form_window.winfo_screenwidth()

        screen_height = form_window.winfo_screenheight()

        

        # Calculate optimal window size (80% of screen, with minimum limits)

        min_width, min_height = 1000, 700

        width = max(min_width, int(screen_width * 0.8))

        height = max(min_height, int(screen_height * 0.8))

        

        form_window.geometry(f"{width}x{height}")

        form_window.configure(bg=self.premium_colors['background'])

        form_window.resizable(True, True)

        form_window.minsize(min_width, min_height)
        
        # Create main content frame for the popup window
        content_frame = tk.Frame(form_window, bg=self.premium_colors['background'])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create scrollable frame for the long form
        canvas = tk.Canvas(content_frame, bg=self.premium_colors['background'], highlightthickness=0)
        scrollbar = tk.Scrollbar(content_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.premium_colors['background'])
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # Form data dictionary to store all entries
        self.qf_10_01_01_entries = {}
        
        # Title with premium styling
        title_text = "QF-10-01-01: سجل مكونات النظام الإداري"
        formatted_title = self.format_arabic_text(title_text)
        title_label = tk.Label(scrollable_frame, 
                             text=formatted_title, 
                             font=self.fonts['subtitle'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(fill=tk.X, pady=(0, 20))
        
        # ==================== أولًا: معلومات عامة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولًا: معلومات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # General Information Fields
        self.create_form_field(section1_frame, "اسم الجهة / المؤسسة:", "org_name", 0)
        self.create_form_field(section1_frame, "الإدارة / القسم المسؤول:", "dept_responsible", 1)
        self.create_form_field(section1_frame, "اسم مسؤول السجل:", "record_manager", 2)
        self.create_form_field(section1_frame, "تاريخ آخر تحديث للسجل:", "last_update_date", 3)
        
        # ==================== ثانيًا: تفاصيل المكونات ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: تفاصيل المكونات"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Components table with default entries
        self.create_components_table(section2_frame)
        
        # ==================== ثالثًا: ملاحظات عامة ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: ملاحظات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # General Notes text area
        notes_label = tk.Label(section3_frame, 
                             text=self.format_arabic_text("ملاحظات:"),
                             font=self.fonts['body'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        notes_label.pack(anchor="e", padx=10, pady=(0, 5))
        
        self.qf_10_01_01_entries['general_notes'] = tk.Text(section3_frame, 
                                                          font=self.fonts['body'],
                                                          height=6, width=80,
                                                          bg=self.premium_colors['background'],
                                                          fg=self.premium_colors['text_light'],
                                                          insertbackground=self.premium_colors['text_light'])
        self.qf_10_01_01_entries['general_notes'].pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # ==================== رابعًا: اعتماد السجل ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: اعتماد السجل"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Approval Fields
        self.create_form_field(section4_frame, "اسم الشخص المعتمد:", "approver_name", 0)
        self.create_form_field(section4_frame, "الوظيفة:", "approver_position", 1)
        self.create_form_field(section4_frame, "التوقيع:", "signature", 2)
        self.create_form_field(section4_frame, "التاريخ:", "approval_date", 3)
        
        # ==================== Action Buttons ====================
        self.add_form_buttons(scrollable_frame, "QF-10-01-01", self.qf_10_01_01_entries)
        
        # Bind mouse wheel for scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)


    def create_QF_10_01_02_form(self, parent_frame):
        """QF-10-01-02: نموذج مراجعة النظام الإداري - Complete implementation"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary to store all entries
        self.qf_10_01_02_entries = {}
        
        # Title with premium styling
        title_text = "QF-10-01-02: نموذج مراجعة النظام الإداري"
        formatted_title = self.format_arabic_text(title_text)
        title_label = tk.Label(scrollable_frame, 
                             text=formatted_title, 
                             font=self.fonts['subtitle'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(fill=tk.X, pady=(0, 20))
        
        # ==================== أولًا: معلومات عامة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولًا: معلومات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # General Information Fields
        self.create_form_field_qf_02(section1_frame, "اسم الجهة / المؤسسة:", "org_name", 0)
        self.create_form_field_qf_02(section1_frame, "الإدارة / القسم المشرف:", "supervising_dept", 1)
        self.create_date_field_qf_02(section1_frame, "تاريخ المراجعة:", "review_date", 2)
        
        # Review period fields 
        period_frame = tk.Frame(section1_frame, bg=self.premium_colors['surface'])
        period_frame.pack(fill=tk.X, padx=10, pady=5)
        
        period_label = tk.Label(period_frame, 
                              text=self.format_arabic_text("الفترة التي تغطيها المراجعة:"),
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              anchor="e")
        period_label.pack(side=tk.RIGHT, padx=(0, 10))
        
        # From date
        from_frame = tk.Frame(period_frame, bg=self.premium_colors['surface'])
        from_frame.pack(side=tk.RIGHT, padx=5)
        
        tk.Label(from_frame, text="من:", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        self.qf_10_01_02_entries['period_from_day'] = tk.Entry(from_frame, width=4, font=self.fonts['body'],
                                                             bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        self.qf_10_01_02_entries['period_from_day'].pack(side=tk.RIGHT, padx=2)
        
        tk.Label(from_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        self.qf_10_01_02_entries['period_from_month'] = tk.Entry(from_frame, width=4, font=self.fonts['body'],
                                                               bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        self.qf_10_01_02_entries['period_from_month'].pack(side=tk.RIGHT, padx=2)
        
        tk.Label(from_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        self.qf_10_01_02_entries['period_from_year'] = tk.Entry(from_frame, width=6, font=self.fonts['body'],
                                                              bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        self.qf_10_01_02_entries['period_from_year'].pack(side=tk.RIGHT, padx=2)
        
        # To date
        to_frame = tk.Frame(period_frame, bg=self.premium_colors['surface'])
        to_frame.pack(side=tk.RIGHT, padx=10)
        
        tk.Label(to_frame, text="إلى:", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        self.qf_10_01_02_entries['period_to_day'] = tk.Entry(to_frame, width=4, font=self.fonts['body'],
                                                           bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        self.qf_10_01_02_entries['period_to_day'].pack(side=tk.RIGHT, padx=2)
        
        tk.Label(to_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        self.qf_10_01_02_entries['period_to_month'] = tk.Entry(to_frame, width=4, font=self.fonts['body'],
                                                             bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        self.qf_10_01_02_entries['period_to_month'].pack(side=tk.RIGHT, padx=2)
        
        tk.Label(to_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        self.qf_10_01_02_entries['period_to_year'] = tk.Entry(to_frame, width=6, font=self.fonts['body'],
                                                            bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        self.qf_10_01_02_entries['period_to_year'].pack(side=tk.RIGHT, padx=2)
        
        self.create_form_field_qf_02(section1_frame, "اسم معدّ التقرير:", "report_preparer_name", 3)
        self.create_form_field_qf_02(section1_frame, "وظيفته:", "report_preparer_position", 4)
        
        # ==================== ثانيًا: أهداف المراجعة ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: أهداف المراجعة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Review objectives checkboxes
        objectives = [
            "التحقق من فاعلية النظام الإداري",
            "التأكد من التزام الإدارات بالإجراءات والسياسات", 
            "رصد التحسينات / التوصيات",
            "تقييم مدى تحقيق الأهداف الاستراتيجية"
        ]
        
        for obj in objectives:
            obj_frame = tk.Frame(section2_frame, bg=self.premium_colors['surface'])
            obj_frame.pack(fill=tk.X, padx=10, pady=3)
            
            var = tk.BooleanVar()
            self.qf_10_01_02_entries[f"objective_{obj}"] = var
            
            checkbox = tk.Checkbutton(obj_frame, 
                                    text=self.format_arabic_text(obj),
                                    variable=var,
                                    font=self.fonts['body'],
                                    fg=self.premium_colors['text_light'],
                                    bg=self.premium_colors['surface'],
                                    selectcolor=self.premium_colors['background'])
            checkbox.pack(anchor=tk.E, padx=10)
        
        # Other objective
        other_obj_frame = tk.Frame(section2_frame, bg=self.premium_colors['surface'])
        other_obj_frame.pack(fill=tk.X, padx=10, pady=3)
        
        other_var = tk.BooleanVar()
        self.qf_10_01_02_entries["objective_other_check"] = other_var
        
        checkbox_other = tk.Checkbutton(other_obj_frame, 
                                      text=self.format_arabic_text("أخرى:"),
                                      variable=other_var,
                                      font=self.fonts['body'],
                                      fg=self.premium_colors['text_light'],
                                      bg=self.premium_colors['surface'],
                                      selectcolor=self.premium_colors['background'])
        checkbox_other.pack(side=tk.RIGHT, padx=10)
        
        self.qf_10_01_02_entries['objective_other_text'] = tk.Entry(other_obj_frame, 
                                                                  width=40, font=self.fonts['body'],
                                                                  bg=self.premium_colors['background'], 
                                                                  fg=self.premium_colors['text_light'])
        self.qf_10_01_02_entries['objective_other_text'].pack(side=tk.RIGHT, padx=10)
        
        # ==================== ثالثًا: نطاق المراجعة ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: نطاق المراجعة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_qf_02(section3_frame, "الأقسام / الإدارات المشمولة:", "included_departments", 0)
        self.create_form_field_qf_02(section3_frame, "الوثائق / الإجراءات التي تم فحصها:", "examined_documents", 1)
        
        # Evaluation criteria checkboxes
        criteria_frame = tk.Frame(section3_frame, bg=self.premium_colors['surface'])
        criteria_frame.pack(fill=tk.X, padx=10, pady=5)
        
        criteria_label = tk.Label(criteria_frame, 
                                text=self.format_arabic_text("معايير التقييم:"),
                                font=self.fonts['body'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'],
                                anchor="e")
        criteria_label.pack(anchor=tk.E, padx=10, pady=5)
        
        criteria_options = [
            "ISO/IEC 17024",
            "سياسات داخلية", 
            "نتائج أداء",
            "تقارير تدقيق"
        ]
        
        for criteria in criteria_options:
            criteria_option_frame = tk.Frame(criteria_frame, bg=self.premium_colors['surface'])
            criteria_option_frame.pack(anchor=tk.E, padx=20, pady=2)
            
            var = tk.BooleanVar()
            self.qf_10_01_02_entries[f"criteria_{criteria}"] = var
            
            checkbox = tk.Checkbutton(criteria_option_frame, 
                                    text=self.format_arabic_text(criteria),
                                    variable=var,
                                    font=self.fonts['body'],
                                    fg=self.premium_colors['text_light'],
                                    bg=self.premium_colors['surface'],
                                    selectcolor=self.premium_colors['background'])
            checkbox.pack(side=tk.RIGHT)
        
        # Other criteria
        other_criteria_frame = tk.Frame(criteria_frame, bg=self.premium_colors['surface'])
        other_criteria_frame.pack(anchor=tk.E, padx=20, pady=2)
        
        other_criteria_var = tk.BooleanVar()
        self.qf_10_01_02_entries["criteria_other_check"] = other_criteria_var
        
        checkbox_other_criteria = tk.Checkbutton(other_criteria_frame, 
                                                text=self.format_arabic_text("أخرى:"),
                                                variable=other_criteria_var,
                                                font=self.fonts['body'],
                                                fg=self.premium_colors['text_light'],
                                                bg=self.premium_colors['surface'],
                                                selectcolor=self.premium_colors['background'])
        checkbox_other_criteria.pack(side=tk.RIGHT)
        
        self.qf_10_01_02_entries['criteria_other_text'] = tk.Entry(other_criteria_frame, 
                                                                 width=25, font=self.fonts['body'],
                                                                 bg=self.premium_colors['background'], 
                                                                 fg=self.premium_colors['text_light'])
        self.qf_10_01_02_entries['criteria_other_text'].pack(side=tk.RIGHT, padx=5)
        
        # ==================== رابعًا: ملخص نتائج المراجعة ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: ملخص نتائج المراجعة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Create results table
        self.create_results_table_qf_02(section4_frame)
        
        # ==================== خامسًا: القضايا الحرجة ====================
        section5_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("خامسًا: القضايا الحرجة / نقاط تحتاج تدخلاً فوريًا"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section5_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        critical_issues_label = tk.Label(section5_frame, 
                                       text=self.format_arabic_text("القضايا الحرجة:"),
                                       font=self.fonts['body'],
                                       fg=self.premium_colors['text_light'],
                                       bg=self.premium_colors['surface'])
        critical_issues_label.pack(anchor="e", padx=10, pady=(0, 5))
        
        self.qf_10_01_02_entries['critical_issues'] = tk.Text(section5_frame, 
                                                            font=self.fonts['body'],
                                                            height=4, width=80,
                                                            bg=self.premium_colors['background'],
                                                            fg=self.premium_colors['text_light'],
                                                            insertbackground=self.premium_colors['text_light'])
        self.qf_10_01_02_entries['critical_issues'].pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # ==================== سادسًا: مقترحات التحسين ====================
        section6_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("سادسًا: مقترحات التحسين"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section6_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Create improvement suggestions fields
        for i in range(1, 4):
            improvement_frame = tk.Frame(section6_frame, bg=self.premium_colors['surface'])
            improvement_frame.pack(fill=tk.X, padx=10, pady=3)
            
            label = tk.Label(improvement_frame, 
                           text=f"{i}.",
                           font=self.fonts['body'],
                           fg=self.premium_colors['text_light'],
                           bg=self.premium_colors['surface'])
            label.pack(side=tk.RIGHT, padx=5)
            
            entry = tk.Entry(improvement_frame, 
                           font=self.fonts['body'],
                           width=70,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'])
            entry.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=5)
            
            self.qf_10_01_02_entries[f'improvement_suggestion_{i}'] = entry
        
        # ==================== سابعًا: متابعة الإجراءات التصحيحية ====================
        section7_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("سابعًا: متابعة الإجراءات التصحيحية"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section7_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Create corrective actions table
        self.create_corrective_actions_table_qf_02(section7_frame)
        
        # ==================== ثامنًا: اعتماد التقرير ====================
        section8_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثامنًا: اعتماد التقرير"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section8_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Reviewer / Team Leader section
        self.create_form_field_qf_02(section8_frame, "اسم المُراجع / رئيس الفريق:", "reviewer_team_leader_name", 0)
        self.create_form_field_qf_02(section8_frame, "التوقيع:", "reviewer_signature", 1)
        self.create_date_field_qf_02(section8_frame, "التاريخ:", "reviewer_date", 2)
        
        # Senior Management Review section
        management_review_label = tk.Label(section8_frame, 
                                         text=self.format_arabic_text("مراجعة الإدارة العليا (إن وُجدت):"),
                                         font=self.fonts['body'],
                                         fg=self.premium_colors['text_light'],
                                         bg=self.premium_colors['surface'])
        management_review_label.pack(anchor="e", padx=10, pady=(10, 5))
        
        self.create_form_field_qf_02(section8_frame, "الاسم:", "management_reviewer_name", 3)
        self.create_form_field_qf_02(section8_frame, "التوقيع:", "management_signature", 4)
        self.create_date_field_qf_02(section8_frame, "التاريخ:", "management_date", 5)
        
        # ==================== Action Buttons ====================
        self.create_universal_enhanced_form_buttons(scrollable_frame, "QF-10-01-02", "نموذج مراجعة النظام الإداري", self.qf_10_01_02_entries)
        
        # Bind mouse wheel for scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    def create_form_field_qf_02(self, parent, label_text, field_name, row):
        """Create a form field for QF-10-01-02 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=3)
        
        # Label
        formatted_label = self.format_arabic_text(label_text)
        label = tk.Label(field_frame, 
                        text=formatted_label,
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        anchor="e")
        label.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Entry field
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        width=40,
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['text_light'])
        entry.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(0, 10))
        
        # Store in entries dictionary
        self.qf_10_01_02_entries[field_name] = entry
        
        return entry
    
    def create_date_field_qf_02(self, parent, label_text, field_name, row):
        """Create a date field for QF-10-01-02"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=3)
        
        # Label
        formatted_label = self.format_arabic_text(label_text)
        label = tk.Label(field_frame, 
                        text=formatted_label,
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        anchor="e")
        label.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Date entry frame
        date_frame = tk.Frame(field_frame, bg=self.premium_colors['surface'])
        date_frame.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Day entry
        day_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                           bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        # Month entry
        month_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                             bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        # Year entry
        year_entry = tk.Entry(date_frame, width=6, font=self.fonts['body'],
                            bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        # Store in entries dictionary
        self.qf_10_01_02_entries[f'{field_name}_day'] = day_entry
        self.qf_10_01_02_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_01_02_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    def create_results_table_qf_02(self, parent):
        """Create results table for QF-10-01-02"""
        # Create table container
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Table headers
        headers = ["البند", "المعيار", "النتيجة", "ملاحظات"]
        
        # Create header row
        header_frame = tk.Frame(table_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 2))
        
        for i, header in enumerate(headers):
            header_label = tk.Label(header_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg='white',
                                  bg=self.premium_colors['accent'],
                                  width=15, height=2,
                                  relief=tk.RAISED)
            header_label.grid(row=0, column=len(headers)-1-i, sticky='ew', padx=1)
        
        # Configure grid weights
        for i in range(len(headers)):
            header_frame.grid_columnconfigure(i, weight=1)
        
        # Create data rows
        for row in range(5):  # 5 rows for data
            row_frame = tk.Frame(table_frame, bg=self.premium_colors['surface'])
            row_frame.pack(fill=tk.X, pady=1)
            
            # Item number
            item_entry = tk.Entry(row_frame, width=10, font=self.fonts['body'],
                                bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
            item_entry.grid(row=0, column=3, sticky='ew', padx=1, pady=1)
            self.qf_10_01_02_entries[f'table_item_{row}'] = item_entry
            
            # Criteria
            criteria_entry = tk.Entry(row_frame, width=25, font=self.fonts['body'],
                                    bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
            criteria_entry.grid(row=0, column=2, sticky='ew', padx=1, pady=1)
            self.qf_10_01_02_entries[f'table_criteria_{row}'] = criteria_entry
            
            # Result
            result_entry = tk.Entry(row_frame, width=15, font=self.fonts['body'],
                                  bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
            result_entry.grid(row=0, column=1, sticky='ew', padx=1, pady=1)
            self.qf_10_01_02_entries[f'table_result_{row}'] = result_entry
            
            # Notes
            notes_entry = tk.Entry(row_frame, width=30, font=self.fonts['body'],
                                 bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
            notes_entry.grid(row=0, column=0, sticky='ew', padx=1, pady=1)
            self.qf_10_01_02_entries[f'table_notes_{row}'] = notes_entry
            
            # Configure grid weights
            for i in range(len(headers)):
                row_frame.grid_columnconfigure(i, weight=1)

    def create_corrective_actions_table_qf_02(self, parent):
        """Create corrective actions table for QF-10-01-02"""
        # Create table container
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Table headers
        headers = ["الإجراء التصحيحي", "المسؤول", "الموعد المحدد", "حالة التنفيذ"]
        
        # Create header row
        header_frame = tk.Frame(table_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 2))
        
        for i, header in enumerate(headers):
            header_label = tk.Label(header_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg='white',
                                  bg=self.premium_colors['accent'],
                                  width=15, height=2,
                                  relief=tk.RAISED)
            header_label.grid(row=0, column=len(headers)-1-i, sticky='ew', padx=1)
        
        # Configure grid weights
        for i in range(len(headers)):
            header_frame.grid_columnconfigure(i, weight=1)
        
        # Create data rows
        for row in range(3):  # 3 rows for corrective actions
            row_frame = tk.Frame(table_frame, bg=self.premium_colors['surface'])
            row_frame.pack(fill=tk.X, pady=1)
            
            # Corrective action
            action_entry = tk.Entry(row_frame, width=30, font=self.fonts['body'],
                                  bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
            action_entry.grid(row=0, column=3, sticky='ew', padx=1, pady=1)
            self.qf_10_01_02_entries[f'corrective_action_{row}'] = action_entry
            
            # Responsible person
            responsible_entry = tk.Entry(row_frame, width=20, font=self.fonts['body'],
                                       bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
            responsible_entry.grid(row=0, column=2, sticky='ew', padx=1, pady=1)
            self.qf_10_01_02_entries[f'corrective_responsible_{row}'] = responsible_entry
            
            # Deadline
            deadline_entry = tk.Entry(row_frame, width=15, font=self.fonts['body'],
                                    bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
            deadline_entry.grid(row=0, column=1, sticky='ew', padx=1, pady=1)
            self.qf_10_01_02_entries[f'corrective_deadline_{row}'] = deadline_entry
            
            # Status
            status_entry = tk.Entry(row_frame, width=15, font=self.fonts['body'],
                                  bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
            status_entry.grid(row=0, column=0, sticky='ew', padx=1, pady=1)
            self.qf_10_01_02_entries[f'corrective_status_{row}'] = status_entry
            
            # Configure grid weights
            for i in range(len(headers)):
                row_frame.grid_columnconfigure(i, weight=1)

    def open_QF_10_01_02_form(self):
        """QF-10-01-02: تقرير مراجعة النظام الإداري - Complete implementation"""
        # Create a new popup window instead of using main window
        form_window = tk.Toplevel(self.root)
        form_window.title("QF-10-01-02: تقرير مراجعة النظام الإداري")
        # Get screen dimensions for responsive sizing

        screen_width = form_window.winfo_screenwidth()

        screen_height = form_window.winfo_screenheight()

        

        # Calculate optimal window size (80% of screen, with minimum limits)

        min_width, min_height = 1000, 700

        width = max(min_width, int(screen_width * 0.8))

        height = max(min_height, int(screen_height * 0.8))

        

        form_window.geometry(f"{width}x{height}")

        form_window.configure(bg=self.premium_colors['background'])

        form_window.resizable(True, True)

        form_window.minsize(min_width, min_height)
        
        # Create main content frame for the popup window
        content_frame = tk.Frame(form_window, bg=self.premium_colors['background'])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Call the comprehensive form creation function
        self.create_QF_10_01_02_form(content_frame)
        """QF-10-01-02: تقرير مراجعة النظام الإداري"""
        # Create popup window instead of clearing main content
        form_window = tk.Toplevel(self.root)
        form_window.title("QF-10-01-02: تقرير مراجعة النظام الإداري")
        # Get screen dimensions for responsive sizing

        screen_width = form_window.winfo_screenwidth()

        screen_height = form_window.winfo_screenheight()

        

        # Calculate optimal window size (80% of screen, with minimum limits)

        min_width, min_height = 1000, 700

        width = max(min_width, int(screen_width * 0.8))

        height = max(min_height, int(screen_height * 0.8))

        

        form_window.geometry(f"{width}x{height}")

        form_window.configure(bg=self.premium_colors['background'])

        form_window.resizable(True, True)

        form_window.minsize(min_width, min_height)
        
        # Make window resizable
        form_window.resizable(True, True)
        
        # Create scrollable frame
        canvas = tk.Canvas(form_window, bg=self.premium_colors['background'], highlightthickness=0)
        scrollbar = tk.Scrollbar(form_window, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.premium_colors['background'])
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Add mouse wheel scrolling support
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # Title with premium styling
        title_label = tk.Label(scrollable_frame, 
                             text=self.format_arabic_text("QF-10-01-02: تقرير مراجعة النظام الإداري"), 
                             font=self.fonts['subtitle'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(fill=tk.X, pady=(0, 20))
        
        # Form frame with premium styling
        form_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['surface'], padx=20, pady=20)
        form_frame.pack(pady=10, padx=20, fill="both", expand=True)
        
        # Form fields with premium styling
        entries = {}
        
        # Review Date
        tk.Label(form_frame, text=self.format_arabic_text("تاريخ المراجعة:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=0, column=1, sticky="e", padx=5, pady=5)
        entries['review_date'] = tk.Entry(form_frame, font=self.fonts['body'], width=30, 
                                        bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['review_date'].grid(row=0, column=0, padx=5, pady=5)
        
        # Reviewer Name
        tk.Label(form_frame, text=self.format_arabic_text("اسم المراجع:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=1, column=1, sticky="e", padx=5, pady=5)
        entries['reviewer_name'] = tk.Entry(form_frame, font=self.fonts['body'], width=30,
                                          bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['reviewer_name'].grid(row=1, column=0, padx=5, pady=5)
        
        # Review Scope
        tk.Label(form_frame, text=self.format_arabic_text("نطاق المراجعة:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=2, column=1, sticky="e", padx=5, pady=5)
        entries['review_scope'] = tk.Text(form_frame, font=self.fonts['body'], width=30, height=3,
                                        bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['review_scope'].grid(row=2, column=0, padx=5, pady=5)
        
        # Findings
        tk.Label(form_frame, text=self.format_arabic_text("النتائج:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=3, column=1, sticky="e", padx=5, pady=5)
        entries['findings'] = tk.Text(form_frame, font=self.fonts['body'], width=30, height=4,
                                    bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['findings'].grid(row=3, column=0, padx=5, pady=5)
        
        # Strengths
        tk.Label(form_frame, text=self.format_arabic_text("نقاط القوة:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=4, column=1, sticky="e", padx=5, pady=5)
        entries['strengths'] = tk.Text(form_frame, font=self.fonts['body'], width=30, height=3,
                                     bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['strengths'].grid(row=4, column=0, padx=5, pady=5)
        
        # Improvement Areas
        tk.Label(form_frame, text=self.format_arabic_text("مجالات التحسين:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=5, column=1, sticky="e", padx=5, pady=5)
        entries['improvement_areas'] = tk.Text(form_frame, font=self.fonts['body'], width=30, height=3,
                                             bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['improvement_areas'].grid(row=5, column=0, padx=5, pady=5)
        
        # Recommendations
        tk.Label(form_frame, text=self.format_arabic_text("التوصيات:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=6, column=1, sticky="e", padx=5, pady=5)
        entries['recommendations'] = tk.Text(form_frame, font=self.fonts['body'], width=30, height=4,
                                           bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['recommendations'].grid(row=6, column=0, padx=5, pady=5)
        
        # Overall Assessment
        tk.Label(form_frame, text="التقييم العام:", font=("Arial", 12), bg="#f0f0f0").grid(row=7, column=1, sticky="e", padx=5, pady=5)
        entries['overall_assessment'] = tk.Entry(form_frame, font=("Arial", 12), width=30)
        entries['overall_assessment'].grid(row=7, column=0, padx=5, pady=5)
        
        # Buttons frame
        buttons_frame = tk.Frame(self.content_frame, bg="#f0f0f0")
        buttons_frame.pack(pady=20)
        
        # Save button
        save_btn = tk.Button(buttons_frame, text="حفظ", font=("Arial", 12), bg="#4CAF50", fg="white",
                           command=lambda: self.save_form_data("QF_10_01_02", entries))
        save_btn.pack(side=tk.RIGHT, padx=5)
        
        # Load button
        load_btn = tk.Button(buttons_frame, text="تحميل", font=("Arial", 12), bg="#2196F3", fg="white",
                           command=lambda: self.load_form_data("QF_10_01_02", entries))
        load_btn.pack(side=tk.RIGHT, padx=5)
        
        # Clear button
        clear_btn = tk.Button(buttons_frame, text="مسح", font=("Arial", 12), bg="#f44336", fg="white",
                            command=lambda: self.clear_form_data(entries))
        clear_btn.pack(side=tk.RIGHT, padx=5)


    def open_QF_10_01_03_form(self):
        """QF-10-01-03: سجل التحسين المستمر"""
        # Create popup window instead of clearing main content
        form_window = tk.Toplevel(self.root)
        form_window.title("QF-10-01-03: سجل التحسين المستمر")
        # Get screen dimensions for responsive sizing

        screen_width = form_window.winfo_screenwidth()

        screen_height = form_window.winfo_screenheight()

        

        # Calculate optimal window size (80% of screen, with minimum limits)

        min_width, min_height = 1000, 700

        width = max(min_width, int(screen_width * 0.8))

        height = max(min_height, int(screen_height * 0.8))

        

        form_window.geometry(f"{width}x{height}")

        form_window.configure(bg=self.premium_colors['background'])

        form_window.resizable(True, True)

        form_window.minsize(min_width, min_height)
        
        # Title
        title_label = tk.Label(self.content_frame, text="QF-10-01-03: سجل التحسين المستمر", 
                             font=("Arial", 16, "bold"), bg="#f0f0f0")
        title_label.pack(pady=10)
        
        # Form frame
        form_frame = tk.Frame(self.content_frame, bg="#f0f0f0")
        form_frame.pack(pady=10, padx=20, fill="both", expand=True)
        
        # Call the create function
        self.create_QF_10_01_03_form(form_frame)

    def create_QF_10_01_03_form(self, parent_frame):
        """QF-10-01-03: سجل التحسين المستمر - Complete implementation with current date"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary to store all entries
        self.qf_10_01_03_entries = {}
        
        # Header with date and title
        header_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Current date in top right
        current_date = "2025/09/13"
        date_label = tk.Label(header_frame, 
                            text=f"تاريخ اليوم {current_date}",
                            font=self.fonts['body'],
                            fg='white',
                            bg=self.premium_colors['accent'],
                            padx=20, pady=10)
        date_label.pack(side=tk.RIGHT)
        # Make window resizable
        form_window.resizable(True, True)
        
        # Create scrollable frame
        canvas = tk.Canvas(form_window, bg=self.premium_colors['background'], highlightthickness=0)
        scrollbar = tk.Scrollbar(form_window, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.premium_colors['background'])
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Add mouse wheel scrolling support
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # Title with premium styling
        title_label = tk.Label(scrollable_frame, 
                             text=self.format_arabic_text("QF-10-01-03: سجل التحسين المستمر"), 
                             font=self.fonts['subtitle'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(fill=tk.X, pady=(0, 20))
        
        # Form frame with premium styling
        form_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['surface'], padx=20, pady=20)
        form_frame.pack(pady=10, padx=20, fill="both", expand=True)
        
        # Form fields with premium styling
        entries = {}
        
        # Date
        tk.Label(form_frame, text=self.format_arabic_text("التاريخ:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=0, column=1, sticky="e", padx=5, pady=5)
        entries['date'] = tk.Entry(form_frame, font=self.fonts['body'], width=30,
                                 bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['date'].grid(row=0, column=0, padx=5, pady=5)
        
        # Improvement ID
        tk.Label(form_frame, text=self.format_arabic_text("رقم التحسين:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=1, column=1, sticky="e", padx=5, pady=5)
        entries['improvement_id'] = tk.Entry(form_frame, font=self.fonts['body'], width=30,
                                           bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['improvement_id'].grid(row=1, column=0, padx=5, pady=5)
        
        # Area of Improvement
        tk.Label(form_frame, text=self.format_arabic_text("مجال التحسين:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=2, column=1, sticky="e", padx=5, pady=5)
        entries['improvement_area'] = tk.Entry(form_frame, font=self.fonts['body'], width=30,
                                             bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['improvement_area'].grid(row=2, column=0, padx=5, pady=5)
        
        # Current Situation
        tk.Label(form_frame, text=self.format_arabic_text("الوضع الحالي:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=3, column=1, sticky="e", padx=5, pady=5)
        entries['current_situation'] = tk.Text(form_frame, font=self.fonts['body'], width=30, height=3,
                                             bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['current_situation'].grid(row=3, column=0, padx=5, pady=5)
        
        # Proposed Improvement
        tk.Label(form_frame, text=self.format_arabic_text("التحسين المقترح:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=4, column=1, sticky="e", padx=5, pady=5)
        entries['proposed_improvement'] = tk.Text(form_frame, font=self.fonts['body'], width=30, height=3,
                                                bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['proposed_improvement'].grid(row=4, column=0, padx=5, pady=5)
        
        # Expected Benefits
        tk.Label(form_frame, text=self.format_arabic_text("الفوائد المتوقعة:"), 
                font=self.fonts['body'], fg=self.premium_colors['accent'], 
                bg=self.premium_colors['surface']).grid(row=5, column=1, sticky="e", padx=5, pady=5)
        entries['expected_benefits'] = tk.Text(form_frame, font=self.fonts['body'], width=30, height=3,
                                             bg=self.premium_colors['background'], fg=self.premium_colors['text'])
        entries['expected_benefits'].grid(row=5, column=0, padx=5, pady=5)
        
        # Title
        title_text = "QF-10-01-03: سجل التحسين المستمر"
        formatted_title = self.format_arabic_text(title_text)
        title_label = tk.Label(header_frame, 
                             text=formatted_title, 
                             font=self.fonts['subtitle'],
                             fg='white',
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(expand=True)
        
        # ==================== أولاً: معلومات عامة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولاً: معلومات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_qf_03(section1_frame, "اسم الجهة / المؤسسة:", "institution_name", 0)
        self.create_form_field_qf_03(section1_frame, "القسم / الإدارة المعنية:", "department", 1)
        self.create_form_field_qf_03(section1_frame, "مسؤول السجل:", "record_manager", 2)
        
        # Period covered
        period_frame = tk.Frame(section1_frame, bg=self.premium_colors['surface'])
        period_frame.pack(fill=tk.X, padx=10, pady=5)
        
        period_label = tk.Label(period_frame, 
                              text=self.format_arabic_text("الفترة الزمنية المغطاة:"),
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'])
        period_label.pack(side=tk.RIGHT, padx=10)
        # Buttons frame
        buttons_frame = tk.Frame(self.content_frame, bg="#f0f0f0")
        buttons_frame.pack(pady=20)
        
        # From date
        from_label = tk.Label(period_frame, 
                            text=self.format_arabic_text("من:"),
                            font=self.fonts['body'],
                            fg=self.premium_colors['text_light'],
                            bg=self.premium_colors['surface'])
        from_label.pack(side=tk.RIGHT, padx=5)
        
        from_date = self.create_date_field_qf_03(period_frame, "from_date")
        
        # To date  
        to_label = tk.Label(period_frame, 
                          text=self.format_arabic_text("إلى:"),
                          font=self.fonts['body'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'])
        to_label.pack(side=tk.RIGHT, padx=(20, 5))
        
        to_date = self.create_date_field_qf_03(period_frame, "to_date")
        
        # ==================== ثانيًا: سجل التحسينات المنفذة ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: سجل التحسينات المنفذة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Create improvements table
        self.create_improvements_table_qf_03(section2_frame)
        
        # Sources note
        sources_note = tk.Label(section2_frame, 
                              text=self.format_arabic_text("✅ مصادر التحسين تشمل: مراجعة داخلية – شكاوى – اقتراحات – مؤشرات أداء – تدقيق خارجي – تحليل المخاطر – أخرى."),
                              font=self.fonts['body'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['surface'],
                              wraplength=800,
                              justify=tk.RIGHT)
        sources_note.pack(anchor="e", padx=10, pady=(10, 0))
        
        # ==================== ثالثًا: ملاحظات عامة ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: ملاحظات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Add the qualification statement as header
        qualification_text = self.format_arabic_text("""بناءً تنفيذي للمهام المرتبطة بأنشطة الاعتماد، سواء خلال أو بعد انتهاء عملي مع الجهة المعتمدة وأؤكد على ما يلي:
• التزم بالحيادية التامة في أداء جميع المهام الموكلة إلي، دون تحيز أو تأثير لمصلحة شخصية أو خارجية
• أتعهد بالاحتفاظ على سرية المعلومات الخاصة بالمقدمين للاعتماد وجميع البيانات التي اطلع عليها
• لي أشارك أي قسم، أي معلومات تتعلق بأنشطة الاعتماد عبر وسائل غير مناسبة أو مع أطراف غير مختصة
• في حال وجود أي تعارض في المصالح، سأقوم بالإفصاح عنه فوراً للجهة المختصة
• أقر بأنني قرأت وفهمت سياسة الحيادية والسرية المعتمدة لدى الجهة""")
        
        qualification_label = tk.Label(section3_frame, 
                                     text=qualification_text,
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['text_light'],
                                     bg=self.premium_colors['surface'],
                                     wraplength=800,
                                     justify=tk.RIGHT)
        qualification_label.pack(anchor="e", padx=10, pady=(0, 10))
        
        self.qf_10_01_03_entries['general_notes'] = tk.Text(section3_frame, 
                                                          font=self.fonts['body'],
                                                          height=6, width=80,
                                                          bg=self.premium_colors['background'],
                                                          fg=self.premium_colors['text_light'],
                                                          insertbackground=self.premium_colors['text_light'])
        self.qf_10_01_03_entries['general_notes'].pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # Add signature table
        signature_table_frame = tk.Frame(section3_frame, bg=self.premium_colors['surface'])
        signature_table_frame.pack(fill=tk.X, padx=10, pady=(10, 0))
        
        # Create signature table headers
        sig_headers = ["التاريخ", "التوقيع", "الوظيفة", "الاسم"]
        sig_header_frame = tk.Frame(signature_table_frame, bg=self.premium_colors['accent'])
        sig_header_frame.pack(fill=tk.X, pady=(0, 2))
        
        for i, header in enumerate(sig_headers):
            header_label = tk.Label(sig_header_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg='white',
                                  bg=self.premium_colors['accent'],
                                  width=20, height=2,
                                  relief=tk.RAISED)
            header_label.grid(row=0, column=len(sig_headers)-1-i, sticky='ew', padx=1)
        
        for i in range(len(sig_headers)):
            sig_header_frame.grid_columnconfigure(i, weight=1)
        
        # Empty signature row
        sig_row_frame = tk.Frame(signature_table_frame, bg=self.premium_colors['surface'])
        sig_row_frame.pack(fill=tk.X, pady=1)
        
        for i in range(len(sig_headers)):
            entry = tk.Entry(sig_row_frame, font=self.fonts['body'], width=18,
                           bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
            entry.grid(row=0, column=len(sig_headers)-1-i, sticky='ew', padx=1, pady=1)
            self.qf_10_01_03_entries[f'signature_{sig_headers[i]}'] = entry
        
        for i in range(len(sig_headers)):
            sig_row_frame.grid_columnconfigure(i, weight=1)
        
        # ==================== رابعًا: اعتماد مسؤول الجودة / الإدارة ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: اعتماد مسؤول الجودة / الإدارة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_qf_03(section4_frame, "الاسم:", "approver_name", 0)
        self.create_form_field_qf_03(section4_frame, "الوظيفة:", "approver_position", 1)
        self.create_form_field_qf_03(section4_frame, "التوقيع:", "approver_signature", 2)
        self.create_date_field_qf_03_single(section4_frame, "التاريخ:", "approver_date", 3)
        
        # ==================== Action Buttons ====================
        self.create_universal_enhanced_form_buttons(scrollable_frame, "QF-10-01-03", "سجل التحسين المستمر", self.qf_10_01_03_entries)
        
        # Bind mouse wheel for scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    def create_form_field_qf_03(self, parent, label_text, field_name, row):
        """Create a form field for QF-10-01-03 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=3)
        
        # Label
        formatted_label = self.format_arabic_text(label_text)
        label = tk.Label(field_frame, 
                        text=formatted_label,
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        anchor="e")
        label.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Entry field
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        width=40,
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['text_light'])
        entry.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(0, 10))
        
        # Store in entries dictionary
        self.qf_10_01_03_entries[field_name] = entry
        
        return entry

    def create_date_field_qf_03(self, parent, field_name):
        """Create a date field for QF-10-01-03"""
        date_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        date_frame.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Day entry
        day_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                           bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        # Month entry
        month_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                             bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        # Year entry
        year_entry = tk.Entry(date_frame, width=6, font=self.fonts['body'],
                            bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        # Store in entries dictionary
        self.qf_10_01_03_entries[f'{field_name}_day'] = day_entry
        self.qf_10_01_03_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_01_03_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    def create_date_field_qf_03_single(self, parent, label_text, field_name, row):
        """Create a single date field for QF-10-01-03"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=3)
        
        # Label
        formatted_label = self.format_arabic_text(label_text)
        label = tk.Label(field_frame, 
                        text=formatted_label,
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        anchor="e")
        label.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Date entry frame
        date_frame = tk.Frame(field_frame, bg=self.premium_colors['surface'])
        date_frame.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Day entry
        day_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                           bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        # Month entry
        month_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                             bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        # Year entry
        year_entry = tk.Entry(date_frame, width=6, font=self.fonts['body'],
                            bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        # Store in entries dictionary
        self.qf_10_01_03_entries[f'{field_name}_day'] = day_entry
        self.qf_10_01_03_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_01_03_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    def create_improvements_table_qf_03(self, parent):
        """Create improvements table for QF-10-01-03"""
        # Create table container with scrolling
        table_container = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create canvas for horizontal scrolling
        table_canvas = tk.Canvas(table_container, bg=self.premium_colors['surface'], height=300)
        h_scrollbar = tk.Scrollbar(table_container, orient="horizontal", command=table_canvas.xview)
        table_frame = tk.Frame(table_canvas, bg=self.premium_colors['surface'])
        
        table_frame.bind(
            "<Configure>",
            lambda e: table_canvas.configure(scrollregion=table_canvas.bbox("all"))
        )
        
        table_canvas.create_window((0, 0), window=table_frame, anchor="nw")
        table_canvas.configure(xscrollcommand=h_scrollbar.set)
        
        table_canvas.pack(side="top", fill="both", expand=True)
        h_scrollbar.pack(side="bottom", fill="x")
        
        # Table headers
        headers = ["م", "مصدر التحسين", "وصف الاقتراح / الحاجة", "الإجراء المتخذ", "القسم المسؤول", "تاريخ التنفيذ", "الأثر / النتائج", "حالة التنفيذ"]
        
        # Create header row
        header_frame = tk.Frame(table_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 2))
        
        for i, header in enumerate(headers):
            header_label = tk.Label(header_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg='white',
                                  bg=self.premium_colors['accent'],
                                  width=15, height=2,
                                  relief=tk.RAISED)
            header_label.grid(row=0, column=len(headers)-1-i, sticky='ew', padx=1)
        
        # Configure grid weights
        for i in range(len(headers)):
            header_frame.grid_columnconfigure(i, weight=1)
        
        # Create data rows with example data
        example_data = [
            ["1", "تدقيق داخلي", "مثال: ضعف في حفظ الوثائق", "أرشفة إلكترونية مركزية", "إدارة الجودة", "01/03/2025", "سرعة الوصول وتحسين الأمان", "complete"],
            ["2", "شكوى متعامل", "", "", "", "", "", ""],
            ["3", "اقتراح موظف", "", "", "", "", "", ""],
            ["4", "مراجعة إدارية", "", "", "", "", "", ""]
        ]
        
        for row_idx, row_data in enumerate(example_data):
            row_frame = tk.Frame(table_frame, bg=self.premium_colors['surface'])
            row_frame.pack(fill=tk.X, pady=1)
            
            for col_idx, cell_data in enumerate(row_data):
                if col_idx == 0:  # Serial number - label
                    cell_widget = tk.Label(row_frame, 
                                         text=self.format_arabic_text(cell_data),
                                         font=self.fonts['body'],
                                         bg=self.premium_colors['background'], 
                                         fg=self.premium_colors['text_light'],
                                         width=5, relief=tk.SUNKEN)
                    cell_widget.grid(row=0, column=len(headers)-1-col_idx, sticky='ew', padx=1, pady=1)
                elif col_idx == 7:  # Status - checkboxes
                    status_frame = tk.Frame(row_frame, bg=self.premium_colors['background'])
                    status_frame.grid(row=0, column=len(headers)-1-col_idx, sticky='ew', padx=1, pady=1)
                    
                    complete_var = tk.BooleanVar()
                    ongoing_var = tk.BooleanVar()
                    
                    # Set initial values for first row
                    if row_idx == 0 and cell_data == "complete":
                        complete_var.set(True)
                    
                    complete_cb = tk.Checkbutton(status_frame, text="مكتمل", variable=complete_var,
                                               font=self.fonts['body'], bg=self.premium_colors['background'],
                                               fg=self.premium_colors['text_light'])
                    complete_cb.pack(side=tk.RIGHT, padx=2)
                    
                    ongoing_cb = tk.Checkbutton(status_frame, text="جاري", variable=ongoing_var,
                                              font=self.fonts['body'], bg=self.premium_colors['background'],
                                              fg=self.premium_colors['text_light'])
                    ongoing_cb.pack(side=tk.RIGHT, padx=2)
                    
                    self.qf_10_01_03_entries[f'row_{row_idx}_status_complete'] = complete_var
                    self.qf_10_01_03_entries[f'row_{row_idx}_status_ongoing'] = ongoing_var
                else:  # Regular entry
                    cell_widget = tk.Entry(row_frame, font=self.fonts['body'], width=18,
                                         bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
                    if cell_data:
                        cell_widget.insert(0, cell_data)
                    
                    cell_widget.grid(row=0, column=len(headers)-1-col_idx, sticky='ew', padx=1, pady=1)
                    self.qf_10_01_03_entries[f'row_{row_idx}_col_{col_idx}'] = cell_widget
            
            # Configure grid weights
            for i in range(len(headers)):
                row_frame.grid_columnconfigure(i, weight=1)

    # ==================== QF-10-02-01 Form Implementations ====================
    
    def create_QF_10_02_01_01_form(self, parent_frame):
        """QF-10-02-01-01: سجل وثائق نظام الإدارة"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary
        self.qf_10_02_01_01_entries = {}
        
        # Header with date and title
        header_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        current_date = "2025/09/13"
        date_label = tk.Label(header_frame, 
                            text=f"تاريخ اليوم {current_date}",
                            font=self.fonts['body'],
                            fg='white',
                            bg=self.premium_colors['accent'],
                            padx=20, pady=10)
        date_label.pack(side=tk.RIGHT)
        
        title_text = "QF-10-02-01-01: سجل وثائق نظام الإدارة"
        title_label = tk.Label(header_frame, 
                             text=self.format_arabic_text(title_text), 
                             font=self.fonts['subtitle'],
                             fg='white',
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(expand=True)
        
        # ==================== أولاً: معلومات عامة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولاً: معلومات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_01(section1_frame, "اسم الجهة / المؤسسة:", "institution_name")
        self.create_form_field_doc_01(section1_frame, "القسم / الإدارة المسؤولة:", "responsible_department")
        self.create_form_field_doc_01(section1_frame, "مسؤول السجل:", "record_manager")
        self.create_date_field_doc_01(section1_frame, "تاريخ آخر تحديث للسجل:", "last_update_date")
        
        # ==================== ثانيًا: تفاصيل الوثائق ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: تفاصيل الوثائق"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Create documents table
        self.create_documents_table_01(section2_frame)
        
        # Document types note
        types_note = tk.Label(section2_frame, 
                            text=self.format_arabic_text("نوع الوثيقة: سياسة / إجراء / نموذج / سجل / دليل / مرجع خارجي / أخرى"),
                            font=self.fonts['body'],
                            fg=self.premium_colors['accent'],
                            bg=self.premium_colors['surface'],
                            wraplength=800,
                            justify=tk.RIGHT)
        types_note.pack(anchor="e", padx=10, pady=(10, 0))
        
        # Status checkboxes
        status_frame = tk.Frame(section2_frame, bg=self.premium_colors['surface'])
        status_frame.pack(anchor="e", padx=10, pady=(5, 10))
        
        status_label = tk.Label(status_frame, 
                              text=self.format_arabic_text("الحالة:"),
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'])
        status_label.pack(side=tk.RIGHT, padx=5)
        
        status_options = ["سارية", "ملغاة", "محدثة", "تحت المراجعة"]
        for status in status_options:
            status_var = tk.BooleanVar()
            cb = tk.Checkbutton(status_frame, text=self.format_arabic_text(status), 
                              variable=status_var,
                              font=self.fonts['body'], 
                              bg=self.premium_colors['surface'],
                              fg=self.premium_colors['text_light'])
            cb.pack(side=tk.RIGHT, padx=5)
            self.qf_10_02_01_01_entries[f'status_{status}'] = status_var
        
        # ==================== ثالثًا: ملاحظات عامة ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: ملاحظات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.qf_10_02_01_01_entries['general_notes'] = tk.Text(section3_frame, 
                                                              font=self.fonts['body'],
                                                              height=4, width=80,
                                                              bg=self.premium_colors['background'],
                                                              fg=self.premium_colors['text_light'],
                                                              insertbackground=self.premium_colors['text_light'])
        self.qf_10_02_01_01_entries['general_notes'].pack(fill=tk.X, padx=10, pady=10)
        
        # ==================== رابعًا: اعتماد مسؤول التوثيق ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: اعتماد مسؤول التوثيق"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_01(section4_frame, "الاسم:", "approver_name")
        self.create_form_field_doc_01(section4_frame, "الوظيفة:", "approver_position")
        self.create_form_field_doc_01(section4_frame, "التوقيع:", "approver_signature")
        self.create_date_field_doc_01(section4_frame, "التاريخ:", "approver_date")
        
        # Action Buttons
        self.create_universal_enhanced_form_buttons(scrollable_frame, "QF-10-02-01-01", "سجل وثائق نظام الإدارة", self.qf_10_02_01_01_entries)
        
        # Mouse wheel scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    def create_QF_10_02_01_02_form(self, parent_frame):
        """QF-10-02-01-02: سجل مراجعة الوثائق"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary
        self.qf_10_02_01_02_entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        current_date = "2025/09/13"
        date_label = tk.Label(header_frame, 
                            text=f"تاريخ اليوم {current_date}",
                            font=self.fonts['body'],
                            fg='white',
                            bg=self.premium_colors['accent'],
                            padx=20, pady=10)
        date_label.pack(side=tk.RIGHT)
        
        title_text = "QF-10-02-01-02: سجل مراجعة الوثائق"
        title_label = tk.Label(header_frame, 
                             text=self.format_arabic_text(title_text), 
                             font=self.fonts['subtitle'],
                             fg='white',
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(expand=True)
        
        # ==================== أولاً: معلومات عامة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولاً: معلومات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02(section1_frame, "اسم الجهة / المؤسسة:", "institution_name")
        self.create_form_field_doc_02(section1_frame, "الإدارة / القسم المسؤول عن التوثيق:", "documentation_dept")
        self.create_form_field_doc_02(section1_frame, "مسؤول السجل:", "record_manager")
        self.create_date_field_doc_02(section1_frame, "تاريخ آخر تحديث للسجل:", "last_update_date")
        
        # ==================== ثانيًا: جدول مراجعة الوثائق ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: جدول مراجعة الوثائق"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Create review table
        self.create_review_table_02(section2_frame)
        
        # ==================== ثالثًا: ملاحظات عامة ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: ملاحظات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.qf_10_02_01_02_entries['general_notes'] = tk.Text(section3_frame, 
                                                              font=self.fonts['body'],
                                                              height=4, width=80,
                                                              bg=self.premium_colors['background'],
                                                              fg=self.premium_colors['text_light'],
                                                              insertbackground=self.premium_colors['text_light'])
        self.qf_10_02_01_02_entries['general_notes'].pack(fill=tk.X, padx=10, pady=10)
        
        # ==================== رابعًا: اعتماد مسؤول التوثيق ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: اعتماد مسؤول التوثيق"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02(section4_frame, "الاسم:", "approver_name")
        self.create_form_field_doc_02(section4_frame, "الوظيفة:", "approver_position")
        self.create_form_field_doc_02(section4_frame, "التوقيع:", "approver_signature")
        self.create_date_field_doc_02(section4_frame, "التاريخ:", "approver_date")
        
        # Action Buttons
        self.create_universal_enhanced_form_buttons(scrollable_frame, "QF-10-02-01-02", "سجل مراجعة الوثائق", self.qf_10_02_01_02_entries)
        
        # Mouse wheel scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    def create_QF_10_02_01_03_form(self, parent_frame):
        """QF-10-02-01-03: نموذج تحديث الوثائق"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary
        self.qf_10_02_01_03_entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        current_date = "2025/09/13"
        date_label = tk.Label(header_frame, 
                            text=f"تاريخ اليوم {current_date}",
                            font=self.fonts['body'],
                            fg='white',
                            bg=self.premium_colors['accent'],
                            padx=20, pady=10)
        date_label.pack(side=tk.RIGHT)
        
        title_text = "QF-10-02-01-03: نموذج تحديث الوثائق"
        title_label = tk.Label(header_frame, 
                             text=self.format_arabic_text(title_text), 
                             font=self.fonts['subtitle'],
                             fg='white',
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(expand=True)
        
        # ==================== أولاً: بيانات الوثيقة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولاً: بيانات الوثيقة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_03(section1_frame, "اسم الوثيقة:", "document_name")
        self.create_form_field_doc_03(section1_frame, "الرقم المرجعي:", "reference_number")
        self.create_form_field_doc_03(section1_frame, "رقم الإصدار الحالي:", "current_version")
        self.create_date_field_doc_03(section1_frame, "تاريخ الإصدار الحالي:", "current_issue_date")
        
        # Document type checkboxes
        doc_type_frame = tk.Frame(section1_frame, bg=self.premium_colors['surface'])
        doc_type_frame.pack(fill=tk.X, padx=10, pady=5)
        
        doc_type_label = tk.Label(doc_type_frame, 
                                text=self.format_arabic_text("نوع الوثيقة:"),
                                font=self.fonts['body'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        doc_type_label.pack(side=tk.RIGHT, padx=10)
        
        doc_types = ["سياسة", "إجراء", "نموذج", "سجل", "دليل", "أخرى"]
        for doc_type in doc_types:
            type_var = tk.BooleanVar()
            cb = tk.Checkbutton(doc_type_frame, text=self.format_arabic_text(doc_type), 
                              variable=type_var,
                              font=self.fonts['body'], 
                              bg=self.premium_colors['surface'],
                              fg=self.premium_colors['text_light'])
            cb.pack(side=tk.RIGHT, padx=5)
            self.qf_10_02_01_03_entries[f'doc_type_{doc_type}'] = type_var
        
        # Other field
        self.create_form_field_doc_03(section1_frame, "أخرى:", "doc_type_other")
        
        # ==================== ثانيًا: تفاصيل التحديث المطلوب ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: تفاصيل التحديث المطلوب"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Update type checkboxes
        update_type_frame = tk.Frame(section2_frame, bg=self.premium_colors['surface'])
        update_type_frame.pack(fill=tk.X, padx=10, pady=5)
        
        update_type_label = tk.Label(update_type_frame, 
                                   text=self.format_arabic_text("نوع التحديث المطلوب:"),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['surface'])
        update_type_label.pack(side=tk.RIGHT, padx=10)
        
        update_types = ["تعديل صياغة", "إضافة محتوى", "حذف محتوى", "دمج وثائق", "إعادة إصدار شامل"]
        for update_type in update_types:
            type_var = tk.BooleanVar()
            cb = tk.Checkbutton(update_type_frame, text=self.format_arabic_text(update_type), 
                              variable=type_var,
                              font=self.fonts['body'], 
                              bg=self.premium_colors['surface'],
                              fg=self.premium_colors['text_light'])
            cb.pack(side=tk.RIGHT, padx=3)
            self.qf_10_02_01_03_entries[f'update_type_{update_type}'] = type_var
        
        # Reason checkboxes
        reason_frame = tk.Frame(section2_frame, bg=self.premium_colors['surface'])
        reason_frame.pack(fill=tk.X, padx=10, pady=5)
        
        reason_label = tk.Label(reason_frame, 
                              text=self.format_arabic_text("السبب / المبرر للتحديث:"),
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'])
        reason_label.pack(side=tk.RIGHT, padx=10)
        
        reasons = ["نتيجة تدقيق داخلي", "مراجعة دورية", "تغيير تشريعي", "اقتراح موظف", "أخرى"]
        for reason in reasons:
            reason_var = tk.BooleanVar()
            cb = tk.Checkbutton(reason_frame, text=self.format_arabic_text(reason), 
                              variable=reason_var,
                              font=self.fonts['body'], 
                              bg=self.premium_colors['surface'],
                              fg=self.premium_colors['text_light'])
            cb.pack(side=tk.RIGHT, padx=3)
            self.qf_10_02_01_03_entries[f'reason_{reason}'] = reason_var
        
        # Detailed explanation
        detail_label = tk.Label(section2_frame, 
                              text=self.format_arabic_text("الشرح التفصيلي للتحديثات المطلوبة:"),
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'])
        detail_label.pack(anchor="e", padx=10, pady=(10, 5))
        
        self.qf_10_02_01_03_entries['detailed_explanation'] = tk.Text(section2_frame, 
                                                                    font=self.fonts['body'],
                                                                    height=5, width=80,
                                                                    bg=self.premium_colors['background'],
                                                                    fg=self.premium_colors['text_light'],
                                                                    insertbackground=self.premium_colors['text_light'])
        self.qf_10_02_01_03_entries['detailed_explanation'].pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # Requester information
        self.create_form_field_doc_03(section2_frame, "الجهة المقترحة للتحديث:", "requesting_department")
        self.create_form_field_doc_03(section2_frame, "اسم المقترح:", "requester_name")
        self.create_form_field_doc_03(section2_frame, "الوظيفة:", "requester_position")
        self.create_date_field_doc_03(section2_frame, "التاريخ:", "request_date")
        self.create_form_field_doc_03(section2_frame, "التوقيع:", "requester_signature")
        
        # ==================== ثالثًا: رأي مسؤول التوثيق ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: رأي مسؤول التوثيق"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Recommendation checkboxes
        recommendation_frame = tk.Frame(section3_frame, bg=self.premium_colors['surface'])
        recommendation_frame.pack(fill=tk.X, padx=10, pady=5)
        
        approve_var = tk.BooleanVar()
        approve_cb = tk.Checkbutton(recommendation_frame, text=self.format_arabic_text("يُوصى بالموافقة على التحديث"), 
                                  variable=approve_var,
                                  font=self.fonts['body'], 
                                  bg=self.premium_colors['surface'],
                                  fg=self.premium_colors['text_light'])
        approve_cb.pack(side=tk.RIGHT, padx=10)
        self.qf_10_02_01_03_entries['recommend_approve'] = approve_var
        
        reject_var = tk.BooleanVar()
        reject_cb = tk.Checkbutton(recommendation_frame, text=self.format_arabic_text("يُوصى بعدم الموافقة مع توضيح السبب:"), 
                                 variable=reject_var,
                                 font=self.fonts['body'], 
                                 bg=self.premium_colors['surface'],
                                 fg=self.premium_colors['text_light'])
        reject_cb.pack(side=tk.RIGHT, padx=10)
        self.qf_10_02_01_03_entries['recommend_reject'] = reject_var
        
        self.create_form_field_doc_03(section3_frame, "سبب عدم الموافقة:", "rejection_reason")
        self.create_form_field_doc_03(section3_frame, "اسم مسؤول التوثيق:", "doc_manager_name")
        self.create_form_field_doc_03(section3_frame, "التوقيع:", "doc_manager_signature")
        self.create_date_field_doc_03(section3_frame, "التاريخ:", "doc_manager_date")
        
        # ==================== رابعًا: اعتماد الإدارة المختصة ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: اعتماد الإدارة المختصة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Approval status checkboxes
        approval_frame = tk.Frame(section4_frame, bg=self.premium_colors['surface'])
        approval_frame.pack(fill=tk.X, padx=10, pady=5)
        
        approved_var = tk.BooleanVar()
        approved_cb = tk.Checkbutton(approval_frame, text=self.format_arabic_text("تم اعتماد التحديث"), 
                                   variable=approved_var,
                                   font=self.fonts['body'], 
                                   bg=self.premium_colors['surface'],
                                   fg=self.premium_colors['text_light'])
        approved_cb.pack(side=tk.RIGHT, padx=10)
        self.qf_10_02_01_03_entries['approved'] = approved_var
        
        not_approved_var = tk.BooleanVar()
        not_approved_cb = tk.Checkbutton(approval_frame, text=self.format_arabic_text("لم يُعتمد بعد"), 
                                       variable=not_approved_var,
                                       font=self.fonts['body'], 
                                       bg=self.premium_colors['surface'],
                                       fg=self.premium_colors['text_light'])
        not_approved_cb.pack(side=tk.RIGHT, padx=10)
        self.qf_10_02_01_03_entries['not_approved'] = not_approved_var
        
        self.create_form_field_doc_03(section4_frame, "اسم المعتمد:", "approver_name")
        self.create_form_field_doc_03(section4_frame, "الوظيفة:", "approver_position")
        self.create_form_field_doc_03(section4_frame, "التوقيع:", "approver_signature")
        self.create_date_field_doc_03(section4_frame, "التاريخ:", "approval_date")
        
        # Action Buttons
        self.create_universal_enhanced_form_buttons(scrollable_frame, "QF-10-02-01-03", "نموذج تحديث الوثائق", self.qf_10_02_01_03_entries)
        
        # Mouse wheel scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    # Helper methods for document forms
    def create_form_field_doc_01(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-01-01"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=3)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        anchor="e")
        label.pack(side=tk.RIGHT, padx=(0, 10))
        
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        width=50,
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['text_light'])
        entry.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(0, 10))
        
        self.qf_10_02_01_01_entries[field_name] = entry
        return entry

    def create_date_field_doc_01(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-01-01"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=3)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        anchor="e")
        label.pack(side=tk.RIGHT, padx=(0, 10))
        
        date_frame = tk.Frame(field_frame, bg=self.premium_colors['surface'])
        date_frame.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Day
        day_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                           bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        # Month
        month_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                             bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        # Year
        year_entry = tk.Entry(date_frame, width=6, font=self.fonts['body'],
                            bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        self.qf_10_02_01_01_entries[f'{field_name}_day'] = day_entry
        self.qf_10_02_01_01_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_02_01_01_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    def create_documents_table_01(self, parent):
        """Create documents table for QF-10-02-01-01"""
        table_container = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        table_canvas = tk.Canvas(table_container, bg=self.premium_colors['surface'], height=250)
        h_scrollbar = tk.Scrollbar(table_container, orient="horizontal", command=table_canvas.xview)
        table_frame = tk.Frame(table_canvas, bg=self.premium_colors['surface'])
        
        table_frame.bind(
            "<Configure>",
            lambda e: table_canvas.configure(scrollregion=table_canvas.bbox("all"))
        )
        
        table_canvas.create_window((0, 0), window=table_frame, anchor="nw")
        table_canvas.configure(xscrollcommand=h_scrollbar.set)
        
        table_canvas.pack(side="top", fill="both", expand=True)
        h_scrollbar.pack(side="bottom", fill="x")
        
        headers = ["م", "اسم الوثيقة", "نوع الوثيقة", "الرقم المرجعي", "رقم الإصدار", "تاريخ الإصدار", "الحالة", "الجهات المستفيدة", "ملاحظات"]
        
        # Header row
        header_frame = tk.Frame(table_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 2))
        
        for i, header in enumerate(headers):
            header_label = tk.Label(header_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg='white',
                                  bg=self.premium_colors['accent'],
                                  width=12, height=2,
                                  relief=tk.RAISED)
            header_label.grid(row=0, column=len(headers)-1-i, sticky='ew', padx=1)
        
        for i in range(len(headers)):
            header_frame.grid_columnconfigure(i, weight=1)
        
        # Example data rows
        example_data = [
            ["1", "دليل الجودة", "دليل Quality Manual", "QM-01", "01", "01/01/2024", "سارية", "كافة الإدارات", ""],
            ["2", "إجراء التدقيق الداخلي", "إجراء Internal Audit", "PR-07-01", "02", "15/03/2024", "محدثة", "إدارة الجودة", "تم التعديل بناءً على مراجعة"],
            ["3", "نموذج شكوى", "نموذج Form", "QF-09-09-01", "01", "10/02/2025", "سارية", "شؤون المتعاملين", ""],
            ["4", "سياسة الحيادية", "سياسة Policy", "POL-02", "01", "05/01/2024", "سارية", "الإدارة العليا والجودة", ""]
        ]
        
        for row_idx, row_data in enumerate(example_data):
            row_frame = tk.Frame(table_frame, bg=self.premium_colors['surface'])
            row_frame.pack(fill=tk.X, pady=1)
            
            for col_idx, cell_data in enumerate(row_data):
                if col_idx == 0:  # Serial number
                    cell_widget = tk.Label(row_frame, 
                                         text=self.format_arabic_text(cell_data),
                                         font=self.fonts['body'],
                                         bg=self.premium_colors['background'], 
                                         fg=self.premium_colors['text_light'],
                                         width=5, relief=tk.SUNKEN)
                else:  # Regular entry
                    cell_widget = tk.Entry(row_frame, font=self.fonts['body'], width=12,
                                         bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
                    if cell_data:
                        cell_widget.insert(0, cell_data)
                
                cell_widget.grid(row=0, column=len(headers)-1-col_idx, sticky='ew', padx=1, pady=1)
                self.qf_10_02_01_01_entries[f'row_{row_idx}_col_{col_idx}'] = cell_widget
            
            for i in range(len(headers)):
                row_frame.grid_columnconfigure(i, weight=1)

    # Similar helper methods for form 02 and 03
    def create_form_field_doc_02(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-01-02"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=3)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        anchor="e")
        label.pack(side=tk.RIGHT, padx=(0, 10))
        
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        width=50,
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['text_light'])
        entry.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(0, 10))
        
        self.qf_10_02_01_02_entries[field_name] = entry
        return entry

    def create_date_field_doc_02(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-01-02"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=3)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        anchor="e")
        label.pack(side=tk.RIGHT, padx=(0, 10))
        
        date_frame = tk.Frame(field_frame, bg=self.premium_colors['surface'])
        date_frame.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Date components
        day_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                           bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        month_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                             bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        year_entry = tk.Entry(date_frame, width=6, font=self.fonts['body'],
                            bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        self.qf_10_02_01_02_entries[f'{field_name}_day'] = day_entry
        self.qf_10_02_01_02_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_02_01_02_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    def create_review_table_02(self, parent):
        """Create review table for QF-10-02-01-02"""
        table_container = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        table_canvas = tk.Canvas(table_container, bg=self.premium_colors['surface'], height=250)
        h_scrollbar = tk.Scrollbar(table_container, orient="horizontal", command=table_canvas.xview)
        table_frame = tk.Frame(table_canvas, bg=self.premium_colors['surface'])
        
        table_frame.bind(
            "<Configure>",
            lambda e: table_canvas.configure(scrollregion=table_canvas.bbox("all"))
        )
        
        table_canvas.create_window((0, 0), window=table_frame, anchor="nw")
        table_canvas.configure(xscrollcommand=h_scrollbar.set)
        
        table_canvas.pack(side="top", fill="both", expand=True)
        h_scrollbar.pack(side="bottom", fill="x")
        
        headers = ["م", "اسم الوثيقة", "الرقم المرجعي", "رقم الإصدار الحالي", "تاريخ المراجعة", "الجهة المراجعة", "نوع التعديل", "ملخص التعديل", "الإجراء المتخذ", "المراجع", "التوقيع"]
        
        # Header row
        header_frame = tk.Frame(table_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 2))
        
        for i, header in enumerate(headers):
            header_label = tk.Label(header_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg='white',
                                  bg=self.premium_colors['accent'],
                                  width=10, height=2,
                                  relief=tk.RAISED)
            header_label.grid(row=0, column=len(headers)-1-i, sticky='ew', padx=1)
        
        for i in range(len(headers)):
            header_frame.grid_columnconfigure(i, weight=1)
        
        # Example data rows
        example_data = [
            ["1", "سياسة الجودة", "POL-01", "02", "10/03/2025", "إدارة الجودة", "جوهري", "تحديث بنود الالتزام", "تعديل", "", ""],
            ["2", "إجراء التدريب", "PR-06-02", "01", "05/02/2025", "إدارة التدريب", "طفيف", "تصحيح صياغة فقط", "اعتماد", "", ""],
            ["3", "نموذج الشكوى", "QF-09-09-01", "01", "28/01/2025", "شؤون المتعاملين", "طفيف", "تعديل خانة بيانات الاتصال", "تعديل", "", ""]
        ]
        
        for row_idx, row_data in enumerate(example_data):
            row_frame = tk.Frame(table_frame, bg=self.premium_colors['surface'])
            row_frame.pack(fill=tk.X, pady=1)
            
            for col_idx, cell_data in enumerate(row_data):
                if col_idx == 0:  # Serial number
                    cell_widget = tk.Label(row_frame, 
                                         text=self.format_arabic_text(cell_data),
                                         font=self.fonts['body'],
                                         bg=self.premium_colors['background'], 
                                         fg=self.premium_colors['text_light'],
                                         width=5, relief=tk.SUNKEN)
                else:  # Regular entry
                    cell_widget = tk.Entry(row_frame, font=self.fonts['body'], width=10,
                                         bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
                    if cell_data:
                        cell_widget.insert(0, cell_data)
                
                cell_widget.grid(row=0, column=len(headers)-1-col_idx, sticky='ew', padx=1, pady=1)
                self.qf_10_02_01_02_entries[f'row_{row_idx}_col_{col_idx}'] = cell_widget
            
            for i in range(len(headers)):
                row_frame.grid_columnconfigure(i, weight=1)

    def create_form_field_doc_03(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-01-03"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=3)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        anchor="e")
        label.pack(side=tk.RIGHT, padx=(0, 10))
        
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        width=50,
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['text_light'])
        entry.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(0, 10))
        
        self.qf_10_02_01_03_entries[field_name] = entry
        return entry

    def create_date_field_doc_03(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-01-03"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=3)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        anchor="e")
        label.pack(side=tk.RIGHT, padx=(0, 10))
        
        date_frame = tk.Frame(field_frame, bg=self.premium_colors['surface'])
        date_frame.pack(side=tk.RIGHT, padx=(0, 10))
        
        # Date components
        day_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                           bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        month_entry = tk.Entry(date_frame, width=4, font=self.fonts['body'],
                             bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        tk.Label(date_frame, text="/", font=self.fonts['body'], 
                fg=self.premium_colors['text_light'], bg=self.premium_colors['surface']).pack(side=tk.RIGHT)
        
        year_entry = tk.Entry(date_frame, width=6, font=self.fonts['body'],
                            bg=self.premium_colors['background'], fg=self.premium_colors['text_light'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        self.qf_10_02_01_03_entries[f'{field_name}_day'] = day_entry
        self.qf_10_02_01_03_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_02_01_03_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    # ==================== QF-10-02-02 Form Implementations ====================
    
    def create_QF_10_02_02_01_form(self, parent_frame):
        """QF-10-02-02-01: نموذج مراجعة الوثائق"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary
        self.qf_10_02_02_01_entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        title_text = "QF-10-02-02-01: نموذج مراجعة الوثائق"
        title_label = tk.Label(header_frame, 
                             text=self.format_arabic_text(title_text), 
                             font=self.fonts['subtitle'],
                             fg='white',
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(expand=True)
        
        # ==================== أولاً: معلومات الوثيقة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولاً: معلومات الوثيقة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_02_01(section1_frame, "اسم الوثيقة:", "document_name")
        
        # Document type checkboxes
        doc_type_frame = tk.Frame(section1_frame, bg=self.premium_colors['surface'])
        doc_type_frame.pack(fill=tk.X, padx=10, pady=5)
        
        doc_type_label = tk.Label(doc_type_frame, 
                                text=self.format_arabic_text("نوع الوثيقة:"),
                                font=self.fonts['body'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        doc_type_label.pack(anchor="e", padx=5)
        
        doc_types = ["سياسة", "إجراء", "نموذج", "سجل", "دليل", "أخرى"]
        for doc_type in doc_types:
            doc_type_var = tk.BooleanVar()
            cb = tk.Checkbutton(doc_type_frame, text=self.format_arabic_text(doc_type),
                              variable=doc_type_var,
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              selectcolor=self.premium_colors['accent'])
            cb.pack(side=tk.RIGHT, padx=5)
            self.qf_10_02_02_01_entries[f'doc_type_{doc_type}'] = doc_type_var
        
        self.create_form_field_doc_02_02_01(section1_frame, "الرقم المرجعي للوثيقة:", "reference_number")
        self.create_form_field_doc_02_02_01(section1_frame, "رقم الإصدار الحالي:", "current_version")
        self.create_date_field_doc_02_02_01(section1_frame, "تاريخ الإصدار:", "issue_date")
        self.create_form_field_doc_02_02_01(section1_frame, "القسم / الإدارة المالكة للوثيقة:", "owner_department")
        
        # ==================== ثانيًا: معلومات المراجعة ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: معلومات المراجعة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_date_field_doc_02_02_01(section2_frame, "تاريخ المراجعة:", "review_date")
        
        # Review reason checkboxes
        review_reason_frame = tk.Frame(section2_frame, bg=self.premium_colors['surface'])
        review_reason_frame.pack(fill=tk.X, padx=10, pady=5)
        
        review_reason_label = tk.Label(review_reason_frame, 
                                     text=self.format_arabic_text("سبب المراجعة:"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['text_light'],
                                     bg=self.premium_colors['surface'])
        review_reason_label.pack(anchor="e", padx=5)
        
        review_reasons = ["مراجعة دورية", "ملاحظة تدقيق", "تحديث تشريعي", "تعديل داخلي", "أخرى"]
        for reason in review_reasons:
            reason_var = tk.BooleanVar()
            cb = tk.Checkbutton(review_reason_frame, text=self.format_arabic_text(reason),
                              variable=reason_var,
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              selectcolor=self.premium_colors['accent'])
            cb.pack(side=tk.RIGHT, padx=5)
            self.qf_10_02_02_01_entries[f'review_reason_{reason}'] = reason_var
        
        # ==================== ثالثًا: نتائج المراجعة ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: نتائج المراجعة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Document status after review
        status_frame = tk.Frame(section3_frame, bg=self.premium_colors['surface'])
        status_frame.pack(fill=tk.X, padx=10, pady=5)
        
        status_label = tk.Label(status_frame, 
                              text=self.format_arabic_text("حالة الوثيقة بعد المراجعة:"),
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'])
        status_label.pack(anchor="e", padx=5)
        
        statuses = ["لا حاجة إلى تعديل", "مطلوب تحديث", "إلغاء الوثيقة", "دمج الوثيقة مع وثيقة أخرى"]
        for status in statuses:
            status_var = tk.BooleanVar()
            cb = tk.Checkbutton(status_frame, text=self.format_arabic_text(status),
                              variable=status_var,
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              selectcolor=self.premium_colors['accent'])
            cb.pack(anchor="e", padx=5, pady=2)
            self.qf_10_02_02_01_entries[f'status_{status}'] = status_var
        
        # Reviewer notes
        notes_frame = tk.Frame(section3_frame, bg=self.premium_colors['surface'])
        notes_frame.pack(fill=tk.X, padx=10, pady=10)
        
        notes_label = tk.Label(notes_frame, 
                             text=self.format_arabic_text("ملاحظات المراجع:"),
                             font=self.fonts['body'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        notes_label.pack(anchor="e", padx=5)
        
        notes_text = tk.Text(notes_frame, height=4, width=60, font=self.fonts['body'],
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        notes_text.pack(fill=tk.X, padx=5, pady=5)
        self.qf_10_02_02_01_entries['reviewer_notes'] = notes_text
        
        # ==================== رابعًا: التوصيات ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: التوصيات"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Recommendations checkboxes
        recommendations = ["الإبقاء على الوثيقة كما هي", "إجراء تعديلات طفيفة", "إجراء تعديلات جوهرية", "إصدار جديد برقم وتاريخ جديد", "إلغاء الوثيقة"]
        for rec in recommendations:
            rec_var = tk.BooleanVar()
            cb = tk.Checkbutton(section4_frame, text=self.format_arabic_text(rec),
                              variable=rec_var,
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              selectcolor=self.premium_colors['accent'])
            cb.pack(anchor="e", padx=15, pady=2)
            self.qf_10_02_02_01_entries[f'recommendation_{rec}'] = rec_var
        
        # ==================== خامسًا: اعتماد المراجعة ====================
        section5_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("خامسًا: اعتماد المراجعة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section5_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_02_01(section5_frame, "اسم المراجع:", "reviewer_name")
        self.create_form_field_doc_02_02_01(section5_frame, "الوظيفة:", "reviewer_position")
        self.create_form_field_doc_02_02_01(section5_frame, "التوقيع:", "reviewer_signature")
        self.create_date_field_doc_02_02_01(section5_frame, "التاريخ:", "reviewer_date")
        
        self.create_form_field_doc_02_02_01(section5_frame, "اعتماد مسؤول التوثيق - الاسم:", "approver_name")
        self.create_form_field_doc_02_02_01(section5_frame, "التوقيع:", "approver_signature")
        self.create_date_field_doc_02_02_01(section5_frame, "التاريخ:", "approver_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-02-01", self.qf_10_02_02_01_entries)
        
        # Mouse wheel scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    def create_QF_10_02_02_02_form(self, parent_frame):
        """QF-10-02-02-02: نموذج توزيع الوثائق"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary
        self.qf_10_02_02_02_entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        title_text = "QF-10-02-02-02: نموذج توزيع الوثائق"
        title_label = tk.Label(header_frame, 
                             text=self.format_arabic_text(title_text), 
                             font=self.fonts['subtitle'],
                             fg='white',
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(expand=True)
        
        # ==================== أولاً: معلومات الوثيقة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولاً: معلومات الوثيقة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_02_02(section1_frame, "اسم الوثيقة:", "document_name")
        
        # Document type checkboxes
        doc_type_frame = tk.Frame(section1_frame, bg=self.premium_colors['surface'])
        doc_type_frame.pack(fill=tk.X, padx=10, pady=5)
        
        doc_type_label = tk.Label(doc_type_frame, 
                                text=self.format_arabic_text("نوع الوثيقة:"),
                                font=self.fonts['body'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        doc_type_label.pack(anchor="e", padx=5)
        
        doc_types = ["سياسة", "إجراء", "نموذج", "سجل", "دليل", "أخرى"]
        for doc_type in doc_types:
            doc_type_var = tk.BooleanVar()
            cb = tk.Checkbutton(doc_type_frame, text=self.format_arabic_text(doc_type),
                              variable=doc_type_var,
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              selectcolor=self.premium_colors['accent'])
            cb.pack(side=tk.RIGHT, padx=5)
            self.qf_10_02_02_02_entries[f'doc_type_{doc_type}'] = doc_type_var
        
        self.create_form_field_doc_02_02_02(section1_frame, "الرقم المرجعي:", "reference_number")
        self.create_form_field_doc_02_02_02(section1_frame, "رقم الإصدار:", "version_number")
        self.create_date_field_doc_02_02_02(section1_frame, "تاريخ الإصدار / التحديث:", "issue_date")
        self.create_form_field_doc_02_02_02(section1_frame, "جهة الإصدار / القسم المسؤول:", "issuing_department")
        
        # ==================== ثانيًا: بيانات التوزيع ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: بيانات التوزيع"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Create distribution table
        self.create_distribution_table_02_02_02(section2_frame)
        
        # ==================== ثالثًا: ملاحظات التوزيع ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: ملاحظات التوزيع"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        notes_text = tk.Text(section3_frame, height=4, width=60, font=self.fonts['body'],
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        notes_text.pack(fill=tk.X, padx=10, pady=10)
        self.qf_10_02_02_02_entries['distribution_notes'] = notes_text
        
        # ==================== رابعًا: مسؤول التوزيع ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: مسؤول التوزيع"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_02_02(section4_frame, "الاسم:", "distributor_name")
        self.create_form_field_doc_02_02_02(section4_frame, "الوظيفة:", "distributor_position")
        self.create_form_field_doc_02_02_02(section4_frame, "التوقيع:", "distributor_signature")
        self.create_date_field_doc_02_02_02(section4_frame, "التاريخ:", "distributor_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-02-02", self.qf_10_02_02_02_entries)
        
        # Mouse wheel scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    def create_QF_10_02_02_03_form(self, parent_frame):
        """QF-10-02-02-03: نموذج حفظ الوثائق المؤرشفة"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary
        self.qf_10_02_02_03_entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        title_text = "QF-10-02-02-03: نموذج حفظ الوثائق المؤرشفة"
        title_label = tk.Label(header_frame, 
                             text=self.format_arabic_text(title_text), 
                             font=self.fonts['subtitle'],
                             fg='white',
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(expand=True)
        
        # ==================== أولاً: بيانات الوثيقة المؤرشفة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولاً: بيانات الوثيقة المؤرشفة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_02_03(section1_frame, "اسم الوثيقة:", "document_name")
        
        # Document type checkboxes
        doc_type_frame = tk.Frame(section1_frame, bg=self.premium_colors['surface'])
        doc_type_frame.pack(fill=tk.X, padx=10, pady=5)
        
        doc_type_label = tk.Label(doc_type_frame, 
                                text=self.format_arabic_text("نوع الوثيقة:"),
                                font=self.fonts['body'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        doc_type_label.pack(anchor="e", padx=5)
        
        doc_types = ["سياسة", "إجراء", "نموذج", "سجل", "تقرير", "دليل", "أخرى"]
        for doc_type in doc_types:
            doc_type_var = tk.BooleanVar()
            cb = tk.Checkbutton(doc_type_frame, text=self.format_arabic_text(doc_type),
                              variable=doc_type_var,
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              selectcolor=self.premium_colors['accent'])
            cb.pack(side=tk.RIGHT, padx=5)
            self.qf_10_02_02_03_entries[f'doc_type_{doc_type}'] = doc_type_var
        
        self.create_form_field_doc_02_02_03(section1_frame, "الرقم المرجعي:", "reference_number")
        self.create_form_field_doc_02_02_03(section1_frame, "رقم الإصدار:", "version_number")
        self.create_date_field_doc_02_02_03(section1_frame, "تاريخ الإصدار:", "issue_date")
        self.create_date_field_doc_02_02_03(section1_frame, "تاريخ انتهاء الاستخدام الفعلي:", "end_date")
        
        # Archive reason checkboxes
        archive_reason_frame = tk.Frame(section1_frame, bg=self.premium_colors['surface'])
        archive_reason_frame.pack(fill=tk.X, padx=10, pady=5)
        
        archive_reason_label = tk.Label(archive_reason_frame, 
                                      text=self.format_arabic_text("سبب الأرشفة:"),
                                      font=self.fonts['body'],
                                      fg=self.premium_colors['text_light'],
                                      bg=self.premium_colors['surface'])
        archive_reason_label.pack(anchor="e", padx=5)
        
        archive_reasons = ["إصدار أحدث", "انتهاء فترة الاستخدام", "إلغاء الوثيقة", "توجيه إداري", "أخرى"]
        for reason in archive_reasons:
            reason_var = tk.BooleanVar()
            cb = tk.Checkbutton(archive_reason_frame, text=self.format_arabic_text(reason),
                              variable=reason_var,
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              selectcolor=self.premium_colors['accent'])
            cb.pack(side=tk.RIGHT, padx=5)
            self.qf_10_02_02_03_entries[f'archive_reason_{reason}'] = reason_var
        
        # ==================== ثانيًا: معلومات الأرشفة ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: معلومات الأرشفة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Archive location checkboxes
        archive_loc_frame = tk.Frame(section2_frame, bg=self.premium_colors['surface'])
        archive_loc_frame.pack(fill=tk.X, padx=10, pady=5)
        
        archive_loc_label = tk.Label(archive_loc_frame, 
                                   text=self.format_arabic_text("مكان الأرشفة:"),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['surface'])
        archive_loc_label.pack(anchor="e", padx=5)
        
        archive_paper_var = tk.BooleanVar()
        archive_paper_cb = tk.Checkbutton(archive_loc_frame, text=self.format_arabic_text("أرشيف ورقي"),
                                        variable=archive_paper_var,
                                        font=self.fonts['body'],
                                        fg=self.premium_colors['text_light'],
                                        bg=self.premium_colors['surface'],
                                        selectcolor=self.premium_colors['accent'])
        archive_paper_cb.pack(side=tk.RIGHT, padx=5)
        self.qf_10_02_02_03_entries['archive_paper'] = archive_paper_var
        
        archive_electronic_var = tk.BooleanVar()
        archive_electronic_cb = tk.Checkbutton(archive_loc_frame, text=self.format_arabic_text("أرشيف إلكتروني"),
                                              variable=archive_electronic_var,
                                              font=self.fonts['body'],
                                              fg=self.premium_colors['text_light'],
                                              bg=self.premium_colors['surface'],
                                              selectcolor=self.premium_colors['accent'])
        archive_electronic_cb.pack(side=tk.RIGHT, padx=5)
        self.qf_10_02_02_03_entries['archive_electronic'] = archive_electronic_var
        
        self.create_form_field_doc_02_02_03(section2_frame, "رمز / رقم الحفظ بالأرشيف:", "archive_code")
        self.create_form_field_doc_02_02_03(section2_frame, "مدة الاحتفاظ (سنوات):", "retention_period")
        
        # ==================== ثالثًا: مسؤول الحفظ ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: مسؤول الحفظ"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_02_03(section3_frame, "الاسم:", "keeper_name")
        self.create_form_field_doc_02_02_03(section3_frame, "القسم / الإدارة:", "keeper_department")
        self.create_form_field_doc_02_02_03(section3_frame, "الوظيفة:", "keeper_position")
        self.create_form_field_doc_02_02_03(section3_frame, "التوقيع:", "keeper_signature")
        self.create_date_field_doc_02_02_03(section3_frame, "تاريخ الحفظ:", "keep_date")
        
        # ==================== رابعًا: ملاحظات إضافية ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: ملاحظات إضافية"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        notes_text = tk.Text(section4_frame, height=4, width=60, font=self.fonts['body'],
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        notes_text.pack(fill=tk.X, padx=10, pady=10)
        self.qf_10_02_02_03_entries['additional_notes'] = notes_text
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-02-03", self.qf_10_02_02_03_entries)
        
        # Mouse wheel scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    # ==================== Helper Methods for QF-10-02-02 Forms ====================
    
    def create_form_field_doc_02_02_01(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-02-01 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'], width=40,
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side=tk.RIGHT, padx=5, fill=tk.X, expand=True)
        
        self.qf_10_02_02_01_entries[field_name] = entry
        return entry

    def create_date_field_doc_02_02_01(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-02-01"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        # Date entry fields
        date_container = tk.Frame(field_frame, bg=self.premium_colors['surface'])
        date_container.pack(side=tk.RIGHT, padx=5)
        
        # Year
        year_label = tk.Label(date_container, text=self.format_arabic_text("السنة"),
                            font=self.fonts['body'], fg=self.premium_colors['text_light'],
                            bg=self.premium_colors['surface'])
        year_label.pack(side=tk.RIGHT, padx=2)
        
        year_entry = tk.Entry(date_container, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        # Month
        month_label = tk.Label(date_container, text=self.format_arabic_text("الشهر"),
                             font=self.fonts['body'], fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        month_label.pack(side=tk.RIGHT, padx=2)
        
        month_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        # Day
        day_label = tk.Label(date_container, text=self.format_arabic_text("اليوم"),
                           font=self.fonts['body'], fg=self.premium_colors['text_light'],
                           bg=self.premium_colors['surface'])
        day_label.pack(side=tk.RIGHT, padx=2)
        
        day_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        self.qf_10_02_02_01_entries[f'{field_name}_day'] = day_entry
        self.qf_10_02_02_01_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_02_02_01_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    def create_form_field_doc_02_02_02(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-02-02 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'], width=40,
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side=tk.RIGHT, padx=5, fill=tk.X, expand=True)
        
        self.qf_10_02_02_02_entries[field_name] = entry
        return entry

    def create_date_field_doc_02_02_02(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-02-02"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        # Date entry fields
        date_container = tk.Frame(field_frame, bg=self.premium_colors['surface'])
        date_container.pack(side=tk.RIGHT, padx=5)
        
        # Year
        year_label = tk.Label(date_container, text=self.format_arabic_text("السنة"),
                            font=self.fonts['body'], fg=self.premium_colors['text_light'],
                            bg=self.premium_colors['surface'])
        year_label.pack(side=tk.RIGHT, padx=2)
        
        year_entry = tk.Entry(date_container, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        # Month
        month_label = tk.Label(date_container, text=self.format_arabic_text("الشهر"),
                             font=self.fonts['body'], fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        month_label.pack(side=tk.RIGHT, padx=2)
        
        month_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        # Day
        day_label = tk.Label(date_container, text=self.format_arabic_text("اليوم"),
                           font=self.fonts['body'], fg=self.premium_colors['text_light'],
                           bg=self.premium_colors['surface'])
        day_label.pack(side=tk.RIGHT, padx=2)
        
        day_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        self.qf_10_02_02_02_entries[f'{field_name}_day'] = day_entry
        self.qf_10_02_02_02_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_02_02_02_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    def create_distribution_table_02_02_02(self, parent):
        """Create distribution table for QF-10-02-02-02"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Table headers
        headers = ["م", "الإدارة / القسم المستلم", "اسم المستلم", "الوظيفة", "وسيلة التوزيع", "تاريخ التوزيع", "التوقيع"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add empty rows for data entry
        self.qf_10_02_02_02_entries['distribution_rows'] = []
        for row in range(1, 6):  # 5 empty rows
            row_data = {}
            for col, field in enumerate(['number', 'department', 'receiver_name', 'position', 'distribution_method', 'date', 'signature']):
                if field == 'number':
                    cell = tk.Label(table_frame, text=str(row),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  relief=tk.SUNKEN, bd=1)
                else:
                    cell = tk.Entry(table_frame, font=self.fonts['body'], width=12,
                                  bg=self.premium_colors['background'],
                                  fg=self.premium_colors['text_light'],
                                  insertbackground=self.premium_colors['accent'])
                
                cell.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
                row_data[field] = cell
            
            self.qf_10_02_02_02_entries['distribution_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_form_field_doc_02_02_03(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-02-03 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'], width=40,
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side=tk.RIGHT, padx=5, fill=tk.X, expand=True)
        
        self.qf_10_02_02_03_entries[field_name] = entry
        return entry

    def create_date_field_doc_02_02_03(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-02-03"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        # Date entry fields
        date_container = tk.Frame(field_frame, bg=self.premium_colors['surface'])
        date_container.pack(side=tk.RIGHT, padx=5)
        
        # Year
        year_label = tk.Label(date_container, text=self.format_arabic_text("السنة"),
                            font=self.fonts['body'], fg=self.premium_colors['text_light'],
                            bg=self.premium_colors['surface'])
        year_label.pack(side=tk.RIGHT, padx=2)
        
        year_entry = tk.Entry(date_container, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        # Month
        month_label = tk.Label(date_container, text=self.format_arabic_text("الشهر"),
                             font=self.fonts['body'], fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        month_label.pack(side=tk.RIGHT, padx=2)
        
        month_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        # Day
        day_label = tk.Label(date_container, text=self.format_arabic_text("اليوم"),
                           font=self.fonts['body'], fg=self.premium_colors['text_light'],
                           bg=self.premium_colors['surface'])
        day_label.pack(side=tk.RIGHT, padx=2)
        
        day_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        self.qf_10_02_02_03_entries[f'{field_name}_day'] = day_entry
        self.qf_10_02_02_03_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_02_02_03_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    # ==================== QF-10-02-03 Form Implementations ====================
    
    def create_QF_10_02_03_01_form(self, parent_frame):
        """QF-10-02-03-01: نموذج تحديد السجلات وحفظها"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary
        self.qf_10_02_03_01_entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        title_text = "QF-10-02-03-01: نموذج تحديد السجلات وحفظها"
        title_label = tk.Label(header_frame, 
                             text=self.format_arabic_text(title_text), 
                             font=self.fonts['subtitle'],
                             fg='white',
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(expand=True)
        
        # ==================== أولاً: معلومات عامة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولاً: معلومات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_03_01(section1_frame, "اسم الجهة / المؤسسة:", "institution_name")
        self.create_form_field_doc_02_03_01(section1_frame, "القسم / الإدارة:", "department")
        self.create_form_field_doc_02_03_01(section1_frame, "مسؤول إعداد النموذج:", "form_preparer")
        self.create_date_field_doc_02_03_01(section1_frame, "تاريخ الإعداد / التحديث:", "preparation_date")
        
        # ==================== ثانيًا: جدول تحديد السجلات ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: جدول تحديد السجلات"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Create records table
        self.create_records_table_02_03_01(section2_frame)
        
        # ==================== ثالثًا: ملاحظات عامة ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: ملاحظات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        notes_text = tk.Text(section3_frame, height=4, width=60, font=self.fonts['body'],
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        notes_text.pack(fill=tk.X, padx=10, pady=10)
        self.qf_10_02_03_01_entries['general_notes'] = notes_text
        
        # ==================== رابعًا: اعتماد المسؤول ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: اعتماد المسؤول"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_03_01(section4_frame, "الاسم:", "approver_name")
        self.create_form_field_doc_02_03_01(section4_frame, "الوظيفة:", "approver_position")
        self.create_form_field_doc_02_03_01(section4_frame, "التوقيع:", "approver_signature")
        self.create_date_field_doc_02_03_01(section4_frame, "التاريخ:", "approval_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-03-01", self.qf_10_02_03_01_entries)
        
        # Mouse wheel scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    def create_QF_10_02_03_02_form(self, parent_frame):
        """QF-10-02-03-02: نموذج إجراء استرجاع السجلات"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary
        self.qf_10_02_03_02_entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        title_text = "QF-10-02-03-02: نموذج إجراء استرجاع السجلات"
        title_label = tk.Label(header_frame, 
                             text=self.format_arabic_text(title_text), 
                             font=self.fonts['subtitle'],
                             fg='white',
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(expand=True)
        
        # ==================== أولاً: معلومات الطلب ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولاً: معلومات الطلب"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_03_02(section1_frame, "رقم الطلب:", "request_number")
        self.create_date_field_doc_02_03_02(section1_frame, "تاريخ الطلب:", "request_date")
        self.create_form_field_doc_02_03_02(section1_frame, "اسم مقدم الطلب:", "requester_name")
        self.create_form_field_doc_02_03_02(section1_frame, "الوظيفة / القسم:", "requester_position")
        
        # ==================== ثانيًا: تفاصيل السجلات المطلوبة ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: تفاصيل السجلات المطلوبة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_03_02(section2_frame, "اسم السجل / الوثيقة:", "record_name")
        self.create_form_field_doc_02_03_02(section2_frame, "الرقم المرجعي:", "reference_number")
        self.create_date_field_doc_02_03_02(section2_frame, "التاريخ / الفترة الزمنية:", "time_period")
        self.create_form_field_doc_02_03_02(section2_frame, "الغرض من الاسترجاع:", "retrieval_purpose")
        
        # ==================== ثالثًا: معلومات الاسترجاع ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: معلومات الاسترجاع"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_date_field_doc_02_03_02(section3_frame, "تاريخ الاسترجاع:", "retrieval_date")
        self.create_form_field_doc_02_03_02(section3_frame, "مكان حفظ السجل:", "storage_location")
        
        # Record status checkboxes
        status_frame = tk.Frame(section3_frame, bg=self.premium_colors['surface'])
        status_frame.pack(fill=tk.X, padx=10, pady=5)
        
        status_label = tk.Label(status_frame, 
                              text=self.format_arabic_text("حالة السجل:"),
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'])
        status_label.pack(anchor="e", padx=5)
        
        statuses = ["موجود وسليم", "موجود مع تلف جزئي", "غير موجود", "تم تدميره حسب السياسة"]
        for status in statuses:
            status_var = tk.BooleanVar()
            cb = tk.Checkbutton(status_frame, text=self.format_arabic_text(status),
                              variable=status_var,
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              selectcolor=self.premium_colors['accent'])
            cb.pack(anchor="e", padx=15, pady=2)
            self.qf_10_02_03_02_entries[f'status_{status}'] = status_var
        
        # Results notes
        results_frame = tk.Frame(section3_frame, bg=self.premium_colors['surface'])
        results_frame.pack(fill=tk.X, padx=10, pady=10)
        
        results_label = tk.Label(results_frame, 
                               text=self.format_arabic_text("نتائج الاسترجاع:"),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'])
        results_label.pack(anchor="e", padx=5)
        
        results_text = tk.Text(results_frame, height=4, width=60, font=self.fonts['body'],
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        results_text.pack(fill=tk.X, padx=5, pady=5)
        self.qf_10_02_03_02_entries['retrieval_results'] = results_text
        
        # ==================== رابعًا: توقيع المسؤول ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: توقيع المسؤول"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_03_02(section4_frame, "اسم مسؤول الأرشيف:", "archive_manager_name")
        self.create_form_field_doc_02_03_02(section4_frame, "التوقيع:", "manager_signature")
        self.create_date_field_doc_02_03_02(section4_frame, "التاريخ:", "signature_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-03-02", self.qf_10_02_03_02_entries)
        
        # Mouse wheel scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    def create_QF_10_02_03_03_form(self, parent_frame):
        """QF-10-02-03-03: نموذج إجراءات التخلص من السجلات"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Form data dictionary
        self.qf_10_02_03_03_entries = {}
        
        # Header
        header_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['accent'])
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        title_text = "QF-10-02-03-03: نموذج إجراءات التخلص من السجلات"
        title_label = tk.Label(header_frame, 
                             text=self.format_arabic_text(title_text), 
                             font=self.fonts['subtitle'],
                             fg='white',
                             bg=self.premium_colors['accent'],
                             padx=20, pady=15)
        title_label.pack(expand=True)
        
        # ==================== أولاً: معلومات عامة ====================
        section1_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("أولاً: معلومات عامة"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section1_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        self.create_form_field_doc_02_03_03(section1_frame, "رقم محضر التخلص:", "disposal_record_number")
        self.create_date_field_doc_02_03_03(section1_frame, "تاريخ إعداد المحضر:", "record_date")
        self.create_form_field_doc_02_03_03(section1_frame, "الجهة / المؤسسة:", "institution_name")
        self.create_form_field_doc_02_03_03(section1_frame, "القسم المسؤول:", "responsible_department")
        
        # ==================== ثانيًا: تفاصيل السجلات المراد التخلص منها ====================
        section2_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثانيًا: تفاصيل السجلات المراد التخلص منها"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section2_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Create disposal records table
        self.create_disposal_table_02_03_03(section2_frame)
        
        # ==================== ثالثًا: سبب التخلص ====================
        section3_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("ثالثًا: سبب التخلص"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section3_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Disposal reason checkboxes
        disposal_reasons = ["انتهاء فترة الحفظ القانونية", "تلف السجلات", "توجيه إداري", "تطبيق سياسة الأرشفة", "أخرى"]
        for reason in disposal_reasons:
            reason_var = tk.BooleanVar()
            cb = tk.Checkbutton(section3_frame, text=self.format_arabic_text(reason),
                              variable=reason_var,
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              selectcolor=self.premium_colors['accent'])
            cb.pack(anchor="e", padx=15, pady=2)
            self.qf_10_02_03_03_entries[f'disposal_reason_{reason}'] = reason_var
        
        # Other reason text
        other_reason_frame = tk.Frame(section3_frame, bg=self.premium_colors['surface'])
        other_reason_frame.pack(fill=tk.X, padx=10, pady=10)
        
        other_reason_label = tk.Label(other_reason_frame, 
                                    text=self.format_arabic_text("تفاصيل السبب الآخر:"),
                                    font=self.fonts['body'],
                                    fg=self.premium_colors['text_light'],
                                    bg=self.premium_colors['surface'])
        other_reason_label.pack(anchor="e", padx=5)
        
        other_reason_text = tk.Text(other_reason_frame, height=3, width=60, font=self.fonts['body'],
                                  bg=self.premium_colors['background'],
                                  fg=self.premium_colors['text_light'],
                                  insertbackground=self.premium_colors['accent'])
        other_reason_text.pack(fill=tk.X, padx=5, pady=5)
        self.qf_10_02_03_03_entries['other_reason_details'] = other_reason_text
        
        # ==================== رابعًا: طريقة التخلص ====================
        section4_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("رابعًا: طريقة التخلص"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section4_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Disposal method checkboxes
        disposal_methods = ["تمزيق (للوثائق الورقية)", "حذف آمن (للملفات الإلكترونية)", "حرق", "إعادة تدوير", "أخرى"]
        for method in disposal_methods:
            method_var = tk.BooleanVar()
            cb = tk.Checkbutton(section4_frame, text=self.format_arabic_text(method),
                              variable=method_var,
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              selectcolor=self.premium_colors['accent'])
            cb.pack(anchor="e", padx=15, pady=2)
            self.qf_10_02_03_03_entries[f'disposal_method_{method}'] = method_var
        
        self.create_date_field_doc_02_03_03(section4_frame, "تاريخ التخلص:", "disposal_date")
        self.create_form_field_doc_02_03_03(section4_frame, "مكان التخلص:", "disposal_location")
        
        # ==================== خامسًا: لجنة الإشراف على التخلص ====================
        section5_frame = tk.LabelFrame(scrollable_frame, 
                                     text=self.format_arabic_text("خامسًا: لجنة الإشراف على التخلص"),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['accent'],
                                     bg=self.premium_colors['surface'],
                                     padx=20, pady=15)
        section5_frame.pack(fill=tk.X, padx=20, pady=(0, 15))
        
        # Committee members
        for i in range(1, 4):  # 3 committee members
            self.create_form_field_doc_02_03_03(section5_frame, f"اسم العضو {i}:", f"committee_member_{i}_name")
            self.create_form_field_doc_02_03_03(section5_frame, f"الوظيفة:", f"committee_member_{i}_position")
            self.create_form_field_doc_02_03_03(section5_frame, f"التوقيع:", f"committee_member_{i}_signature")
            
            # Add separator except after last member
            if i < 3:
                separator = tk.Frame(section5_frame, height=1, bg=self.premium_colors['accent'])
                separator.pack(fill=tk.X, pady=5)
        
        self.create_date_field_doc_02_03_03(section5_frame, "تاريخ الإشراف:", "supervision_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-03-03", self.qf_10_02_03_03_entries)
        
        # Mouse wheel scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)

    # ==================== Helper Methods for QF-10-02-03 Forms ====================
    
    def create_form_field_doc_02_03_01(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-03-01 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'], width=40,
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side=tk.RIGHT, padx=5, fill=tk.X, expand=True)
        
        self.qf_10_02_03_01_entries[field_name] = entry
        return entry

    def create_date_field_doc_02_03_01(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-03-01"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        # Date entry fields
        date_container = tk.Frame(field_frame, bg=self.premium_colors['surface'])
        date_container.pack(side=tk.RIGHT, padx=5)
        
        # Year
        year_label = tk.Label(date_container, text=self.format_arabic_text("السنة"),
                            font=self.fonts['body'], fg=self.premium_colors['text_light'],
                            bg=self.premium_colors['surface'])
        year_label.pack(side=tk.RIGHT, padx=2)
        
        year_entry = tk.Entry(date_container, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        # Month
        month_label = tk.Label(date_container, text=self.format_arabic_text("الشهر"),
                             font=self.fonts['body'], fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        month_label.pack(side=tk.RIGHT, padx=2)
        
        month_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        # Day
        day_label = tk.Label(date_container, text=self.format_arabic_text("اليوم"),
                           font=self.fonts['body'], fg=self.premium_colors['text_light'],
                           bg=self.premium_colors['surface'])
        day_label.pack(side=tk.RIGHT, padx=2)
        
        day_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        self.qf_10_02_03_01_entries[f'{field_name}_day'] = day_entry
        self.qf_10_02_03_01_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_02_03_01_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    def create_records_table_02_03_01(self, parent):
        """Create records table for QF-10-02-03-01"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Table headers
        headers = ["م", "اسم السجل", "الرقم المرجعي", "الجهة المسؤولة", "وسيلة الحفظ", "مكان الحفظ", "مدة الاحتفاظ", "طريقة الإتلاف", "ملاحظات"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add empty rows for data entry
        self.qf_10_02_03_01_entries['records_rows'] = []
        for row in range(1, 6):  # 5 empty rows
            row_data = {}
            for col, field in enumerate(['number', 'record_name', 'reference_number', 'responsible_party', 'storage_method', 'storage_location', 'retention_period', 'disposal_method', 'notes']):
                if field == 'number':
                    cell = tk.Label(table_frame, text=str(row),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  relief=tk.SUNKEN, bd=1)
                else:
                    cell = tk.Entry(table_frame, font=self.fonts['body'], width=10,
                                  bg=self.premium_colors['background'],
                                  fg=self.premium_colors['text_light'],
                                  insertbackground=self.premium_colors['accent'])
                
                cell.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
                row_data[field] = cell
            
            self.qf_10_02_03_01_entries['records_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_form_field_doc_02_03_02(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-03-02 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'], width=40,
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side=tk.RIGHT, padx=5, fill=tk.X, expand=True)
        
        self.qf_10_02_03_02_entries[field_name] = entry
        return entry

    def create_date_field_doc_02_03_02(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-03-02"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        # Date entry fields
        date_container = tk.Frame(field_frame, bg=self.premium_colors['surface'])
        date_container.pack(side=tk.RIGHT, padx=5)
        
        # Year
        year_label = tk.Label(date_container, text=self.format_arabic_text("السنة"),
                            font=self.fonts['body'], fg=self.premium_colors['text_light'],
                            bg=self.premium_colors['surface'])
        year_label.pack(side=tk.RIGHT, padx=2)
        
        year_entry = tk.Entry(date_container, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        # Month
        month_label = tk.Label(date_container, text=self.format_arabic_text("الشهر"),
                             font=self.fonts['body'], fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        month_label.pack(side=tk.RIGHT, padx=2)
        
        month_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        # Day
        day_label = tk.Label(date_container, text=self.format_arabic_text("اليوم"),
                           font=self.fonts['body'], fg=self.premium_colors['text_light'],
                           bg=self.premium_colors['surface'])
        day_label.pack(side=tk.RIGHT, padx=2)
        
        day_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        self.qf_10_02_03_02_entries[f'{field_name}_day'] = day_entry
        self.qf_10_02_03_02_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_02_03_02_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    def create_form_field_doc_02_03_03(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-03-03 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'], width=40,
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side=tk.RIGHT, padx=5, fill=tk.X, expand=True)
        
        self.qf_10_02_03_03_entries[field_name] = entry
        return entry

    def create_date_field_doc_02_03_03(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-03-03"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill=tk.X, padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=25, anchor="e")
        label.pack(side=tk.RIGHT, padx=5)
        
        # Date entry fields
        date_container = tk.Frame(field_frame, bg=self.premium_colors['surface'])
        date_container.pack(side=tk.RIGHT, padx=5)
        
        # Year
        year_label = tk.Label(date_container, text=self.format_arabic_text("السنة"),
                            font=self.fonts['body'], fg=self.premium_colors['text_light'],
                            bg=self.premium_colors['surface'])
        year_label.pack(side=tk.RIGHT, padx=2)
        
        year_entry = tk.Entry(date_container, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side=tk.RIGHT, padx=2)
        
        # Month
        month_label = tk.Label(date_container, text=self.format_arabic_text("الشهر"),
                             font=self.fonts['body'], fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        month_label.pack(side=tk.RIGHT, padx=2)
        
        month_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side=tk.RIGHT, padx=2)
        
        # Day
        day_label = tk.Label(date_container, text=self.format_arabic_text("اليوم"),
                           font=self.fonts['body'], fg=self.premium_colors['text_light'],
                           bg=self.premium_colors['surface'])
        day_label.pack(side=tk.RIGHT, padx=2)
        
        day_entry = tk.Entry(date_container, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side=tk.RIGHT, padx=2)
        
        self.qf_10_02_03_03_entries[f'{field_name}_day'] = day_entry
        self.qf_10_02_03_03_entries[f'{field_name}_month'] = month_entry  
        self.qf_10_02_03_03_entries[f'{field_name}_year'] = year_entry
        
        return {'day': day_entry, 'month': month_entry, 'year': year_entry}

    def create_disposal_table_02_03_03(self, parent):
        """Create disposal records table for QF-10-02-03-03"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Table headers
        headers = ["م", "اسم السجل/الوثيقة", "الرقم المرجعي", "تاريخ الإنشاء", "مدة الحفظ", "تاريخ انتهاء الصلاحية", "الكمية", "ملاحظات"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add empty rows for data entry
        self.qf_10_02_03_03_entries['disposal_rows'] = []
        for row in range(1, 6):  # 5 empty rows
            row_data = {}
            for col, field in enumerate(['number', 'record_name', 'reference_number', 'creation_date', 'retention_period', 'expiry_date', 'quantity', 'notes']):
                if field == 'number':
                    cell = tk.Label(table_frame, text=str(row),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  relief=tk.SUNKEN, bd=1)
                else:
                    cell = tk.Entry(table_frame, font=self.fonts['body'], width=10,
                                  bg=self.premium_colors['background'],
                                  fg=self.premium_colors['text_light'],
                                  insertbackground=self.premium_colors['accent'])
                
                cell.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
                row_data[field] = cell
            
            self.qf_10_02_03_03_entries['disposal_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    # QP-10-02-04 Management Review Forms
    
    def create_QF_10_02_04_01_form(self, parent_frame):
        """QF-10-02-04-01: نموذج تقرير مراجعة الإدارة"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_04_01_entries = {}
        
        # Form Title
        title_text = "QF-10-02-04-01: نموذج تقرير مراجعة الإدارة"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: Meeting Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: بيانات الاجتماع"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        # Basic meeting information
        self.create_form_field_04_01(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_date_field_04_01(section1, "تاريخ الاجتماع", "meeting_date")
        
        # Meeting time frame
        time_frame = tk.Frame(section1, bg=self.premium_colors['surface'])
        time_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(time_frame, text=self.format_arabic_text("مدة الاجتماع:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=5)
        
        tk.Label(time_frame, text=self.format_arabic_text("من الساعة"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=5)
        
        self.qf_10_02_04_01_entries['start_time'] = tk.Entry(time_frame, font=self.fonts['body'], width=10,
                                                           bg=self.premium_colors['background'],
                                                           fg=self.premium_colors['text_light'],
                                                           insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_01_entries['start_time'].pack(side="left", padx=5)
        
        tk.Label(time_frame, text=self.format_arabic_text("إلى الساعة"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=5)
        
        self.qf_10_02_04_01_entries['end_time'] = tk.Entry(time_frame, font=self.fonts['body'], width=10,
                                                         bg=self.premium_colors['background'],
                                                         fg=self.premium_colors['text_light'],
                                                         insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_01_entries['end_time'].pack(side="left", padx=5)
        
        self.create_form_field_04_01(section1, "مكان الاجتماع", "meeting_location")
        self.create_form_field_04_01(section1, "رئيس الاجتماع", "meeting_chair")
        
        # Attendees section
        attendees_frame = tk.Frame(section1, bg=self.premium_colors['surface'])
        attendees_frame.pack(fill="x", padx=10, pady=10)
        
        tk.Label(attendees_frame, text=self.format_arabic_text("أعضاء الحضور:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(anchor="e", padx=5, pady=5)
        
        self.qf_10_02_04_01_entries['attendees'] = scrolledtext.ScrolledText(attendees_frame, 
                                                                           height=4, width=60,
                                                                           font=self.fonts['body'],
                                                                           bg=self.premium_colors['background'],
                                                                           fg=self.premium_colors['text_light'],
                                                                           insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_01_entries['attendees'].pack(fill="x", padx=10, pady=5)
        
        # Section 2: Agenda and Outputs
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: جدول أعمال الاجتماع ومخرجاته"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        # Create agenda table
        self.create_agenda_table_04_01(section2)
        
        # Section 3: General Recommendations
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: التوصيات العامة / الإجراءات التصحيحية"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_04_01_entries['recommendations'] = scrolledtext.ScrolledText(section3, 
                                                                                 height=5, width=60,
                                                                                 font=self.fonts['body'],
                                                                                 bg=self.premium_colors['background'],
                                                                                 fg=self.premium_colors['text_light'],
                                                                                 insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_01_entries['recommendations'].pack(fill="x", padx=10, pady=10)
        
        # Section 4: Signatures
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: توقيع أعضاء الاجتماع"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        # Create signatures table
        self.create_signatures_table_04_01(section4)
        
        # Section 5: Report Approval
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: اعتماد التقرير"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_04_01(section5, "الاسم", "approver_name")
        self.create_form_field_04_01(section5, "الوظيفة", "approver_position")
        self.create_form_field_04_01(section5, "التوقيع", "approver_signature")
        self.create_date_field_04_01(section5, "تاريخ الاعتماد", "approval_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-04-01", self.qf_10_02_04_01_entries)

    def create_QF_10_02_04_02_form(self, parent_frame):
        """QF-10-02-04-02: نموذج قائمة التحقق للمراجعة السنوية"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_04_02_entries = {}
        
        # Form Title
        title_text = "QF-10-02-04-02: نموذج قائمة التحقق للمراجعة السنوية"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: Review Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: بيانات المراجعة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_04_02(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_form_field_04_02(section1, "القسم / الإدارة قيد المراجعة", "department_reviewed")
        self.create_date_field_04_02(section1, "تاريخ المراجعة", "review_date")
        self.create_form_field_04_02(section1, "اسم المراجع", "reviewer_name")
        self.create_form_field_04_02(section1, "الوظيفة", "reviewer_position")
        
        # Section 2: Checklist
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: قائمة التحقق"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        # Create checklist table
        self.create_checklist_table_04_02(section2)
        
        # Section 3: General Observations
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: الملاحظات العامة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_04_02_entries['general_observations'] = scrolledtext.ScrolledText(section3, 
                                                                                      height=4, width=60,
                                                                                      font=self.fonts['body'],
                                                                                      bg=self.premium_colors['background'],
                                                                                      fg=self.premium_colors['text_light'],
                                                                                      insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_02_entries['general_observations'].pack(fill="x", padx=10, pady=10)
        
        # Section 4: Recommendations
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: التوصيات والإجراءات المقترحة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_04_02_entries['recommendations'] = scrolledtext.ScrolledText(section4, 
                                                                                 height=4, width=60,
                                                                                 font=self.fonts['body'],
                                                                                 bg=self.premium_colors['background'],
                                                                                 fg=self.premium_colors['text_light'],
                                                                                 insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_02_entries['recommendations'].pack(fill="x", padx=10, pady=10)
        
        # Section 5: Approval
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: اعتماد القائمة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_04_02(section5, "اسم المراجع", "reviewer_final_name")
        self.create_form_field_04_02(section5, "التوقيع", "reviewer_signature")
        self.create_date_field_04_02(section5, "التاريخ", "reviewer_date")
        
        # Quality manager approval
        quality_frame = tk.Frame(section5, bg=self.premium_colors['surface'])
        quality_frame.pack(fill="x", padx=10, pady=10)
        
        tk.Label(quality_frame, text=self.format_arabic_text("مراجعة مسؤول الجودة:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(anchor="e", pady=5)
        
        self.create_form_field_04_02(section5, "الاسم", "quality_manager_name")
        self.create_form_field_04_02(section5, "التوقيع", "quality_manager_signature")
        self.create_date_field_04_02(section5, "التاريخ", "quality_manager_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-04-02", self.qf_10_02_04_02_entries)

    def create_QF_10_02_04_03_form(self, parent_frame):
        """QF-10-02-04-03: نموذج تحليل التغذية الراجعة والشكاوى"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_04_03_entries = {}
        
        # Form Title
        title_text = "QF-10-02-04-03: نموذج تحليل التغذية الراجعة والشكاوى"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: General Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: بيانات عامة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_04_03(section1, "اسم الجهة / المؤسسة", "institution_name")
        
        # Analysis period
        period_frame = tk.Frame(section1, bg=self.premium_colors['surface'])
        period_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(period_frame, text=self.format_arabic_text("الفترة التي يغطيها التحليل:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=5)
        
        tk.Label(period_frame, text=self.format_arabic_text("من:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=5)
        
        self.qf_10_02_04_03_entries['period_start'] = tk.Entry(period_frame, font=self.fonts['body'], width=12,
                                                             bg=self.premium_colors['background'],
                                                             fg=self.premium_colors['text_light'],
                                                             insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_03_entries['period_start'].pack(side="left", padx=5)
        
        tk.Label(period_frame, text=self.format_arabic_text("إلى:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=5)
        
        self.qf_10_02_04_03_entries['period_end'] = tk.Entry(period_frame, font=self.fonts['body'], width=12,
                                                           bg=self.premium_colors['background'],
                                                           fg=self.premium_colors['text_light'],
                                                           insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_03_entries['period_end'].pack(side="left", padx=5)
        
        self.create_form_field_04_03(section1, "القسم المسؤول عن التحليل", "analysis_department")
        self.create_form_field_04_03(section1, "اسم المحلل / فريق الجودة", "analyst_name")
        
        # Section 2: Data Sources
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: مصادر البيانات"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        # Create data sources table
        self.create_data_sources_table_04_03(section2)
        
        # Section 3: Trends and Observations
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: تحليل الاتجاهات والملاحظات"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        # Most frequent topics
        freq_frame = tk.Frame(section3, bg=self.premium_colors['surface'])
        freq_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(freq_frame, text=self.format_arabic_text("أكثر المواضيع تكراراً:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(anchor="e", pady=5)
        
        self.qf_10_02_04_03_entries['frequent_topics'] = scrolledtext.ScrolledText(freq_frame, 
                                                                                  height=3, width=60,
                                                                                  font=self.fonts['body'],
                                                                                  bg=self.premium_colors['background'],
                                                                                  fg=self.premium_colors['text_light'],
                                                                                  insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_03_entries['frequent_topics'].pack(fill="x", padx=10, pady=5)
        
        # Most complained departments
        dept_frame = tk.Frame(section3, bg=self.premium_colors['surface'])
        dept_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(dept_frame, text=self.format_arabic_text("أقسام تلقت أكبر عدد من الشكاوى أو التعليقات:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(anchor="e", pady=5)
        
        self.qf_10_02_04_03_entries['complained_departments'] = scrolledtext.ScrolledText(dept_frame, 
                                                                                        height=3, width=60,
                                                                                        font=self.fonts['body'],
                                                                                        bg=self.premium_colors['background'],
                                                                                        fg=self.premium_colors['text_light'],
                                                                                        insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_03_entries['complained_departments'].pack(fill="x", padx=10, pady=5)
        
        # Statistics
        stats_frame = tk.Frame(section3, bg=self.premium_colors['surface'])
        stats_frame.pack(fill="x", padx=10, pady=5)
        
        # Closure percentage
        closure_frame = tk.Frame(stats_frame, bg=self.premium_colors['surface'])
        closure_frame.pack(fill="x", pady=2)
        
        tk.Label(closure_frame, text=self.format_arabic_text("نسبة الشكاوى المغلقة:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=5)
        
        self.qf_10_02_04_03_entries['closure_percentage'] = tk.Entry(closure_frame, font=self.fonts['body'], width=10,
                                                                   bg=self.premium_colors['background'],
                                                                   fg=self.premium_colors['text_light'],
                                                                   insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_03_entries['closure_percentage'].pack(side="left", padx=5)
        
        tk.Label(closure_frame, text=self.format_arabic_text("%"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=2)
        
        tk.Label(closure_frame, text=self.format_arabic_text("متوسط زمن المعالجة:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=15)
        
        self.qf_10_02_04_03_entries['avg_processing_time'] = tk.Entry(closure_frame, font=self.fonts['body'], width=10,
                                                                    bg=self.premium_colors['background'],
                                                                    fg=self.premium_colors['text_light'],
                                                                    insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_03_entries['avg_processing_time'].pack(side="left", padx=5)
        
        tk.Label(closure_frame, text=self.format_arabic_text("يوم"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=2)
        
        # Customer satisfaction
        satisfaction_frame = tk.Frame(stats_frame, bg=self.premium_colors['surface'])
        satisfaction_frame.pack(fill="x", pady=2)
        
        tk.Label(satisfaction_frame, text=self.format_arabic_text("مستوى رضا العملاء العام (من 5):"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=5)
        
        self.qf_10_02_04_03_entries['satisfaction_level'] = tk.Entry(satisfaction_frame, font=self.fonts['body'], width=10,
                                                                   bg=self.premium_colors['background'],
                                                                   fg=self.premium_colors['text_light'],
                                                                   insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_03_entries['satisfaction_level'].pack(side="left", padx=5)
        
        # Non-conformance checkbox
        nonconf_frame = tk.Frame(stats_frame, bg=self.premium_colors['surface'])
        nonconf_frame.pack(fill="x", pady=5)
        
        tk.Label(nonconf_frame, text=self.format_arabic_text("هل تم رصد حالات عدم مطابقة متكررة؟"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=5)
        
        self.qf_10_02_04_03_entries['nonconformance_detected'] = tk.BooleanVar()
        tk.Checkbutton(nonconf_frame, text=self.format_arabic_text("نعم"),
                      variable=self.qf_10_02_04_03_entries['nonconformance_detected'],
                      font=self.fonts['body'],
                      fg=self.premium_colors['text_light'],
                      bg=self.premium_colors['surface'],
                      selectcolor=self.premium_colors['background']).pack(side="left", padx=5)
        
        tk.Label(nonconf_frame, text=self.format_arabic_text("إن وجدت، حددها:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="left", padx=15)
        
        self.qf_10_02_04_03_entries['nonconformance_details'] = tk.Entry(nonconf_frame, font=self.fonts['body'], width=30,
                                                                       bg=self.premium_colors['background'],
                                                                       fg=self.premium_colors['text_light'],
                                                                       insertbackground=self.premium_colors['accent'])
        self.qf_10_02_04_03_entries['nonconformance_details'].pack(side="left", padx=5)
        
        # Section 4: Recommendations
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: التوصيات والإجراءات المقترحة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        # Create recommendations table
        self.create_recommendations_table_04_03(section4)
        
        # Section 5: Analysis Approval
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: اعتماد التحليل"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_04_03(section5, "اسم المُعِد / المحلل", "preparer_name")
        self.create_form_field_04_03(section5, "الوظيفة", "preparer_position")
        self.create_form_field_04_03(section5, "التوقيع", "preparer_signature")
        self.create_date_field_04_03(section5, "تاريخ الإعداد", "preparation_date")
        
        # Management approval
        mgmt_frame = tk.Frame(section5, bg=self.premium_colors['surface'])
        mgmt_frame.pack(fill="x", padx=10, pady=10)
        
        tk.Label(mgmt_frame, text=self.format_arabic_text("موافقة مدير الجودة / الإدارة العليا:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(anchor="e", pady=5)
        
        self.create_form_field_04_03(section5, "الاسم", "manager_name")
        self.create_form_field_04_03(section5, "التوقيع", "manager_signature")
        self.create_date_field_04_03(section5, "التاريخ", "manager_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-04-03", self.qf_10_02_04_03_entries)

    # Helper methods for QP-10-02-04 forms
    
    def create_form_field_04_01(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-04-01 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side="right", fill="x", expand=True, padx=5)
        
        self.qf_10_02_04_01_entries[field_name] = entry

    def create_date_field_04_01(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-04-01"""
        date_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        date_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(date_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        # Date entry fields
        date_entry_frame = tk.Frame(date_frame, bg=self.premium_colors['surface'])
        date_entry_frame.pack(side="right", padx=5)
        
        # Day
        day_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Month
        month_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Year
        year_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side="right", padx=2)
        
        self.qf_10_02_04_01_entries[field_name] = {
            'day': day_entry,
            'month': month_entry,
            'year': year_entry
        }

    def create_agenda_table_04_01(self, parent):
        """Create agenda table for QF-10-02-04-01"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Table headers
        headers = ["م", "البند", "عناصر المراجعة", "الملاحظات / المناقشات", "التوصيات / القرارات"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Predefined agenda items
        agenda_items = [
            ("1", "حالة الإجراءات السابقة", "متابعة تنفيذ قرارات الاجتماع السابق"),
            ("2", "أداء نظام الإدارة", "مؤشرات الأداء - الأهداف - مؤشرات الامتحانات / الاعتماد"),
            ("3", "نتائج التدقيق الداخلي", "التقييمات - التوصيات - الحالات غير المطابقة"),
            ("4", "ملاحظات الجهات الخارجية", "تعليقات المتقدمين، أصحاب المصلحة، المراجعين، الشركاء"),
            ("5", "شكاوى وتظلمات العملاء", "عددها، طبيعتها، أسلوب المعالجة"),
            ("6", "مدى تحقيق الأهداف", "مقارنات الأهداف / الإنجاز"),
            ("7", "الاحتياجات التدريبية", "للفريق الداخلي / المقيمين / العاملين"),
            ("8", "فرص التحسين", "مقترحات التحسين المستمر للنظام"),
            ("9", "التغيرات المؤثرة", "في البنية المؤسسية أو المتطلبات القانونية"),
            ("10", "القرارات والتوصيات النهائية", "الإجراءات المستقبلية وخطط التحسين")
        ]
        
        # Add agenda rows
        self.qf_10_02_04_01_entries['agenda_rows'] = []
        for row, (num, item, elements) in enumerate(agenda_items, start=1):
            row_data = {}
            
            # Number
            num_label = tk.Label(table_frame, text=num,
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'],
                               relief=tk.SUNKEN, bd=1)
            num_label.grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            # Item
            item_label = tk.Label(table_frame, text=self.format_arabic_text(item),
                                font=self.fonts['body'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'],
                                relief=tk.SUNKEN, bd=1, anchor="e")
            item_label.grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            
            # Elements
            elements_label = tk.Label(table_frame, text=self.format_arabic_text(elements),
                                    font=self.fonts['body'],
                                    fg=self.premium_colors['text_light'],
                                    bg=self.premium_colors['surface'],
                                    relief=tk.SUNKEN, bd=1, anchor="e", wraplength=200)
            elements_label.grid(row=row, column=2, sticky="ew", padx=1, pady=1)
            
            # Observations entry
            observations_entry = tk.Text(table_frame, font=self.fonts['body'], width=25, height=2,
                                       bg=self.premium_colors['background'],
                                       fg=self.premium_colors['text_light'],
                                       insertbackground=self.premium_colors['accent'])
            observations_entry.grid(row=row, column=3, sticky="ew", padx=1, pady=1)
            row_data['observations'] = observations_entry
            
            # Recommendations entry
            recommendations_entry = tk.Text(table_frame, font=self.fonts['body'], width=25, height=2,
                                          bg=self.premium_colors['background'],
                                          fg=self.premium_colors['text_light'],
                                          insertbackground=self.premium_colors['accent'])
            recommendations_entry.grid(row=row, column=4, sticky="ew", padx=1, pady=1)
            row_data['recommendations'] = recommendations_entry
            
            self.qf_10_02_04_01_entries['agenda_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_signatures_table_04_01(self, parent):
        """Create signatures table for QF-10-02-04-01"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="x", padx=10, pady=10)
        
        # Table headers
        headers = ["الاسم", "الوظيفة", "التوقيع"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add empty rows for signatures
        self.qf_10_02_04_01_entries['signature_rows'] = []
        for row in range(1, 6):  # 5 empty rows
            row_data = {}
            for col, field in enumerate(['name', 'position', 'signature']):
                cell = tk.Entry(table_frame, font=self.fonts['body'], width=20,
                              bg=self.premium_colors['background'],
                              fg=self.premium_colors['text_light'],
                              insertbackground=self.premium_colors['accent'])
                cell.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
                row_data[field] = cell
            
            self.qf_10_02_04_01_entries['signature_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_form_field_04_02(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-04-02 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side="right", fill="x", expand=True, padx=5)
        
        self.qf_10_02_04_02_entries[field_name] = entry

    def create_date_field_04_02(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-04-02"""
        date_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        date_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(date_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        # Date entry fields
        date_entry_frame = tk.Frame(date_frame, bg=self.premium_colors['surface'])
        date_entry_frame.pack(side="right", padx=5)
        
        # Day
        day_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Month
        month_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Year
        year_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side="right", padx=2)
        
        self.qf_10_02_04_02_entries[field_name] = {
            'day': day_entry,
            'month': month_entry,
            'year': year_entry
        }

    def create_checklist_table_04_02(self, parent):
        """Create checklist table for QF-10-02-04-02"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Table headers
        headers = ["م", "البند المطلوب مراجعته", "نعم", "لا", "لا ينطبق", "ملاحظات"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Checklist items
        checklist_items = [
            "هل تم تنفيذ جميع الإجراءات المعتمدة وفق النظام؟",
            "هل تم تحديث الوثائق طبقاً لآخر إصدار؟",
            "هل تم الاحتفاظ بالسجلات وفق المدد والسياسات المعتمدة؟",
            "هل تم إجراء التدقيق الداخلي السنوي؟",
            "هل تم تنفيذ القرارات الناتجة عن مراجعة الإدارة السابقة؟",
            "هل يوجد معالجة للشكاوى والتظلمات موثقة؟",
            "هل توجد حالات عدم مطابقة تم توثيقها ومعالجتها؟",
            "هل تم الالتزام بمتطلبات الحيادية وتضارب المصالح؟",
            "هل تم تنفيذ التدريبات السنوية المخططة؟",
            "هل تتوافق الإجراءات مع متطلبات المواصفة المعتمدة؟"
        ]
        
        # Add checklist rows
        self.qf_10_02_04_02_entries['checklist_rows'] = []
        for row, item in enumerate(checklist_items, start=1):
            row_data = {}
            
            # Number
            num_label = tk.Label(table_frame, text=str(row),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'],
                               relief=tk.SUNKEN, bd=1)
            num_label.grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            # Item
            item_label = tk.Label(table_frame, text=self.format_arabic_text(item),
                                font=self.fonts['body'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'],
                                relief=tk.SUNKEN, bd=1, anchor="e", wraplength=300)
            item_label.grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            
            # Yes checkbox
            yes_var = tk.BooleanVar()
            row_data['yes'] = yes_var
            yes_check = tk.Checkbutton(table_frame, variable=yes_var,
                                     bg=self.premium_colors['surface'],
                                     fg=self.premium_colors['text_light'],
                                     selectcolor=self.premium_colors['background'])
            yes_check.grid(row=row, column=2, padx=1, pady=1)
            
            # No checkbox
            no_var = tk.BooleanVar()
            row_data['no'] = no_var
            no_check = tk.Checkbutton(table_frame, variable=no_var,
                                    bg=self.premium_colors['surface'],
                                    fg=self.premium_colors['text_light'],
                                    selectcolor=self.premium_colors['background'])
            no_check.grid(row=row, column=3, padx=1, pady=1)
            
            # Not applicable checkbox
            na_var = tk.BooleanVar()
            row_data['na'] = na_var
            na_check = tk.Checkbutton(table_frame, variable=na_var,
                                    bg=self.premium_colors['surface'],
                                    fg=self.premium_colors['text_light'],
                                    selectcolor=self.premium_colors['background'])
            na_check.grid(row=row, column=4, padx=1, pady=1)
            
            # Comments entry
            comments_entry = tk.Entry(table_frame, font=self.fonts['body'], width=30,
                                    bg=self.premium_colors['background'],
                                    fg=self.premium_colors['text_light'],
                                    insertbackground=self.premium_colors['accent'])
            comments_entry.grid(row=row, column=5, sticky="ew", padx=1, pady=1)
            row_data['comments'] = comments_entry
            
            self.qf_10_02_04_02_entries['checklist_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_form_field_04_03(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-04-03 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side="right", fill="x", expand=True, padx=5)
        
        self.qf_10_02_04_03_entries[field_name] = entry

    def create_date_field_04_03(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-04-03"""
        date_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        date_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(date_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        # Date entry fields
        date_entry_frame = tk.Frame(date_frame, bg=self.premium_colors['surface'])
        date_entry_frame.pack(side="right", padx=5)
        
        # Day
        day_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Month
        month_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Year
        year_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side="right", padx=2)
        
        self.qf_10_02_04_03_entries[field_name] = {
            'day': day_entry,
            'month': month_entry,
            'year': year_entry
        }

    def create_data_sources_table_04_03(self, parent):
        """Create data sources table for QF-10-02-04-03"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="x", padx=10, pady=10)
        
        # Table headers
        headers = ["م", "نوع المصدر", "عدد الحالات", "وسيلة التقديم", "القسم المعني", "الحالة الحالية"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Predefined data sources
        data_sources = [
            ("1", "شكاوى مباشرة"),
            ("2", "استبيانات رضا"),
            ("3", "اقتراحات تحسين"),
            ("4", "تعليقات مواقع التواصل")
        ]
        
        # Add data source rows
        self.qf_10_02_04_03_entries['data_source_rows'] = []
        for row, (num, source_type) in enumerate(data_sources, start=1):
            row_data = {}
            
            # Number
            num_label = tk.Label(table_frame, text=num,
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'],
                               relief=tk.SUNKEN, bd=1)
            num_label.grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            # Source type
            source_label = tk.Label(table_frame, text=self.format_arabic_text(source_type),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  relief=tk.SUNKEN, bd=1, anchor="e")
            source_label.grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            
            # Cases count
            cases_entry = tk.Entry(table_frame, font=self.fonts['body'], width=10,
                                 bg=self.premium_colors['background'],
                                 fg=self.premium_colors['text_light'],
                                 insertbackground=self.premium_colors['accent'])
            cases_entry.grid(row=row, column=2, sticky="ew", padx=1, pady=1)
            row_data['cases_count'] = cases_entry
            
            # Submission method
            method_entry = tk.Entry(table_frame, font=self.fonts['body'], width=15,
                                  bg=self.premium_colors['background'],
                                  fg=self.premium_colors['text_light'],
                                  insertbackground=self.premium_colors['accent'])
            method_entry.grid(row=row, column=3, sticky="ew", padx=1, pady=1)
            row_data['method'] = method_entry
            
            # Department
            dept_entry = tk.Entry(table_frame, font=self.fonts['body'], width=15,
                                bg=self.premium_colors['background'],
                                fg=self.premium_colors['text_light'],
                                insertbackground=self.premium_colors['accent'])
            dept_entry.grid(row=row, column=4, sticky="ew", padx=1, pady=1)
            row_data['department'] = dept_entry
            
            # Status
            status_entry = tk.Entry(table_frame, font=self.fonts['body'], width=15,
                                  bg=self.premium_colors['background'],
                                  fg=self.premium_colors['text_light'],
                                  insertbackground=self.premium_colors['accent'])
            status_entry.grid(row=row, column=5, sticky="ew", padx=1, pady=1)
            row_data['status'] = status_entry
            
            self.qf_10_02_04_03_entries['data_source_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_recommendations_table_04_03(self, parent):
        """Create recommendations table for QF-10-02-04-03"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="x", padx=10, pady=10)
        
        # Table headers
        headers = ["م", "التوصية / الإجراء", "القسم المعني", "التاريخ المستهدف للتنفيذ", "ملاحظات"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add empty rows for recommendations
        self.qf_10_02_04_03_entries['recommendation_rows'] = []
        for row in range(1, 6):  # 5 empty rows
            row_data = {}
            
            # Number
            num_label = tk.Label(table_frame, text=str(row),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'],
                               relief=tk.SUNKEN, bd=1)
            num_label.grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            for col, field in enumerate(['recommendation', 'department', 'target_date', 'notes'], start=1):
                cell = tk.Entry(table_frame, font=self.fonts['body'], width=20,
                              bg=self.premium_colors['background'],
                              fg=self.premium_colors['text_light'],
                              insertbackground=self.premium_colors['accent'])
                cell.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
                row_data[field] = cell
            
            self.qf_10_02_04_03_entries['recommendation_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    # QP-10-02-05 Internal Audit Forms
    
    def create_QF_10_02_05_01_form(self, parent_frame):
        """QF-10-02-05-01: نموذج خطة التدقيق الداخلي السنوي"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_05_01_entries = {}
        
        # Form Title
        title_text = "QF-10-02-05-01: نموذج خطة التدقيق الداخلي السنوي"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: General Plan Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: بيانات الخطة العامة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_05_01(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_form_field_05_01(section1, "السنة التي تغطيها الخطة", "plan_year")
        self.create_form_field_05_01(section1, "إعداد الخطة بواسطة", "prepared_by")
        self.create_form_field_05_01(section1, "الوظيفة", "preparer_position")
        self.create_date_field_05_01(section1, "تاريخ الإعداد", "preparation_date")
        self.create_form_field_05_01(section1, "مراجعة واعتماد الخطة بواسطة", "approved_by")
        self.create_form_field_05_01(section1, "الوظيفة", "approver_position")
        self.create_date_field_05_01(section1, "تاريخ الاعتماد", "approval_date")
        
        # Section 2: Audit Plan Details
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: تفاصيل خطة التدقيق"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        # Create audit plan table
        self.create_audit_plan_table_05_01(section2)
        
        # Section 3: Quarterly Distribution
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: توزيع فترات التدقيق على مدار السنة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        # Create quarterly distribution table
        self.create_quarterly_table_05_01(section3)
        
        # Section 4: Additional Notes
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: ملاحظات إضافية / مخاطر متوقعة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_05_01_entries['additional_notes'] = scrolledtext.ScrolledText(section4, 
                                                                                  height=4, width=60,
                                                                                  font=self.fonts['body'],
                                                                                  bg=self.premium_colors['background'],
                                                                                  fg=self.premium_colors['text_light'],
                                                                                  insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_01_entries['additional_notes'].pack(fill="x", padx=10, pady=10)
        
        # Section 5: Approval Signature
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: توقيع الاعتماد"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_05_01(section5, "اسم مدير الجودة / الاعتماد", "quality_manager_name")
        self.create_form_field_05_01(section5, "الوظيفة", "quality_manager_position")
        self.create_form_field_05_01(section5, "التوقيع", "quality_manager_signature")
        self.create_date_field_05_01(section5, "تاريخ التوقيع", "signature_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-05-01", self.qf_10_02_05_01_entries)

    def create_QF_10_02_05_02_form(self, parent_frame):
        """QF-10-02-05-02: نموذج تقرير التدقيق الداخلي"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_05_02_entries = {}
        
        # Form Title
        title_text = "QF-10-02-05-02: نموذج تقرير التدقيق الداخلي"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: Audit Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: بيانات التدقيق"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_05_02(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_form_field_05_02(section1, "القسم / الإدارة محل التدقيق", "audited_department")
        self.create_date_field_05_02(section1, "تاريخ التدقيق", "audit_date")
        
        # Audit duration
        duration_frame = tk.Frame(section1, bg=self.premium_colors['surface'])
        duration_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(duration_frame, text=self.format_arabic_text("مدة التدقيق:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right", padx=5)
        
        tk.Label(duration_frame, text=self.format_arabic_text("من الساعة"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right", padx=5)
        
        self.qf_10_02_05_02_entries['start_time'] = tk.Entry(duration_frame, font=self.fonts['body'], width=8,
                                                           bg=self.premium_colors['background'],
                                                           fg=self.premium_colors['text_light'],
                                                           insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_02_entries['start_time'].pack(side="right", padx=5)
        
        tk.Label(duration_frame, text=self.format_arabic_text("إلى الساعة"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right", padx=5)
        
        self.qf_10_02_05_02_entries['end_time'] = tk.Entry(duration_frame, font=self.fonts['body'], width=8,
                                                         bg=self.premium_colors['background'],
                                                         fg=self.premium_colors['text_light'],
                                                         insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_02_entries['end_time'].pack(side="right", padx=5)
        
        self.create_form_field_05_02(section1, "المدقق / فريق التدقيق", "auditor_team")
        
        # Standard used
        standard_frame = tk.Frame(section1, bg=self.premium_colors['surface'])
        standard_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(standard_frame, text=self.format_arabic_text("المرجع / المعيار المستخدم:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right", padx=5)
        
        self.qf_10_02_05_02_entries['iso_9001'] = tk.BooleanVar()
        tk.Checkbutton(standard_frame, text="ISO 9001",
                      variable=self.qf_10_02_05_02_entries['iso_9001'],
                      font=self.fonts['body'],
                      fg=self.premium_colors['text_light'],
                      bg=self.premium_colors['surface'],
                      selectcolor=self.premium_colors['background']).pack(side="right", padx=10)
        
        self.qf_10_02_05_02_entries['iso_17024'] = tk.BooleanVar()
        tk.Checkbutton(standard_frame, text="ISO/IEC 17024",
                      variable=self.qf_10_02_05_02_entries['iso_17024'],
                      font=self.fonts['body'],
                      fg=self.premium_colors['text_light'],
                      bg=self.premium_colors['surface'],
                      selectcolor=self.premium_colors['background']).pack(side="right", padx=10)
        
        tk.Label(standard_frame, text=self.format_arabic_text("أخرى:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right", padx=5)
        
        self.qf_10_02_05_02_entries['other_standard'] = tk.Entry(standard_frame, font=self.fonts['body'], width=15,
                                                               bg=self.premium_colors['background'],
                                                               fg=self.premium_colors['text_light'],
                                                               insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_02_entries['other_standard'].pack(side="right", padx=5)
        
        # Section 2: Audit Objectives
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: أهداف التدقيق"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        # Audit objectives checkboxes
        objectives = [
            "التحقق من التوافق مع متطلبات النظام",
            "التأكد من تطبيق الإجراءات المعتمدة",
            "رصد فرص التحسين", 
            "متابعة إجراءات تصحيحية سابقة"
        ]
        
        self.qf_10_02_05_02_entries['objectives'] = {}
        for objective in objectives:
            var = tk.BooleanVar()
            self.qf_10_02_05_02_entries['objectives'][objective] = var
            tk.Checkbutton(section2, text=self.format_arabic_text(objective),
                          variable=var,
                          font=self.fonts['body'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background'],
                          anchor="e").pack(fill="x", padx=10, pady=2)
        
        # Other objectives
        other_frame = tk.Frame(section2, bg=self.premium_colors['surface'])
        other_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(other_frame, text=self.format_arabic_text("أخرى:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right", padx=5)
        
        self.qf_10_02_05_02_entries['other_objectives'] = tk.Entry(other_frame, font=self.fonts['body'],
                                                                 bg=self.premium_colors['background'],
                                                                 fg=self.premium_colors['text_light'],
                                                                 insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_02_entries['other_objectives'].pack(side="right", fill="x", expand=True, padx=5)
        
        # Section 3: Audit Results
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: نتائج التدقيق"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        # Create audit results table
        self.create_audit_results_table_05_02(section3)
        
        # Section 4: Non-conformance Summary
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: ملخص الحالات غير المطابقة (إن وُجدت)"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        # Create non-conformance table
        self.create_nonconformance_table_05_02(section4)
        
        # Section 5: General Observations
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: ملاحظات عامة / فرص تحسين"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_05_02_entries['general_observations'] = scrolledtext.ScrolledText(section5, 
                                                                                      height=4, width=60,
                                                                                      font=self.fonts['body'],
                                                                                      bg=self.premium_colors['background'],
                                                                                      fg=self.premium_colors['text_light'],
                                                                                      insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_02_entries['general_observations'].pack(fill="x", padx=10, pady=10)
        
        # Section 6: Auditor Signature
        section6 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("سادساً: توقيع المدقق / فريق التدقيق"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section6.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_05_02(section6, "الاسم", "auditor_name")
        self.create_form_field_05_02(section6, "التوقيع", "auditor_signature")
        self.create_date_field_05_02(section6, "التاريخ", "auditor_date")
        
        # Section 7: Department Head Signature
        section7 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("سابعاً: توقيع مسؤول القسم الذي تم تدقيقه"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section7.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_05_02(section7, "الاسم", "department_head_name")
        self.create_form_field_05_02(section7, "الوظيفة", "department_head_position")
        self.create_form_field_05_02(section7, "التوقيع", "department_head_signature")
        self.create_date_field_05_02(section7, "التاريخ", "department_head_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-05-02", self.qf_10_02_05_02_entries)

    def create_QF_10_02_05_03_form(self, parent_frame):
        """QF-10-02-05-03: نموذج إجراءات تصحيحية"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_05_03_entries = {}
        
        # Form Title
        title_text = "QF-10-02-05-03: نموذج إجراءات تصحيحية"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: General Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: بيانات عامة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_05_03(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_date_field_05_03(section1, "تاريخ فتح الإجراء التصحيحي", "opening_date")
        self.create_form_field_05_03(section1, "رقم الإجراء التصحيحي", "action_number")
        
        # Source of case
        source_frame = tk.Frame(section1, bg=self.premium_colors['surface'])
        source_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(source_frame, text=self.format_arabic_text("مصدر الحالة:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right", padx=5)
        
        source_options = ["تدقيق داخلي", "شكوى", "تظلم", "مراجعة إدارية"]
        self.qf_10_02_05_03_entries['case_sources'] = {}
        for option in source_options:
            var = tk.BooleanVar()
            self.qf_10_02_05_03_entries['case_sources'][option] = var
            tk.Checkbutton(source_frame, text=self.format_arabic_text(option),
                          variable=var,
                          font=self.fonts['body'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background']).pack(side="right", padx=5)
        
        tk.Label(source_frame, text=self.format_arabic_text("أخرى:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right", padx=5)
        
        self.qf_10_02_05_03_entries['other_source'] = tk.Entry(source_frame, font=self.fonts['body'], width=15,
                                                             bg=self.premium_colors['background'],
                                                             fg=self.premium_colors['text_light'],
                                                             insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_03_entries['other_source'].pack(side="right", padx=5)
        
        self.create_form_field_05_03(section1, "الجهة / القسم المعني", "concerned_department")
        
        # Section 2: Non-conformance Description
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: وصف حالة عدم المطابقة / المشكلة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_05_03_entries['nonconformance_description'] = scrolledtext.ScrolledText(section2, 
                                                                                             height=5, width=60,
                                                                                             font=self.fonts['body'],
                                                                                             bg=self.premium_colors['background'],
                                                                                             fg=self.premium_colors['text_light'],
                                                                                             insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_03_entries['nonconformance_description'].pack(fill="x", padx=10, pady=10)
        
        # Section 3: Root Cause Analysis
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: تحليل السبب الجذري (Root Cause Analysis)"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        # Root cause categories
        root_causes = [
            "ضعف تطبيق الإجراء",
            "قصور في التدريب / التوعية", 
            "غموض أو نقص في الوثائق",
            "خطأ بشري"
        ]
        
        self.qf_10_02_05_03_entries['root_causes'] = {}
        for cause in root_causes:
            var = tk.BooleanVar()
            self.qf_10_02_05_03_entries['root_causes'][cause] = var
            tk.Checkbutton(section3, text=self.format_arabic_text(cause),
                          variable=var,
                          font=self.fonts['body'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background'],
                          anchor="e").pack(fill="x", padx=10, pady=2)
        
        # Other root cause
        other_cause_frame = tk.Frame(section3, bg=self.premium_colors['surface'])
        other_cause_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(other_cause_frame, text=self.format_arabic_text("أخرى:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right", padx=5)
        
        self.qf_10_02_05_03_entries['other_root_cause'] = tk.Entry(other_cause_frame, font=self.fonts['body'],
                                                                 bg=self.premium_colors['background'],
                                                                 fg=self.premium_colors['text_light'],
                                                                 insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_03_entries['other_root_cause'].pack(side="right", fill="x", expand=True, padx=5)
        
        # Detailed root cause analysis
        detail_frame = tk.Frame(section3, bg=self.premium_colors['surface'])
        detail_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(detail_frame, text=self.format_arabic_text("تفصيل السبب الجذري:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(anchor="e", pady=5)
        
        self.qf_10_02_05_03_entries['root_cause_details'] = scrolledtext.ScrolledText(detail_frame, 
                                                                                    height=3, width=60,
                                                                                    font=self.fonts['body'],
                                                                                    bg=self.premium_colors['background'],
                                                                                    fg=self.premium_colors['text_light'],
                                                                                    insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_03_entries['root_cause_details'].pack(fill="x", padx=10, pady=5)
        
        # Section 4: Proposed Corrective Action
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: الإجراء التصحيحي المقترح"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_05_03_entries['corrective_action'] = scrolledtext.ScrolledText(section4, 
                                                                                   height=4, width=60,
                                                                                   font=self.fonts['body'],
                                                                                   bg=self.premium_colors['background'],
                                                                                   fg=self.premium_colors['text_light'],
                                                                                   insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_03_entries['corrective_action'].pack(fill="x", padx=10, pady=10)
        
        self.create_form_field_05_03(section4, "الجهة المسؤولة عن التنفيذ", "responsible_party")
        self.create_date_field_05_03(section4, "تاريخ التنفيذ المستهدف", "target_date")
        
        # Section 5: Follow-up Results
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: نتائج المتابعة / التحقق من فاعلية الإجراء"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        # Verification questions
        verification_questions = [
            "هل تم تنفيذ الإجراء بالكامل؟",
            "هل تمت إزالة السبب الجذري؟", 
            "هل ظهرت الحالة مرة أخرى؟"
        ]
        
        self.qf_10_02_05_03_entries['verification'] = {}
        for question in verification_questions:
            question_frame = tk.Frame(section5, bg=self.premium_colors['surface'])
            question_frame.pack(fill="x", padx=10, pady=2)
            
            tk.Label(question_frame, text=self.format_arabic_text(question),
                    font=self.fonts['body'],
                    fg=self.premium_colors['text_light'],
                    bg=self.premium_colors['surface']).pack(side="right", padx=5)
            
            yes_var = tk.BooleanVar()
            no_var = tk.BooleanVar()
            self.qf_10_02_05_03_entries['verification'][question] = {'yes': yes_var, 'no': no_var}
            
            tk.Checkbutton(question_frame, text=self.format_arabic_text("نعم"),
                          variable=yes_var,
                          font=self.fonts['body'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background']).pack(side="right", padx=5)
            
            tk.Checkbutton(question_frame, text=self.format_arabic_text("لا"),
                          variable=no_var,
                          font=self.fonts['body'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background']).pack(side="right", padx=5)
        
        # Follow-up notes
        followup_frame = tk.Frame(section5, bg=self.premium_colors['surface'])
        followup_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(followup_frame, text=self.format_arabic_text("ملاحظات المتابعة:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(anchor="e", pady=5)
        
        self.qf_10_02_05_03_entries['followup_notes'] = scrolledtext.ScrolledText(followup_frame, 
                                                                                height=3, width=60,
                                                                                font=self.fonts['body'],
                                                                                bg=self.premium_colors['background'],
                                                                                fg=self.premium_colors['text_light'],
                                                                                insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_03_entries['followup_notes'].pack(fill="x", padx=10, pady=5)
        
        self.create_form_field_05_03(section5, "اسم من قام بالمتابعة", "followup_person_name")
        self.create_form_field_05_03(section5, "الوظيفة", "followup_person_position")
        self.create_form_field_05_03(section5, "التوقيع", "followup_person_signature")
        self.create_date_field_05_03(section5, "تاريخ المتابعة", "followup_date")
        
        # Section 6: Closure Approval
        section6 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("سادساً: اعتماد غلق الإجراء التصحيحي"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section6.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_05_03(section6, "اسم مدير الجودة / المعني", "closure_approver_name")
        self.create_form_field_05_03(section6, "الوظيفة", "closure_approver_position")
        self.create_form_field_05_03(section6, "التوقيع", "closure_approver_signature")
        self.create_date_field_05_03(section6, "تاريخ الإغلاق", "closure_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-05-03", self.qf_10_02_05_03_entries)

    def create_QF_10_02_05_04_form(self, parent_frame):
        """QF-10-02-05-04: نموذج متابعة الإجراءات التصحيحية"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_05_04_entries = {}
        
        # Form Title
        title_text = "QF-10-02-05-04: نموذج متابعة الإجراءات التصحيحية"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: Basic Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: البيانات الأساسية"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_05_04(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_form_field_05_04(section1, "رقم الإجراء التصحيحي", "action_number")
        
        # Source of action
        source_frame = tk.Frame(section1, bg=self.premium_colors['surface'])
        source_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(source_frame, text=self.format_arabic_text("مصدر الإجراء:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right", padx=5)
        
        source_options = ["تدقيق داخلي", "تدقيق خارجي", "شكوى", "مراجعة إدارية"]
        self.qf_10_02_05_04_entries['action_sources'] = {}
        for option in source_options:
            var = tk.BooleanVar()
            self.qf_10_02_05_04_entries['action_sources'][option] = var
            tk.Checkbutton(source_frame, text=self.format_arabic_text(option),
                          variable=var,
                          font=self.fonts['body'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background']).pack(side="right", padx=5)
        
        tk.Label(source_frame, text=self.format_arabic_text("أخرى:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right", padx=5)
        
        self.qf_10_02_05_04_entries['other_source'] = tk.Entry(source_frame, font=self.fonts['body'], width=15,
                                                             bg=self.premium_colors['background'],
                                                             fg=self.premium_colors['text_light'],
                                                             insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_04_entries['other_source'].pack(side="right", padx=5)
        
        self.create_form_field_05_04(section1, "القسم / الجهة المعنية", "concerned_department")
        self.create_date_field_05_04(section1, "تاريخ فتح الإجراء", "opening_date")
        self.create_form_field_05_04(section1, "اسم الشخص المتابع", "follower_name")
        self.create_date_field_05_04(section1, "تاريخ المتابعة", "followup_date")
        
        # Section 2: Implementation Review
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: مراجعة التنفيذ"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        # Create implementation review table
        self.create_implementation_review_table_05_04(section2)
        
        # Section 3: Effectiveness Assessment
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: تقييم الفاعلية"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        # Effectiveness questions
        effectiveness_questions = [
            "هل كان الإجراء فعّالاً في حل المشكلة؟",
            "هل هناك حاجة لإجراء إضافي؟"
        ]
        
        self.qf_10_02_05_04_entries['effectiveness'] = {}
        for question in effectiveness_questions:
            question_frame = tk.Frame(section3, bg=self.premium_colors['surface'])
            question_frame.pack(fill="x", padx=10, pady=5)
            
            tk.Label(question_frame, text=self.format_arabic_text(question),
                    font=self.fonts['body'],
                    fg=self.premium_colors['text_light'],
                    bg=self.premium_colors['surface']).pack(side="right", padx=5)
            
            yes_var = tk.BooleanVar()
            no_var = tk.BooleanVar()
            partially_var = tk.BooleanVar()
            
            self.qf_10_02_05_04_entries['effectiveness'][question] = {
                'yes': yes_var, 'no': no_var, 'partially': partially_var
            }
            
            tk.Checkbutton(question_frame, text=self.format_arabic_text("نعم"),
                          variable=yes_var,
                          font=self.fonts['body'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background']).pack(side="right", padx=5)
            
            tk.Checkbutton(question_frame, text=self.format_arabic_text("لا"),
                          variable=no_var,
                          font=self.fonts['body'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background']).pack(side="right", padx=5)
            
            if "فعّالاً" in question:
                tk.Checkbutton(question_frame, text=self.format_arabic_text("جزئياً"),
                              variable=partially_var,
                              font=self.fonts['body'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['surface'],
                              selectcolor=self.premium_colors['background']).pack(side="right", padx=5)
        
        # Additional details text area
        detail_frame = tk.Frame(section3, bg=self.premium_colors['surface'])
        detail_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(detail_frame, text=self.format_arabic_text("إذا كانت الإجابة نعم، يرجى ذكر التفاصيل:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(anchor="e", pady=5)
        
        self.qf_10_02_05_04_entries['additional_details'] = scrolledtext.ScrolledText(detail_frame, 
                                                                                    height=3, width=60,
                                                                                    font=self.fonts['body'],
                                                                                    bg=self.premium_colors['background'],
                                                                                    fg=self.premium_colors['text_light'],
                                                                                    insertbackground=self.premium_colors['accent'])
        self.qf_10_02_05_04_entries['additional_details'].pack(fill="x", padx=10, pady=5)
        
        # Section 4: Closure Decision
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: قرار الإغلاق"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        # Closure decision table
        self.create_closure_decision_table_05_04(section4)
        
        # Section 5: Responsible Signatures
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: توقيعات المسؤولين"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_05_04(section5, "اسم المتابع / مسؤول الجودة", "quality_manager_name")
        self.create_form_field_05_04(section5, "التوقيع", "quality_manager_signature")
        self.create_date_field_05_04(section5, "التاريخ", "quality_manager_date")
        
        # Management approval
        mgmt_frame = tk.Frame(section5, bg=self.premium_colors['surface'])
        mgmt_frame.pack(fill="x", padx=10, pady=10)
        
        tk.Label(mgmt_frame, text=self.format_arabic_text("موافقة الإدارة على الإغلاق النهائي:"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(anchor="e", pady=5)
        
        self.create_form_field_05_04(section5, "الاسم", "final_approver_name")
        self.create_form_field_05_04(section5, "التوقيع", "final_approver_signature")
        self.create_date_field_05_04(section5, "التاريخ", "final_approval_date")
        
        # Form buttons
        self.create_enhanced_form_buttons(scrollable_frame, "QF-10-02-05-04", self.qf_10_02_05_04_entries)

    # Helper methods for QP-10-02-05 forms
    
    def create_form_field_05_01(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-05-01 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side="right", fill="x", expand=True, padx=5)
        
        self.qf_10_02_05_01_entries[field_name] = entry

    def create_date_field_05_01(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-05-01"""
        date_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        date_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(date_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        # Date entry fields
        date_entry_frame = tk.Frame(date_frame, bg=self.premium_colors['surface'])
        date_entry_frame.pack(side="right", padx=5)
        
        # Day
        day_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Month
        month_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Year
        year_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side="right", padx=2)
        
        self.qf_10_02_05_01_entries[field_name] = {
            'day': day_entry,
            'month': month_entry,
            'year': year_entry
        }

    def create_audit_plan_table_05_01(self, parent):
        """Create audit plan table for QF-10-02-05-01"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Table headers
        headers = ["م", "المجال / القسم محل التدقيق", "المرجع الإجرائي / المواصفة", "تاريخ التدقيق", "المدقق المسؤول", "الملاحظات"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add empty rows for audit plan entries
        self.qf_10_02_05_01_entries['audit_plan_rows'] = []
        for row in range(1, 11):  # 10 empty rows
            row_data = {}
            
            # Number
            num_label = tk.Label(table_frame, text=str(row),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'],
                               relief=tk.SUNKEN, bd=1)
            num_label.grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            for col, field in enumerate(['area_department', 'procedure_reference', 'audit_date', 'responsible_auditor', 'notes'], start=1):
                cell = tk.Entry(table_frame, font=self.fonts['body'], width=15,
                              bg=self.premium_colors['background'],
                              fg=self.premium_colors['text_light'],
                              insertbackground=self.premium_colors['accent'])
                cell.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
                row_data[field] = cell
            
            self.qf_10_02_05_01_entries['audit_plan_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_quarterly_table_05_01(self, parent):
        """Create quarterly distribution table for QF-10-02-05-01"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="x", padx=10, pady=10)
        
        # Table headers
        headers = ["الربع", "الأقسام المستهدفة بالتدقيق", "المدة المقترحة", "عدد المدققين"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Quarters
        quarters = ["الربع الأول", "الربع الثاني", "الربع الثالث", "الربع الرابع"]
        
        # Add quarterly rows
        self.qf_10_02_05_01_entries['quarterly_rows'] = []
        for row, quarter in enumerate(quarters, start=1):
            row_data = {}
            
            # Quarter
            quarter_label = tk.Label(table_frame, text=self.format_arabic_text(quarter),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['surface'],
                                   relief=tk.SUNKEN, bd=1, anchor="e")
            quarter_label.grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            for col, field in enumerate(['target_departments', 'proposed_duration', 'auditor_count'], start=1):
                cell = tk.Entry(table_frame, font=self.fonts['body'], width=20,
                              bg=self.premium_colors['background'],
                              fg=self.premium_colors['text_light'],
                              insertbackground=self.premium_colors['accent'])
                cell.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
                row_data[field] = cell
            
            self.qf_10_02_05_01_entries['quarterly_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_form_field_05_02(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-05-02 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side="right", fill="x", expand=True, padx=5)
        
        self.qf_10_02_05_02_entries[field_name] = entry

    def create_date_field_05_02(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-05-02"""
        date_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        date_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(date_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        # Date entry fields
        date_entry_frame = tk.Frame(date_frame, bg=self.premium_colors['surface'])
        date_entry_frame.pack(side="right", padx=5)
        
        # Day
        day_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Month
        month_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Year
        year_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side="right", padx=2)
        
        self.qf_10_02_05_02_entries[field_name] = {
            'day': day_entry,
            'month': month_entry,
            'year': year_entry
        }

    def create_audit_results_table_05_02(self, parent):
        """Create audit results table for QF-10-02-05-02"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Table headers
        headers = ["م", "المرجع / البند المدقق", "الملاحظات", "الحالة", "الإجراء المطلوب"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add audit result rows
        self.qf_10_02_05_02_entries['audit_result_rows'] = []
        for row in range(1, 11):  # 10 empty rows
            row_data = {}
            
            # Number
            num_label = tk.Label(table_frame, text=str(row),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'],
                               relief=tk.SUNKEN, bd=1)
            num_label.grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            # Reference
            ref_entry = tk.Entry(table_frame, font=self.fonts['body'], width=20,
                               bg=self.premium_colors['background'],
                               fg=self.premium_colors['text_light'],
                               insertbackground=self.premium_colors['accent'])
            ref_entry.grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            row_data['reference'] = ref_entry
            
            # Observations
            obs_entry = tk.Entry(table_frame, font=self.fonts['body'], width=25,
                               bg=self.premium_colors['background'],
                               fg=self.premium_colors['text_light'],
                               insertbackground=self.premium_colors['accent'])
            obs_entry.grid(row=row, column=2, sticky="ew", padx=1, pady=1)
            row_data['observations'] = obs_entry
            
            # Status frame with checkboxes
            status_frame = tk.Frame(table_frame, bg=self.premium_colors['surface'])
            status_frame.grid(row=row, column=3, sticky="ew", padx=1, pady=1)
            
            row_data['status'] = {}
            conformity_var = tk.BooleanVar()
            row_data['status']['conformity'] = conformity_var
            tk.Checkbutton(status_frame, text=self.format_arabic_text("مطابقة"),
                          variable=conformity_var,
                          font=self.fonts['small'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background']).pack(side="top", anchor="e")
            
            nonconformity_var = tk.BooleanVar()
            row_data['status']['nonconformity'] = nonconformity_var
            tk.Checkbutton(status_frame, text=self.format_arabic_text("عدم مطابقة"),
                          variable=nonconformity_var,
                          font=self.fonts['small'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background']).pack(side="top", anchor="e")
            
            observation_var = tk.BooleanVar()
            row_data['status']['observation'] = observation_var
            tk.Checkbutton(status_frame, text=self.format_arabic_text("ملاحظة"),
                          variable=observation_var,
                          font=self.fonts['small'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background']).pack(side="top", anchor="e")
            
            # Required action
            action_entry = tk.Entry(table_frame, font=self.fonts['body'], width=25,
                                  bg=self.premium_colors['background'],
                                  fg=self.premium_colors['text_light'],
                                  insertbackground=self.premium_colors['accent'])
            action_entry.grid(row=row, column=4, sticky="ew", padx=1, pady=1)
            row_data['required_action'] = action_entry
            
            self.qf_10_02_05_02_entries['audit_result_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_nonconformance_table_05_02(self, parent):
        """Create non-conformance table for QF-10-02-05-02"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="x", padx=10, pady=10)
        
        # Table headers
        headers = ["رقم الحالة", "الوصف", "درجة الخطورة", "الجهة المسؤولة عن التصحيح", "الإجراء التصحيحي المقترح", "المدة المستهدفة"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add non-conformance rows
        self.qf_10_02_05_02_entries['nonconformance_rows'] = []
        for row in range(1, 6):  # 5 empty rows
            row_data = {}
            
            for col, field in enumerate(['case_number', 'description', 'severity', 'responsible_party', 'corrective_action', 'target_duration']):
                if field == 'severity':
                    # Severity frame with radio buttons
                    severity_frame = tk.Frame(table_frame, bg=self.premium_colors['surface'])
                    severity_frame.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
                    
                    severity_var = tk.StringVar()
                    row_data[field] = severity_var
                    
                    tk.Radiobutton(severity_frame, text=self.format_arabic_text("حرجة"),
                                  variable=severity_var, value="critical",
                                  font=self.fonts['small'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background']).pack(side="top", anchor="e")
                    
                    tk.Radiobutton(severity_frame, text=self.format_arabic_text("متوسطة"),
                                  variable=severity_var, value="medium",
                                  font=self.fonts['small'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background']).pack(side="top", anchor="e")
                    
                    tk.Radiobutton(severity_frame, text=self.format_arabic_text("طفيفة"),
                                  variable=severity_var, value="minor",
                                  font=self.fonts['small'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background']).pack(side="top", anchor="e")
                else:
                    cell = tk.Entry(table_frame, font=self.fonts['body'], width=15,
                                  bg=self.premium_colors['background'],
                                  fg=self.premium_colors['text_light'],
                                  insertbackground=self.premium_colors['accent'])
                    cell.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
                    row_data[field] = cell
            
            self.qf_10_02_05_02_entries['nonconformance_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_form_field_05_03(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-05-03 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side="right", fill="x", expand=True, padx=5)
        
        self.qf_10_02_05_03_entries[field_name] = entry

    def create_date_field_05_03(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-05-03"""
        date_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        date_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(date_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        # Date entry fields
        date_entry_frame = tk.Frame(date_frame, bg=self.premium_colors['surface'])
        date_entry_frame.pack(side="right", padx=5)
        
        # Day
        day_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Month
        month_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Year
        year_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side="right", padx=2)
        
        self.qf_10_02_05_03_entries[field_name] = {
            'day': day_entry,
            'month': month_entry,
            'year': year_entry
        }

    def create_form_field_05_04(self, parent, label_text, field_name):
        """Create a form field for QF-10-02-05-04 with premium styling"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        entry = tk.Entry(field_frame, font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side="right", fill="x", expand=True, padx=5)
        
        self.qf_10_02_05_04_entries[field_name] = entry

    def create_date_field_05_04(self, parent, label_text, field_name):
        """Create a date field for QF-10-02-05-04"""
        date_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        date_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(date_frame, 
                        text=self.format_arabic_text(f"{label_text}:"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=20, anchor="e")
        label.pack(side="right", padx=5)
        
        # Date entry fields
        date_entry_frame = tk.Frame(date_frame, bg=self.premium_colors['surface'])
        date_entry_frame.pack(side="right", padx=5)
        
        # Day
        day_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
        day_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Month
        month_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=4,
                             bg=self.premium_colors['background'],
                             fg=self.premium_colors['text_light'],
                             insertbackground=self.premium_colors['accent'])
        month_entry.pack(side="right", padx=2)
        
        tk.Label(date_entry_frame, text=self.format_arabic_text("/"),
                font=self.fonts['body'],
                fg=self.premium_colors['text_light'],
                bg=self.premium_colors['surface']).pack(side="right")
        
        # Year
        year_entry = tk.Entry(date_entry_frame, font=self.fonts['body'], width=6,
                            bg=self.premium_colors['background'],
                            fg=self.premium_colors['text_light'],
                            insertbackground=self.premium_colors['accent'])
        year_entry.pack(side="right", padx=2)
        
        self.qf_10_02_05_04_entries[field_name] = {
            'day': day_entry,
            'month': month_entry,
            'year': year_entry
        }

    def create_implementation_review_table_05_04(self, parent):
        """Create implementation review table for QF-10-02-05-04"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="x", padx=10, pady=10)
        
        # Table headers
        headers = ["م", "عنصر المراجعة", "تم التنفيذ (✔)", "الملاحظات"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Review elements
        review_elements = [
            "تم تنفيذ الإجراء التصحيحي وفقاً للخطة",
            "تم القضاء على السبب الجذري للمشكلة",
            "لم تتكرر المشكلة منذ تنفيذ الإجراء",
            "تم توثيق جميع الأدلة المؤيدة للإجراء",
            "تم إشراك الجهات المعنية أثناء التنفيذ"
        ]
        
        # Add review rows
        self.qf_10_02_05_04_entries['review_rows'] = []
        for row, element in enumerate(review_elements, start=1):
            row_data = {}
            
            # Number
            num_label = tk.Label(table_frame, text=str(row),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'],
                               relief=tk.SUNKEN, bd=1)
            num_label.grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            # Element
            element_label = tk.Label(table_frame, text=self.format_arabic_text(element),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['surface'],
                                   relief=tk.SUNKEN, bd=1, anchor="e", wraplength=300)
            element_label.grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            
            # Implementation status
            status_frame = tk.Frame(table_frame, bg=self.premium_colors['surface'])
            status_frame.grid(row=row, column=2, padx=1, pady=1)
            
            yes_var = tk.BooleanVar()
            no_var = tk.BooleanVar()
            row_data['status'] = {'yes': yes_var, 'no': no_var}
            
            tk.Checkbutton(status_frame, text=self.format_arabic_text("نعم"),
                          variable=yes_var,
                          font=self.fonts['body'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background']).pack(side="top", anchor="e")
            
            tk.Checkbutton(status_frame, text=self.format_arabic_text("لا"),
                          variable=no_var,
                          font=self.fonts['body'],
                          fg=self.premium_colors['text_light'],
                          bg=self.premium_colors['surface'],
                          selectcolor=self.premium_colors['background']).pack(side="top", anchor="e")
            
            # Comments
            comments_entry = tk.Entry(table_frame, font=self.fonts['body'], width=30,
                                    bg=self.premium_colors['background'],
                                    fg=self.premium_colors['text_light'],
                                    insertbackground=self.premium_colors['accent'])
            comments_entry.grid(row=row, column=3, sticky="ew", padx=1, pady=1)
            row_data['comments'] = comments_entry
            
            self.qf_10_02_05_04_entries['review_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_closure_decision_table_05_04(self, parent):
        """Create closure decision table for QF-10-02-05-04"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="x", padx=10, pady=10)
        
        # Table headers
        headers = ["✔", "القرار النهائي", "التاريخ", "توقيع"]
        
        # Create table using grid
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                  text=self.format_arabic_text(header),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['accent'],
                                  bg=self.premium_colors['background'],
                                  relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Decision options
        decisions = [
            "تم الإغلاق بنجاح",
            "الإجراء غير فعال – يلزم إجراء إضافي"
        ]
        
        # Add decision rows
        self.qf_10_02_05_04_entries['decision_rows'] = []
        for row, decision in enumerate(decisions, start=1):
            row_data = {}
            
            # Checkbox
            decision_var = tk.BooleanVar()
            row_data['selected'] = decision_var
            decision_check = tk.Checkbutton(table_frame, variable=decision_var,
                                          bg=self.premium_colors['surface'],
                                          fg=self.premium_colors['text_light'],
                                          selectcolor=self.premium_colors['background'])
            decision_check.grid(row=row, column=0, padx=1, pady=1)
            
            # Decision
            decision_label = tk.Label(table_frame, text=self.format_arabic_text(decision),
                                    font=self.fonts['body'],
                                    fg=self.premium_colors['text_light'],
                                    bg=self.premium_colors['surface'],
                                    relief=tk.SUNKEN, bd=1, anchor="e")
            decision_label.grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            
            # Date
            date_entry = tk.Entry(table_frame, font=self.fonts['body'], width=12,
                                bg=self.premium_colors['background'],
                                fg=self.premium_colors['text_light'],
                                insertbackground=self.premium_colors['accent'])
            date_entry.grid(row=row, column=2, sticky="ew", padx=1, pady=1)
            row_data['date'] = date_entry
            
            # Signature
            signature_entry = tk.Entry(table_frame, font=self.fonts['body'], width=20,
                                     bg=self.premium_colors['background'],
                                     fg=self.premium_colors['text_light'],
                                     insertbackground=self.premium_colors['accent'])
            signature_entry.grid(row=row, column=3, sticky="ew", padx=1, pady=1)
            row_data['signature'] = signature_entry
            
            self.qf_10_02_05_04_entries['decision_rows'].append(row_data)
        
        # Configure column weights
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_scrollable_form_frame(self, parent_frame):
        """Create a standardized scrollable frame with proper layout and mouse wheel support"""
        # Create scrollable frame with improved layout
        canvas = tk.Canvas(parent_frame, bg=self.premium_colors['background'], highlightthickness=0)
        scrollbar = tk.Scrollbar(parent_frame, orient="vertical", command=canvas.yview, 
                                bg=self.premium_colors['surface'], troughcolor=self.premium_colors['background'])
        scrollable_frame = tk.Frame(canvas, bg=self.premium_colors['background'])
        
        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Pack with better space utilization
        canvas.pack(side="left", fill="both", expand=True, padx=(10, 0), pady=10)
        scrollbar.pack(side="right", fill="y", pady=10, padx=(0, 10))
        
        # Enhanced width configuration for better content expansion
        def _configure_scroll_width(event):
            # Ensure scrollable frame uses full canvas width minus scrollbar
            canvas_width = event.width - 20  # Account for padding
            canvas.itemconfig(canvas.find_all()[0], width=canvas_width)
            # Also update the scrollable frame's minimum width
            scrollable_frame.config(width=canvas_width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        # Add mouse wheel support for better user experience
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)
        
        return canvas, scrollbar, scrollable_frame

    # QP-10-02-06 Corrective Actions Forms
    
    def create_QF_10_02_06_01_form(self, parent_frame):
        """QF-10-02-06-01: سجل حالات عدم المطابقة"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_06_01_entries = {}
        
        # Form Title
        title_text = "QF-10-02-06-01: سجل حالات عدم المطابقة"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: General Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: البيانات العامة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_06_01(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_form_field_06_01(section1, "الإدارة / القسم المعني", "department")
        self.create_form_field_06_01(section1, "اسم مسؤول الجودة / منسق السجل", "quality_manager")
        self.create_date_field_06_01(section1, "الفترة المغطاة من", "period_from")
        self.create_date_field_06_01(section1, "الفترة المغطاة إلى", "period_to")
        
        # Section 2: Non-conformance Details
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: تفاصيل حالات عدم المطابقة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        # Create non-conformance table
        self.create_nonconformance_table_06_01(section2)
        
        # Section 3: Summary of Causes and Corrective Actions
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: ملخص الأسباب والإجراءات التصحيحية"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        self.create_summary_table_06_01(section3)
        
        # Section 4: Review and Signature
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: المراجعة والتوقيع"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_06_01(section4, "اسم مسؤول المتابعة / الجودة", "follow_up_manager")
        self.create_form_field_06_01(section4, "التوقيع", "signature")
        self.create_date_field_06_01(section4, "تاريخ التحديث الأخير للسجل", "last_update")
        
        # Add Enhanced Buttons
        self.add_enhanced_buttons_to_form(scrollable_frame, "QF-10-02-06-01", "QF-10-02-06-01: سجل حالات عدم المطابقة", self.qf_10_02_06_01_entries)

    def create_QF_10_02_06_02_form(self, parent_frame):
        """QF-10-02-06-02: تحليل السبب الجذري"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_06_02_entries = {}
        
        # Form Title
        title_text = "QF-10-02-06-02: تحليل السبب الجذري"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: General Information
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: معلومات عامة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_06_02(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_form_field_06_02(section1, "رقم حالة عدم المطابقة / المشكلة", "case_number")
        self.create_date_field_06_02(section1, "تاريخ الاكتشاف", "discovery_date")
        self.create_form_field_06_02(section1, "القسم / العملية المتأثرة", "affected_department")
        self.create_form_field_06_02(section1, "اسم القائم بالتحليل", "analyst_name")
        self.create_date_field_06_02(section1, "التاريخ", "analysis_date")
        
        # Section 2: Problem Description
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: وصف المشكلة أو عدم المطابقة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_06_02_entries['problem_description'] = scrolledtext.ScrolledText(section2, 
                                                                                       height=4, 
                                                                                       font=self.fonts['body'],
                                                                                       bg=self.premium_colors['background'],
                                                                                       fg=self.premium_colors['text_light'],
                                                                                       insertbackground=self.premium_colors['accent'])
        self.qf_10_02_06_02_entries['problem_description'].pack(fill="x", padx=10, pady=10)
        
        # Section 3: Root Cause Analysis Methods
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: طرق تحليل السبب الجذري"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        self.create_analysis_tools_section_06_02(section3)
        
        # Section 4: 5 Whys Analysis
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: تحليل السبب الجذري (باستخدام 5 لماذا كمثال)"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        self.create_five_whys_table_06_02(section4)
        
        # Section 5: Recommendations
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: التوصيات والإجراء التصحيحي المقترح"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_06_02_entries['recommendations'] = scrolledtext.ScrolledText(section5, 
                                                                                   height=3, 
                                                                                   font=self.fonts['body'],
                                                                                   bg=self.premium_colors['background'],
                                                                                   fg=self.premium_colors['text_light'],
                                                                                   insertbackground=self.premium_colors['accent'])
        self.qf_10_02_06_02_entries['recommendations'].pack(fill="x", padx=10, pady=5)
        
        self.create_form_field_06_02(section5, "الجهة المنفذة", "implementing_party")
        self.create_date_field_06_02(section5, "التاريخ المتوقع للتنفيذ", "expected_date")
        
        # Section 6: Review and Approval
        section6 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("سادساً: مراجعة واعتماد التحليل"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section6.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_06_02(section6, "اسم مسؤول الجودة / الإدارة", "quality_manager")
        self.create_form_field_06_02(section6, "الوظيفة", "position")
        self.create_form_field_06_02(section6, "التوقيع", "signature")
        self.create_date_field_06_02(section6, "التاريخ", "approval_date")
        
        # Add Enhanced Buttons
        self.add_enhanced_buttons_to_form(scrollable_frame, "QF-10-02-06-02", "QF-10-02-06-02: تحليل السبب الجذري", self.qf_10_02_06_02_entries)

    def create_QF_10_02_06_03_form(self, parent_frame):
        """QF-10-02-06-03: إجراء تصحيحي"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_06_03_entries = {}
        
        # Form Title
        title_text = "QF-10-02-06-03: إجراء تصحيحي"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: General Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: البيانات العامة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_06_03(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_date_field_06_03(section1, "تاريخ فتح الإجراء", "action_date")
        self.create_form_field_06_03(section1, "رقم الإجراء التصحيحي", "action_number")
        
        # Source of action with checkboxes
        source_frame = tk.Frame(section1, bg=self.premium_colors['surface'])
        source_frame.pack(fill="x", padx=10, pady=5)
        
        source_label = tk.Label(source_frame, 
                               text=self.format_arabic_text("مصدر الإجراء:"),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'])
        source_label.pack(anchor="e")
        
        self.qf_10_02_06_03_entries['source_internal'] = tk.BooleanVar()
        self.qf_10_02_06_03_entries['source_external'] = tk.BooleanVar()
        self.qf_10_02_06_03_entries['source_complaint'] = tk.BooleanVar()
        self.qf_10_02_06_03_entries['source_observation'] = tk.BooleanVar()
        
        sources = [
            ("تدقيق داخلي", self.qf_10_02_06_03_entries['source_internal']),
            ("تدقيق خارجي", self.qf_10_02_06_03_entries['source_external']),
            ("شكوى", self.qf_10_02_06_03_entries['source_complaint']),
            ("ملاحظة", self.qf_10_02_06_03_entries['source_observation'])
        ]
        
        for source_text, var in sources:
            check = tk.Checkbutton(source_frame, 
                                  text=self.format_arabic_text(source_text),
                                  variable=var,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            check.pack(anchor="e")
        
        self.create_form_field_06_03(section1, "القسم المعني", "concerned_department")
        self.create_form_field_06_03(section1, "اسم مقدم الطلب / المكتشف", "requester_name")
        
        # Section 2: Problem Description
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: وصف المشكلة / حالة عدم المطابقة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_06_03_entries['problem_description'] = scrolledtext.ScrolledText(section2, 
                                                                                       height=3, 
                                                                                       font=self.fonts['body'],
                                                                                       bg=self.premium_colors['background'],
                                                                                       fg=self.premium_colors['text_light'],
                                                                                       insertbackground=self.premium_colors['accent'])
        self.qf_10_02_06_03_entries['problem_description'].pack(fill="x", padx=10, pady=10)
        
        # Section 3: Root Cause Analysis
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: تحليل السبب الجذري"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_06_03_entries['root_cause_analysis'] = scrolledtext.ScrolledText(section3, 
                                                                                       height=3, 
                                                                                       font=self.fonts['body'],
                                                                                       bg=self.premium_colors['background'],
                                                                                       fg=self.premium_colors['text_light'],
                                                                                       insertbackground=self.premium_colors['accent'])
        self.qf_10_02_06_03_entries['root_cause_analysis'].pack(fill="x", padx=10, pady=10)
        
        # Section 4: Corrective Action Details
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: تفاصيل الإجراء التصحيحي"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_06_03_entries['proposed_action'] = scrolledtext.ScrolledText(section4, 
                                                                                   height=3, 
                                                                                   font=self.fonts['body'],
                                                                                   bg=self.premium_colors['background'],
                                                                                   fg=self.premium_colors['text_light'],
                                                                                   insertbackground=self.premium_colors['accent'])
        self.qf_10_02_06_03_entries['proposed_action'].pack(fill="x", padx=10, pady=5)
        
        # Action objective with checkboxes
        objective_frame = tk.Frame(section4, bg=self.premium_colors['surface'])
        objective_frame.pack(fill="x", padx=10, pady=5)
        
        objective_label = tk.Label(objective_frame, 
                                  text=self.format_arabic_text("الهدف من الإجراء:"),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'])
        objective_label.pack(anchor="e")
        
        self.qf_10_02_06_03_entries['objective_prevent'] = tk.BooleanVar()
        self.qf_10_02_06_03_entries['objective_correct'] = tk.BooleanVar()
        self.qf_10_02_06_03_entries['objective_improve'] = tk.BooleanVar()
        
        objectives = [
            ("منع التكرار", self.qf_10_02_06_03_entries['objective_prevent']),
            ("تصحيح فوري", self.qf_10_02_06_03_entries['objective_correct']),
            ("تحسين الإجراء", self.qf_10_02_06_03_entries['objective_improve'])
        ]
        
        for obj_text, var in objectives:
            check = tk.Checkbutton(objective_frame, 
                                  text=self.format_arabic_text(obj_text),
                                  variable=var,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            check.pack(anchor="e")
        
        self.create_form_field_06_03(section4, "المسؤول عن التنفيذ", "responsible_person")
        self.create_date_field_06_03(section4, "التاريخ المستهدف للتنفيذ", "target_date")
        
        # Current status with radio buttons
        status_frame = tk.Frame(section4, bg=self.premium_colors['surface'])
        status_frame.pack(fill="x", padx=10, pady=5)
        
        status_label = tk.Label(status_frame, 
                               text=self.format_arabic_text("الحالة الحالية:"),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'])
        status_label.pack(anchor="e")
        
        self.qf_10_02_06_03_entries['current_status'] = tk.StringVar()
        
        statuses = ["قيد التنفيذ", "تم التنفيذ", "مغلق"]
        
        for status in statuses:
            radio = tk.Radiobutton(status_frame, 
                                  text=self.format_arabic_text(status),
                                  variable=self.qf_10_02_06_03_entries['current_status'],
                                  value=status,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            radio.pack(anchor="e")
        
        # Section 5: Follow-up and Effectiveness
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: متابعة التنفيذ وفاعلية الإجراء"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.create_effectiveness_checklist_06_03(section5)
        
        self.create_form_field_06_03(section5, "اسم المراجع / مسؤول المتابعة", "reviewer_name")
        self.create_date_field_06_03(section5, "تاريخ المتابعة", "follow_up_date")
        
        # Section 6: Action Approval
        section6 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("سادساً: اعتماد الإجراء"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section6.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_06_03(section6, "اسم مسؤول الجودة / الإدارة العليا", "approver_name")
        self.create_form_field_06_03(section6, "التوقيع", "signature")
        self.create_date_field_06_03(section6, "تاريخ الإغلاق النهائي", "closure_date")
        
        # Add Enhanced Buttons
        self.add_enhanced_buttons_to_form(scrollable_frame, "QF-10-02-06-03", "QF-10-02-06-03: إجراء تصحيحي", self.qf_10_02_06_03_entries)

    def create_QF_10_02_06_04_form(self, parent_frame):
        """QF-10-02-06-04: متابعة الإجراءات التصحيحية"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_06_04_entries = {}
        
        # Form Title
        title_text = "QF-10-02-06-04: متابعة الإجراءات التصحيحية"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: Basic Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: البيانات الأساسية"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_06_04(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_form_field_06_04(section1, "رقم الإجراء التصحيحي", "action_number")
        self.create_form_field_06_04(section1, "القسم / الجهة المعنية", "concerned_department")
        self.create_date_field_06_04(section1, "تاريخ فتح الإجراء", "action_date")
        self.create_form_field_06_04(section1, "اسم الشخص المتابع", "follower_name")
        self.create_date_field_06_04(section1, "تاريخ المتابعة", "follow_up_date")
        
        # Section 2: Implementation Review
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: مراجعة التنفيذ"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        self.create_implementation_review_table_06_04(section2)
        
        # Section 3: Effectiveness Assessment
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: تقييم الفاعلية"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        self.create_effectiveness_assessment_06_04(section3)
        
        # Section 4: Closure Decision
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: قرار الإغلاق"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        self.create_closure_decision_06_04(section4)
        
        # Section 5: Responsible Signatures
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: توقيعات المسؤولين"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_06_04(section5, "اسم المتابع / مسؤول الجودة", "quality_manager")
        self.create_form_field_06_04(section5, "التوقيع", "quality_signature")
        self.create_date_field_06_04(section5, "التاريخ", "quality_date")
        
        self.create_form_field_06_04(section5, "موافقة الإدارة على الإغلاق النهائي - الاسم", "management_name")
        self.create_form_field_06_04(section5, "التوقيع", "management_signature")
        self.create_date_field_06_04(section5, "التاريخ", "management_date")
        
        # Add Enhanced Buttons
        self.add_enhanced_buttons_to_form(scrollable_frame, "QF-10-02-06-04", "QF-10-02-06-04: متابعة الإجراءات التصحيحية", self.qf_10_02_06_04_entries)

    # QP-10-02-07 Preventive Actions Forms
    
    def create_QF_10_02_07_01_form(self, parent_frame):
        """QF-10-02-07-01: سجل المخاطر المحتملة"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_07_01_entries = {}
        
        # Form Title
        title_text = "QF-10-02-07-01: سجل المخاطر المحتملة"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: General Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: البيانات العامة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_07_01(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_form_field_07_01(section1, "القسم / الإدارة", "department")
        self.create_date_field_07_01(section1, "الفترة المغطاة من", "period_from")
        self.create_date_field_07_01(section1, "الفترة المغطاة إلى", "period_to")
        self.create_date_field_07_01(section1, "تاريخ إعداد السجل", "preparation_date")
        self.create_form_field_07_01(section1, "اسم مسؤول إدارة المخاطر", "risk_manager")
        
        # Section 2: Risk Assessment Table
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: جدول تقييم وتوثيق المخاطر"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        self.create_risk_assessment_table_07_01(section2)
        
        # Section 3: Follow-up and Review Mechanism
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: آلية المتابعة والمراجعة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        self.create_follow_up_table_07_01(section3)
        
        # Section 4: Summary and General Analysis
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: ملخص وتحليل عام"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_07_01(section4, "عدد المخاطر المصنفة عالية", "high_risk_count")
        
        urgent_frame = tk.Frame(section4, bg=self.premium_colors['surface'])
        urgent_frame.pack(fill="x", padx=10, pady=5)
        
        urgent_label = tk.Label(urgent_frame, 
                               text=self.format_arabic_text("هل هناك حاجة لإجراءات عاجلة؟"),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'])
        urgent_label.pack(anchor="e")
        
        self.qf_10_02_07_01_entries['urgent_actions'] = tk.StringVar()
        
        for option in ["نعم", "لا"]:
            radio = tk.Radiobutton(urgent_frame, 
                                  text=self.format_arabic_text(option),
                                  variable=self.qf_10_02_07_01_entries['urgent_actions'],
                                  value=option,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            radio.pack(anchor="e")
        
        self.qf_10_02_07_01_entries['additional_notes'] = scrolledtext.ScrolledText(section4, 
                                                                                    height=3, 
                                                                                    font=self.fonts['body'],
                                                                                    bg=self.premium_colors['background'],
                                                                                    fg=self.premium_colors['text_light'],
                                                                                    insertbackground=self.premium_colors['accent'])
        self.qf_10_02_07_01_entries['additional_notes'].pack(fill="x", padx=10, pady=5)
        
        # Section 5: Record Approval
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: اعتماد السجل"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_07_01(section5, "اسم مسؤول إدارة المخاطر / الجودة", "approver_name")
        self.create_form_field_07_01(section5, "الوظيفة", "position")
        self.create_form_field_07_01(section5, "التوقيع", "signature")
        self.create_date_field_07_01(section5, "التاريخ", "approval_date")
        
        # Add Enhanced Buttons
        self.add_enhanced_buttons_to_form(scrollable_frame, "QF-10-02-07-01", "QF-10-02-07-01: سجل المخاطر المحتملة", self.qf_10_02_07_01_entries)

    def create_QF_10_02_07_02_form(self, parent_frame):
        """QF-10-02-07-02: إجراءات وقائية"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_07_02_entries = {}
        
        # Form Title
        title_text = "QF-10-02-07-02: إجراءات وقائية"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: General Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: البيانات العامة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_07_02(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_form_field_07_02(section1, "رقم الإجراء الوقائي", "action_number")
        self.create_date_field_07_02(section1, "تاريخ فتح الإجراء", "action_date")
        self.create_form_field_07_02(section1, "القسم المعني", "concerned_department")
        
        # Source identification with checkboxes
        source_frame = tk.Frame(section1, bg=self.premium_colors['surface'])
        source_frame.pack(fill="x", padx=10, pady=5)
        
        source_label = tk.Label(source_frame, 
                               text=self.format_arabic_text("مصدر تحديد الإجراء الوقائي:"),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'])
        source_label.pack(anchor="e")
        
        self.qf_10_02_07_02_entries['source_risk'] = tk.BooleanVar()
        self.qf_10_02_07_02_entries['source_audit'] = tk.BooleanVar()
        self.qf_10_02_07_02_entries['source_review'] = tk.BooleanVar()
        
        sources = [
            ("تحليل مخاطر", self.qf_10_02_07_02_entries['source_risk']),
            ("تدقيق داخلي", self.qf_10_02_07_02_entries['source_audit']),
            ("اجتماع مراجعة", self.qf_10_02_07_02_entries['source_review'])
        ]
        
        for source_text, var in sources:
            check = tk.Checkbutton(source_frame, 
                                  text=self.format_arabic_text(source_text),
                                  variable=var,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            check.pack(anchor="e")
        
        # Section 2: Risk/Potential Situation Description
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: وصف الخطر / الحالة المحتملة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_07_02_entries['risk_description'] = scrolledtext.ScrolledText(section2, 
                                                                                    height=3, 
                                                                                    font=self.fonts['body'],
                                                                                    bg=self.premium_colors['background'],
                                                                                    fg=self.premium_colors['text_light'],
                                                                                    insertbackground=self.premium_colors['accent'])
        self.qf_10_02_07_02_entries['risk_description'].pack(fill="x", padx=10, pady=10)
        
        # Section 3: Preventive Action Details
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: تفاصيل الإجراء الوقائي"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        self.create_preventive_action_details_07_02(section3)
        
        # Section 4: Implementation Follow-up
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: متابعة التنفيذ"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        self.create_implementation_follow_up_07_02(section4)
        
        # Section 5: Post-implementation Assessment
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: التقييم اللاحق للإجراء"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.create_post_assessment_07_02(section5)
        
        # Section 6: Signatures and Approval
        section6 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("سادساً: توقيعات واعتماد"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section6.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_07_02(section6, "اسم منفذ الإجراء", "executor_name")
        self.create_form_field_07_02(section6, "التوقيع", "executor_signature")
        self.create_form_field_07_02(section6, "اسم مسؤول المتابعة / الجودة", "quality_manager")
        self.create_form_field_07_02(section6, "التوقيع", "quality_signature")
        self.create_date_field_07_02(section6, "تاريخ الاعتماد النهائي", "final_approval_date")
        
        # Add Enhanced Buttons
        self.add_enhanced_buttons_to_form(scrollable_frame, "QF-10-02-07-02", "QF-10-02-07-02: إجراءات وقائية", self.qf_10_02_07_02_entries)

    def create_QF_10_02_07_03_form(self, parent_frame):
        """QF-10-02-07-03: متابعة التدابير الوقائية"""
        # Create standardized scrollable frame with improved layout
        canvas, scrollbar, scrollable_frame = self.create_scrollable_form_frame(parent_frame)
        
        # Initialize entries dictionary
        self.qf_10_02_07_03_entries = {}
        
        # Form Title
        title_text = "QF-10-02-07-03: متابعة التدابير الوقائية"
        title_label = tk.Label(scrollable_frame, 
                              text=self.format_arabic_text(title_text),
                              font=self.fonts['title'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['background'])
        title_label.pack(pady=20)
        
        # Section 1: General Data
        section1 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("أولاً: البيانات العامة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section1.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_07_03(section1, "اسم الجهة / المؤسسة", "institution_name")
        self.create_form_field_07_03(section1, "رقم الإجراء الوقائي", "action_number")
        self.create_date_field_07_03(section1, "تاريخ فتح الإجراء", "action_date")
        self.create_form_field_07_03(section1, "القسم المعني", "concerned_department")
        self.create_form_field_07_03(section1, "اسم مسؤول المتابعة", "follow_up_manager")
        self.create_date_field_07_03(section1, "تاريخ المتابعة", "follow_up_date")
        
        # Section 2: Preventive Action Information
        section2 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثانياً: معلومات عن الإجراء الوقائي"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section2.pack(fill="x", padx=20, pady=10)
        
        self.qf_10_02_07_03_entries['risk_description'] = scrolledtext.ScrolledText(section2, 
                                                                                    height=2, 
                                                                                    font=self.fonts['body'],
                                                                                    bg=self.premium_colors['background'],
                                                                                    fg=self.premium_colors['text_light'],
                                                                                    insertbackground=self.premium_colors['accent'])
        self.qf_10_02_07_03_entries['risk_description'].pack(fill="x", padx=10, pady=5)
        
        self.qf_10_02_07_03_entries['preventive_action'] = scrolledtext.ScrolledText(section2, 
                                                                                     height=2, 
                                                                                     font=self.fonts['body'],
                                                                                     bg=self.premium_colors['background'],
                                                                                     fg=self.premium_colors['text_light'],
                                                                                     insertbackground=self.premium_colors['accent'])
        self.qf_10_02_07_03_entries['preventive_action'].pack(fill="x", padx=10, pady=5)
        
        self.create_date_field_07_03(section2, "تاريخ التنفيذ الفعلي", "actual_implementation_date")
        self.create_form_field_07_03(section2, "الجهة المنفذة", "implementing_party")
        
        # Section 3: Implementation Follow-up
        section3 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("ثالثاً: متابعة التنفيذ"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section3.pack(fill="x", padx=20, pady=10)
        
        self.create_implementation_follow_up_table_07_03(section3)
        
        # Section 4: Action Effectiveness Assessment
        section4 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("رابعاً: تقييم فاعلية الإجراء"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section4.pack(fill="x", padx=20, pady=10)
        
        self.create_effectiveness_assessment_07_03(section4)
        
        # Section 5: Follow-up Approval
        section5 = tk.LabelFrame(scrollable_frame, 
                                text=self.format_arabic_text("خامساً: اعتماد المتابعة"),
                                font=self.fonts['heading'],
                                fg=self.premium_colors['text_light'],
                                bg=self.premium_colors['surface'])
        section5.pack(fill="x", padx=20, pady=10)
        
        self.create_form_field_07_03(section5, "اسم مسؤول المتابعة / الجودة", "quality_manager")
        self.create_form_field_07_03(section5, "الوظيفة", "position")
        self.create_form_field_07_03(section5, "التوقيع", "signature")
        self.create_date_field_07_03(section5, "التاريخ", "approval_date")
        
        # Add Enhanced Buttons
        self.add_enhanced_buttons_to_form(scrollable_frame, "QF-10-02-07-03", "QF-10-02-07-03: متابعة التدابير الوقائية", self.qf_10_02_07_03_entries)

    # Helper Methods for QF-10-02-06 and QF-10-02-07 Forms
    
    def create_form_field_06_01(self, parent, label_text, field_name):
        """Create form field for QF-10-02-06-01"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text + ":"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=30, anchor="e")
        label.pack(side="right")
        
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        self.qf_10_02_06_01_entries[field_name] = entry

    def create_date_field_06_01(self, parent, label_text, field_name):
        """Create date field for QF-10-02-06-01"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text + ":"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=30, anchor="e")
        label.pack(side="right")
        
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'],
                        width=20)
        entry.pack(side="left", padx=(0, 10))
        entry.insert(0, "__ / __ / ______")
        
        self.qf_10_02_06_01_entries[field_name] = entry

    def create_nonconformance_table_06_01(self, parent):
        """Create non-conformance table for QF-10-02-06-01"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        headers = ["م", "رقم الحالة", "التاريخ", "مصدر الاكتشاف", "وصف حالة عدم المطابقة", 
                  "درجة الخطورة", "القسم المسؤول", "الحالة", "التاريخ المتوقع للإغلاق", "التاريخ الفعلي للإغلاق"]
        
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                   text=self.format_arabic_text(header),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['primary'],
                                   relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add sample rows
        for row in range(1, 4):
            for col in range(len(headers)):
                if col == 0:  # Number column
                    entry = tk.Label(table_frame, text=str(row),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['surface'],
                                   relief=tk.SUNKEN, bd=1)
                else:
                    entry = tk.Entry(table_frame, font=self.fonts['body'], width=15,
                                   bg=self.premium_colors['background'],
                                   fg=self.premium_colors['text_light'],
                                   insertbackground=self.premium_colors['accent'])
                entry.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
        
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_summary_table_06_01(self, parent):
        """Create summary table for QF-10-02-06-01"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        headers = ["رقم الحالة", "السبب الجذري", "الإجراء التصحيحي", "تم التنفيذ؟", "ملاحظات"]
        
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                   text=self.format_arabic_text(header),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['primary'],
                                   relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add sample rows
        for row in range(1, 4):
            for col in range(len(headers)):
                if col == 3:  # Checkbox column
                    check_var = tk.BooleanVar()
                    check = tk.Checkbutton(table_frame, variable=check_var,
                                         bg=self.premium_colors['surface'],
                                         fg=self.premium_colors['text_light'],
                                         selectcolor=self.premium_colors['background'])
                    check.grid(row=row, column=col, padx=1, pady=1)
                else:
                    entry = tk.Entry(table_frame, font=self.fonts['body'], width=20,
                                   bg=self.premium_colors['background'],
                                   fg=self.premium_colors['text_light'],
                                   insertbackground=self.premium_colors['accent'])
                    entry.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
        
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    # Helper methods for QF-10-02-06-02
    def create_form_field_06_02(self, parent, label_text, field_name):
        """Create form field for QF-10-02-06-02"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text + ":"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=30, anchor="e")
        label.pack(side="right")
        
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        self.qf_10_02_06_02_entries[field_name] = entry

    def create_date_field_06_02(self, parent, label_text, field_name):
        """Create date field for QF-10-02-06-02"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text + ":"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=30, anchor="e")
        label.pack(side="right")
        
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'],
                        width=20)
        entry.pack(side="left", padx=(0, 10))
        entry.insert(0, "__ / __ / ______")
        
        self.qf_10_02_06_02_entries[field_name] = entry

    def create_analysis_tools_section_06_02(self, parent):
        """Create analysis tools section for QF-10-02-06-02"""
        tools_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        tools_frame.pack(fill="x", padx=10, pady=10)
        
        tools = [
            "مخطط عظمة السمكة (Ishikawa / Fishbone)",
            "تحليل 5 لماذا (5 Whys)",
            "تحليل السبب والتأثير (Cause & Effect)"
        ]
        
        self.qf_10_02_06_02_entries['analysis_tools'] = {}
        
        for tool in tools:
            tool_frame = tk.Frame(tools_frame, bg=self.premium_colors['surface'])
            tool_frame.pack(fill="x", pady=2)
            
            var = tk.BooleanVar()
            self.qf_10_02_06_02_entries['analysis_tools'][tool] = var
            
            check = tk.Checkbutton(tool_frame, 
                                  text=self.format_arabic_text(tool),
                                  variable=var,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            check.pack(anchor="e")

    def create_five_whys_table_06_02(self, parent):
        """Create 5 whys table for QF-10-02-06-02"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        whys = [
            "لماذا حدثت المشكلة؟",
            "لماذا حدث السبب؟",
            "لماذا؟",
            "لماذا؟",
            "لماذا؟"
        ]
        
        self.qf_10_02_06_02_entries['five_whys'] = {}
        
        for i, why in enumerate(whys):
            why_frame = tk.Frame(table_frame, bg=self.premium_colors['surface'])
            why_frame.pack(fill="x", pady=5)
            
            label = tk.Label(why_frame, 
                           text=self.format_arabic_text(why),
                           font=self.fonts['body'],
                           fg=self.premium_colors['text_light'],
                           bg=self.premium_colors['surface'],
                           width=25, anchor="e")
            label.pack(side="right")
            
            entry = tk.Entry(why_frame, 
                           font=self.fonts['body'],
                           bg=self.premium_colors['background'],
                           fg=self.premium_colors['text_light'],
                           insertbackground=self.premium_colors['accent'])
            entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
            
            self.qf_10_02_06_02_entries['five_whys'][f'why_{i+1}'] = entry
        
        # Root cause result
        result_frame = tk.Frame(table_frame, bg=self.premium_colors['surface'])
        result_frame.pack(fill="x", pady=10)
        
        result_label = tk.Label(result_frame, 
                              text=self.format_arabic_text("👉 النتيجة / السبب الجذري النهائي:"),
                              font=self.fonts['heading'],
                              fg=self.premium_colors['accent'],
                              bg=self.premium_colors['surface'])
        result_label.pack(anchor="e")
        
        self.qf_10_02_06_02_entries['root_cause_result'] = scrolledtext.ScrolledText(result_frame, 
                                                                                     height=3, 
                                                                                     font=self.fonts['body'],
                                                                                     bg=self.premium_colors['background'],
                                                                                     fg=self.premium_colors['text_light'],
                                                                                     insertbackground=self.premium_colors['accent'])
        self.qf_10_02_06_02_entries['root_cause_result'].pack(fill="x", pady=5)

    # Helper methods for other forms would go here...
    # (I'm adding just a few key ones to avoid making the response too long)

    def create_form_field_06_03(self, parent, label_text, field_name):
        """Create form field for QF-10-02-06-03"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text + ":"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=30, anchor="e")
        label.pack(side="right")
        
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        self.qf_10_02_06_03_entries[field_name] = entry

    def create_date_field_06_03(self, parent, label_text, field_name):
        """Create date field for QF-10-02-06-03"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text + ":"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=30, anchor="e")
        label.pack(side="right")
        
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'],
                        width=20)
        entry.pack(side="left", padx=(0, 10))
        entry.insert(0, "__ / __ / ______")
        
        self.qf_10_02_06_03_entries[field_name] = entry

    def create_effectiveness_checklist_06_03(self, parent):
        """Create effectiveness checklist for QF-10-02-06-03"""
        checklist_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        checklist_frame.pack(fill="x", padx=10, pady=10)
        
        checks = [
            "تم تنفيذ الإجراء بالكامل",
            "تم القضاء على السبب الجذري",
            "لم تتكرر المشكلة بعد التنفيذ"
        ]
        
        self.qf_10_02_06_03_entries['effectiveness_checks'] = {}
        
        for check_text in checks:
            check_frame = tk.Frame(checklist_frame, bg=self.premium_colors['surface'])
            check_frame.pack(fill="x", pady=2)
            
            var = tk.BooleanVar()
            self.qf_10_02_06_03_entries['effectiveness_checks'][check_text] = var
            
            check = tk.Checkbutton(check_frame, 
                                  text=self.format_arabic_text(check_text),
                                  variable=var,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            check.pack(anchor="e")

    # Add similar helper methods for other forms (abbreviated for space)
    def create_form_field_06_04(self, parent, label_text, field_name):
        """Create form field for QF-10-02-06-04"""
        self.create_form_field_06_03(parent, label_text, field_name)
        # Reassign to correct entries dict
        if hasattr(self, 'qf_10_02_06_04_entries'):
            self.qf_10_02_06_04_entries[field_name] = self.qf_10_02_06_03_entries.pop(field_name)

    def create_date_field_06_04(self, parent, label_text, field_name):
        """Create date field for QF-10-02-06-04"""
        self.create_date_field_06_03(parent, label_text, field_name)
        # Reassign to correct entries dict
        if hasattr(self, 'qf_10_02_06_04_entries'):
            self.qf_10_02_06_04_entries[field_name] = self.qf_10_02_06_03_entries.pop(field_name)

    def create_implementation_review_table_06_04(self, parent):
        """Create implementation review table for QF-10-02-06-04"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        review_items = [
            "تم تنفيذ الإجراء التصحيحي وفقاً للخطة",
            "تم القضاء على السبب الجذري للمشكلة",
            "لم تتكرر المشكلة منذ تنفيذ الإجراء",
            "تم توثيق جميع الأدلة المؤيدة للإجراء",
            "تم إشراك الجهات المعنية أثناء التنفيذ"
        ]
        
        headers = ["م", "عنصر المراجعة", "تم التنفيذ", "الملاحظات"]
        
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                   text=self.format_arabic_text(header),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['primary'],
                                   relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        self.qf_10_02_06_04_entries['review_items'] = {}
        
        for row, item in enumerate(review_items, start=1):
            # Number
            num_label = tk.Label(table_frame, text=str(row),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'],
                               relief=tk.SUNKEN, bd=1)
            num_label.grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            # Review item
            item_label = tk.Label(table_frame, 
                                 text=self.format_arabic_text(item),
                                 font=self.fonts['body'],
                                 fg=self.premium_colors['text_light'],
                                 bg=self.premium_colors['surface'],
                                 relief=tk.SUNKEN, bd=1, anchor="e")
            item_label.grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            
            # Checkbox
            var = tk.BooleanVar()
            check = tk.Checkbutton(table_frame, variable=var,
                                 bg=self.premium_colors['surface'],
                                 fg=self.premium_colors['text_light'],
                                 selectcolor=self.premium_colors['background'])
            check.grid(row=row, column=2, padx=1, pady=1)
            
            # Notes
            notes_entry = tk.Entry(table_frame, font=self.fonts['body'],
                                 bg=self.premium_colors['background'],
                                 fg=self.premium_colors['text_light'],
                                 insertbackground=self.premium_colors['accent'])
            notes_entry.grid(row=row, column=3, sticky="ew", padx=1, pady=1)
            
            self.qf_10_02_06_04_entries['review_items'][item] = {
                'checked': var,
                'notes': notes_entry
            }
        
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_effectiveness_assessment_06_04(self, parent):
        """Create effectiveness assessment for QF-10-02-06-04"""
        assessment_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        assessment_frame.pack(fill="x", padx=10, pady=10)
        
        # Effectiveness question
        eff_label = tk.Label(assessment_frame, 
                           text=self.format_arabic_text("هل كان الإجراء فعّالًا في حل المشكلة؟"),
                           font=self.fonts['body'],
                           fg=self.premium_colors['text_light'],
                           bg=self.premium_colors['surface'])
        eff_label.pack(anchor="e")
        
        self.qf_10_02_06_04_entries['effectiveness'] = tk.StringVar()
        
        for option in ["نعم", "لا", "جزئياً"]:
            radio = tk.Radiobutton(assessment_frame, 
                                  text=self.format_arabic_text(option),
                                  variable=self.qf_10_02_06_04_entries['effectiveness'],
                                  value=option,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            radio.pack(anchor="e")
        
        # Additional action question
        add_label = tk.Label(assessment_frame, 
                           text=self.format_arabic_text("هل هناك حاجة لإجراء إضافي؟"),
                           font=self.fonts['body'],
                           fg=self.premium_colors['text_light'],
                           bg=self.premium_colors['surface'])
        add_label.pack(anchor="e", pady=(10, 0))
        
        self.qf_10_02_06_04_entries['additional_action'] = tk.StringVar()
        
        for option in ["نعم", "لا"]:
            radio = tk.Radiobutton(assessment_frame, 
                                  text=self.format_arabic_text(option),
                                  variable=self.qf_10_02_06_04_entries['additional_action'],
                                  value=option,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            radio.pack(anchor="e")
        
        # Additional details
        details_label = tk.Label(assessment_frame, 
                               text=self.format_arabic_text("إذا كانت الإجابة نعم، يرجى ذكر التفاصيل:"),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'])
        details_label.pack(anchor="e", pady=(10, 0))
        
        self.qf_10_02_06_04_entries['additional_details'] = scrolledtext.ScrolledText(assessment_frame, 
                                                                                      height=3, 
                                                                                      font=self.fonts['body'],
                                                                                      bg=self.premium_colors['background'],
                                                                                      fg=self.premium_colors['text_light'],
                                                                                      insertbackground=self.premium_colors['accent'])
        self.qf_10_02_06_04_entries['additional_details'].pack(fill="x", pady=5)

    def create_closure_decision_06_04(self, parent):
        """Create closure decision for QF-10-02-06-04"""
        decision_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        decision_frame.pack(fill="x", padx=10, pady=10)
        
        table_frame = tk.Frame(decision_frame, bg=self.premium_colors['surface'])
        table_frame.pack(fill="x")
        
        headers = ["القرار النهائي", "التاريخ", "توقيع"]
        
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                   text=self.format_arabic_text(header),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['primary'],
                                   relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        decisions = [
            "تم الإغلاق بنجاح",
            "الإجراء غير فعال – يلزم إجراء إضافي"
        ]
        
        self.qf_10_02_06_04_entries['closure_decisions'] = {}
        
        for row, decision in enumerate(decisions, start=1):
            # Checkbox for decision
            var = tk.BooleanVar()
            decision_check = tk.Checkbutton(table_frame, 
                                          text=self.format_arabic_text(decision),
                                          variable=var,
                                          font=self.fonts['body'],
                                          fg=self.premium_colors['text_light'],
                                          bg=self.premium_colors['surface'],
                                          selectcolor=self.premium_colors['background'])
            decision_check.grid(row=row, column=0, sticky="w", padx=1, pady=1)
            
            # Date
            date_entry = tk.Entry(table_frame, font=self.fonts['body'], width=15,
                                bg=self.premium_colors['background'],
                                fg=self.premium_colors['text_light'],
                                insertbackground=self.premium_colors['accent'])
            date_entry.grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            date_entry.insert(0, "__ / __ / ______")
            
            # Signature
            signature_entry = tk.Entry(table_frame, font=self.fonts['body'],
                                     bg=self.premium_colors['background'],
                                     fg=self.premium_colors['text_light'],
                                     insertbackground=self.premium_colors['accent'])
            signature_entry.grid(row=row, column=2, sticky="ew", padx=1, pady=1)
            
            self.qf_10_02_06_04_entries['closure_decisions'][decision] = {
                'selected': var,
                'date': date_entry,
                'signature': signature_entry
            }
        
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    # Helper methods for QF-10-02-07 series (Preventive Actions)
    def create_form_field_07_01(self, parent, label_text, field_name):
        """Create form field for QF-10-02-07-01"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text + ":"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=30, anchor="e")
        label.pack(side="right")
        
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'])
        entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        self.qf_10_02_07_01_entries[field_name] = entry

    def create_date_field_07_01(self, parent, label_text, field_name):
        """Create date field for QF-10-02-07-01"""
        field_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        field_frame.pack(fill="x", padx=10, pady=5)
        
        label = tk.Label(field_frame, 
                        text=self.format_arabic_text(label_text + ":"),
                        font=self.fonts['body'],
                        fg=self.premium_colors['text_light'],
                        bg=self.premium_colors['surface'],
                        width=30, anchor="e")
        label.pack(side="right")
        
        entry = tk.Entry(field_frame, 
                        font=self.fonts['body'],
                        bg=self.premium_colors['background'],
                        fg=self.premium_colors['text_light'],
                        insertbackground=self.premium_colors['accent'],
                        width=20)
        entry.pack(side="left", padx=(0, 10))
        entry.insert(0, "__ / __ / ______")
        
        self.qf_10_02_07_01_entries[field_name] = entry

    def create_risk_assessment_table_07_01(self, parent):
        """Create risk assessment table for QF-10-02-07-01"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        headers = ["م", "وصف الخطر المحتمل", "مصدر الخطر", "احتمال الحدوث (1-5)", 
                  "شدة التأثير (1-5)", "درجة الخطورة", "التصنيف", "الإجراءات الوقائية المقترحة", "القسم المسؤول"]
        
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                   text=self.format_arabic_text(header),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['primary'],
                                   relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add sample rows for risk assessment
        for row in range(1, 4):
            for col in range(len(headers)):
                if col == 0:  # Number column
                    entry = tk.Label(table_frame, text=str(row),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['surface'],
                                   relief=tk.SUNKEN, bd=1)
                else:
                    entry = tk.Entry(table_frame, font=self.fonts['body'], width=15,
                                   bg=self.premium_colors['background'],
                                   fg=self.premium_colors['text_light'],
                                   insertbackground=self.premium_colors['accent'])
                entry.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
        
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_follow_up_table_07_01(self, parent):
        """Create follow-up table for QF-10-02-07-01"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        headers = ["م", "تاريخ المتابعة", "تم تنفيذ الإجراءات؟", "الملاحظات", "اسم المراجع", "التوقيع"]
        
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                   text=self.format_arabic_text(header),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['primary'],
                                   relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        # Add sample rows
        for row in range(1, 3):
            for col in range(len(headers)):
                if col == 0:  # Number
                    entry = tk.Label(table_frame, text=str(row),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['surface'],
                                   relief=tk.SUNKEN, bd=1)
                elif col == 2:  # Checkbox
                    var = tk.BooleanVar()
                    entry = tk.Checkbutton(table_frame, variable=var,
                                         bg=self.premium_colors['surface'],
                                         fg=self.premium_colors['text_light'],
                                         selectcolor=self.premium_colors['background'])
                else:
                    entry = tk.Entry(table_frame, font=self.fonts['body'], width=15,
                                   bg=self.premium_colors['background'],
                                   fg=self.premium_colors['text_light'],
                                   insertbackground=self.premium_colors['accent'])
                entry.grid(row=row, column=col, sticky="ew", padx=1, pady=1)
        
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    # Simplified helper methods for remaining forms (to keep response manageable)
    def create_form_field_07_02(self, parent, label_text, field_name):
        """Create form field for QF-10-02-07-02"""
        self.create_form_field_07_01(parent, label_text, field_name)
        if hasattr(self, 'qf_10_02_07_02_entries'):
            self.qf_10_02_07_02_entries[field_name] = self.qf_10_02_07_01_entries.pop(field_name)

    def create_date_field_07_02(self, parent, label_text, field_name):
        """Create date field for QF-10-02-07-02"""
        self.create_date_field_07_01(parent, label_text, field_name)
        if hasattr(self, 'qf_10_02_07_02_entries'):
            self.qf_10_02_07_02_entries[field_name] = self.qf_10_02_07_01_entries.pop(field_name)

    def create_form_field_07_03(self, parent, label_text, field_name):
        """Create form field for QF-10-02-07-03"""
        self.create_form_field_07_01(parent, label_text, field_name)
        if hasattr(self, 'qf_10_02_07_03_entries'):
            self.qf_10_02_07_03_entries[field_name] = self.qf_10_02_07_01_entries.pop(field_name)

    def create_date_field_07_03(self, parent, label_text, field_name):
        """Create date field for QF-10-02-07-03"""
        self.create_date_field_07_01(parent, label_text, field_name)
        if hasattr(self, 'qf_10_02_07_03_entries'):
            self.qf_10_02_07_03_entries[field_name] = self.qf_10_02_07_01_entries.pop(field_name)

    def create_preventive_action_details_07_02(self, parent):
        """Create preventive action details section for QF-10-02-07-02"""
        details_table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        details_table_frame.pack(fill="x", padx=10, pady=10)
        
        # Table structure with labeled fields
        fields = [
            ("وصف الإجراء الوقائي المقترح", "action_description"),
            ("الهدف من الإجراء", "action_objective"), 
            ("الجهة المنفذة", "implementing_party"),
            ("التاريخ المتوقع للتنفيذ", "expected_date"),
            ("الموارد المطلوبة (إن وجدت)", "required_resources")
        ]
        
        for i, (label, field_key) in enumerate(fields):
            field_frame = tk.Frame(details_table_frame, bg=self.premium_colors['surface'])
            field_frame.pack(fill="x", padx=5, pady=5)
            
            label_widget = tk.Label(field_frame, 
                                   text=self.format_arabic_text(label + ":"),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['surface'],
                                   width=30, anchor="e")
            label_widget.pack(side="right")
            
            if field_key == "action_description":
                # Use text area for description
                entry = scrolledtext.ScrolledText(field_frame, height=3, 
                                                font=self.fonts['body'],
                                                bg=self.premium_colors['background'],
                                                fg=self.premium_colors['text_light'],
                                                insertbackground=self.premium_colors['accent'])
            else:
                entry = tk.Entry(field_frame, 
                               font=self.fonts['body'],
                               bg=self.premium_colors['background'],
                               fg=self.premium_colors['text_light'],
                               insertbackground=self.premium_colors['accent'])
            
            entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
            self.qf_10_02_07_02_entries[field_key] = entry

    def create_implementation_follow_up_07_02(self, parent):
        """Create implementation follow-up section for QF-10-02-07-02"""
        follow_up_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        follow_up_frame.pack(fill="x", padx=10, pady=10)
        
        # Follow-up checklist
        follow_up_items = [
            "تم تنفيذ الإجراء في الموعد المحدد",
            "تم إشراك الأطراف المعنية", 
            "تم توثيق الإجراءات",
            "تم التحقق من فاعلية الإجراء"
        ]
        
        self.qf_10_02_07_02_entries['follow_up_items'] = {}
        
        for item in follow_up_items:
            item_frame = tk.Frame(follow_up_frame, bg=self.premium_colors['surface'])
            item_frame.pack(fill="x", pady=2)
            
            var = tk.BooleanVar()
            check = tk.Checkbutton(item_frame, 
                                  text=self.format_arabic_text(item),
                                  variable=var,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            check.pack(anchor="e")
            
            self.qf_10_02_07_02_entries['follow_up_items'][item] = var

    def create_post_assessment_07_02(self, parent):
        """Create post-assessment section for QF-10-02-07-02"""
        assessment_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        assessment_frame.pack(fill="x", padx=10, pady=10)
        
        # Risk reduction question
        risk_label = tk.Label(assessment_frame, 
                            text=self.format_arabic_text("هل تم تقليل احتمال وقوع الخطر؟"),
                            font=self.fonts['body'],
                            fg=self.premium_colors['text_light'],
                            bg=self.premium_colors['surface'])
        risk_label.pack(anchor="e")
        
        self.qf_10_02_07_02_entries['risk_reduced'] = tk.StringVar()
        
        for option in ["نعم", "لا"]:
            radio = tk.Radiobutton(assessment_frame, 
                                  text=self.format_arabic_text(option),
                                  variable=self.qf_10_02_07_02_entries['risk_reduced'],
                                  value=option,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            radio.pack(anchor="e")
        
        # Additional actions question
        additional_label = tk.Label(assessment_frame, 
                                  text=self.format_arabic_text("هل يُوصى بإجراءات إضافية؟"),
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'])
        additional_label.pack(anchor="e", pady=(10, 0))
        
        self.qf_10_02_07_02_entries['additional_actions'] = tk.StringVar()
        
        for option in ["نعم", "لا"]:
            radio = tk.Radiobutton(assessment_frame, 
                                  text=self.format_arabic_text(option),
                                  variable=self.qf_10_02_07_02_entries['additional_actions'],
                                  value=option,
                                  font=self.fonts['body'],
                                  fg=self.premium_colors['text_light'],
                                  bg=self.premium_colors['surface'],
                                  selectcolor=self.premium_colors['background'])
            radio.pack(anchor="e")
        
        # Notes and recommendations
        notes_label = tk.Label(assessment_frame, 
                             text=self.format_arabic_text("ملاحظات وتوصيات:"),
                             font=self.fonts['body'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        notes_label.pack(anchor="e", pady=(10, 0))
        
        self.qf_10_02_07_02_entries['notes_recommendations'] = scrolledtext.ScrolledText(assessment_frame, 
                                                                                          height=3, 
                                                                                          font=self.fonts['body'],
                                                                                          bg=self.premium_colors['background'],
                                                                                          fg=self.premium_colors['text_light'],
                                                                                          insertbackground=self.premium_colors['accent'])
        self.qf_10_02_07_02_entries['notes_recommendations'].pack(fill="x", pady=5)

    def create_implementation_follow_up_table_07_03(self, parent):
        """Create implementation follow-up table for QF-10-02-07-03"""
        table_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        follow_up_items = [
            "تنفيذ الإجراء الوقائي كما هو مخطط",
            "توثيق تنفيذ الإجراء",
            "مشاركة الأطراف المعنية",
            "فاعلية الإجراء في تقليل أو منع الخطر"
        ]
        
        headers = ["م", "عنصر المتابعة", "تم التنفيذ؟", "الملاحظات"]
        
        for col, header in enumerate(headers):
            header_label = tk.Label(table_frame, 
                                   text=self.format_arabic_text(header),
                                   font=self.fonts['body'],
                                   fg=self.premium_colors['text_light'],
                                   bg=self.premium_colors['primary'],
                                   relief=tk.RAISED, bd=1)
            header_label.grid(row=0, column=col, sticky="ew", padx=1, pady=1)
        
        self.qf_10_02_07_03_entries['follow_up_items'] = {}
        
        for row, item in enumerate(follow_up_items, start=1):
            # Number
            num_label = tk.Label(table_frame, text=str(row),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'],
                               relief=tk.SUNKEN, bd=1)
            num_label.grid(row=row, column=0, sticky="ew", padx=1, pady=1)
            
            # Item description
            item_label = tk.Label(table_frame, 
                                 text=self.format_arabic_text(item),
                                 font=self.fonts['body'],
                                 fg=self.premium_colors['text_light'],
                                 bg=self.premium_colors['surface'],
                                 relief=tk.SUNKEN, bd=1, anchor="e")
            item_label.grid(row=row, column=1, sticky="ew", padx=1, pady=1)
            
            # Checkbox
            var = tk.BooleanVar()
            check = tk.Checkbutton(table_frame, variable=var,
                                 bg=self.premium_colors['surface'],
                                 fg=self.premium_colors['text_light'],
                                 selectcolor=self.premium_colors['background'])
            check.grid(row=row, column=2, padx=1, pady=1)
            
            # Notes
            notes_entry = tk.Entry(table_frame, font=self.fonts['body'],
                                 bg=self.premium_colors['background'],
                                 fg=self.premium_colors['text_light'],
                                 insertbackground=self.premium_colors['accent'])
            notes_entry.grid(row=row, column=3, sticky="ew", padx=1, pady=1)
            
            self.qf_10_02_07_03_entries['follow_up_items'][item] = {
                'checked': var,
                'notes': notes_entry
            }
        
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

    def create_effectiveness_assessment_07_03(self, parent):
        """Create effectiveness assessment for QF-10-02-07-03"""
        assessment_frame = tk.Frame(parent, bg=self.premium_colors['surface'])
        assessment_frame.pack(fill="x", padx=10, pady=10)
        
        # Assessment questions
        questions = [
            ("مساهمة الإجراء في تقليل الاحتمالية أو شدة الخطر", "risk_reduction"),
            ("ظهور مؤشرات خطر بعد التنفيذ", "risk_indicators"),
            ("كفاية الإجراء الوقائي", "action_adequacy")
        ]
        
        for question, key in questions:
            question_frame = tk.Frame(assessment_frame, bg=self.premium_colors['surface'])
            question_frame.pack(fill="x", pady=5)
            
            question_label = tk.Label(question_frame, 
                                    text=self.format_arabic_text(question + ":"),
                                    font=self.fonts['body'],
                                    fg=self.premium_colors['text_light'],
                                    bg=self.premium_colors['surface'])
            question_label.pack(anchor="e")
            
            self.qf_10_02_07_03_entries[key] = tk.StringVar()
            
            options = ["نعم", "لا"] if key != "action_adequacy" else ["كافٍ", "يحتاج تعديل"]
            
            for option in options:
                radio = tk.Radiobutton(question_frame, 
                                      text=self.format_arabic_text(option),
                                      variable=self.qf_10_02_07_03_entries[key],
                                      value=option,
                                      font=self.fonts['body'],
                                      fg=self.premium_colors['text_light'],
                                      bg=self.premium_colors['surface'],
                                      selectcolor=self.premium_colors['background'])
                radio.pack(anchor="e")
        
        # Additional notes section
        notes_label = tk.Label(assessment_frame, 
                             text=self.format_arabic_text("ملاحظات إضافية / توصيات مستقبلية:"),
                             font=self.fonts['body'],
                             fg=self.premium_colors['text_light'],
                             bg=self.premium_colors['surface'])
        notes_label.pack(anchor="e", pady=(15, 5))
        
        self.qf_10_02_07_03_entries['additional_notes'] = scrolledtext.ScrolledText(assessment_frame, 
                                                                                   height=3, 
                                                                                   font=self.fonts['body'],
                                                                                   bg=self.premium_colors['background'],
                                                                                   fg=self.premium_colors['text_light'],
                                                                                   insertbackground=self.premium_colors['accent'])
        self.qf_10_02_07_03_entries['additional_notes'].pack(fill="x", pady=5)

    def view_edit_selected_form(self, tree):
        """عرض وتعديل النموذج المحدد"""
        selection = tree.selection()
        if not selection:
            messagebox.showwarning("تحذير", "يرجى اختيار نموذج من القائمة أولاً")
            return
        
        item = tree.item(selection[0])
        form_name = item['values'][0]
        
        # Create edit window
        edit_window = tk.Toplevel(self.root)
        edit_window.title(f"تعديل النموذج: {form_name}")
        
        # Get screen dimensions for responsive sizing
        screen_width = edit_window.winfo_screenwidth()
        screen_height = edit_window.winfo_screenheight()
        
        # Calculate optimal window size (75% of screen, with minimum limits)
        min_width, min_height = 800, 600
        width = max(min_width, int(screen_width * 0.75))
        height = max(min_height, int(screen_height * 0.75))
        
        # Center the window on screen
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        
        edit_window.geometry(f"{width}x{height}+{x}+{y}")
        edit_window.configure(bg="#2D0A4D")
        edit_window.resizable(True, True)
        edit_window.minsize(min_width, min_height)
        
        # Title
        title_label = tk.Label(edit_window, 
                              text=f"تعديل النموذج: {form_name}",
                              font=("Arial", 16, "bold"),
                              fg="#FFD700",
                              bg="#2D0A4D")
        title_label.pack(pady=10)
        
        # Main frame with scrolling
        main_frame = tk.Frame(edit_window, bg="#2D0A4D")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Create canvas and scrollbar for scrolling
        canvas = tk.Canvas(main_frame, bg="#2D0A4D", highlightthickness=0)
        scrollbar = tk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#2D0A4D")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Fix for form layout - ensure content expands to full width
        def _configure_scroll_width(event):
            if canvas.find_all():
                canvas.itemconfig(canvas.find_all()[0], width=event.width)
        
        canvas.bind('<Configure>', _configure_scroll_width)
        
        canvas.pack(side="left", fill="both", expand=True, padx=(0, 5))
        scrollbar.pack(side="right", fill="y")
        
        # Load and display form data
        try:
            stored_forms = self.db_manager.get_all_forms_data()
            if form_name in stored_forms:
                form_data = stored_forms[form_name]['data']
                
                # Create form fields dynamically
                entries = {}
                
                data_frame = tk.Frame(scrollable_frame, bg="#3C1361", relief=tk.RAISED, bd=2)
                data_frame.pack(fill="x", padx=10, pady=10)
                
                data_label = tk.Label(data_frame,
                                     text="بيانات النموذج:",
                                     font=("Arial", 14, "bold"),
                                     fg="#FFD700",
                                     bg="#3C1361")
                data_label.pack(pady=10)
                
                if isinstance(form_data, dict):
                    for key, value in form_data.items():
                        if key not in ['created_at', 'updated_at', 'form_name']:
                            field_frame = tk.Frame(data_frame, bg="#3C1361")
                            field_frame.pack(fill="x", padx=20, pady=5)
                            
                            label = tk.Label(field_frame,
                                           text=f"{key}:",
                                           font=self.arabic_font_bold,
                                           fg="white",
                                           bg="#3C1361",
                                           anchor="e",
                                           width=20)
                            label.pack(side="right", padx=5)
                            
                            if isinstance(value, str) and len(value) > 100:
                                # Use text widget for long text
                                text_widget = tk.Text(field_frame,
                                                    height=3,
                                                    font=self.arabic_font,
                                                    bg="white",
                                                    fg="black",
                                                    wrap=tk.WORD)
                                text_widget.pack(fill="x", side="left", padx=5)
                                text_widget.insert("1.0", str(value))
                                entries[key] = text_widget
                            else:
                                # Use entry widget for short text
                                entry = tk.Entry(field_frame,
                                               font=self.arabic_font,
                                               bg="white",
                                               fg="black")
                                entry.pack(fill="x", side="left", padx=5)
                                entry.insert(0, str(value))
                                entries[key] = entry
                
                # Buttons frame
                btn_frame = tk.Frame(edit_window, bg="#2D0A4D")
                btn_frame.pack(fill=tk.X, padx=20, pady=10)
                
                # Save changes button
                def save_changes():
                    try:
                        updated_data = {}
                        for key, widget in entries.items():
                            if isinstance(widget, tk.Text):
                                updated_data[key] = widget.get("1.0", tk.END).strip()
                            else:
                                updated_data[key] = widget.get()
                        
                        # Update in database
                        self.db_manager.update_form_data(form_name, updated_data, self.current_user['id'])
                        messagebox.showinfo("نجح", "تم حفظ التغييرات بنجاح")
                        edit_window.destroy()
                    except Exception as e:
                        messagebox.showerror("خطأ", f"فشل في حفظ التغييرات: {str(e)}")
                
                save_btn = tk.Button(btn_frame,
                                   text="حفظ التغييرات",
                                   font=self.arabic_font_bold,
                                   fg="white",
                                   bg="#4CAF50",
                                   command=save_changes)
                save_btn.pack(side=tk.LEFT, padx=5)
                
                # Cancel button
                cancel_btn = tk.Button(btn_frame,
                                     text="إلغاء",
                                     font=self.arabic_font_bold,
                                     fg="white",
                                     bg="#8B0000",
                                     command=edit_window.destroy)
                cancel_btn.pack(side=tk.RIGHT, padx=5)
                
            else:
                messagebox.showerror("خطأ", "لم يتم العثور على بيانات النموذج")
                edit_window.destroy()
                
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في تحميل بيانات النموذج: {str(e)}")
            edit_window.destroy()

    def delete_selected_form(self, tree, refresh_callback):
        """حذف النموذج المحدد"""
        selection = tree.selection()
        if not selection:
            messagebox.showwarning("تحذير", "يرجى اختيار نموذج من القائمة أولاً")
            return
        
        item = tree.item(selection[0])
        form_name = item['values'][0]
        
        # Confirm deletion
        if messagebox.askyesno("تأكيد الحذف", f"هل أنت متأكد من حذف النموذج: {form_name}؟\nلا يمكن التراجع عن هذا الإجراء."):
            try:
                self.db_manager.delete_form_data(form_name, self.current_user['id'])
                messagebox.showinfo("نجح", "تم حذف النموذج بنجاح")
                refresh_callback()
            except Exception as e:
                messagebox.showerror("خطأ", f"فشل في حذف النموذج: {str(e)}")

    def export_selected_form_to_pdf(self, tree):
        """تصدير النموذج المحدد إلى PDF"""
        selection = tree.selection()
        if not selection:
            messagebox.showwarning("تحذير", "يرجى اختيار نموذج من القائمة أولاً")
            return
        
        item = tree.item(selection[0])
        form_name = item['values'][0]
        
        try:
            # Get form data
            stored_forms = self.db_manager.get_all_forms_data()
            if form_name in stored_forms:
                form_data = stored_forms[form_name]['data']
                
                # Use existing PDF export functionality
                self.export_to_pdf(form_name, form_data)
                messagebox.showinfo("نجح", f"تم تصدير النموذج {form_name} إلى PDF بنجاح")
            else:
                messagebox.showerror("خطأ", "لم يتم العثور على بيانات النموذج")
                
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في تصدير النموذج: {str(e)}")

class SavedFormsManager:
    """مدير النماذج المحفوظة - واجهة شاملة لإدارة النماذج المحفوظة"""
    
    def __init__(self, parent, db_manager, current_user, arabic_renderer, premium_colors, fonts):
        self.parent = parent
        self.db_manager = db_manager
        self.current_user = current_user
        self.arabic_renderer = arabic_renderer
        self.premium_colors = premium_colors
        self.fonts = fonts
        self.forms_window = None
        
    def format_arabic_text(self, text):
        """تنسيق النص العربي"""
        return self.arabic_renderer.reshape_arabic_text(text)
    
    def show_saved_forms_window(self):
        """عرض نافذة إدارة النماذج المحفوظة"""
        if self.forms_window and self.forms_window.winfo_exists():
            self.forms_window.lift()
            return
            
        self.forms_window = tk.Toplevel(self.parent)
        self.forms_window.title(self.format_arabic_text("إدارة النماذج المحفوظة"))
        
        # Get screen dimensions for responsive sizing
        screen_width = self.forms_window.winfo_screenwidth()
        screen_height = self.forms_window.winfo_screenheight()
        
        # Calculate optimal window size
        width = max(1200, int(screen_width * 0.85))
        height = max(700, int(screen_height * 0.85))
        
        # Center the window
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        
        self.forms_window.geometry(f"{width}x{height}+{x}+{y}")
        self.forms_window.configure(bg=self.premium_colors['background'])
        self.forms_window.resizable(True, True)
        self.forms_window.minsize(1000, 600)
        
        self.setup_forms_ui()
        self.load_saved_forms()
        
    def setup_forms_ui(self):
        """إعداد واجهة إدارة النماذج"""
        
        # Header frame
        header_frame = tk.Frame(self.forms_window, bg=self.premium_colors['primary'], height=80)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        header_frame.pack_propagate(False)
        
        # Title
        title_label = tk.Label(header_frame,
                              text=self.format_arabic_text("إدارة النماذج المحفوظة"),
                              font=self.fonts['title'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['primary'])
        title_label.pack(pady=20)
        
        # Main content frame
        main_frame = tk.Frame(self.forms_window, bg=self.premium_colors['background'])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Search and filter frame
        search_frame = tk.Frame(main_frame, bg=self.premium_colors['surface'], height=60)
        search_frame.pack(fill=tk.X, pady=(0, 10))
        search_frame.pack_propagate(False)
        
        # Search entry
        search_label = tk.Label(search_frame,
                               text=self.format_arabic_text("البحث:"),
                               font=self.fonts['body'],
                               fg=self.premium_colors['text_light'],
                               bg=self.premium_colors['surface'])
        search_label.pack(side=tk.RIGHT, padx=10, pady=15)
        
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.filter_forms)
        search_entry = tk.Entry(search_frame,
                               textvariable=self.search_var,
                               font=self.fonts['body'],
                               bg=self.premium_colors['background'],
                               fg=self.premium_colors['text_light'],
                               insertbackground=self.premium_colors['accent'],
                               width=30)
        search_entry.pack(side=tk.RIGHT, padx=10, pady=15)
        
        # Refresh button
        refresh_btn = tk.Button(search_frame,
                               text=self.format_arabic_text("تحديث"),
                               font=self.fonts['button'],
                               bg=self.premium_colors['accent'],
                               fg=self.premium_colors['text_light'],
                               activebackground=self.premium_colors['hover'],
                               command=self.load_saved_forms)
        refresh_btn.pack(side=tk.LEFT, padx=10, pady=15)
        
        # Forms list frame
        list_frame = tk.Frame(main_frame, bg=self.premium_colors['background'])
        list_frame.pack(fill=tk.BOTH, expand=True)
        
        # Treeview for forms list
        columns = ('form_name', 'created_date', 'updated_date', 'created_by')
        self.forms_tree = ttk.Treeview(list_frame, columns=columns, show='headings', height=15)
        
        # Configure column headings
        self.forms_tree.heading('form_name', text=self.format_arabic_text('اسم النموذج'))
        self.forms_tree.heading('created_date', text=self.format_arabic_text('تاريخ الإنشاء'))
        self.forms_tree.heading('updated_date', text=self.format_arabic_text('تاريخ التحديث'))
        self.forms_tree.heading('created_by', text=self.format_arabic_text('منشئ النموذج'))
        
        # Configure column widths
        self.forms_tree.column('form_name', width=300, anchor='center')
        self.forms_tree.column('created_date', width=150, anchor='center')
        self.forms_tree.column('updated_date', width=150, anchor='center')
        self.forms_tree.column('created_by', width=150, anchor='center')
        
        # Style the treeview
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("Treeview",
                       background=self.premium_colors['surface'],
                       foreground=self.premium_colors['text_light'],
                       fieldbackground=self.premium_colors['surface'],
                       font=self.fonts['body'])
        style.configure("Treeview.Heading",
                       background=self.premium_colors['primary'],
                       foreground=self.premium_colors['text_light'],
                       font=self.fonts['heading'])
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.forms_tree.yview)
        h_scrollbar = ttk.Scrollbar(list_frame, orient=tk.HORIZONTAL, command=self.forms_tree.xview)
        self.forms_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Pack treeview and scrollbars
        self.forms_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Action buttons frame
        buttons_frame = tk.Frame(main_frame, bg=self.premium_colors['background'], height=80)
        buttons_frame.pack(fill=tk.X, pady=(10, 0))
        buttons_frame.pack_propagate(False)
        
        # Button configurations
        button_configs = [
            ("عرض", self.view_form, self.premium_colors['success']),
            ("تحرير", self.edit_form, self.premium_colors['accent']),
            ("نسخ", self.copy_form, self.premium_colors['secondary']),
            ("حذف", self.delete_form, "#d32f2f"),
            ("تصدير PDF", self.export_form_pdf, self.premium_colors['primary']),
            ("إغلاق", self.forms_window.destroy, "#666666")
        ]
        
        for i, (text, command, color) in enumerate(button_configs):
            btn = tk.Button(buttons_frame,
                           text=self.format_arabic_text(text),
                           font=self.fonts['button'],
                           bg=color,
                           fg=self.premium_colors['text_light'],
                           activebackground=self.premium_colors['hover'],
                           command=command,
                           width=12)
            btn.pack(side=tk.RIGHT, padx=5, pady=20)
            
    def load_saved_forms(self):
        """تحميل النماذج المحفوظة"""
        try:
            # Clear existing items
            for item in self.forms_tree.get_children():
                self.forms_tree.delete(item)
                
            # Get all forms data
            stored_forms = self.db_manager.get_all_forms_data()
            
            # Populate treeview
            for form_name, form_info in stored_forms.items():
                created_date = form_info.get('created_at', 'غير محدد')
                updated_date = form_info.get('updated_at', 'غير محدد')
                created_by = form_info.get('created_by', 'غير محدد')
                
                # Format dates
                if created_date != 'غير محدد':
                    try:
                        created_date = datetime.fromisoformat(created_date.replace('Z', '+00:00')).strftime('%Y-%m-%d %H:%M')
                    except:
                        pass
                        
                if updated_date != 'غير محدد':
                    try:
                        updated_date = datetime.fromisoformat(updated_date.replace('Z', '+00:00')).strftime('%Y-%m-%d %H:%M')
                    except:
                        pass
                
                self.forms_tree.insert('', 'end', values=(
                    form_name,
                    created_date,
                    updated_date,
                    created_by
                ))
                
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في تحميل النماذج: {str(e)}")
            
    def filter_forms(self, *args):
        """تصفية النماذج حسب النص المدخل"""
        search_text = self.search_var.get().lower()
        
        # Clear existing items
        for item in self.forms_tree.get_children():
            self.forms_tree.delete(item)
            
        try:
            stored_forms = self.db_manager.get_all_forms_data()
            
            for form_name, form_info in stored_forms.items():
                if search_text in form_name.lower():
                    created_date = form_info.get('created_at', 'غير محدد')
                    updated_date = form_info.get('updated_at', 'غير محدد')
                    created_by = form_info.get('created_by', 'غير محدد')
                    
                    # Format dates
                    if created_date != 'غير محدد':
                        try:
                            created_date = datetime.fromisoformat(created_date.replace('Z', '+00:00')).strftime('%Y-%m-%d %H:%M')
                        except:
                            pass
                            
                    if updated_date != 'غير محدد':
                        try:
                            updated_date = datetime.fromisoformat(updated_date.replace('Z', '+00:00')).strftime('%Y-%m-%d %H:%M')
                        except:
                            pass
                    
                    self.forms_tree.insert('', 'end', values=(
                        form_name,
                        created_date,
                        updated_date,
                        created_by
                    ))
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في تصفية النماذج: {str(e)}")
            
    def get_selected_form(self):
        """الحصول على النموذج المحدد"""
        selection = self.forms_tree.selection()
        if not selection:
            messagebox.showwarning("تحذير", "يرجى اختيار نموذج من القائمة أولاً")
            return None
            
        item = self.forms_tree.item(selection[0])
        return item['values'][0]
        
    def view_form(self):
        """عرض النموذج المحدد"""
        form_name = self.get_selected_form()
        if not form_name:
            return
            
        try:
            form_data = self.db_manager.load_form_data(form_name)
            if form_data:
                self.show_form_data_window(form_name, form_data, read_only=True)
            else:
                messagebox.showerror("خطأ", "لم يتم العثور على بيانات النموذج")
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في عرض النموذج: {str(e)}")
            
    def edit_form(self):
        """تحرير النموذج المحدد"""
        form_name = self.get_selected_form()
        if not form_name:
            return
            
        try:
            form_data = self.db_manager.load_form_data(form_name)
            if form_data:
                self.show_form_data_window(form_name, form_data, read_only=False)
            else:
                messagebox.showerror("خطأ", "لم يتم العثور على بيانات النموذج")
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في تحرير النموذج: {str(e)}")
            
    def copy_form(self):
        """نسخ النموذج المحدد"""
        form_name = self.get_selected_form()
        if not form_name:
            return
            
        try:
            form_data = self.db_manager.load_form_data(form_name)
            if form_data:
                # Create new form name with copy suffix
                new_form_name = f"{form_name} - نسخة {datetime.now().strftime('%Y%m%d_%H%M%S')}"
                
                # Save copy
                success = self.db_manager.save_form_data(new_form_name, form_data, self.current_user['id'])
                if success:
                    messagebox.showinfo("نجح", f"تم نسخ النموذج بنجاح: {new_form_name}")
                    self.load_saved_forms()
                else:
                    messagebox.showerror("خطأ", "فشل في نسخ النموذج")
            else:
                messagebox.showerror("خطأ", "لم يتم العثور على بيانات النموذج")
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في نسخ النموذج: {str(e)}")
            
    def delete_form(self):
        """حذف النموذج المحدد"""
        form_name = self.get_selected_form()
        if not form_name:
            return
            
        # Confirm deletion
        if messagebox.askyesno("تأكيد الحذف", f"هل أنت متأكد من حذف النموذج '{form_name}'؟\nهذا الإجراء لا يمكن التراجع عنه."):
            try:
                success = self.db_manager.delete_form_data(form_name, self.current_user['id'])
                if success:
                    messagebox.showinfo("نجح", "تم حذف النموذج بنجاح")
                    self.load_saved_forms()
                else:
                    messagebox.showerror("خطأ", "فشل في حذف النموذج")
            except Exception as e:
                messagebox.showerror("خطأ", f"فشل في حذف النموذج: {str(e)}")
                
    def export_form_pdf(self):
        """تصدير النموذج إلى PDF"""
        form_name = self.get_selected_form()
        if not form_name:
            return
            
        try:
            form_data = self.db_manager.load_form_data(form_name)
            if form_data:
                # Simple PDF export using existing database functionality
                messagebox.showinfo("تصدير PDF", f"سيتم تصدير النموذج {form_name} قريباً.\nيمكنك استخدام وظيفة التصدير من إدارة النماذج.")
            else:
                messagebox.showerror("خطأ", "لم يتم العثور على بيانات النموذج")
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في تصدير النموذج: {str(e)}")
            
    def show_form_data_window(self, form_name, form_data, read_only=True):
        """عرض بيانات النموذج في نافذة منفصلة"""
        data_window = tk.Toplevel(self.forms_window)
        title = "عرض" if read_only else "تحرير"
        data_window.title(f"{title} النموذج: {form_name}")
        
        # Window configuration
        data_window.geometry("800x600")
        data_window.configure(bg=self.premium_colors['background'])
        
        # Header
        header_frame = tk.Frame(data_window, bg=self.premium_colors['primary'], height=60)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(header_frame,
                              text=f"{title} النموذج: {form_name}",
                              font=self.fonts['heading'],
                              fg=self.premium_colors['text_light'],
                              bg=self.premium_colors['primary'])
        title_label.pack(pady=15)
        
        # Content frame with scrollbar
        content_frame = tk.Frame(data_window, bg=self.premium_colors['background'])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        canvas = tk.Canvas(content_frame, bg=self.premium_colors['background'])
        scrollbar = ttk.Scrollbar(content_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.premium_colors['background'])
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Display form data
        entries = {}
        for key, value in form_data.items():
            if key in ['save_date', 'created_at', 'updated_at']:
                continue
                
            field_frame = tk.Frame(scrollable_frame, bg=self.premium_colors['surface'])
            field_frame.pack(fill="x", padx=10, pady=5)
            
            label = tk.Label(field_frame,
                           text=f"{key}:",
                           font=self.fonts['body'],
                           fg=self.premium_colors['text_light'],
                           bg=self.premium_colors['surface'],
                           width=20, anchor="e")
            label.pack(side="right", padx=5)
            
            if read_only:
                value_label = tk.Label(field_frame,
                                     text=str(value),
                                     font=self.fonts['body'],
                                     fg=self.premium_colors['text_light'],
                                     bg=self.premium_colors['background'],
                                     anchor="w")
                value_label.pack(side="left", fill="x", expand=True, padx=5)
            else:
                entry = tk.Entry(field_frame,
                               font=self.fonts['body'],
                               bg=self.premium_colors['background'],
                               fg=self.premium_colors['text_light'],
                               insertbackground=self.premium_colors['accent'])
                entry.insert(0, str(value))
                entry.pack(side="left", fill="x", expand=True, padx=5)
                entries[key] = entry
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Buttons frame
        buttons_frame = tk.Frame(data_window, bg=self.premium_colors['background'], height=60)
        buttons_frame.pack(fill=tk.X, pady=10)
        buttons_frame.pack_propagate(False)
        
        if not read_only:
            save_btn = tk.Button(buttons_frame,
                               text="حفظ التغييرات",
                               font=self.fonts['button'],
                               bg=self.premium_colors['success'],
                               fg=self.premium_colors['text_light'],
                               command=lambda: self.save_form_changes(form_name, entries, data_window))
            save_btn.pack(side=tk.RIGHT, padx=10, pady=15)
        
        close_btn = tk.Button(buttons_frame,
                             text="إغلاق",
                             font=self.fonts['button'],
                             bg="#666666",
                             fg=self.premium_colors['text_light'],
                             command=data_window.destroy)
        close_btn.pack(side=tk.RIGHT, padx=10, pady=15)
        
    def save_form_changes(self, form_name, entries, window):
        """حفظ التغييرات على النموذج"""
        try:
            updated_data = {}
            for key, entry in entries.items():
                updated_data[key] = entry.get()
            
            updated_data['updated_at'] = datetime.now().isoformat()
            
            success = self.db_manager.update_form_data(form_name, updated_data, self.current_user['id'])
            if success:
                messagebox.showinfo("نجح", "تم حفظ التغييرات بنجاح")
                window.destroy()
                self.load_saved_forms()
            else:
                messagebox.showerror("خطأ", "فشل في حفظ التغييرات")
        except Exception as e:
            messagebox.showerror("خطأ", f"فشل في حفظ التغييرات: {str(e)}")

if __name__ == "__main__":
    root = tk.Tk()
    app = QBApp(root)
    root.mainloop()
